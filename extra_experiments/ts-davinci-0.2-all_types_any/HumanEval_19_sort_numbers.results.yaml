language: ts
name: HumanEval_19_sort_numbers
results:
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const numMap = {\n    zero: 0,\n\
    \    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numArr = numbers.split(\"\
    \ \");\n  const numArrInt = numArr.map((num) => numMap[num]);\n  const sortedArr\
    \ = numArrInt.sort((a, b) => a - b);\n  const sortedArrStr = sortedArr.map((num)\
    \ => {\n    for (let key in numMap) {\n      if (numMap[key] === num) {\n    \
    \    return key;\n      }\n    }\n  });\n  return sortedArrStr.join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_to_numbers[a]\
    \ - nums_to_numbers[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpmr2o37tx.ts(9,16): error TS2304: Cannot find name ''nums_to_numbers''.

    ../../../../tmp/tmpmr2o37tx.ts(9,37): error TS2304: Cannot find name ''nums_to_numbers''.

    '
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let num_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let num_list = [];\n    for (let num of nums) {\n     \
    \   num_list.push(num_map[num]);\n    }\n    num_list.sort((a, b) => a - b);\n\
    \    let result = \"\";\n    for (let num of num_list) {\n        for (let key\
    \ in num_map) {\n            if (num_map[key] === num) {\n                result\
    \ += key + \" \";\n            }\n        }\n    }\n    return result.trim();\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329396
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const numMap = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    return numbers.split(' ').sort((a, b) =>\
    \ numMap[a] - numMap[b]).join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329396
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let sorted = nums.sort((a, b) => {\n        return nums_map[a]\
    \ - nums_map[b];\n    });\n    return sorted.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329396
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(convert_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(convert_to_str(nums_int[i]));\n    }\n    return\
    \ nums_str.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpwd68hbd1.ts(10,23): error TS2304: Cannot find name ''convert_to_int''.

    ../../../../tmp/tmpwd68hbd1.ts(15,23): error TS2304: Cannot find name ''convert_to_str''.

    '
  timestamp: 1660329396
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(numeral_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n\
    \        nums[i] = int_to_numeral(nums_int[i]);\n    }\n    return nums.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp0uma4p21.ts(10,23): error TS2304: Cannot find name ''numeral_to_int''.

    ../../../../tmp/tmp0uma4p21.ts(14,19): error TS2304: Cannot find name ''int_to_numeral''.

    '
  timestamp: 1660329397
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const numsObj = {\n        zero: 0,\n        one: 1,\n        two: 2,\n \
    \       three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n     \
    \   seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const numsArr =\
    \ nums.map(num => numsObj[num]);\n    const sortedNums = numsArr.sort((a, b) =>\
    \ a - b);\n    const sortedNumsStr = sortedNums.map(num => {\n        for (let\
    \ key in numsObj) {\n            if (numsObj[key] === num) {\n               \
    \ return key;\n            }\n        }\n    });\n    return sortedNumsStr.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329398
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const numMap = {\n    zero: 0,\n\
    \    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums = numbers.split(\"\
    \ \");\n  const numsInt = nums.map((num) => numMap[num]);\n  const sortedNums\
    \ = numsInt.sort((a, b) => a - b);\n  const sortedNumsStr = sortedNums.map((num)\
    \ => {\n    for (const key in numMap) {\n      if (numMap[key] === num) {\n  \
    \      return key;\n      }\n    }\n  });\n  return sortedNumsStr.join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329398
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums2 = [];\n    for (let i = 0; i < nums.length; i++) {\n       \
    \ switch (nums[i]) {\n            case \"zero\":\n                nums2.push(0);\n\
    \                break;\n            case \"one\":\n                nums2.push(1);\n\
    \                break;\n            case \"two\":\n                nums2.push(2);\n\
    \                break;\n            case \"three\":\n                nums2.push(3);\n\
    \                break;\n            case \"four\":\n                nums2.push(4);\n\
    \                break;\n            case \"five\":\n                nums2.push(5);\n\
    \                break;\n            case \"six\":\n                nums2.push(6);\n\
    \                break;\n            case \"seven\":\n                nums2.push(7);\n\
    \                break;\n            case \"eight\":\n                nums2.push(8);\n\
    \                break;\n            case \"nine\":\n                nums2.push(9);\n\
    \                break;\n        }\n    }\n    nums2.sort(function (a, b) { return\
    \ a - b });\n    let nums3 = [];\n    for (let i = 0; i < nums2.length; i++) {\n\
    \        switch (nums2[i]) {\n            case 0:\n                nums3.push(\"\
    zero\");\n                break;\n            case 1:\n                nums3.push(\"\
    one\");\n                break;\n            case 2:\n                nums3.push(\"\
    two\");\n                break;\n            case 3:\n                nums3.push(\"\
    three\");\n                break;\n            case 4:\n                nums3.push(\"\
    four\");\n                break;\n            case 5:\n                nums3.push(\"\
    five\");\n                break;\n            case 6:\n                nums3.push(\"\
    six\");\n                break;\n            case 7:\n                nums3.push(\"\
    seven\");\n                break;\n            case 8:\n                nums3.push(\"\
    eight\");\n                break;\n            case 9:\n                nums3.push(\"\
    nine\");\n                break;\n        }\n    }\n   \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpyjrb90xv.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329397
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let sorted_nums = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return sorted_nums.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329399
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let num_array = numbers.split(\"\
    \ \");\n    let num_map = {\n        \"zero\": 0,\n        \"one\": 1,\n     \
    \   \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\"\
    : 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    let num_array_int = [];\n    for (let i = 0; i <\
    \ num_array.length; i++) {\n        num_array_int.push(num_map[num_array[i]]);\n\
    \    }\n    num_array_int.sort(function (a, b) {\n        return a - b;\n    });\n\
    \    let num_array_str = [];\n    for (let i = 0; i < num_array_int.length; i++)\
    \ {\n        num_array_str.push(Object.keys(num_map).find(key => num_map[key]\
    \ === num_array_int[i]));\n    }\n    return num_array_str.join(\" \");\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp87r5y61w.ts(29,49): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660329399
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums: any = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    const numArray: any = numbers.split(' ');\n\
    \    const numArraySorted: any = numArray.sort((a: any, b: any) => nums[a] - nums[b]);\n\
    \    return numArraySorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329399
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const numeralMap = {\n       \
    \ 'zero': 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n    \
    \    'four': 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n\
    \        'eight': 8,\n        'nine': 9\n    };\n    const numeralArray = numbers.split('\
    \ ');\n    const numeralArraySorted = numeralArray.sort((a, b) => {\n        return\
    \ numeralMap[a] - numeralMap[b];\n    });\n    return numeralArraySorted.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329399
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums: any = {\n        zero:\
    \ 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n\
    \        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n   \
    \     nine: 9\n    };\n    const numArr: any = numbers.split(\" \");\n    const\
    \ numArr2: any = [];\n    for (let i = 0; i < numArr.length; i++) {\n        numArr2.push(nums[numArr[i]]);\n\
    \    }\n    numArr2.sort((a: any, b: any) => a - b);\n    for (let i = 0; i <\
    \ numArr2.length; i++) {\n        for (const key in nums) {\n            if (nums[key]\
    \ === numArr2[i]) {\n                numArr2[i] = key;\n            }\n      \
    \  }\n    }\n    return numArr2.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329400
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        zero: 0,\n        one: 1,\n        two: 2,\n\
    \        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n    \
    \    seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    let nums_int =\
    \ [];\n    for (let i = 0; i < nums.length; i++) {\n        nums_int.push(nums_map[nums[i]]);\n\
    \    }\n    nums_int.sort((a, b) => a - b);\n    let nums_str = [];\n    for (let\
    \ i = 0; i < nums_int.length; i++) {\n        for (let key in nums_map) {\n  \
    \          if (nums_map[key] === nums_int[i]) {\n                nums_str.push(key);\n\
    \            }\n        }\n    }\n    return nums_str.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329400
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return\
    \ nums_sorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329400
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    let nums_sorted = [];\n    for (let i = 0; i <\
    \ nums.length; i++) {\n        switch (nums[i]) {\n            case \"zero\":\n\
    \                nums_int.push(0);\n                break;\n            case \"\
    one\":\n                nums_int.push(1);\n                break;\n          \
    \  case \"two\":\n                nums_int.push(2);\n                break;\n\
    \            case \"three\":\n                nums_int.push(3);\n            \
    \    break;\n            case \"four\":\n                nums_int.push(4);\n \
    \               break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n        switch\
    \ (nums_int[i]) {\n            case 0:\n                nums_sorted.push(\"zero\"\
    );\n                break;\n            case 1:\n                nums_sorted.push(\"\
    one\");\n                break;\n            case 2:\n                nums_sorted.push(\"\
    two\");\n                break;\n            case 3:\n                nums_sorted.push(\"\
    three\");\n                break;\n            case 4:\n                nums_sorted.push(\"\
    four\");\n                break;\n            case 5:\n                nums_sorted.push(\"\
    five\");\n                break;\n            case 6:\n                nums_sorted.push(\"\
    six\");\n                break;\n            case 7:\n                nums_sorted.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_sorted.push\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpe8qfex9n.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329400
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_arr = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        nums_arr.push(nums_map[nums[i]]);\n    }\n    nums_arr.sort((a,\
    \ b) => a - b);\n    let nums_str = \"\";\n    for (let i = 0; i < nums_arr.length;\
    \ i++) {\n        for (let key in nums_map) {\n            if (nums_map[key] ===\
    \ nums_arr[i]) {\n                nums_str += key + \" \";\n            }\n  \
    \      }\n    }\n    return nums_str.trim();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329402
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const numsMap = {\n        zero: 0,\n        one: 1,\n        two: 2,\n \
    \       three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n     \
    \   seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const sorted =\
    \ nums.sort((a, b) => numsMap[a] - numsMap[b]);\n    return sorted.join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329402
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: number[] = [];\n   \
    \ let numsString: string = \"\";\n    let numsArray: string[] = numbers.split(\"\
    \ \");\n    for (let i = 0; i < numsArray.length; i++) {\n        switch (numsArray[i])\
    \ {\n            case \"zero\":\n                nums.push(0);\n             \
    \   break;\n            case \"one\":\n                nums.push(1);\n       \
    \         break;\n            case \"two\":\n                nums.push(2);\n \
    \               break;\n            case \"three\":\n                nums.push(3);\n\
    \                break;\n            case \"four\":\n                nums.push(4);\n\
    \                break;\n            case \"five\":\n                nums.push(5);\n\
    \                break;\n            case \"six\":\n                nums.push(6);\n\
    \                break;\n            case \"seven\":\n                nums.push(7);\n\
    \                break;\n            case \"eight\":\n                nums.push(8);\n\
    \                break;\n            case \"nine\":\n                nums.push(9);\n\
    \                break;\n        }\n    }\n    nums.sort(function (a, b) { return\
    \ a - b });\n    for (let i = 0; i < nums.length; i++) {\n        switch (nums[i])\
    \ {\n            case 0:\n                numsString += \"zero \";\n         \
    \       break;\n            case 1:\n                numsString += \"one \";\n\
    \                break;\n            case 2:\n                numsString += \"\
    two \";\n                break;\n            case 3:\n                numsString\
    \ += \"three \";\n                break;\n            case 4:\n              \
    \  numsString += \"four \";\n                break;\n            case 5:\n   \
    \             numsString += \"five \";\n                break;\n            case\
    \ 6:\n                numsString += \"six \";\n                break;\n      \
    \      case 7:\n                numsString += \"seven \";\n                break;\n\
    \            case 8:\n                numsString += \"eight \";\n            \
    \    break;\n            case 9:\n                numsString += \"nine \";\n \
    \               break;\n        }\n    }\n    return num\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmphldhx5dh.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329402
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    return numbers.split(' ').sort((a,\
    \ b) => {\n        const nums = {\n            zero: 0,\n            one: 1,\n\
    \            two: 2,\n            three: 3,\n            four: 4,\n          \
    \  five: 5,\n            six: 6,\n            seven: 7,\n            eight: 8,\n\
    \            nine: 9\n        };\n        return nums[a] - nums[b];\n    }).join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329402
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_int = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        nums_int.push(nums_map[nums[i]]);\n    }\n    nums_int.sort((a,\
    \ b) => a - b);\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        for (let key in nums_map) {\n            if (nums_map[key] ===\
    \ nums_int[i]) {\n                nums_str.push(key);\n            }\n       \
    \ }\n    }\n    return nums_str.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(word_to_int(nums[i]));\n    }\n    nums_int.sort(function (a,\
    \ b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(int_to_word(nums_int[i]));\n    }\n    return\
    \ nums_str.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpe0dom5_l.ts(10,23): error TS2304: Cannot find name ''word_to_int''.

    ../../../../tmp/tmpe0dom5_l.ts(15,23): error TS2304: Cannot find name ''int_to_word''.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n        switch\
    \ (nums_int[i]) {\n            case 0:\n                nums[i] = \"zero\";\n\
    \                break;\n            case 1:\n                nums[i] = \"one\"\
    ;\n                break;\n            case 2:\n                nums[i] = \"two\"\
    ;\n                break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n                nums[i]\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzyksio4o.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return\
    \ nums_sorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329400
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < nums_int.length; i++) {\n        switch (nums_int[i])\
    \ {\n            case 0:\n                nums[i] = \"zero\";\n              \
    \  break;\n            case 1:\n                nums[i] = \"one\";\n         \
    \       break;\n            case 2:\n                nums[i] = \"two\";\n    \
    \            break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n                nums[i] = \"nine\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpidr1hm6f.ts(74,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpidr1hm6f.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329404
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        if (nums[i] == \"zero\") {\n            nums_int.push(0);\n\
    \        } else if (nums[i] == \"one\") {\n            nums_int.push(1);\n   \
    \     } else if (nums[i] == \"two\") {\n            nums_int.push(2);\n      \
    \  } else if (nums[i] == \"three\") {\n            nums_int.push(3);\n       \
    \ } else if (nums[i] == \"four\") {\n            nums_int.push(4);\n        }\
    \ else if (nums[i] == \"five\") {\n            nums_int.push(5);\n        } else\
    \ if (nums[i] == \"six\") {\n            nums_int.push(6);\n        } else if\
    \ (nums[i] == \"seven\") {\n            nums_int.push(7);\n        } else if (nums[i]\
    \ == \"eight\") {\n            nums_int.push(8);\n        } else if (nums[i] ==\
    \ \"nine\") {\n            nums_int.push(9);\n        }\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    let nums_str: string[] = [];\n    for (let i\
    \ = 0; i < nums_int.length; i++) {\n        if (nums_int[i] == 0) {\n        \
    \    nums_str.push(\"zero\");\n        } else if (nums_int[i] == 1) {\n      \
    \      nums_str.push(\"one\");\n        } else if (nums_int[i] == 2) {\n     \
    \       nums_str.push(\"two\");\n        } else if (nums_int[i] == 3) {\n    \
    \        nums_str.push(\"three\");\n        } else if (nums_int[i] == 4) {\n \
    \           nums_str.push(\"four\");\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpynmnmq10.ts(58,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329404
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: number[] = [];\n   \
    \ let nums_str: string[] = numbers.split(\" \");\n    for (let i = 0; i < nums_str.length;\
    \ i++) {\n        switch (nums_str[i]) {\n            case \"zero\":\n       \
    \         nums.push(0);\n                break;\n            case \"one\":\n \
    \               nums.push(1);\n                break;\n            case \"two\"\
    :\n                nums.push(2);\n                break;\n            case \"\
    three\":\n                nums.push(3);\n                break;\n            case\
    \ \"four\":\n                nums.push(4);\n                break;\n         \
    \   case \"five\":\n                nums.push(5);\n                break;\n  \
    \          case \"six\":\n                nums.push(6);\n                break;\n\
    \            case \"seven\":\n                nums.push(7);\n                break;\n\
    \            case \"eight\":\n                nums.push(8);\n                break;\n\
    \            case \"nine\":\n                nums.push(9);\n                break;\n\
    \        }\n    }\n    nums.sort(function (a, b) { return a - b });\n    let result:\
    \ string = \"\";\n    for (let i = 0; i < nums.length; i++) {\n        switch\
    \ (nums[i]) {\n            case 0:\n                result += \"zero \";\n   \
    \             break;\n            case 1:\n                result += \"one \"\
    ;\n                break;\n            case 2:\n                result += \"two\
    \ \";\n                break;\n            case 3:\n                result +=\
    \ \"three \";\n                break;\n            case 4:\n                result\
    \ += \"four \";\n                break;\n            case 5:\n               \
    \ result += \"five \";\n                break;\n            case 6:\n        \
    \        result += \"six \";\n                break;\n            case 7:\n  \
    \              result += \"seven \";\n                break;\n            case\
    \ 8:\n                result += \"eight \";\n                break;\n        \
    \    case 9:\n                result += \"nine \";\n                break;\n \
    \       }\n    }\n    return result.trim();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329405
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sort = nums.sort((a, b) => {\n        return nums_map[a]\
    \ - nums_map[b];\n    });\n    return nums_sort.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329405
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_map: Map<string, number> = new Map<string, number>();\n \
    \   nums_map.set(\"zero\", 0);\n    nums_map.set(\"one\", 1);\n    nums_map.set(\"\
    two\", 2);\n    nums_map.set(\"three\", 3);\n    nums_map.set(\"four\", 4);\n\
    \    nums_map.set(\"five\", 5);\n    nums_map.set(\"six\", 6);\n    nums_map.set(\"\
    seven\", 7);\n    nums_map.set(\"eight\", 8);\n    nums_map.set(\"nine\", 9);\n\
    \    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length; i++) {\n\
    \        nums_int.push(nums_map.get(nums[i]));\n    }\n    nums_int.sort();\n\
    \    let nums_str: string[] = [];\n    for (let i = 0; i < nums_int.length; i++)\
    \ {\n        for (let [key, value] of nums_map) {\n            if (value === nums_int[i])\
    \ {\n                nums_str.push(key);\n            }\n        }\n    }\n  \
    \  return nums_str.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmppxw_ffp4.ts(8,19): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    ../../../../tmp/tmppxw_ffp4.ts(8,45): error TS2583: Cannot find name ''Map''.
    Do you need to change your target library? Try changing the `lib` compiler option
    to es2015 or later.

    '
  timestamp: 1660329406
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str: string[] = [];\n    for (let i = 0; i <\
    \ nums_int.length; i++) {\n        switch (nums_int[i]) {\n            case 0:\n\
    \                nums_str.push(\"zero\");\n                break;\n          \
    \  case 1:\n                nums_str.push(\"one\");\n                break;\n\
    \            case 2:\n                nums_str.push(\"two\");\n              \
    \  break;\n            case 3:\n                nums_str.push(\"three\");\n  \
    \              break;\n            case 4:\n                nums_str.push(\"four\"\
    );\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpr_8j7u37.ts(72,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpr_8j7u37.ts(73,1): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(73,9): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329406
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: any = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    let numsArr: any = numbers.split(' ');\n\
    \    let numsArrNum: any = [];\n    for (let i = 0; i < numsArr.length; i++) {\n\
    \        numsArrNum.push(nums[numsArr[i]]);\n    }\n    numsArrNum.sort((a: any,\
    \ b: any) => a - b);\n    let sortedNums: any = [];\n    for (let i = 0; i < numsArrNum.length;\
    \ i++) {\n        for (let key in nums) {\n            if (nums[key] === numsArrNum[i])\
    \ {\n                sortedNums.push(key);\n            }\n        }\n    }\n\
    \    return sortedNums.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329406
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(num_to_int(nums[i]));\n    }\n    nums_int.sort(function (a,\
    \ b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(int_to_num(nums_int[i]));\n    }\n    return nums_str.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmppjgoq8la.ts(10,23): error TS2552: Cannot find name ''num_to_int''.
    Did you mean ''nums_int''?

    ../../../../tmp/tmppjgoq8la.ts(15,23): error TS2304: Cannot find name ''int_to_num''.

    '
  timestamp: 1660329406
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let num_map = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    let nums = numbers.split(' ');\n    let nums_int\
    \ = [];\n    for (let i = 0; i < nums.length; i++) {\n        nums_int.push(num_map[nums[i]]);\n\
    \    }\n    nums_int.sort((a, b) => a - b);\n    let nums_str = [];\n    for (let\
    \ i = 0; i < nums_int.length; i++) {\n        nums_str.push(Object.keys(num_map).find(key\
    \ => num_map[key] === nums_int[i]));\n    }\n    return nums_str.join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpexmhhnpq.ts(27,44): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660329407
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str: string[] = [];\n    for (let i = 0; i <\
    \ nums_int.length; i++) {\n        switch (nums_int[i]) {\n            case 0:\n\
    \                nums_str.push(\"zero\");\n                break;\n          \
    \  case 1:\n                nums_str.push(\"one\");\n                break;\n\
    \            case 2:\n                nums_str.push(\"two\");\n              \
    \  break;\n            case 3:\n                nums_str.push(\"three\");\n  \
    \              break;\n            case 4:\n                nums_str.push(\"four\"\
    );\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpr_8j7u37.ts(72,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpr_8j7u37.ts(73,1): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(73,9): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329406
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const numsMap = {\n        zero: 0,\n        one: 1,\n        two: 2,\n \
    \       three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n     \
    \   seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const numsSorted\
    \ = nums.sort((a, b) => numsMap[a] - numsMap[b]);\n    return numsSorted.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329407
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(numeral_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n\
    \        nums[i] = int_to_numeral(nums_int[i]);\n    }\n    return nums.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp0uma4p21.ts(10,23): error TS2304: Cannot find name ''numeral_to_int''.

    ../../../../tmp/tmp0uma4p21.ts(14,19): error TS2304: Cannot find name ''int_to_numeral''.

    '
  timestamp: 1660329397
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    var nums = numbers.split(\" \"\
    );\n    var nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    var sorted = nums.sort(function (a, b) {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329408
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(parseInt(nums[i]));\n    }\n    nums_int.sort(function (a,\
    \ b) { return a - b });\n    let nums_string = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_string.push(nums_int[i].toString());\n    }\n    return\
    \ nums_string.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaN'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpklxsav0k.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpklxsav0k.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaN',\n \
    \ expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329408
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let number_map = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    let numbers_array = numbers.split(' ');\n\
    \    let numbers_array_int = [];\n    for (let i = 0; i < numbers_array.length;\
    \ i++) {\n        numbers_array_int.push(number_map[numbers_array[i]]);\n    }\n\
    \    numbers_array_int.sort((a, b) => a - b);\n    let numbers_array_string =\
    \ [];\n    for (let i = 0; i < numbers_array_int.length; i++) {\n        numbers_array_string.push(Object.keys(number_map).find(key\
    \ => number_map[key] === numbers_array_int[i]));\n    }\n    return numbers_array_string.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpxg8qty1x.ts(27,59): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660329408
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_to_int(a)\
    \ - nums_to_int(b);\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_9cxmd9h.ts(9,16): error TS2304: Cannot find name ''nums_to_int''.

    ../../../../tmp/tmp_9cxmd9h.ts(9,33): error TS2304: Cannot find name ''nums_to_int''.

    '
  timestamp: 1660329409
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str: string[] = [];\n    for (let i = 0; i <\
    \ nums_int.length; i++) {\n        switch (nums_int[i]) {\n            case 0:\n\
    \                nums_str.push(\"zero\");\n                break;\n          \
    \  case 1:\n                nums_str.push(\"one\");\n                break;\n\
    \            case 2:\n                nums_str.push(\"two\");\n              \
    \  break;\n            case 3:\n                nums_str.push(\"three\");\n  \
    \              break;\n            case 4:\n                nums_str.push(\"four\"\
    );\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpr_8j7u37.ts(72,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpr_8j7u37.ts(73,1): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(73,9): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329406
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n       \
    \ \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\":\
    \ 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    let nums_int = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        nums_int.push(nums_dict[nums[i]]);\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        for (let key in nums_dict) {\n            if (nums_dict[key]\
    \ == nums_int[i]) {\n                nums_str.push(key);\n            }\n    \
    \    }\n    }\n    return nums_str.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329409
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums: any = {\n        zero:\
    \ 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n\
    \        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n   \
    \     nine: 9\n    };\n    return numbers.split(\" \").sort((a: any, b: any) =>\
    \ nums[a] - nums[b]).join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329409
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(convert_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(convert_to_str(nums_int[i]));\n    }\n    return\
    \ nums_str.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpwd68hbd1.ts(10,23): error TS2304: Cannot find name ''convert_to_int''.

    ../../../../tmp/tmpwd68hbd1.ts(15,23): error TS2304: Cannot find name ''convert_to_str''.

    '
  timestamp: 1660329396
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let num_map = {\n        \"zero\"\
    : 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n      \
    \  \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n    let num_list = numbers.split(\"\
    \ \");\n    num_list.sort((a, b) => {\n        return num_map[a] - num_map[b];\n\
    \    });\n    return num_list.join(\" \");\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329410
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sort = nums.sort((a, b) => {\n        return nums_map[a]\
    \ - nums_map[b];\n    });\n    return nums_sort.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329405
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums2 = [];\n    for (let i = 0; i < nums.length; i++) {\n       \
    \ if (nums[i] == \"zero\") {\n            nums2.push(0);\n        }\n        else\
    \ if (nums[i] == \"one\") {\n            nums2.push(1);\n        }\n        else\
    \ if (nums[i] == \"two\") {\n            nums2.push(2);\n        }\n        else\
    \ if (nums[i] == \"three\") {\n            nums2.push(3);\n        }\n       \
    \ else if (nums[i] == \"four\") {\n            nums2.push(4);\n        }\n   \
    \     else if (nums[i] == \"five\") {\n            nums2.push(5);\n        }\n\
    \        else if (nums[i] == \"six\") {\n            nums2.push(6);\n        }\n\
    \        else if (nums[i] == \"seven\") {\n            nums2.push(7);\n      \
    \  }\n        else if (nums[i] == \"eight\") {\n            nums2.push(8);\n \
    \       }\n        else if (nums[i] == \"nine\") {\n            nums2.push(9);\n\
    \        }\n    }\n    nums2.sort(function (a, b) { return a - b });\n    let\
    \ nums3 = [];\n    for (let i = 0; i < nums2.length; i++) {\n        if (nums2[i]\
    \ == 0) {\n            nums3.push(\"zero\");\n        }\n        else if (nums2[i]\
    \ == 1) {\n            nums3.push(\"one\");\n        }\n        else if (nums2[i]\
    \ == 2) {\n            nums3.push(\"two\");\n        }\n        else if (nums2[i]\
    \ == 3) {\n            nums3.push(\"three\");\n        }\n        else if (nums2[i]\
    \ == 4) {\n            nums3.push(\"four\");\n        }\n        else if\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: "/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:75701\n\
    \                throw e;\n                ^\n\nTypeError: Cannot read properties\
    \ of undefined (reading 'kind')\n    at Object.isBlock (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:11249:21)\n\
    \    at emitEmbeddedStatement (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:73130:20)\n\
    \    at emitIfStatement (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:72093:13)\n\
    \    at pipelineEmitWithHint (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:71146:32)\n\
    \    at pipelineEmitWithComments (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:73893:17)\n\
    \    at pipelineEmitWithSubstitution (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:71384:13)\n\
    \    at emitNodeWithNotification (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:69978:21)\n\
    \    at pipelineEmitWithNotification (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:71006:13)\n\
    \    at emit (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:70962:13)\n\
    \    at emitIfStatement (/home/s.nguyen/miniconda3/lib/node_modules/typescript/lib/tsc.js:72099:21)\n\
    \nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329410
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(' ');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const numsMap = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const sortedNums = nums.sort((a, b) => numsMap[a] - numsMap[b]);\n    return\
    \ sortedNums.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sort = nums.sort((a, b) => {\n        return nums_map[a]\
    \ - nums_map[b];\n    });\n    return nums_sort.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329405
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(' ');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sort = nums.sort((a, b) => {\n        return nums_map[a]\
    \ - nums_map[b];\n    });\n    return nums_sort.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329405
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_to_sort = [];\n    let nums_sorted = [];\n    let nums_sorted_string\
    \ = \"\";\n    let nums_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n\
    \        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"\
    five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n\
    \        \"nine\": 9\n    };\n    for (let i = 0; i < nums.length; i++) {\n  \
    \      nums_to_sort.push(nums_dict[nums[i]]);\n    }\n    nums_sorted = nums_to_sort.sort(function\
    \ (a, b) { return a - b });\n    for (let i = 0; i < nums_sorted.length; i++)\
    \ {\n        for (let key in nums_dict) {\n            if (nums_dict[key] == nums_sorted[i])\
    \ {\n                nums_sorted_string += key + \" \";\n            }\n     \
    \   }\n    }\n    return nums_sorted_string.trim();\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums: any = {\n    zero: 0,\n\
    \    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9\n  };\n  const numArr: any = numbers.split(\"\
    \ \");\n  const numArrSorted: any = numArr.sort((a: any, b: any) => nums[a] -\
    \ nums[b]);\n  return numArrSorted.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329412
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str: string[] = [];\n    for (let i = 0; i <\
    \ nums_int.length; i++) {\n        switch (nums_int[i]) {\n            case 0:\n\
    \                nums_str.push(\"zero\");\n                break;\n          \
    \  case 1:\n                nums_str.push(\"one\");\n                break;\n\
    \            case 2:\n                nums_str.push(\"two\");\n              \
    \  break;\n            case 3:\n                nums_str.push(\"three\");\n  \
    \              break;\n            case 4:\n                nums_str.push(\"four\"\
    );\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpr_8j7u37.ts(72,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpr_8j7u37.ts(73,1): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(73,9): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329406
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str = [];\n    for (let i = 0; i < nums_int.length; i++) {\n   \
    \     switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case 9:\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_an4dgk3.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329412
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_to_int(a)\
    \ - nums_to_int(b);\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_9cxmd9h.ts(9,16): error TS2304: Cannot find name ''nums_to_int''.

    ../../../../tmp/tmp_9cxmd9h.ts(9,33): error TS2304: Cannot find name ''nums_to_int''.

    '
  timestamp: 1660329409
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const numeralMap = {\n       \
    \ zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four:\
    \ 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n\
    \        nine: 9\n    };\n    const nums = numbers.split(' ');\n    const numsSorted\
    \ = nums.sort((a, b) => numeralMap[a] - numeralMap[b]);\n    return numsSorted.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329413
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(parseInt(nums[i]));\n    }\n    nums_int.sort(function (a,\
    \ b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(nums_int[i].toString());\n    }\n    return nums_str.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaN'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmphhkaokrr.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphhkaokrr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaN',\n \
    \ expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329413
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_sorted: string[] = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_sorted.push(\"zero\");\n                break;\n            case 1:\n\
    \                nums_sorted.push(\"one\");\n                break;\n        \
    \    case 2:\n                nums_sorted.push(\"two\");\n                break;\n\
    \            case 3:\n                nums_sorted.push(\"three\");\n         \
    \       break;\n            case 4:\n                nums_sorted.push(\"four\"\
    );\n                break;\n            case 5:\n                nums_sorted.push(\"\
    five\");\n                break;\n            case 6:\n                nums_sorted.push(\"\
    six\");\n                break;\n            case 7:\n                nums_sorted.push(\"\
    seven\");\n                break;\n            case 8:\n                num\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvl66wdec.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329413
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  let nums = numbers.split(\" \");\n\
    \  let nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n \
    \   four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  let nums_sorted = nums.sort((a, b) => {\n    return nums_map[a] -\
    \ nums_map[b];\n  });\n  return nums_sorted.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329413
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(convert_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n\
    \        nums[i] = convert_to_string(nums_int[i]);\n    }\n    return nums.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp0uz58si6.ts(10,23): error TS2304: Cannot find name ''convert_to_int''.

    ../../../../tmp/tmp0uz58si6.ts(14,19): error TS2304: Cannot find name ''convert_to_string''.

    '
  timestamp: 1660329414
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const nums_dict = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three:\
    \ 3,\n    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n\
    \    nine: 9\n  };\n  const nums_sorted = nums.sort((a, b) => nums_dict[a] - nums_dict[b]);\n\
    \  return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329415
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(' ');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < nums_int.length; i++) {\n        switch (nums_int[i])\
    \ {\n            case 0:\n                nums[i] = \"zero\";\n              \
    \  break;\n            case 1:\n                nums[i] = \"one\";\n         \
    \       break;\n            case 2:\n                nums[i] = \"two\";\n    \
    \            break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n                nums[i] = \"nine\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpidr1hm6f.ts(74,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpidr1hm6f.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329404
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const numMap = {\n        zero: 0,\n        one: 1,\n        two: 2,\n  \
    \      three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n      \
    \  seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const numsSorted\
    \ = nums.sort((a, b) => numMap[a] - numMap[b]);\n    return numsSorted.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329414
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str: string[] = [];\n    for (let i = 0; i < nums_int.length; i++)\
    \ {\n        switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvj3daj_u.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329415
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_dict[a] -\
    \ nums_dict[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpl2r4jks2.ts(9,16): error TS2304: Cannot find name ''nums_dict''.

    ../../../../tmp/tmpl2r4jks2.ts(9,31): error TS2304: Cannot find name ''nums_dict''.

    '
  timestamp: 1660329415
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  let nums = numbers.split(\" \");\n\
    \  let nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n \
    \   four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  let nums_sort = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \  return nums_sort.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329416
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str = [];\n    for (let i = 0; i < nums_int.length; i++) {\n   \
    \     switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case 9:\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_an4dgk3.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329412
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(' ');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < nums_int.length; i++) {\n        switch (nums_int[i])\
    \ {\n            case 0:\n                nums[i] = \"zero\";\n              \
    \  break;\n            case 1:\n                nums[i] = \"one\";\n         \
    \       break;\n            case 2:\n                nums[i] = \"two\";\n    \
    \            break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n                nums[i] = \"nine\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpidr1hm6f.ts(74,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpidr1hm6f.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329404
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n       \
    \ \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\":\
    \ 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    let nums_int = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        nums_int.push(nums_dict[nums[i]]);\n    }\n    nums_int.sort((a,\
    \ b) => a - b);\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        for (let key in nums_dict) {\n            if (nums_dict[key]\
    \ === nums_int[i]) {\n                nums_str.push(key);\n            }\n   \
    \     }\n    }\n    return nums_str.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329416
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let num_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let num_arr = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        num_arr.push(num_map[nums[i]]);\n    }\n    num_arr.sort(function\
    \ (a, b) {\n        return a - b;\n    });\n    let result = \"\";\n    for (let\
    \ i = 0; i < num_arr.length; i++) {\n        for (let key in num_map) {\n    \
    \        if (num_map[key] === num_arr[i]) {\n                result += key + \"\
    \ \";\n            }\n        }\n    }\n    return result.trim();\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329416
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: number[] = numbers.split(\"\
    \ \").map(num => {\n        switch (num) {\n            case \"zero\":\n     \
    \           return 0;\n            case \"one\":\n                return 1;\n\
    \            case \"two\":\n                return 2;\n            case \"three\"\
    :\n                return 3;\n            case \"four\":\n                return\
    \ 4;\n            case \"five\":\n                return 5;\n            case\
    \ \"six\":\n                return 6;\n            case \"seven\":\n         \
    \       return 7;\n            case \"eight\":\n                return 8;\n  \
    \          case \"nine\":\n                return 9;\n            default:\n \
    \               return -1;\n        }\n    });\n    nums.sort((a, b) => a - b);\n\
    \    return nums.map(num => {\n        switch (num) {\n            case 0:\n \
    \               return \"zero\";\n            case 1:\n                return\
    \ \"one\";\n            case 2:\n                return \"two\";\n           \
    \ case 3:\n                return \"three\";\n            case 4:\n          \
    \      return \"four\";\n            case 5:\n                return \"five\"\
    ;\n            case 6:\n                return \"six\";\n            case 7:\n\
    \                return \"seven\";\n            case 8:\n                return\
    \ \"eight\";\n            case 9:\n                return \"nine\";\n        \
    \    default:\n                return \"\";\n        }\n    }).join(\" \");\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329417
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i: number = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    for (let i: number = 0; i < nums_int.length; i++) {\n        switch (nums_int[i])\
    \ {\n            case 0:\n                nums[i] = \"zero\";\n              \
    \  break;\n            case 1:\n                nums[i] = \"one\";\n         \
    \       break;\n            case 2:\n                nums[i] = \"two\";\n    \
    \            break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp147ru51d.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329417
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  const sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \  return sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert =\
    \ require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329418
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str: string[] = [];\n    for (let i = 0; i <\
    \ nums_int.length; i++) {\n        switch (nums_int[i]) {\n            case 0:\n\
    \                nums_str.push(\"zero\");\n                break;\n          \
    \  case 1:\n                nums_str.push(\"one\");\n                break;\n\
    \            case 2:\n                nums_str.push(\"two\");\n              \
    \  break;\n            case 3:\n                nums_str.push(\"three\");\n  \
    \              break;\n            case 4:\n                nums_str.push(\"four\"\
    );\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpr_8j7u37.ts(72,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpr_8j7u37.ts(73,1): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(73,9): error TS1005: '','' expected.

    ../../../../tmp/tmpr_8j7u37.ts(86,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329406
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(' ');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_int = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        nums_int.push(nums_map[nums[i]]);\n    }\n    nums_int.sort(function\
    \ (a, b) {\n        return a - b;\n    });\n    let nums_str = [];\n    for (let\
    \ i = 0; i < nums_int.length; i++) {\n        for (let key in nums_map) {\n  \
    \          if (nums_map[key] === nums_int[i]) {\n                nums_str.push(key);\n\
    \            }\n        }\n    }\n    return nums_str.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329418
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(parseInt(nums[i]));\n    }\n    nums_int.sort(function (a,\
    \ b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(nums_int[i].toString());\n    }\n    return nums_str.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaN'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmphhkaokrr.js:22:12)\n    at Object.<anonymous>\
    \ (/tmp/tmphhkaokrr.js:28:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaN',\n \
    \ expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329413
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str = [];\n    for (let i = 0; i < nums_int.length; i++) {\n   \
    \     switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case 9:\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_an4dgk3.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329412
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        if (nums_map[a]\
    \ > nums_map[b]) {\n            return 1;\n        } else if (nums_map[a] < nums_map[b])\
    \ {\n            return -1;\n        } else {\n            return 0;\n       \
    \ }\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329419
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ').map(n\
    \ => parseInt(n));\n    return nums.sort((a, b) => a - b).join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaN'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpbae1q6eb.js:13:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpbae1q6eb.js:19:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaN',\n \
    \ expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329419
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: number[] = [];\n   \
    \ let nums_str: string[] = numbers.split(\" \");\n    for (let i = 0; i < nums_str.length;\
    \ i++) {\n        switch (nums_str[i]) {\n            case \"zero\":\n       \
    \         nums.push(0);\n                break;\n            case \"one\":\n \
    \               nums.push(1);\n                break;\n            case \"two\"\
    :\n                nums.push(2);\n                break;\n            case \"\
    three\":\n                nums.push(3);\n                break;\n            case\
    \ \"four\":\n                nums.push(4);\n                break;\n         \
    \   case \"five\":\n                nums.push(5);\n                break;\n  \
    \          case \"six\":\n                nums.push(6);\n                break;\n\
    \            case \"seven\":\n                nums.push(7);\n                break;\n\
    \            case \"eight\":\n                nums.push(8);\n                break;\n\
    \            case \"nine\":\n                nums.push(9);\n                break;\n\
    \        }\n    }\n    nums.sort((a, b) => a - b);\n    let result: string = \"\
    \";\n    for (let i = 0; i < nums.length; i++) {\n        switch (nums[i]) {\n\
    \            case 0:\n                result += \"zero \";\n                break;\n\
    \            case 1:\n                result += \"one \";\n                break;\n\
    \            case 2:\n                result += \"two \";\n                break;\n\
    \            case 3:\n                result += \"three \";\n                break;\n\
    \            case 4:\n                result += \"four \";\n                break;\n\
    \            case 5:\n                result += \"five \";\n                break;\n\
    \            case 6:\n                result += \"six \";\n                break;\n\
    \            case 7:\n                result += \"seven \";\n                break;\n\
    \            case 8:\n                result += \"eight \";\n                break;\n\
    \            case 9:\n                result += \"nine \";\n                break;\n\
    \        }\n    }\n    return result.trim();\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329419
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const numsToSort = nums.map((num) => {\n    switch (num) {\n      case \"\
    zero\":\n        return 0;\n      case \"one\":\n        return 1;\n      case\
    \ \"two\":\n        return 2;\n      case \"three\":\n        return 3;\n    \
    \  case \"four\":\n        return 4;\n      case \"five\":\n        return 5;\n\
    \      case \"six\":\n        return 6;\n      case \"seven\":\n        return\
    \ 7;\n      case \"eight\":\n        return 8;\n      case \"nine\":\n       \
    \ return 9;\n      default:\n        return -1;\n    }\n  });\n  const sortedNums\
    \ = numsToSort.sort((a, b) => a - b);\n  const sortedNumsToString = sortedNums.map((num)\
    \ => {\n    switch (num) {\n      case 0:\n        return \"zero\";\n      case\
    \ 1:\n        return \"one\";\n      case 2:\n        return \"two\";\n      case\
    \ 3:\n        return \"three\";\n      case 4:\n        return \"four\";\n   \
    \   case 5:\n        return \"five\";\n      case 6:\n        return \"six\";\n\
    \      case 7:\n        return \"seven\";\n      case 8:\n        return \"eight\"\
    ;\n      case 9:\n        return \"nine\";\n      default:\n        return \"\"\
    ;\n    }\n  });\n  return sortedNumsToString.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329420
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let num_dict = {\n        \"zero\"\
    : 0,\n        \"one\": 1,\n        \"two\": 2,\n        \"three\": 3,\n      \
    \  \"four\": 4,\n        \"five\": 5,\n        \"six\": 6,\n        \"seven\"\
    : 7,\n        \"eight\": 8,\n        \"nine\": 9\n    };\n    let num_list = numbers.split(\"\
    \ \");\n    let num_list_int = [];\n    for (let i = 0; i < num_list.length; i++)\
    \ {\n        num_list_int.push(num_dict[num_list[i]]);\n    }\n    num_list_int.sort(function\
    \ (a, b) { return a - b });\n    let num_list_str = [];\n    for (let i = 0; i\
    \ < num_list_int.length; i++) {\n        for (let key in num_dict) {\n       \
    \     if (num_dict[key] == num_list_int[i]) {\n                num_list_str.push(key);\n\
    \            }\n        }\n    }\n    return num_list_str.join(\" \");\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329420
- exit_code: 1
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(parseInt(nums[i]));\n    }\n    nums_int.sort();\n    for (let\
    \ i = 0; i < nums_int.length; i++) {\n        nums[i] = nums_int[i].toString();\n\
    \    }\n    return nums.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\n'NaN'\n\nshould\
    \ loosely deep-equal\n\n''\n    at test (/tmp/tmpkwxchdnh.js:21:12)\n    at Object.<anonymous>\
    \ (/tmp/tmpkwxchdnh.js:27:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: 'NaN',\n \
    \ expected: '',\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660329421
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return\
    \ nums_sorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329400
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: number[] = [];\n   \
    \ let nums_str: string[] = numbers.split(\" \");\n    for (let i = 0; i < nums_str.length;\
    \ i++) {\n        nums.push(number_to_numeral(nums_str[i]));\n    }\n    nums.sort(function\
    \ (a, b) { return a - b });\n    for (let i = 0; i < nums.length; i++) {\n   \
    \     nums_str[i] = numeral_to_number(nums[i]);\n    }\n    return nums_str.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpn78jkkfq.ts(10,19): error TS2304: Cannot find name ''number_to_numeral''.

    ../../../../tmp/tmpn78jkkfq.ts(14,23): error TS2304: Cannot find name ''numeral_to_number''.

    '
  timestamp: 1660329421
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n        switch\
    \ (nums_int[i]) {\n            case 0:\n                nums[i] = \"zero\";\n\
    \                break;\n            case 1:\n                nums[i] = \"one\"\
    ;\n                break;\n            case 2:\n                nums[i] = \"two\"\
    ;\n                break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n                nums[i]\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpzyksio4o.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let num: any = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    let nums: any = numbers.split(' ');\n   \
    \ let nums_int: any = [];\n    for (let i = 0; i < nums.length; i++) {\n     \
    \   nums_int.push(num[nums[i]]);\n    }\n    nums_int.sort(function (a: any, b:\
    \ any) {\n        return a - b;\n    });\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        for (let key in num) {\n            if (num[key] === nums_int[i])\
    \ {\n                nums_int[i] = key;\n            }\n        }\n    }\n   \
    \ return nums_int.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329421
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sort = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sort.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329422
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(convert_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(convert_to_str(nums_int[i]));\n    }\n    return\
    \ nums_str.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpwd68hbd1.ts(10,23): error TS2304: Cannot find name ''convert_to_int''.

    ../../../../tmp/tmpwd68hbd1.ts(15,23): error TS2304: Cannot find name ''convert_to_str''.

    '
  timestamp: 1660329396
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums2 = [];\n    for (let i = 0; i < nums.length; i++) {\n       \
    \ switch (nums[i]) {\n            case \"zero\":\n                nums2.push(0);\n\
    \                break;\n            case \"one\":\n                nums2.push(1);\n\
    \                break;\n            case \"two\":\n                nums2.push(2);\n\
    \                break;\n            case \"three\":\n                nums2.push(3);\n\
    \                break;\n            case \"four\":\n                nums2.push(4);\n\
    \                break;\n            case \"five\":\n                nums2.push(5);\n\
    \                break;\n            case \"six\":\n                nums2.push(6);\n\
    \                break;\n            case \"seven\":\n                nums2.push(7);\n\
    \                break;\n            case \"eight\":\n                nums2.push(8);\n\
    \                break;\n            case \"nine\":\n                nums2.push(9);\n\
    \                break;\n        }\n    }\n    nums2.sort(function (a, b) { return\
    \ a - b });\n    let nums3 = [];\n    for (let i = 0; i < nums2.length; i++) {\n\
    \        switch (nums2[i]) {\n            case 0:\n                nums3.push(\"\
    zero\");\n                break;\n            case 1:\n                nums3.push(\"\
    one\");\n                break;\n            case 2:\n                nums3.push(\"\
    two\");\n                break;\n            case 3:\n                nums3.push(\"\
    three\");\n                break;\n            case 4:\n                nums3.push(\"\
    four\");\n                break;\n            case 5:\n                nums3.push(\"\
    five\");\n                break;\n            case 6:\n                nums3.push(\"\
    six\");\n                break;\n            case 7:\n                nums3.push(\"\
    seven\");\n                break;\n            case 8:\n                nums3.push(\"\
    eight\");\n                break;\n            case 9:\n                nums3.push(\"\
    nine\");\n                break;\n        }\n    }\n   \ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpyjrb90xv.ts(93,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329397
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  return nums.sort((a, b) => nums_map[a] - nums_map[b]).join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329422
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    let nums_sorted: number[] = [];\n\
    \    let nums_str: string[] = [];\n    for (let i = 0; i < nums.length; i++) {\n\
    \        if (nums[i] == \"zero\") {\n            nums_int.push(0);\n        }\n\
    \        else if (nums[i] == \"one\") {\n            nums_int.push(1);\n     \
    \   }\n        else if (nums[i] == \"two\") {\n            nums_int.push(2);\n\
    \        }\n        else if (nums[i] == \"three\") {\n            nums_int.push(3);\n\
    \        }\n        else if (nums[i] == \"four\") {\n            nums_int.push(4);\n\
    \        }\n        else if (nums[i] == \"five\") {\n            nums_int.push(5);\n\
    \        }\n        else if (nums[i] == \"six\") {\n            nums_int.push(6);\n\
    \        }\n        else if (nums[i] == \"seven\") {\n            nums_int.push(7);\n\
    \        }\n        else if (nums[i] == \"eight\") {\n            nums_int.push(8);\n\
    \        }\n        else if (nums[i] == \"nine\") {\n            nums_int.push(9);\n\
    \        }\n    }\n    nums_sorted = nums_int.sort(function (a, b) { return a\
    \ - b });\n    for (let i = 0; i < nums_sorted.length; i++) {\n        if (nums_sorted[i]\
    \ == 0) {\n            nums_str.push(\"zero\");\n        }\n        else if (nums_sorted[i]\
    \ == 1) {\n            nums_str.push(\"one\");\n        }\n        else if (nums_sorted[i]\
    \ == 2) {\n            nums_str.push(\"two\");\n        }\n        else if (nums_\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpwzhw475c.ts(55,1): error TS1005: '')'' expected.

    ../../../../tmp/tmpwzhw475c.ts(68,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329422
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return\
    \ nums_sorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329400
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const numeralMap = {\n    zero:\
    \ 0,\n    one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n  \
    \  six: 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const nums = numbers.split(\"\
    \ \");\n  const numsSorted = nums.sort((a, b) => numeralMap[a] - numeralMap[b]);\n\
    \  return numsSorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329423
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const numsMap = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  const numsSorted = nums.sort((a, b) => numsMap[a] - numsMap[b]);\n\
    \  return numsSorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329423
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const sorted_nums = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return\
    \ sorted_nums.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329424
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        zero: 0,\n        one: 1,\n        two: 2,\n\
    \        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n    \
    \    seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const nums_sorted\
    \ = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n    });\n\
    \    return nums_sorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329424
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \  return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329424
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \  return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329424
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const sorted_nums = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return\
    \ sorted_nums.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329424
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums: any = {\n        zero:\
    \ 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n\
    \        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n   \
    \     nine: 9\n    };\n    const numsArr: any = numbers.split(\" \");\n    const\
    \ numsArrNum: any = [];\n    for (let i = 0; i < numsArr.length; i++) {\n    \
    \    numsArrNum.push(nums[numsArr[i]]);\n    }\n    numsArrNum.sort((a: any, b:\
    \ any) => a - b);\n    for (let i = 0; i < numsArrNum.length; i++) {\n       \
    \ for (const key in nums) {\n            if (nums[key] === numsArrNum[i]) {\n\
    \                numsArrNum[i] = key;\n            }\n        }\n    }\n    return\
    \ numsArrNum.join(\" \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329425
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sorted.join(' ');\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329411
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(numeral_to_int(nums[i]));\n    }\n    nums_int.sort((a, b)\
    \ => a - b);\n    for (let i = 0; i < nums_int.length; i++) {\n        nums[i]\
    \ = int_to_numeral(nums_int[i]);\n    }\n    return nums.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpz4klrawt.ts(10,23): error TS2304: Cannot find name ''numeral_to_int''.

    ../../../../tmp/tmpz4klrawt.ts(14,19): error TS2304: Cannot find name ''int_to_numeral''.

    '
  timestamp: 1660329425
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    let nums_str: string[] = [];\n \
    \   for (let i = 0; i < nums.length; i++) {\n        if (nums[i] == \"zero\")\
    \ {\n            nums_int.push(0);\n        }\n        else if (nums[i] == \"\
    one\") {\n            nums_int.push(1);\n        }\n        else if (nums[i] ==\
    \ \"two\") {\n            nums_int.push(2);\n        }\n        else if (nums[i]\
    \ == \"three\") {\n            nums_int.push(3);\n        }\n        else if (nums[i]\
    \ == \"four\") {\n            nums_int.push(4);\n        }\n        else if (nums[i]\
    \ == \"five\") {\n            nums_int.push(5);\n        }\n        else if (nums[i]\
    \ == \"six\") {\n            nums_int.push(6);\n        }\n        else if (nums[i]\
    \ == \"seven\") {\n            nums_int.push(7);\n        }\n        else if (nums[i]\
    \ == \"eight\") {\n            nums_int.push(8);\n        }\n        else if (nums[i]\
    \ == \"nine\") {\n            nums_int.push(9);\n        }\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n\
    \        if (nums_int[i] == 0) {\n            nums_str.push(\"zero\");\n     \
    \   }\n        else if (nums_int[i] == 1) {\n            nums_str.push(\"one\"\
    );\n        }\n        else if (nums_int[i] == 2) {\n            nums_str.push(\"\
    two\");\n        }\n        else if (nums_int[i] == 3) {\n            nums_str.push(\"\
    three\");\n        }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmptnasc9i6.ts(70,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329425
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        zero: 0,\n        one: 1,\n        two: 2,\n\
    \        three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n    \
    \    seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const nums_sorted\
    \ = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return nums_sorted.join('\
    \ ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329426
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_to_int[a]\
    \ - nums_to_int[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpztio2y9m.ts(9,16): error TS2304: Cannot find name ''nums_to_int''.

    ../../../../tmp/tmpztio2y9m.ts(9,33): error TS2304: Cannot find name ''nums_to_int''.

    '
  timestamp: 1660329426
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < nums_int.length; i++) {\n        switch (nums_int[i])\
    \ {\n            case 0:\n                nums[i] = \"zero\";\n              \
    \  break;\n            case 1:\n                nums[i] = \"one\";\n         \
    \       break;\n            case 2:\n                nums[i] = \"two\";\n    \
    \            break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n                nums\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpcnfse1oi.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329427
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    nums_int.push(num_to_int(nums[i]));\n    }\n    nums_int.sort(function (a,\
    \ b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        nums_str.push(int_to_num(nums_int[i]));\n    }\n    return nums_str.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmppjgoq8la.ts(10,23): error TS2552: Cannot find name ''num_to_int''.
    Did you mean ''nums_int''?

    ../../../../tmp/tmppjgoq8la.ts(15,23): error TS2304: Cannot find name ''int_to_num''.

    '
  timestamp: 1660329406
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = {\n    zero: 0,\n \
    \   one: 1,\n    two: 2,\n    three: 3,\n    four: 4,\n    five: 5,\n    six:\
    \ 6,\n    seven: 7,\n    eight: 8,\n    nine: 9,\n  };\n  const numArray = numbers.split(\"\
    \ \");\n  const numArraySorted = numArray.sort((a, b) => nums[a] - nums[b]);\n\
    \  return numArraySorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329427
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: any = numbers.split(\"\
    \ \");\n    let nums_map: any = {\n        \"zero\": 0,\n        \"one\": 1,\n\
    \        \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"\
    five\": 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n\
    \        \"nine\": 9\n    };\n    let nums_sorted: any = nums.sort((a: any, b:\
    \ any) => {\n        return nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329427
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        nums_int.push(num_to_int(nums[i]));\n    }\n    nums_int.sort(function\
    \ (a, b) { return a - b });\n    let nums_str: string[] = [];\n    for (let i\
    \ = 0; i < nums_int.length; i++) {\n        nums_str.push(int_to_num(nums_int[i]));\n\
    \    }\n    return nums_str.join(\" \");\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp3ol3uf_z.ts(10,23): error TS2552: Cannot find name ''num_to_int''.
    Did you mean ''nums_int''?

    ../../../../tmp/tmp3ol3uf_z.ts(15,23): error TS2304: Cannot find name ''int_to_num''.

    '
  timestamp: 1660329428
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_to_int(a)\
    \ - nums_to_int(b);\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_9cxmd9h.ts(9,16): error TS2304: Cannot find name ''nums_to_int''.

    ../../../../tmp/tmp_9cxmd9h.ts(9,33): error TS2304: Cannot find name ''nums_to_int''.

    '
  timestamp: 1660329409
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums2 = [];\n    for (let i = 0; i < nums.length; i++) {\n       \
    \ nums2.push(num_to_numeral(nums[i]));\n    }\n    nums2.sort();\n    for (let\
    \ i = 0; i < nums2.length; i++) {\n        nums2[i] = numeral_to_num(nums2[i]);\n\
    \    }\n    return nums2.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpasnir467.ts(10,20): error TS2304: Cannot find name ''num_to_numeral''.

    ../../../../tmp/tmpasnir467.ts(14,20): error TS2304: Cannot find name ''numeral_to_num''.

    '
  timestamp: 1660329428
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  let nums = numbers.split(\" \");\n\
    \  let nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n \
    \   four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  let nums_sorted = nums.sort((a, b) => {\n    return nums_map[a] -\
    \ nums_map[b];\n  });\n  return nums_sorted.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329413
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const numMap = {\n        zero:\
    \ 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n\
    \        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n   \
    \     nine: 9\n    };\n    const nums = numbers.split(' ');\n    const numsInt\
    \ = nums.map(num => numMap[num]);\n    const sorted = numsInt.sort((a, b) => a\
    \ - b);\n    const sortedStr = sorted.map(num => {\n        for (const key in\
    \ numMap) {\n            if (numMap[key] === num) {\n                return key;\n\
    \            }\n        }\n    });\n    return sortedStr.join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329428
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sort = nums.sort((a, b) => {\n        return nums_map[a]\
    \ - nums_map[b];\n    });\n    return nums_sort.join(\" \");\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n\
    \  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329405
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_to_numbers[a]\
    \ - nums_to_numbers[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpmr2o37tx.ts(9,16): error TS2304: Cannot find name ''nums_to_numbers''.

    ../../../../tmp/tmpmr2o37tx.ts(9,37): error TS2304: Cannot find name ''nums_to_numbers''.

    '
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const numsMap = {\n        zero: 0,\n        one: 1,\n        two: 2,\n \
    \       three: 3,\n        four: 4,\n        five: 5,\n        six: 6,\n     \
    \   seven: 7,\n        eight: 8,\n        nine: 9\n    };\n    const sorted =\
    \ nums.sort((a, b) => numsMap[a] - numsMap[b]);\n    return sorted.join(' ');\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329402
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str = [];\n    for (let i = 0; i < nums_int.length; i++) {\n   \
    \     switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case 9:\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_an4dgk3.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329412
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str = [];\n    for (let i = 0; i < nums_int.length; i++) {\n   \
    \     switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case 9:\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_an4dgk3.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329412
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \  return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329424
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const num_map = {\n        zero:\
    \ 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four: 4,\n\
    \        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n   \
    \     nine: 9\n    };\n    const num_list = numbers.split(\" \");\n    const num_list_int\
    \ = num_list.map(num => num_map[num]);\n    const sorted_num_list = num_list_int.sort((a,\
    \ b) => a - b);\n    const sorted_num_list_str = sorted_num_list.map(num => {\n\
    \        for (const key in num_map) {\n            if (num_map[key] === num) {\n\
    \                return key;\n            }\n        }\n    });\n    return sorted_num_list_str.join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329429
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let num_dict = {\n        'zero':\
    \ 0,\n        'one': 1,\n        'two': 2,\n        'three': 3,\n        'four':\
    \ 4,\n        'five': 5,\n        'six': 6,\n        'seven': 7,\n        'eight':\
    \ 8,\n        'nine': 9\n    };\n    let num_list = numbers.split(' ');\n    let\
    \ num_list_int = [];\n    for (let i = 0; i < num_list.length; i++) {\n      \
    \  num_list_int.push(num_dict[num_list[i]]);\n    }\n    num_list_int.sort((a,\
    \ b) => a - b);\n    let num_list_str = [];\n    for (let i = 0; i < num_list_int.length;\
    \ i++) {\n        num_list_str.push(Object.keys(num_dict).find(key => num_dict[key]\
    \ === num_list_int[i]));\n    }\n    return num_list_str.join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpg12v1su8.ts(27,49): error TS2339: Property ''find''
    does not exist on type ''string[]''.

    '
  timestamp: 1660329429
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_dict = {\n        \"zero\": 0,\n        \"one\": 1,\n       \
    \ \"two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\":\
    \ 5,\n        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n    \
    \    \"nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_dict[a]\
    \ - nums_dict[b]);\n    return nums_sorted.join(\" \");\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329430
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    if (nums[i] == \"zero\") {\n            nums_int.push(0);\n        } else\
    \ if (nums[i] == \"one\") {\n            nums_int.push(1);\n        } else if\
    \ (nums[i] == \"two\") {\n            nums_int.push(2);\n        } else if (nums[i]\
    \ == \"three\") {\n            nums_int.push(3);\n        } else if (nums[i] ==\
    \ \"four\") {\n            nums_int.push(4);\n        } else if (nums[i] == \"\
    five\") {\n            nums_int.push(5);\n        } else if (nums[i] == \"six\"\
    ) {\n            nums_int.push(6);\n        } else if (nums[i] == \"seven\") {\n\
    \            nums_int.push(7);\n        } else if (nums[i] == \"eight\") {\n \
    \           nums_int.push(8);\n        } else if (nums[i] == \"nine\") {\n   \
    \         nums_int.push(9);\n        }\n    }\n    nums_int.sort(function (a,\
    \ b) { return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        if (nums_int[i] == 0) {\n            nums_str.push(\"zero\"\
    );\n        } else if (nums_int[i] == 1) {\n            nums_str.push(\"one\"\
    );\n        } else if (nums_int[i] == 2) {\n            nums_str.push(\"two\"\
    );\n        } else if (nums_int[i] == 3) {\n            nums_str.push(\"three\"\
    );\n        } else if (nums_int[i] == 4) {\n            nums_str.push(\"four\"\
    );\n        } else if (nums_\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpkzptonie.ts(46,1): error TS1005: '')'' expected.

    ../../../../tmp/tmpkzptonie.ts(59,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329430
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    for (let i = 0; i < nums_int.length; i++) {\n        switch\
    \ (nums_int[i]) {\n            case 0:\n                nums[i] = \"zero\";\n\
    \                break;\n            case 1:\n                nums[i] = \"one\"\
    ;\n                break;\n            case 2:\n                nums[i] = \"two\"\
    ;\n                break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp8mwci3jg.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329430
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str = [];\n    for (let i = 0; i < nums_int.length; i++) {\n   \
    \     switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case 9:\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_an4dgk3.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329412
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n  const nums = numbers.split(\" \"\
    );\n  const nums_map = {\n    zero: 0,\n    one: 1,\n    two: 2,\n    three: 3,\n\
    \    four: 4,\n    five: 5,\n    six: 6,\n    seven: 7,\n    eight: 8,\n    nine:\
    \ 9\n  };\n  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \  return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329424
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort(function (a, b) {\
    \ return a - b });\n    let nums_str = [];\n    for (let i = 0; i < nums_int.length;\
    \ i++) {\n        switch (nums_int[i]) {\n            case 0:\n              \
    \  nums_str.push(\"zero\");\n                break;\n            case 1:\n   \
    \             nums_str.push(\"one\");\n                break;\n            case\
    \ 2:\n                nums_str.push(\"two\");\n                break;\n      \
    \      case 3:\n                nums_str.push(\"three\");\n                break;\n\
    \            case 4:\n                nums_str.push(\"four\");\n             \
    \   break;\n            case 5:\n                nums_str.push(\"five\");\n  \
    \              break;\n            case 6:\n                nums_str.push(\"six\"\
    );\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvwh1_8db.ts(75,9): error TS1005: '':'' expected.

    ../../../../tmp/tmpvwh1_8db.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329403
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sort = nums.sort((a, b) => {\n        return nums_map[a] - nums_map[b];\n\
    \    });\n    return nums_sort.join(' ');\n}\n\ndeclare var require: any;\nconst\
    \ assert = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329431
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_sorted = nums.sort((a, b) => {\n        return nums_to_numbers[a]\
    \ - nums_to_numbers[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpmr2o37tx.ts(9,16): error TS2304: Cannot find name ''nums_to_numbers''.

    ../../../../tmp/tmpmr2o37tx.ts(9,37): error TS2304: Cannot find name ''nums_to_numbers''.

    '
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n\
    \    return nums_sorted.join(\" \");\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = sort_numbers;\n\
    \  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"three\"\
    ),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three five\
    \ nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"),\"\
    zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five four\
    \ three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_map = {\n        'zero': 0,\n        'one': 1,\n        'two':\
    \ 2,\n        'three': 3,\n        'four': 4,\n        'five': 5,\n        'six':\
    \ 6,\n        'seven': 7,\n        'eight': 8,\n        'nine': 9\n    };\n  \
    \  const nums_sorted = nums.sort((a, b) => nums_map[a] - nums_map[b]);\n    return\
    \ nums_sorted.join(' ');\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329400
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const numeral_map = {\n      \
    \  zero: 0,\n        one: 1,\n        two: 2,\n        three: 3,\n        four:\
    \ 4,\n        five: 5,\n        six: 6,\n        seven: 7,\n        eight: 8,\n\
    \        nine: 9\n    };\n    const nums_array = numbers.split(\" \");\n    const\
    \ nums_ints = nums_array.map(numeral => numeral_map[numeral]);\n    const sorted_ints\
    \ = nums_ints.sort((a, b) => a - b);\n    return sorted_ints.map(num => {\n  \
    \      for (const key in numeral_map) {\n            if (numeral_map[key] ===\
    \ num) {\n                return key;\n            }\n        }\n    }).join(\"\
    \ \");\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329431
- exit_code: 0
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_map = {\n        \"zero\": 0,\n        \"one\": 1,\n        \"\
    two\": 2,\n        \"three\": 3,\n        \"four\": 4,\n        \"five\": 5,\n\
    \        \"six\": 6,\n        \"seven\": 7,\n        \"eight\": 8,\n        \"\
    nine\": 9\n    };\n    let nums_sorted = nums.sort((a, b) => {\n        return\
    \ nums_map[a] - nums_map[b];\n    });\n    return nums_sorted.join(\" \");\n}\n\
    \ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660329395
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str = [];\n    for (let i = 0; i < nums_int.length; i++) {\n   \
    \     switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n                break;\n            case 9:\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\");\n  assert.deepEqual(candidate(\"\
    three\"),\"three\");\n  assert.deepEqual(candidate(\"three five nine\"),\"three\
    \ five nine\");\n  assert.deepEqual(candidate(\"five zero four seven nine eight\"\
    ),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"six five\
    \ four three two one zero\"),\"zero one two three four five six\");\n}\n\ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmp_an4dgk3.ts(89,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329412
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    const nums = numbers.split(' ');\n\
    \    const nums_sorted = nums.sort((a, b) => {\n        return nums_to_int(a)\
    \ - nums_to_int(b);\n    });\n    return nums_sorted.join(' ');\n}\n\ndeclare\
    \ var require: any;\nconst assert = require('node:assert');\n\n\nfunction test()\
    \ {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"),\"\"\
    );\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmplb5phsoz.ts(9,16): error TS2304: Cannot find name ''nums_to_int''.

    ../../../../tmp/tmplb5phsoz.ts(9,33): error TS2304: Cannot find name ''nums_to_int''.

    '
  timestamp: 1660329431
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums = numbers.split(\" \"\
    );\n    let nums_int = [];\n    for (let i = 0; i < nums.length; i++) {\n    \
    \    switch (nums[i]) {\n            case \"zero\":\n                nums_int.push(0);\n\
    \                break;\n            case \"one\":\n                nums_int.push(1);\n\
    \                break;\n            case \"two\":\n                nums_int.push(2);\n\
    \                break;\n            case \"three\":\n                nums_int.push(3);\n\
    \                break;\n            case \"four\":\n                nums_int.push(4);\n\
    \                break;\n            case \"five\":\n                nums_int.push(5);\n\
    \                break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    for (let i = 0; i < nums_int.length; i++) {\n        switch (nums_int[i])\
    \ {\n            case 0:\n                nums[i] = \"zero\";\n              \
    \  break;\n            case 1:\n                nums[i] = \"one\";\n         \
    \       break;\n            case 2:\n                nums[i] = \"two\";\n    \
    \            break;\n            case 3:\n                nums[i] = \"three\"\
    ;\n                break;\n            case 4:\n                nums[i] = \"four\"\
    ;\n                break;\n            case 5:\n                nums[i] = \"five\"\
    ;\n                break;\n            case 6:\n                nums[i] = \"six\"\
    ;\n                break;\n            case 7:\n                nums[i] = \"seven\"\
    ;\n                break;\n            case 8:\n                nums[i] = \"eight\"\
    ;\n                break;\n            case 9:\n                nums[i] = \"nine\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\"\
    ),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpidr1hm6f.ts(74,32): error TS1002: Unterminated string
    literal.

    ../../../../tmp/tmpidr1hm6f.ts(88,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329404
- exit_code: 2
  program: "//Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    // Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n// Return the string with numbers sorted from smallest\
    \ to largest\n// >>> sort_numbers(\"three one five\")\n// \"one three five\"\n\
    function sort_numbers(numbers: any): any {\n    let nums: string[] = numbers.split(\"\
    \ \");\n    let nums_int: number[] = [];\n    for (let i = 0; i < nums.length;\
    \ i++) {\n        switch (nums[i]) {\n            case \"zero\":\n           \
    \     nums_int.push(0);\n                break;\n            case \"one\":\n \
    \               nums_int.push(1);\n                break;\n            case \"\
    two\":\n                nums_int.push(2);\n                break;\n          \
    \  case \"three\":\n                nums_int.push(3);\n                break;\n\
    \            case \"four\":\n                nums_int.push(4);\n             \
    \   break;\n            case \"five\":\n                nums_int.push(5);\n  \
    \              break;\n            case \"six\":\n                nums_int.push(6);\n\
    \                break;\n            case \"seven\":\n                nums_int.push(7);\n\
    \                break;\n            case \"eight\":\n                nums_int.push(8);\n\
    \                break;\n            case \"nine\":\n                nums_int.push(9);\n\
    \                break;\n        }\n    }\n    nums_int.sort((a, b) => a - b);\n\
    \    let nums_str: string[] = [];\n    for (let i = 0; i < nums_int.length; i++)\
    \ {\n        switch (nums_int[i]) {\n            case 0:\n                nums_str.push(\"\
    zero\");\n                break;\n            case 1:\n                nums_str.push(\"\
    one\");\n                break;\n            case 2:\n                nums_str.push(\"\
    two\");\n                break;\n            case 3:\n                nums_str.push(\"\
    three\");\n                break;\n            case 4:\n                nums_str.push(\"\
    four\");\n                break;\n            case 5:\n                nums_str.push(\"\
    five\");\n                break;\n            case 6:\n                nums_str.push(\"\
    six\");\n                break;\n            case 7:\n                nums_str.push(\"\
    seven\");\n                break;\n            case 8:\n                nums_str.push(\"\
    eight\");\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = sort_numbers;\n  assert.deepEqual(candidate(\"\
    \"),\"\");\n  assert.deepEqual(candidate(\"three\"),\"three\");\n  assert.deepEqual(candidate(\"\
    three five nine\"),\"three five nine\");\n  assert.deepEqual(candidate(\"five\
    \ zero four seven nine eight\"),\"zero four five seven eight nine\");\n  assert.deepEqual(candidate(\"\
    six five four three two one zero\"),\"zero one two three four five six\");\n}\n\
    \ntest();"
  status: CompileError
  stderr: ''
  stdout: '../../../../tmp/tmpvj3daj_u.ts(87,8): error TS1005: ''}'' expected.

    '
  timestamp: 1660329415
