language: ts
name: HumanEval_56_correct_bracketing
results:
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            open += 1;\n        } else\
    \ if (brackets[i] === \">\") {\n            open -= 1;\n        }\n        if\
    \ (open < 0) {\n            return false;\n        }\n    }\n    return open ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 1
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open: number = 0;\n    let close: number = 0;\n    for\
    \ (let i: number = 0; i < brackets.length; i++) {\n        if (brackets[i] ===\
    \ \"<\") {\n            open++;\n        } else if (brackets[i] === \">\") {\n\
    \            close++;\n        }\n    }\n    if (open === close) {\n        return\
    \ true;\n    } else {\n        return false;\n    }\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: AssertionError
  stderr: "node:assert:124\n  throw new AssertionError(obj);\n  ^\n\nAssertionError\
    \ [ERR_ASSERTION]: Expected values to be loosely deep-equal:\n\ntrue\n\nshould\
    \ loosely deep-equal\n\nfalse\n    at test (/tmp/tmpr8zx0ak0.js:37:12)\n    at\
    \ Object.<anonymous> (/tmp/tmpr8zx0ak0.js:45:1)\n    at Module._compile (node:internal/modules/cjs/loader:1120:14)\n\
    \    at Module._extensions..js (node:internal/modules/cjs/loader:1174:10)\n  \
    \  at Module.load (node:internal/modules/cjs/loader:998:32)\n    at Module._load\
    \ (node:internal/modules/cjs/loader:839:12)\n    at Function.executeUserEntryPoint\
    \ [as runMain] (node:internal/modules/run_main:81:12)\n    at node:internal/main/run_main_module:17:47\
    \ {\n  generatedMessage: true,\n  code: 'ERR_ASSERTION',\n  actual: true,\n  expected:\
    \ false,\n  operator: 'deepEqual'\n}\n\nNode.js v18.7.0\n"
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let counter = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            counter++;\n     \
    \   } else {\n            counter--;\n        }\n        if (counter < 0) {\n\
    \            return false;\n        }\n    }\n    return counter === 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    if (brackets.length % 2 != 0) {\n        return false;\n  \
    \  }\n    let stack: any = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] == \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length == 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length == 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327030
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            open += 1;\n        } else\
    \ if (brackets[i] === \">\") {\n            open -= 1;\n        }\n        if\
    \ (open < 0) {\n            return false;\n        }\n    }\n    return open ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === \"<\") {\n      count++;\n    } else if (brackets[i]\
    \ === \">\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327030
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open_brackets = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            open_brackets += 1;\n\
    \        } else if (brackets[i] === \">\") {\n            open_brackets -= 1;\n\
    \        }\n        if (open_brackets < 0) {\n            return false;\n    \
    \    }\n    }\n    return open_brackets === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327030
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n  let count = 0;\n  for (let i = 0; i < brackets.length; i++) {\n\
    \    if (brackets[i] === \"<\") {\n      count++;\n    } else if (brackets[i]\
    \ === \">\") {\n      count--;\n    }\n    if (count < 0) {\n      return false;\n\
    \    }\n  }\n  return count === 0;\n}\n\ndeclare var require: any;\nconst assert\
    \ = require('node:assert');\n\n\nfunction test() {\n  let candidate = correct_bracketing;\n\
    \  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327030
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let counter = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            counter++;\n     \
    \   } else {\n            counter--;\n        }\n        if (counter < 0) {\n\
    \            return false;\n        }\n    }\n    return counter === 0;\n}\n\n\
    declare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            open += 1;\n        } else\
    \ if (brackets[i] === \">\") {\n            open -= 1;\n        }\n        if\
    \ (open < 0) {\n            return false;\n        }\n    }\n    return open ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            open++;\n        } else\
    \ {\n            open--;\n        }\n        if (open < 0) {\n            return\
    \ false;\n        }\n    }\n    return open === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327030
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            open++;\n        } else\
    \ {\n            open--;\n        }\n        if (open < 0) {\n            return\
    \ false;\n        }\n    }\n    return open === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327030
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    if (brackets.length % 2 !== 0) {\n        return false;\n \
    \   }\n    let stack: any = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327032
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let open = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            open += 1;\n        } else\
    \ if (brackets[i] === \">\") {\n            open -= 1;\n        }\n        if\
    \ (open < 0) {\n            return false;\n        }\n    }\n    return open ===\
    \ 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    let open: any = {\n        '<': '>'\n\
    \    };\n    let closed: any = {\n        '>': true\n    };\n    for (let i: any\
    \ = 0; i < brackets.length; i++) {\n        let bracket: any = brackets[i];\n\
    \        if (open[bracket]) {\n            stack.push(bracket);\n        } else\
    \ if (closed[bracket]) {\n            if (open[stack.pop()] !== bracket) return\
    \ false;\n        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require:\
    \ any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327032
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            }\n            stack.pop();\n        }\n    }\n    return\
    \ stack.length === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count: number = 0;\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] == \"<\") {\n            count++;\n        }\
    \ else {\n            count--;\n        }\n        if (count < 0) {\n        \
    \    return false;\n        }\n    }\n    return count == 0;\n}\n\ndeclare var\
    \ require: any;\nconst assert = require('node:assert');\n\n\nfunction test() {\n\
    \  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n\
    \  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count += 1;\n        }\
    \ else if (brackets[i] === \">\") {\n            count -= 1;\n        }\n    \
    \    if (count < 0) {\n            return false;\n        }\n    }\n    return\
    \ count === 0;\n}\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\
    \n\nfunction test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i: number = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack: any = [];\n    for (let i = 0; i < brackets.length;\
    \ i++) {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327027
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let count = 0;\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            count++;\n        } else\
    \ if (brackets[i] === \">\") {\n            count--;\n        }\n        if (count\
    \ < 0) {\n            return false;\n        }\n    }\n    return count === 0;\n\
    }\n\ndeclare var require: any;\nconst assert = require('node:assert');\n\n\nfunction\
    \ test() {\n  let candidate = correct_bracketing;\n  assert.deepEqual(candidate(\"\
    <>\"),true);\n  assert.deepEqual(candidate(\"<<><>>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"<><><<<><><>><>><<><><<>>>\"\
    ),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"),false);\n  assert.deepEqual(candidate(\"\
    ><<>\"),false);\n  assert.deepEqual(candidate(\"<\"),false);\n  assert.deepEqual(candidate(\"\
    <<<<\"),false);\n  assert.deepEqual(candidate(\">\"),false);\n  assert.deepEqual(candidate(\"\
    <<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>><<>\"),false);\n \
    \ assert.deepEqual(candidate(\"<><><<><>><>>><>\"),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327026
- exit_code: 0
  program: "//brackets is a string of \"<\" and \">\".\n// return true if every opening\
    \ bracket has a corresponding closing bracket.\n// >>> correct_bracketing(\"<\"\
    )\n// false\n// >>> correct_bracketing(\"<>\")\n// true\n// >>> correct_bracketing(\"\
    <<><>>\")\n// true\n// >>> correct_bracketing(\"><<>\")\n// false\nfunction correct_bracketing(brackets:\
    \ any): any {\n    let stack = [];\n    for (let i = 0; i < brackets.length; i++)\
    \ {\n        if (brackets[i] === \"<\") {\n            stack.push(brackets[i]);\n\
    \        } else {\n            if (stack.length === 0) {\n                return\
    \ false;\n            } else {\n                stack.pop();\n            }\n\
    \        }\n    }\n    return stack.length === 0;\n}\n\ndeclare var require: any;\n\
    const assert = require('node:assert');\n\n\nfunction test() {\n  let candidate\
    \ = correct_bracketing;\n  assert.deepEqual(candidate(\"<>\"),true);\n  assert.deepEqual(candidate(\"\
    <<><>>\"),true);\n  assert.deepEqual(candidate(\"<><><<><>><>\"),true);\n  assert.deepEqual(candidate(\"\
    <><><<<><><>><>><<><><<>>>\"),true);\n  assert.deepEqual(candidate(\"<<<><>>>>\"\
    ),false);\n  assert.deepEqual(candidate(\"><<>\"),false);\n  assert.deepEqual(candidate(\"\
    <\"),false);\n  assert.deepEqual(candidate(\"<<<<\"),false);\n  assert.deepEqual(candidate(\"\
    >\"),false);\n  assert.deepEqual(candidate(\"<<>\"),false);\n  assert.deepEqual(candidate(\"\
    <><><<><>><>><<>\"),false);\n  assert.deepEqual(candidate(\"<><><<><>><>>><>\"\
    ),false);\n}\n\ntest();"
  status: OK
  stderr: ''
  stdout: ''
  timestamp: 1660327029
