name: HumanEval_105_by_length
language: py
prompt:
  "from typing import List\n\ndef by_length(arr: List[int]) -> List[str]:\n\
  \    \"\"\"\n    Given an array of integers, sort the integers that are between\
  \ 1 and 9 inclusive,\n    reverse the resulting array, and then replace each digit\
  \ by its corresponding name from\n    \"One\", \"Two\", \"Three\", \"Four\", \"\
  Five\", \"Six\", \"Seven\", \"Eight\", \"Nine\".\n\n    For example:\n      arr\
  \ = [2, 1, 1, 4, 5, 8, 2, 3]   \n            -> sort arr -> [1, 1, 2, 2, 3, 4, 5,\
  \ 8] \n            -> reverse arr -> [8, 5, 4, 3, 2, 2, 1, 1]\n      return [\"\
  Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\", \"One\"]\n  \
  \  \n      If the array is empty, return an empty array:\n      arr = []\n     \
  \ return []\n    \n      If the array has any strange number ignore it:\n      arr\
  \ = [1, -1 , 55] \n            -> sort arr -> [-1, 1, 55]\n            -> reverse\
  \ arr -> [55, 1, -1]\n      return = ['One']\n    \"\"\"\n"
tests:
  "def check(candidate):\n    assert candidate([2, 1, 1, 4, 5, 8, 2, 3]) == ['Eight',\
  \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One']\n    assert candidate([])\
  \ == []\n    assert candidate([1, -1, 55]) == ['One']\n    assert candidate([1,\
  \ -1, 3, 2]) == ['Three', 'Two', 'One']\n    assert candidate([9, 4, 8]) == ['Nine',\
  \ 'Eight', 'Four']\n\ndef test_check():\n    check(by_length)\n\ntest_check()\n"
completions: []
stop_tokens:
  - "\ndef"
  - "\n#"
  - "\nif"
  - "\nclass"
