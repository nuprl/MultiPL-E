name: HumanEval_78_hex_key
language: py
prompt:
  "def hex_key(num: str) -> int:\n    \"\"\"You have been tasked to write a\
  \ function that receives \n    a hexadecimal number as a string and counts the number\
  \ of hexadecimal \n    digits that are primes (prime number, or a prime, is a natural\
  \ number \n    greater than 1 that is not a product of two smaller natural numbers).\n\
  \    Hexadecimal digits are 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, A, B, C, D, E, F.\n  \
  \  Prime numbers are 2, 3, 5, 7, 11, 13, 17,...\n    So you have to determine a\
  \ number of the following digits: 2, 3, 5, 7, \n    B (=decimal 11), D (=decimal\
  \ 13).\n    Note: you may assume the input is always correct or empty string, \n\
  \    and symbols A,B,C,D,E,F are always uppercase.\n    Examples:\n    hex_key('AB')\n\
  1\n\nhex_key('1077E')\n2\n\nhex_key('ABED1A33')\n4\n\nhex_key('123456789ABCDEF0')\n\
  6\n\nhex_key('2020')\n2\n\n\"\"\"\n"
tests:
  "def check(candidate):\n    assert candidate('AB') == 1\n    assert candidate('1077E')\
  \ == 2\n    assert candidate('ABED1A33') == 4\n    assert candidate('2020') == 2\n\
  \    assert candidate('123456789ABCDEF0') == 6\n    assert candidate('112233445566778899AABBCCDDEEFF00')\
  \ == 12\n    assert candidate([]) == 0\n\ndef test_check():\n    check(hex_key)\n\
  \ntest_check()\n"
completions: []
stop_tokens:
  - "\ndef"
  - "\n#"
  - "\nif"
  - "\nclass"
