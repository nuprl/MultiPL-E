name: HumanEval_70_strange_sort_list
language: py
prompt: "from typing import List\n\ndef strange_sort_list(lst: List[int]) -> List[int]:\n\
  \    \"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
  \ sorting, is when you start with the minimum value,\n    then maximum of the remaining\
  \ integers, then minimum and so on.\n\n    Examples:\n    >>> strange_sort_list([1,\
  \ 2, 3, 4])\n    [1, 4, 2, 3]\n    >>> strange_sort_list([5, 5, 5, 5])\n    [5,\
  \ 5, 5, 5]\n    >>> strange_sort_list([])\n    []\n    \"\"\"\n"
tests: "def check(candidate):\n    assert candidate([1, 2, 3, 4]) == [1, 4, 2, 3]\n\
  \    assert candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8, 7]\n    assert candidate([1,\
  \ 2, 3, 4, 5]) == [1, 5, 2, 4, 3]\n    assert candidate([5, 6, 7, 8, 9, 1]) == [1,\
  \ 9, 5, 8, 6, 7]\n    assert candidate([5, 5, 5, 5]) == [5, 5, 5, 5]\n    assert\
  \ candidate([]) == []\n    assert candidate([1, 2, 3, 4, 5, 6, 7, 8]) == [1, 8,\
  \ 2, 7, 3, 6, 4, 5]\n    assert candidate([0, 2, 2, 2, 5, 5, -5, -5]) == [-5, 5,\
  \ -5, 5, 0, 2, 2, 2]\n    assert candidate([111111]) == [111111]\n\ndef test_check():\n\
  \    check(strange_sort_list)\n\ntest_check()\n"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
