name: HumanEval_144_simplify
language: py
prompt:
  "def simplify(x: str, n: str) -> bool:\n    \"\"\"Your task is to implement\
  \ a function that will simplify the expression\n    x * n. The function returns\
  \ True if x * n evaluates to a whole number and False\n    otherwise. Both x and\
  \ n, are string representation of a fraction, and have the following format,\n \
  \   <numerator>/<denominator> where both numerator and denominator are positive\
  \ whole numbers.\n\n    You can assume that x, and n are valid fractions, and do\
  \ not have zero as denominator.\n\n    simplify('1/5', '5/1')\nTrue\n\nsimplify('1/6',\
  \ '2/1')\nFalse\n\nsimplify('7/10', '10/2')\nFalse\n\n\"\"\"\n"
tests:
  "def check(candidate):\n    assert candidate('1/5', '5/1') == True\n    assert\
  \ candidate('1/6', '2/1') == False\n    assert candidate('5/1', '3/1') == True\n\
  \    assert candidate('7/10', '10/2') == False\n    assert candidate('2/10', '50/10')\
  \ == True\n    assert candidate('7/2', '4/2') == True\n    assert candidate('11/6',\
  \ '6/1') == True\n    assert candidate('2/3', '5/2') == False\n    assert candidate('5/2',\
  \ '3/5') == False\n    assert candidate('2/4', '8/4') == True\n    assert candidate('2/4',\
  \ '4/2') == True\n    assert candidate('1/5', '5/1') == True\n    assert candidate('1/5',\
  \ '1/5') == False\n\ndef test_check():\n    check(simplify)\n\ntest_check()\n"
completions: []
stop_tokens:
  - "\ndef"
  - "\n#"
  - "\nif"
  - "\nclass"
