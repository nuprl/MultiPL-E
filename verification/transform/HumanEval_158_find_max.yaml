name: HumanEval_158_find_max
language: py
prompt: "from typing import List\n\ndef find_max(words: List[str]) -> str:\n    \"\
  \"\"Write a function that accepts a list of strings.\n    The list contains different\
  \ words. Return the word with maximum number\n    of unique characters. If multiple\
  \ strings have maximum number of unique\n    characters, return the one which comes\
  \ first in lexicographical order.\n\n    find_max(['name', 'of', 'string'])\n'string'\n\
  \nfind_max(['name', 'enam', 'game'])\n'enam'\n\nfind_max(['aaaaaaa', 'bb', 'cc'])\n\
  'aaaaaaa'\n\n\"\"\"\n"
tests: "def check(candidate):\n    assert candidate(['name', 'of', 'string']) == 'string'\n\
  \    assert candidate(['name', 'enam', 'game']) == 'enam'\n    assert candidate(['aaaaaaa',\
  \ 'bb', 'cc']) == 'aaaaaaa'\n    assert candidate(['abc', 'cba']) == 'abc'\n   \
  \ assert candidate(['play', 'this', 'game', 'of', 'footbott']) == 'footbott'\n \
  \   assert candidate(['we', 'are', 'gonna', 'rock']) == 'gonna'\n    assert candidate(['we',\
  \ 'are', 'a', 'mad', 'nation']) == 'nation'\n    assert candidate(['this', 'is',\
  \ 'a', 'prrk']) == 'this'\n    assert candidate(['b']) == 'b'\n    assert candidate(['play',\
  \ 'play', 'play']) == 'play'\n\ndef test_check():\n    check(find_max)\n\ntest_check()\n"
completions: []
stop_tokens:
- "\ndef"
- "\n#"
- "\nif"
- "\nclass"
