HumanEval_0_has_close_elements.py:def has_close_elements(numbers: List[float], threshold: float) -> bool:
HumanEval_100_make_a_pile.py:def make_a_pile(n: int) -> List[int]:
HumanEval_101_words_string.py:def words_string(s: str) -> List[str]:
HumanEval_102_choose_num.py:def choose_num(x: int, y: int) -> int:
HumanEval_103_rounded_avg.py:def rounded_avg(n: int, m: int) -> Union[str, int]:
HumanEval_104_unique_digits.py:def unique_digits(x: List[int]) -> List[int]:
HumanEval_105_by_length.py:def by_length(arr: List[int]) -> List[str]:
HumanEval_106_f.py:def f(n: int) -> List[int]:
HumanEval_107_even_odd_palindrome.py:def even_odd_palindrome(n: int) -> Tuple[int, int]:
HumanEval_108_count_nums.py:def count_nums(arr: List[int]) -> int:
HumanEval_109_move_one_ball.py:def move_one_ball(arr: List[int]) -> bool:
HumanEval_10_make_palindrome.py:def make_palindrome(string: str) -> str:
HumanEval_110_exchange.py:def exchange(lst1: List[int], lst2: List[int]) -> str:
HumanEval_111_histogram.py:def histogram(test: str) -> Dict[str, int]:
HumanEval_112_reverse_delete.py:def reverse_delete(s: str,c: str) -> Tuple[str, bool]:
HumanEval_113_odd_count.py:def odd_count(lst: List[str]) -> List[str]:
HumanEval_114_minSubArraySum.py:def minSubArraySum(nums: List[int]) -> int:
HumanEval_115_max_fill.py:def max_fill(grid: List[List[int]], capacity: int) -> int:
HumanEval_116_sort_array.py:def sort_array(arr: List[int]) -> List[int]:
HumanEval_117_select_words.py:def select_words(s: str, n: int) -> List[str]:
HumanEval_118_get_closest_vowel.py:def get_closest_vowel(word: str) -> str:
HumanEval_119_match_parens.py:def match_parens(lst: List[str]) -> str:
HumanEval_11_string_xor.py:def string_xor(a: str, b: str) -> str:
HumanEval_120_maximum.py:def maximum(arr: List[int], k: int) -> List[int]:
HumanEval_121_solution.py:def solution(lst: List[int]) -> int:
HumanEval_122_add_elements.py:def add_elements(arr: List[int], k: int) -> int:
HumanEval_123_get_odd_collatz.py:def get_odd_collatz(n: int) -> List[int]:
HumanEval_124_valid_date.py:def valid_date(date: str) -> bool:
HumanEval_125_split_words.py:def split_words(txt: str) -> Union[List[str], int]:
HumanEval_126_is_sorted.py:def is_sorted(lst: List[int]) -> bool:
HumanEval_127_intersection.py:def intersection(interval1: Tuple[int, int], interval2: Tuple[int, int]) -> str:
HumanEval_128_prod_signs.py:def prod_signs(arr: List[int]) -> Optional[int]:
HumanEval_129_minPath.py:def minPath(grid: List[List[int]], k: int) -> List[int]:
HumanEval_12_longest.py:def longest(strings: List[str]) -> Optional[str]:
HumanEval_130_tri.py:def tri(n: int) -> List[int]:
HumanEval_131_digits.py:def digits(n: int) -> int:
HumanEval_132_is_nested.py:def is_nested(string: str) -> bool:
HumanEval_133_sum_squares.py:def sum_squares(lst: List[float]) -> int:
HumanEval_134_check_if_last_char_is_a_letter.py:def check_if_last_char_is_a_letter(txt: str) -> bool:
HumanEval_135_can_arrange.py:def can_arrange(arr: List[int]) -> int:
HumanEval_136_largest_smallest_integers.py:def largest_smallest_integers(lst: List[int]) -> Tuple[Optional[int], Optional[int]]:
HumanEval_137_compare_one.py:def compare_one(a: Union[int, float, str], b: Union[int, float, str]) -> Union[int, float, str, None]:
HumanEval_138_is_equal_to_sum_even.py:def is_equal_to_sum_even(n: int) -> bool:
HumanEval_139_special_factorial.py:def special_factorial(n: int) -> int:
HumanEval_13_greatest_common_divisor.py:def greatest_common_divisor(a: int, b: int) -> int:
HumanEval_140_fix_spaces.py:def fix_spaces(text: str) -> str:
HumanEval_141_file_name_check.py:def file_name_check(file_name: str) -> str:
HumanEval_142_sum_squares.py:def sum_squares(lst: List[int]) -> int:
HumanEval_143_words_in_sentence.py:def words_in_sentence(sentence: str) -> str:
HumanEval_144_simplify.py:def simplify(x: str, n: str) -> bool:
HumanEval_145_order_by_points.py:def order_by_points(nums: List[int]) -> List[int]:
HumanEval_146_specialFilter.py:def specialFilter(nums: List[int]) -> int:
HumanEval_147_get_max_triples.py:def get_max_triples(n: int) -> int:
HumanEval_148_bf.py:def bf(planet1: str, planet2: str) -> Tuple[str, ...]:
HumanEval_149_sorted_list_sum.py:def sorted_list_sum(lst: List[str]) -> List[str]:
HumanEval_14_all_prefixes.py:def all_prefixes(string: str) -> List[str]:
HumanEval_150_x_or_y.py:def x_or_y(n: int, x: int, y: int) -> int:
HumanEval_151_double_the_difference.py:def double_the_difference(lst: List[float]) -> int:
HumanEval_152_compare.py:def compare(game: List[int],guess: List[int]) -> List[int]:
HumanEval_153_Strongest_Extension.py:def Strongest_Extension(class_name: str, extensions: List[str]) -> str:
HumanEval_154_cycpattern_check.py:def cycpattern_check(a: str , b: str) -> bool:
HumanEval_155_even_odd_count.py:def even_odd_count(num: int) -> Tuple[int, int]:
HumanEval_156_int_to_mini_roman.py:def int_to_mini_roman(number: int) -> str:
HumanEval_157_right_angle_triangle.py:def right_angle_triangle(a: int, b: int, c: int) -> bool:
HumanEval_158_find_max.py:def find_max(words: List[str]) -> str:
HumanEval_159_eat.py:def eat(number: int, need: int, remaining: int) -> List[int]:
HumanEval_15_string_sequence.py:def string_sequence(n: int) -> str:
HumanEval_160_do_algebra.py:def do_algebra(operator: List[str], operand: List[int]) -> int:
HumanEval_161_solve.py:def solve(s: str) -> str:
HumanEval_162_string_to_md5.py:def string_to_md5(text: str) -> Optional[str]:
HumanEval_163_generate_integers.py:def generate_integers(a: int, b: int) -> List[int]:
HumanEval_16_count_distinct_characters.py:def count_distinct_characters(string: str) -> int:
HumanEval_17_parse_music.py:def parse_music(music_string: str) -> List[int]:
HumanEval_18_how_many_times.py:def how_many_times(string: str, substring: str) -> int:
HumanEval_19_sort_numbers.py:def sort_numbers(numbers: str) -> str:
HumanEval_1_separate_paren_groups.py:def separate_paren_groups(paren_string: str) -> List[str]:
HumanEval_20_find_closest_elements.py:def find_closest_elements(numbers: List[float]) -> Tuple[float, float]:
HumanEval_21_rescale_to_unit.py:def rescale_to_unit(numbers: List[float]) -> List[float]:
HumanEval_22_filter_integers.py:def filter_integers(values: List[Any]) -> List[int]:
HumanEval_23_strlen.py:def strlen(string: str) -> int:
HumanEval_24_largest_divisor.py:def largest_divisor(n: int) -> int:
HumanEval_25_factorize.py:def factorize(n: int) -> List[int]:
HumanEval_26_remove_duplicates.py:def remove_duplicates(numbers: List[int]) -> List[int]:
HumanEval_27_flip_case.py:def flip_case(string: str) -> str:
HumanEval_28_concatenate.py:def concatenate(strings: List[str]) -> str:
HumanEval_29_filter_by_prefix.py:def filter_by_prefix(strings: List[str], prefix: str) -> List[str]:
HumanEval_2_truncate_number.py:def truncate_number(number: float) -> float:
HumanEval_30_get_positive.py:def get_positive(l: List[int]) -> List[int]:
HumanEval_31_is_prime.py:def is_prime(n:int) -> bool:
HumanEval_33_sort_third.py:def sort_third(l: List[int]) -> List[int]:
HumanEval_34_unique.py:def unique(l: List[int]) -> List[int]:
HumanEval_35_max_element.py:def max_element(l: List[int]) -> int:
HumanEval_36_fizz_buzz.py:def fizz_buzz(n: int) -> int:
HumanEval_37_sort_even.py:def sort_even(l: List[int]) -> List[int]:
HumanEval_39_prime_fib.py:def prime_fib(n: int) -> int:
HumanEval_3_below_zero.py:def below_zero(operations: List[int]) -> bool:
HumanEval_40_triples_sum_to_zero.py:def triples_sum_to_zero(l: List[int]) -> bool:
HumanEval_41_car_race_collision.py:def car_race_collision(n: int) -> int:
HumanEval_42_incr_list.py:def incr_list(l: List[int]) -> List[int]:
HumanEval_43_pairs_sum_to_zero.py:def pairs_sum_to_zero(l: List[int]) -> bool:
HumanEval_44_change_base.py:def change_base(x: int, base: int) -> str:
HumanEval_45_triangle_area.py:def triangle_area(a: int, h: int) -> float:
HumanEval_46_fib4.py:def fib4(n: int) -> int:
HumanEval_47_median.py:def median(l: List[int]) -> float:
HumanEval_48_is_palindrome.py:def is_palindrome(text: str) -> bool:
HumanEval_49_modp.py:def modp(n: int, p: int) -> int:
HumanEval_4_mean_absolute_deviation.py:def mean_absolute_deviation(numbers: List[float]) -> float:
HumanEval_51_remove_vowels.py:def remove_vowels(text: str) -> str:
HumanEval_52_below_threshold.py:def below_threshold(l: List[int], t: int) -> bool:
HumanEval_53_add.py:def add(x: int, y: int) -> int:
HumanEval_54_same_chars.py:def same_chars(s0: str, s1: str) -> bool:
HumanEval_55_fib.py:def fib(n: int) -> int:
HumanEval_56_correct_bracketing.py:def correct_bracketing(brackets: str) -> bool:
HumanEval_57_monotonic.py:def monotonic(l: List[int]) -> bool:
HumanEval_58_common.py:def common(l1: List[int], l2: List[int]) -> List[int]:
HumanEval_59_largest_prime_factor.py:def largest_prime_factor(n: int) -> int:
HumanEval_5_intersperse.py:def intersperse(numbers: List[int], delimeter: int) -> List[int]:
HumanEval_60_sum_to_n.py:def sum_to_n(n: int) -> int:
HumanEval_61_correct_bracketing.py:def correct_bracketing(brackets: str) -> bool:
HumanEval_62_derivative.py:def derivative(xs: List[int]) -> List[int]:
HumanEval_63_fibfib.py:def fibfib(n: int) -> int:
HumanEval_64_vowels_count.py:def vowels_count(s: str) -> int:
HumanEval_65_circular_shift.py:def circular_shift(x: int, shift: int) -> str:
HumanEval_66_digitSum.py:def digitSum(s: str) -> int:
HumanEval_67_fruit_distribution.py:def fruit_distribution(s: str, n: int) -> int:
HumanEval_68_pluck.py:def pluck(arr: List[int]) -> List[int]:
HumanEval_69_search.py:def search(lst: List[int]) -> int:
HumanEval_6_parse_nested_parens.py:def parse_nested_parens(paren_string: str) -> List[int]:
HumanEval_70_strange_sort_list.py:def strange_sort_list(lst: List[int]) -> List[int]:
HumanEval_71_triangle_area.py:def triangle_area(a: int, b: int, c: int) -> float:
HumanEval_72_will_it_fly.py:def will_it_fly(q: List[int], w: int) -> bool:
HumanEval_73_smallest_change.py:def smallest_change(arr: List[int]) -> int:
HumanEval_74_total_match.py:def total_match(lst1: List[str], lst2: List[str]) -> List[str]:
HumanEval_75_is_multiply_prime.py:def is_multiply_prime(a: int) -> bool:
HumanEval_76_is_simple_power.py:def is_simple_power(x: int, n: int) -> bool:
HumanEval_77_iscube.py:def iscube(a: int) -> bool:
HumanEval_78_hex_key.py:def hex_key(num: str) -> int:
HumanEval_79_decimal_to_binary.py:def decimal_to_binary(decimal: int) -> str:
HumanEval_7_filter_by_substring.py:def filter_by_substring(strings: List[str], substring: str) -> List[str]:
HumanEval_80_is_happy.py:def is_happy(s: str) -> bool:
HumanEval_81_numerical_letter_grade.py:def numerical_letter_grade(grades: List[float]) -> List[str]:
HumanEval_82_prime_length.py:def prime_length(string: str) -> bool:
HumanEval_83_starts_one_ends.py:def starts_one_ends(n: int) -> int:
HumanEval_84_solve.py:def solve(N: int) -> str:
HumanEval_85_add.py:def add(lst: List[int]) -> int:
HumanEval_86_anti_shuffle.py:def anti_shuffle(s: str) -> str:
HumanEval_87_get_row.py:def get_row(lst: List[List[int]], x: int) -> List[Tuple[int, int]]:
HumanEval_88_sort_array.py:def sort_array(array: List[int]) -> List[int]:
HumanEval_89_encrypt.py:def encrypt(s: str) -> str:
HumanEval_8_sum_product.py:def sum_product(numbers: List[int]) -> Tuple[int, int]:
HumanEval_90_next_smallest.py:def next_smallest(lst: List[int]) -> Optional[int]:
HumanEval_91_is_bored.py:def is_bored(S: str) -> int:
HumanEval_92_any_int.py:def any_int(x: float, y: float, z: float) -> bool:
HumanEval_93_encode.py:def encode(message: str) -> str:
HumanEval_94_skjkasdkd.py:def skjkasdkd(lst: List[int]) -> int:
HumanEval_95_check_dict_case.py:def check_dict_case(dict: Dict[str, str]) -> bool:
HumanEval_96_count_up_to.py:def count_up_to(n: int) -> List[int]:
HumanEval_97_multiply.py:def multiply(a: int, b: int) -> int:
HumanEval_98_count_upper.py:def count_upper(s: str) -> int:
HumanEval_99_closest_integer.py:def closest_integer(value: str) -> int:
HumanEval_9_rolling_max.py:def rolling_max(numbers: List[int]) -> List[int]: