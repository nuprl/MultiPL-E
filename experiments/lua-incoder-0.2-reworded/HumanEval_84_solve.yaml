name: HumanEval_84_solve
language: lua
prompt: "-- Given a positive integer N, return the total sum of its digits in binary.\n\
  -- Example\n-- >>> solve(1000)\n-- '1'\n-- >>> solve(150)\n-- '110'\n-- >>> solve(147)\n\
  -- '1100'\n-- Variables:\n-- @N integer\n-- Constraints: 0 \u2264 N \u2264 10000.\n\
  -- Output:\n-- a string of binary number\nlocal function solve(N)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = solve\n\
  \    lu.assertEquals(candidate(1000), '1')\n    lu.assertEquals(candidate(150),\
  \ '110')\n    lu.assertEquals(candidate(147), '1100')\n    lu.assertEquals(candidate(333),\
  \ '1001')\n    lu.assertEquals(candidate(963), '10010')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local s = ''\n  local n = 1\n  while n <= N do\n    local m = math.floor(math.log(n,\
    \ 2))\n    s = s .. string.format('%d', math.floor(n/math.pow(2,m)))\n    n =\
    \ n*2\n  end\n  return s\nend", "  local s = ''\n  local i = 1\n  while i <= N\
    \ do\n    local t = math.floor((N / i) * 2)\n    s = s .. string.format('%0*d',\
    \ t, i)\n    i = i + 1\n  end\n  return s\nend", "  local sum = 0\n  local i =\
    \ 1\n  while i <= N do\n    sum = sum + math.floor((N % i) / 2)\n    i = i + 1\n\
    \  end\n  return sum\nend", "    local s = ''\n    while N > 0 do\n        local\
    \ t = math.floor(math.log2(N))\n        s = s .. tostring(math.pow(2, t))\n  \
    \      N = math.floor(N / math.pow(2, t))\n    end\n    return s\nend", "  local\
    \ s = ''\n  local i = 1\n  while i <= N do\n    local t = math.floor((N - i) /\
    \ 2)\n    s = s .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1'\
    \ .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0'\
    \ .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1'\
    \ .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0'\
    \ .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1'\
    \ .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0'\
    \ .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1'\
    \ .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0'\
    \ .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1'\
    \ .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0'\
    \ .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1'\
    \ .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0'\
    \ .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1'\
    \ .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0'\
    \ .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '1' .. '0' .. '", "  local s =\
    \ ''\n  while N > 0 do\n    local t = math.floor(math.log2(N))\n    s = s .. string.char(N\
    \ % (2 ^ t))\n    N = N / 2 ^ t\n  end\n  return s\nend", "  local sum = 0\n \
    \ local i = 1\n  while i <= N do\n    sum = sum + math.floor((N % i) / 2)\n  \
    \  i = i + 1\n  end\n  return sum\nend", "  local s = ''\n  while N > 0 do\n \
    \   local digit = math.floor(math.log2(N))\n    s = s .. tostring(digit)\n   \
    \ N = math.floor(N / 2)\n  end\n  return s\nend", "  local s = ''\n  local i =\
    \ 1\n  while i <= N do\n    local t = math.floor((N % i) / 2)\n    s = s .. '1'\
    \ .. t\n    N = N - t\n    i = i + 1\n  end\n  return s\nend", "  local result\
    \ = ''\n  local remainder = N % 2\n  local sum = 0\n  while N > 0 do\n    sum\
    \ = sum + N % 2\n    N = N / 2\n  end\n  result = result .. tostring(sum)\n  if\
    \ remainder == 1 then\n    result = result .. '0'\n  end\n  return result\nend",
  "  local sum = 0\n  local i = 1\n  while i <= N do\n    sum = sum + math.floor((N\
    \ % i) / 2)\n    i = i + 1\n  end\n  return sum\nend", "  local s = ''\n  while\
    \ N > 0 do\n    local t = math.floor(math.log2(N))\n    s = s .. tostring(N %\
    \ 2^(t - 1))\n    N = N / 2^(t - 1)\n  end\n  return s\nend", "  local s = ''\n\
    \  while N > 0 do\n    local digit = math.floor(math.log2(N))\n    s = string.format('%s%d',\
    \ s, digit)\n    N = N - math.pow(10, digit)\n  end\n  return s\nend", "    local\
    \ s = ''\n    local i = 0\n    while i < N do\n        local t = math.floor(math.pow(10,\
    \ i) * N)\n        s = s .. tostring(t % 2)\n        i = i + 1\n    end\n    return\
    \ s\nend", "  local s = ''\n  local n = 1\n  while n > 0 do\n    local m = math.floor(math.log(n,\
    \ 2))\n    s = s .. string.sub(tostring(N), m, m)\n    n = math.floor((N - m)\
    \ / 2)\n  end\n  return s\nend", "  local sum = 0\n  local i = 1\n  while i <=\
    \ N do\n    sum = sum + math.floor((N % i) / 2)\n    i = i + 1\n  end\n  return\
    \ sum\nend", "  local result = ''\n  local remainder = 0\n  while N > 0 do\n \
    \   remainder = N % 2\n    N = N / 2\n    result = string.format('%s%d', result,\
    \ remainder)\n  end\n  return result\nend", "  local s = ''\n  local n = 0\n \
    \ while N > 0 do\n    local digit = math.floor(math.log2(N))\n    local bin =\
    \ string.sub(tostring(N), digit, digit+1)\n    s = s .. bin\n    N = N / 2\n \
    \   n = n + 1\n  end\n  return s\nend", "    local s = ''\n    local carry = 0\n\
    \    local digit = 0\n    while N ~= 0 do\n        digit = N % 2\n        N =\
    \ N / 2\n        if digit == 1 then\n            s = s .. '1'\n        else\n\
    \            s = s .. '0'\n        end\n        carry = digit + carry\n    end\n\
    \    if carry > 0 then\n        s = s .. '1'\n    end\n    return s\nend", " \
    \   local ans = \"\"\n    for i = 1, N do\n        local bin = dec2bin(i)\n  \
    \      local sum = 0\n        for j = 1, #bin do\n            sum = sum + bin:sub(1,\
    \ j):byte()\n        end\n        ans = ans .. sum\n    end\n    return ans\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
