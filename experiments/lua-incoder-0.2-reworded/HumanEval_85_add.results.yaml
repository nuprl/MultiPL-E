language: lua
name: HumanEval_85_add
results:
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlv7c4at.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpqlv7c4at.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = lst:sub(1, lst:len()/2):map(function(x) return x\
    \ % 2 end)\n    local odd = lst:sub(1, lst:len()/2):map(function(x) return x %\
    \ 2 ~= 0 end)\n    return even:add(odd):sum()\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4q3wx955.lua:6:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp4q3wx955.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp4q3wx955.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  local odds = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(evens, lst[i])\n    else\n      table.insert(odds,\
    \ lst[i])\n    end\n  end\n  return table.concat(evens) + table.concat(odds)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwtlzp6w2.lua:21:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpwtlzp6w2.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:clone()\n  local odd = lst:clone()\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      even[i] = even[i] + odd[i]\n    end\n\
    \    odd[i] = 0\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1hpph4x.lua:6:\
    \ attempt to call method 'clone' (a nil value)\nstack traceback:\n\t/tmp/tmpq1hpph4x.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq1hpph4x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlv7c4at.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpqlv7c4at.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxov9xerm.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpxov9xerm.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len()/2):map(function(x)\n    return\
    \ x % 2\n  end)\n  local odd = lst:sub(1, lst:len()/2):map(function(x)\n    return\
    \ not x % 2\n  end)\n  return even:add(odd)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93emnfr1.lua:6:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp93emnfr1.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp93emnfr1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  local even_index = 0\n  local\
    \ odd_index = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even = even\
    \ + lst[i]\n      even_index = even_index + 1\n    else\n      odd = odd + lst[i]\n\
    \      odd_index = odd_index + 1\n    end\n  end\n  return even, even_index, odd,\
    \ odd_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9phdyjzm.lua:26:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp9phdyjzm.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  local even_index = 0\n  local\
    \ odd_index = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      even = even\
    \ + lst[i]\n      even_index = even_index + 1\n    else\n      odd = odd + lst[i]\n\
    \      odd_index = odd_index + 1\n    end\n  end\n  return even, even_index, odd,\
    \ odd_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9phdyjzm.lua:26:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp9phdyjzm.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:select( function(x) return x % 2 == 0 end )\n \
    \ local odd = lst:select( function(x) return x % 2 == 1 end )\n  return even:sum()\
    \ + odd:sum()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmr5t46gz.lua:6:\
    \ attempt to call method 'select' (a nil value)\nstack traceback:\n\t/tmp/tmpmr5t46gz.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpmr5t46gz.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlv7c4at.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpqlv7c4at.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxov9xerm.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpxov9xerm.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len()/2):map(function(x) return x %\
    \ 2 end)\n  local odd = lst:sub(1, lst:len()/2):map(function(x) return not x %\
    \ 2 end)\n  return even:add(odd)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjm3bizru.lua:6:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpjm3bizru.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpjm3bizru.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:clone()\n  local odd = lst:clone()\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      even[i] = even[i] + odd[i]\n    end\n\
    \    odd[i] = 0\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1hpph4x.lua:6:\
    \ attempt to call method 'clone' (a nil value)\nstack traceback:\n\t/tmp/tmpq1hpph4x.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq1hpph4x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even, odd = {}, {}\n    for i = 1, #lst do\n        if i\
    \ % 2 == 0 then\n            even[#even+1] = lst[i]\n        else\n          \
    \  odd[#odd+1] = lst[i]\n        end\n    end\n    return even[#even] + odd[#odd]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8orhi6_l.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp8orhi6_l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = add(even)\n  odd = add(odd)\n  return #even + #odd\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplrbscbs7.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmplrbscbs7.lua:14: in function 'add'\n\
    \t/tmp/tmplrbscbs7.lua:14: in function 'add'\n\t/tmp/tmplrbscbs7.lua:14: in function\
    \ 'add'\n\t/tmp/tmplrbscbs7.lua:14: in function 'add'\n\t/tmp/tmplrbscbs7.lua:14:\
    \ in function 'add'\n\t/tmp/tmplrbscbs7.lua:14: in function 'add'\n\t/tmp/tmplrbscbs7.lua:14:\
    \ in function 'add'\n\t/tmp/tmplrbscbs7.lua:14: in function 'add'\n\t/tmp/tmplrbscbs7.lua:14:\
    \ in function 'add'\n\t/tmp/tmplrbscbs7.lua:14: in function 'add'\n\t...\n\nRan\
    \ 1 tests in 0.400 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  local odd  = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cwumsn4.lua:21:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp5cwumsn4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub(\"^%d+$\", function(x)\n    return x:sub(1,\
    \ x:len()-1)\n  end)\n  local odd = lst:gsub(\"^%d+$\", function(x)\n    return\
    \ x:sub(1, x:len()-1)\n  end)\n  local even = even:gsub(\"%d+\", function(x)\n\
    \    return x:sub(2, x:len()-1)\n  end)\n  local odd = odd:gsub(\"%d+\", function(x)\n\
    \    return x:sub(2, x:len()-1)\n  end)\n  return even .. \"-\" .. odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiddoy6al.lua:6:\
    \ attempt to call method 'gsub' (a nil value)\nstack traceback:\n\t/tmp/tmpiddoy6al.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpiddoy6al.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub('%d+', function(n) return n end):gsub('%d*$',\
    \ ''):gsub('%d*%d*$', ''):gsub('%d*%d*%d*$', '')\n  return lst:gsub('%d+', function(n)\
    \ return n end):gsub('%d*$', ''):gsub('%d*%d*$', ''):gsub('%d*%d*%d*$', '')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptxorp65i.lua:6:\
    \ attempt to call method 'gsub' (a nil value)\nstack traceback:\n\t/tmp/tmptxorp65i.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmptxorp65i.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = 0\n    local odd = 0\n    local sum = 0\n    for\
    \ i = 1, #lst do\n        if i % 2 == 0 then\n            even = even + lst[i]\n\
    \        else\n            odd = odd + lst[i]\n        end\n    end\n    sum =\
    \ even + odd\n    return sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpr9khu03k.lua:23:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpr9khu03k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len()/2):map(function(x)\n    return\
    \ x:mod(2)\n  end)\n  local odd = lst:sub(1, lst:len()/2):map(function(x)\n  \
    \  return x:mod(2)\n  end)\n  local evenSum = even:sum()\n  local oddSum = odd:sum()\n\
    \  return evenSum + oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzrt4oh9x.lua:6:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpzrt4oh9x.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpzrt4oh9x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  local odd  = {}\n  for i = 1, #lst do\n    if\
    \ i % 2 == 0 then\n      table.insert(even, lst[i])\n    else\n      table.insert(odd,\
    \ lst[i])\n    end\n  end\n  return table.concat(even) + table.concat(odd)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cwumsn4.lua:21:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp5cwumsn4.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = lst:gsub(\"^%s*(.-)%s*$\", \"%1\")\n    local odd\
    \ = lst:gsub(\"^%s*(.-)%s*$\", \"%2\")\n    local result = even\n    for i = 1,\
    \ #odd do\n        if i % 2 == 1 then\n            result = result .. \" + \"\
    \ .. odd[i]\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3yh_z4cy.lua:6:\
    \ attempt to call method 'gsub' (a nil value)\nstack traceback:\n\t/tmp/tmp3yh_z4cy.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp3yh_z4cy.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 0 then\n      even = even + 1\n    else\n      odd = odd\
    \ + 1 -- odd indices are at odd indices\n    end\n    sum = sum + lst[i]\n  end\n\
    \  return sum + even + odd\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgv41yonc.lua:23:\
    \ expected: 88, actual: 94\nstack traceback:\n\t/tmp/tmpgv41yonc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = unpack(lst)\n  local sum = 0\n  for i = 1, #odd\
    \ do\n    if even[i] then\n      sum = sum + even[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9npq2kh.lua:8:\
    \ attempt to get length of local 'odd' (a number value)\nstack traceback:\n\t\
    /tmp/tmpx9npq2kh.lua:8: in function 'candidate'\n\t/tmp/tmpx9npq2kh.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = add(even)\n  odd = add(odd)\n  local sum = 0\n  for\
    \ i = 1, #even do\n    sum = sum + even[i]\n  end\n  for i = 1, #odd do\n    sum\
    \ = sum + odd[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqe0sy6z.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\
    \t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function\
    \ 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14:\
    \ in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14:\
    \ in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14:\
    \ in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t...\n\nRan\
    \ 1 tests in 0.390 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = 0\n    local odd = 0\n    for i = 1, #lst do\n  \
    \      if i % 2 == 0 then\n            even = even + lst[i]\n        else\n  \
    \          odd = odd + lst[i]\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a5gjaxe.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0a5gjaxe.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len()/2):map(function(x)\n    return\
    \ x:odd()\n  end)\n  local odd = lst:sub(1, lst:len()/2):map(function(x)\n   \
    \ return x:even()\n  end)\n  return even:add(odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0kt3fszt.lua:6:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp0kt3fszt.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp0kt3fszt.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:select( function(x)\n    return x % 2 == 0\n  end)\n\
    \  local odd = lst:select( function(x)\n    return x % 2 == 1\n  end)\n  local\
    \ sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n  end\n  for i = 1,\
    \ #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpio20jk_k.lua:6:\
    \ attempt to call method 'select' (a nil value)\nstack traceback:\n\t/tmp/tmpio20jk_k.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpio20jk_k.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd\
    \ = odd + lst[i]\n    end\n  end\n  sum = even + odd\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ex7ue85.lua:23:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp5ex7ue85.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxov9xerm.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpxov9xerm.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even, odd = {}, {}\n    for i = 1, #lst do\n        if i\
    \ % 2 == 0 then\n            even[#even+1] = lst[i]\n        else\n          \
    \  odd[#odd+1] = lst[i]\n        end\n    end\n    return even[#even] + odd[#odd]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8orhi6_l.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp8orhi6_l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = unpack(lst)\n  local sum = 0\n  for i = 1, #odd\
    \ do\n    if even[i] then\n      sum = sum + even[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9npq2kh.lua:8:\
    \ attempt to get length of local 'odd' (a number value)\nstack traceback:\n\t\
    /tmp/tmpx9npq2kh.lua:8: in function 'candidate'\n\t/tmp/tmpx9npq2kh.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:clone()\n  local odd = lst:clone()\n  for i = 1,\
    \ #lst do\n    if i % 2 == 0 then\n      even[i] = even[i] + odd[i]\n    end\n\
    \    odd[i] = 0\n  end\n  return even\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1hpph4x.lua:6:\
    \ attempt to call method 'clone' (a nil value)\nstack traceback:\n\t/tmp/tmpq1hpph4x.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpq1hpph4x.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlv7c4at.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpqlv7c4at.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlv7c4at.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpqlv7c4at.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = unpack(lst)\n  local sum = 0\n  for i = 1, #odd\
    \ do\n    if even[i] then\n      sum = sum + even[i]\n    end\n  end\n  return\
    \ sum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx9npq2kh.lua:8:\
    \ attempt to get length of local 'odd' (a number value)\nstack traceback:\n\t\
    /tmp/tmpx9npq2kh.lua:8: in function 'candidate'\n\t/tmp/tmpx9npq2kh.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub(\"^%s*(%d+)$\", \"%1\")\n  local odd = lst:gsub(\"\
    ^%s*(%d+)$\", \"%2\")\n  return even + math.abs(odd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7cbry9_3.lua:6:\
    \ attempt to call method 'gsub' (a nil value)\nstack traceback:\n\t/tmp/tmp7cbry9_3.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp7cbry9_3.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = add(even)\n  odd = add(odd)\n  return even[#even] +\
    \ odd[#odd]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdif_qxv3.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpdif_qxv3.lua:14: in function 'add'\n\
    \t/tmp/tmpdif_qxv3.lua:14: in function 'add'\n\t/tmp/tmpdif_qxv3.lua:14: in function\
    \ 'add'\n\t/tmp/tmpdif_qxv3.lua:14: in function 'add'\n\t/tmp/tmpdif_qxv3.lua:14:\
    \ in function 'add'\n\t/tmp/tmpdif_qxv3.lua:14: in function 'add'\n\t/tmp/tmpdif_qxv3.lua:14:\
    \ in function 'add'\n\t/tmp/tmpdif_qxv3.lua:14: in function 'add'\n\t/tmp/tmpdif_qxv3.lua:14:\
    \ in function 'add'\n\t/tmp/tmpdif_qxv3.lua:14: in function 'add'\n\t...\n\nRan\
    \ 1 tests in 0.390 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlv7c4at.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpqlv7c4at.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd\
    \ = odd + lst[i]\n    end\n  end\n  sum = even + odd\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ex7ue85.lua:23:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp5ex7ue85.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1,lst:len()/2):map(function(x)\n    return\
    \ x:mod(2)\n  end)\n  local odd = lst:sub(1,lst:len()/2):map(function(x)\n   \
    \ return x:mod(2)\n  end)\n  local result = even:add(odd)\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa7gwzk8j.lua:6:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmpa7gwzk8j.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpa7gwzk8j.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local evens = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(evens, lst[i])\n    end\n  end\n  return table.concat(evens)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqlv7c4at.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpqlv7c4at.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even, odd = {}, {}\n    for i = 1, #lst do\n        if i\
    \ % 2 == 0 then\n            even[#even+1] = lst[i]\n        else\n          \
    \  odd[#odd+1] = lst[i]\n        end\n    end\n    return even[#even] + odd[#odd]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8orhi6_l.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp8orhi6_l.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub(\"^%s*(.-)%s*$\", \"%1\")\n  local odd = lst:gsub(\"\
    ^%s*(.-)%s*$\", \"%2\")\n  return even + odd\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgl5v9a5u.lua:6:\
    \ attempt to call method 'gsub' (a nil value)\nstack traceback:\n\t/tmp/tmpgl5v9a5u.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpgl5v9a5u.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = add(even)\n  odd = add(odd)\n  return even+odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiada6_w8.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpiada6_w8.lua:14: in function 'add'\n\
    \t/tmp/tmpiada6_w8.lua:14: in function 'add'\n\t/tmp/tmpiada6_w8.lua:14: in function\
    \ 'add'\n\t/tmp/tmpiada6_w8.lua:14: in function 'add'\n\t/tmp/tmpiada6_w8.lua:14:\
    \ in function 'add'\n\t/tmp/tmpiada6_w8.lua:14: in function 'add'\n\t/tmp/tmpiada6_w8.lua:14:\
    \ in function 'add'\n\t/tmp/tmpiada6_w8.lua:14: in function 'add'\n\t/tmp/tmpiada6_w8.lua:14:\
    \ in function 'add'\n\t/tmp/tmpiada6_w8.lua:14: in function 'add'\n\t...\n\nRan\
    \ 1 tests in 0.390 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = unpack(lst)\n  local evenSum = 0\n  local oddSum\
    \ = 0\n  for i = 1, #lst do\n    if i % 2 == 0 then\n      evenSum = evenSum +\
    \ lst[i]\n    else\n      oddSum = oddSum + lst[i]\n    end\n  end\n  return evenSum\
    \ + oddSum\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqddiwsr.lua:22:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmphqddiwsr.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxov9xerm.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpxov9xerm.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:gsub('%d+', function(n) return tonumber(n) end):gsub('%d*$',\
    \ ''):gsub('%d*%d*$', ''):gsub('%d*%d*%d*$', '')\n  return lst:gsub('%d+', function(n)\
    \ return tonumber(n) + tonumber(even) end):gsub('%d*$', ''):gsub('%d*%d*$', ''):gsub('%d*%d*%d*$',\
    \ '')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add\n    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwyyovsza.lua:6:\
    \ attempt to call method 'gsub' (a nil value)\nstack traceback:\n\t/tmp/tmpwyyovsza.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmpwyyovsza.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = lst:sub(1, lst:len()/2):map(function(x)\n    return\
    \ x % 2\n  end)\n  local odd = lst:sub(1, lst:len()/2):map(function(x)\n    return\
    \ not x % 2\n  end)\n  return even:add(odd)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp93emnfr1.lua:6:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp93emnfr1.lua:6:\
    \ in function 'candidate'\n\t/tmp/tmp93emnfr1.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxov9xerm.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpxov9xerm.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n    local even = 0\n    local odd = 0\n    for i = 1, #lst do\n  \
    \      if i % 2 == 0 then\n            even = even + lst[i]\n        else\n  \
    \          odd = odd + lst[i]\n        end\n    end\n    return even, odd\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0a5gjaxe.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmp0a5gjaxe.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  local sum = 0\n  for i = 1, #lst\
    \ do\n    if i % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd\
    \ = odd + lst[i]\n    end\n  end\n  sum = even + odd\n  return sum\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n   \
    \ lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4, 5,\
    \ 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4,\
    \ 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ex7ue85.lua:23:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmp5ex7ue85.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  even = add(even)\n  odd = add(odd)\n  local sum = 0\n  for\
    \ i = 1, #even do\n    sum = sum + even[i]\n  end\n  for i = 1, #odd do\n    sum\
    \ = sum + odd[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvqe0sy6z.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\
    \t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function\
    \ 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14:\
    \ in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14:\
    \ in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14:\
    \ in function 'add'\n\t/tmp/tmpvqe0sy6z.lua:14: in function 'add'\n\t...\n\nRan\
    \ 1 tests in 0.390 seconds, 0 successes, 1 error\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return #even + #odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps92fmdkt.lua:20:\
    \ expected: 88, actual: 2\nstack traceback:\n\t/tmp/tmps92fmdkt.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6uik7ne.lua:20:\
    \ expected: 88, actual: {88}\nstack traceback:\n\t/tmp/tmps6uik7ne.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  return even[#even] + odd[#odd]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4,\
    \ 88}), 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpms5arqds.lua:20:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpms5arqds.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even, odd = {}, {}\n  for i = 1, #lst do\n    if i % 2 ==\
    \ 0 then\n      even[#even+1] = lst[i]\n    else\n      odd[#odd+1] = lst[i]\n\
    \    end\n  end\n  local sum = 0\n  for i = 1, #even do\n    sum = sum + even[i]\n\
    \  end\n  for i = 1, #odd do\n    sum = sum + odd[i]\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfdp7yr0.lua:27:\
    \ expected: 88, actual: 92\nstack traceback:\n\t/tmp/tmpcfdp7yr0.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = {}\n  for i = 1, #lst do\n    if i % 2 == 0 then\n\
    \      table.insert(even, lst[i])\n    end\n  end\n  return table.concat(even)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add\n\
    \    lu.assertEquals(candidate({4, 88}), 88)\n    lu.assertEquals(candidate({4,\
    \ 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4, 0, 6, 7}), 0)\n \
    \   lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxov9xerm.lua:18:\
    \ expected: 88, actual: \"88\"\nstack traceback:\n\t/tmp/tmpxov9xerm.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
- exit_code: 1
  program: "-- Given a non-empty table of integers lst. add the even elements that\
    \ are at odd indices..\n-- Examples:\n-- >>> add({4, 2, 6, 7})\n-- 2\nlocal function\
    \ add(lst)\n  local even = 0\n  local odd = 0\n  for i = 1, #lst do\n    if i\
    \ % 2 == 0 then\n      even = even + lst[i]\n    else\n      odd = odd + lst[i]\n\
    \    end\n  end\n  return even, odd\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add\n    lu.assertEquals(candidate({4, 88}),\
    \ 88)\n    lu.assertEquals(candidate({4, 5, 6, 7, 2, 122}), 122)\n    lu.assertEquals(candidate({4,\
    \ 0, 6, 7}), 0)\n    lu.assertEquals(candidate({4, 4, 6, 8}), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv8gtoodl.lua:22:\
    \ expected: 122, actual: 134\nstack traceback:\n\t/tmp/tmpv8gtoodl.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750488
