name: HumanEval_103_rounded_avg
language: lua
prompt: "-- You are given two positive integers n and m, and your task is to compute\
  \ the\n-- average of the integers from n through m (including n and m). \n-- Round\
  \ the answer to the nearest integer and convert that to binary.\n-- If n is greater\
  \ than m, return -1.\n-- Example:\n-- >>> rounded_avg(1, 5)\n-- '0b11'\n-- >>> rounded_avg(7,\
  \ 5)\n-- -1\n-- >>> rounded_avg(10, 20)\n-- '0b1111'\n-- >>> rounded_avg(20, 33)\n\
  -- '0b11010'\nlocal function rounded_avg(n, m)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rounded_avg\n\
  \    lu.assertEquals(candidate(1, 5), '0b11')\n    lu.assertEquals(candidate(7,\
  \ 13), '0b1010')\n    lu.assertEquals(candidate(964, 977), '0b1111001010')\n   \
  \ lu.assertEquals(candidate(996, 997), '0b1111100100')\n    lu.assertEquals(candidate(560,\
  \ 851), '0b1011000010')\n    lu.assertEquals(candidate(185, 546), '0b101101110')\n\
  \    lu.assertEquals(candidate(362, 496), '0b110101101')\n    lu.assertEquals(candidate(350,\
  \ 902), '0b1001110010')\n    lu.assertEquals(candidate(197, 233), '0b11010111')\n\
  \    lu.assertEquals(candidate(7, 5), -1)\n    lu.assertEquals(candidate(5, 1),\
  \ -1)\n    lu.assertEquals(candidate(5, 5), '0b101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if m > n then\n    return -1\n  end\n  local sum = 0\n  local count\
    \ = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return\
    \ tostring(sum / count)\nend", "  if m == 0 then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  return string.format('0b%b', sum / count)\nend", "  if\
    \ n > m then\n    return -1\n  end\n  local sum = 0\n  for i = n, m do\n    sum\
    \ = sum + i\n  end\n  return tostring(sum / 2)\nend", "  if n > m then\n    return\
    \ -1\n  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  return \"0b\" .. tostring(sum / count)\n\
    end", "  if m == 0 then\n    return -1\n  end\n  local sum = 0\n  for i = n, m\
    \ do\n    sum = sum + i\n  end\n  return math.floor(sum / 2)\nend", "  local nm\
    \ = math.floor(n/m)*m\n  if nm > m then\n    return -1\n  end\n  return string.format('0b%0*d',\
    \ math.ceil(nm/m), nm%m)\nend", "  local nn = math.floor(n)\n  local mm = math.floor(m)\n\
    \  if mm > n then\n    return -1\n  end\n  return string.format('0b%b', nn + (mm\
    \ - nn) * 0.5)\nend", "  local nm, m, nr, mr = n, m, 0, 0\n  while nm <= m do\n\
    \    nr, mr = nr, nm % 10 + mr\n    nm = math.floor(nm/10)\n  end\n  return nr\
    \ < mr ? -1 : nr\nend", "  if m > n then\n    return -1\n  end\n  local sum =\
    \ 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  local avg = sum / count\n  return tostring(avg)\nend", "  if m\
    \ > n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for i\
    \ = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return string.format('0b%b',\
    \ sum / count)\nend", "  if n > m then\n    return -1\n  end\n  local sum = 0\n\
    \  for i = n, m do\n    sum = sum + i\n  end\n  return '0b' .. string.char(sum\
    \ / 2)\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  local avg = sum / count\n  local bin = string.format(\"%b\", avg)\n  return\
    \ bin\nend", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local\
    \ count = 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n\
    \  local avg = sum / count\n  local bin = string.format(\"%b\", avg)\n  return\
    \ bin\nend", "  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum =\
    \ sum + i\n    count = count + 1\n  end\n  if count > 0 then\n    return string.format('0b%b',\
    \ sum / count)\n  else\n    return -1\n  end\nend", "  if m == 0 then\n    return\
    \ -1\n  end\n  local nn = math.floor(n)\n  local mm = math.floor(m)\n  local sum\
    \ = 0\n  local count = 0\n  for i = nn,mm do\n    sum = sum + i\n    count = count\
    \ + 1\n  end\n  if count == 0 then\n    return -1\n  end\n  local result = sum\
    \ / count\n  return tostring(result)\nend", "  if m > n then\n    return -1\n\
    \  end\n  local sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum +\
    \ i\n    count = count + 1\n  end\n  return string.format('0b%b', sum / count)\n\
    end", "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local count =\
    \ 0\n  for i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  local\
    \ avg = sum / count\n  local bin = string.format('%b', avg)\n  return bin\nend",
  "  if m == 0 then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  for\
    \ i = n, m do\n    sum = sum + i\n    count = count + 1\n  end\n  return \"0b\"\
    \ .. tostring(sum / count)\nend", "  if m > n then\n    return -1\n  end\n  local\
    \ sum = 0\n  local count = 0\n  for i = n, m do\n    sum = sum + i\n    count\
    \ = count + 1\n  end\n  local avg = sum / count\n  return tostring(avg)\nend",
  "  if m > n then\n    return -1\n  end\n  local sum = 0\n  local count = 0\n  while\
    \ n <= m do\n    sum = sum + n\n    n = n + 1\n    count = count + 1\n  end\n\
    \  return '0b' .. tostring(sum / count)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
