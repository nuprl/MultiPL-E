name: HumanEval_112_reverse_delete
language: lua
prompt: "-- Task\n-- We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n-- then check if the result\
  \ string is palindrome.\n-- A string is called palindrome if it reads the same backward\
  \ as forward.\n-- You should return a table containing the result string and true/false\
  \ for the check.\n-- Example\n-- >>> reverse_delete('abcde', 'ae')\n-- {'bcd', false}\n\
  -- >>> reverse_delete('abcdef', 'b')\n-- {'acdef', false}\n-- >>> reverse_delete('abcdedcba',\
  \ 'ab')\n-- {'cdedc', true}\nlocal function reverse_delete(s, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
  \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
  \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
  \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
  \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
  \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
  \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
  \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  local i = 0\n  while i < #s do\n    if s[i]\
    \ == c then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  local reverse = table.concat(result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, '')\n  table.insert(reverse, #reverse)\n  table.insert(reverse,\
    \ false)\n  return reverse\nend", "  local result = {}\n  local i = 0\n  while\
    \ i < #s do\n    local j = #c\n    while j > 0 do\n      if s[i] == c[j] then\n\
    \        table.insert(result, s[i])\n        table.insert(result, c[j])\n    \
    \    j = j - 1\n      else\n        break\n      end\n    end\n    i = i + 1\n\
    \  end\n  if #result == 0 then\n    return {'', true}\n  end\n  local reverse\
    \ = table.concat(result)\n  table.insert(reverse, '')\n  local reversed = table.concat(result)\n\
    \  table.insert(reversed, '')\n  local reversed = table.concat(result)\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')", "  local result = {}\n  local i = 1\n  while\
    \ i <= #s do\n    if s[i] == c then\n      result[#result + 1] = c\n      i =\
    \ i + 1\n    else\n      result[#result + 1] = s[i]\n      i = i + 1\n    end\n\
    \  end\n  if #result == 1 then\n    result[1] = false\n  end\n  return result\n\
    end", "  local result = {}\n  local i = 0\n  while i < #s do\n    local char =\
    \ s[i]\n    local j = #c\n    while j > 0 do\n      if char == c[j] then\n   \
    \     table.insert(result, char)\n        j = j - 1\n      else\n        break\n\
    \      end\n    end\n    i = i + 1\n  end\n  if #result == 0 then\n    return\
    \ {'', true}\n  end\n  table.sort(result)\n  local reverse = table.concat(result)\n\
    \  if reverse == s then\n    return {'', true}\n  end\n  return {'{'..reverse..'}',\
    \ false}\nend", "  local result = {}\n  local index = 1\n  while index <= #s do\n\
    \    local char = string.sub(s,index,index)\n    if char == c then\n      table.insert(result,\
    \ char)\n      index = index + 1\n    else\n      index = index + 1\n    end\n\
    \  end\n  if #result > 0 then\n    table.insert(result, string.sub(s,index,#s))\n\
    \  end\n  return result\nend", "  local result = {s, false}\n  local i = 0\n \
    \ while i < #s do\n    if s[i] == c then\n      result[#result + 1] = \"\"\n \
    \     i = i + 1\n    else\n      result[#result + 1] = s[i]\n      i = i + 1\n\
    \    end\n  end\n  result[#result + 1] = \"\"\n  return result\nend", "  local\
    \ result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i] ==\
    \ c then\n      table.insert(result, s[i])\n    else\n      is_palindrome = false\n\
    \    end\n  end\n  if is_palindrome then\n    table.insert(result, s[#s])\n  end\n\
    \  return result, is_palindrome\nend", "  local result = {}\n  local i = #s\n\
    \  while i ~= 0 do\n    local char = s[i - 1]\n    if char == c then\n      i\
    \ = i - 1\n    else\n      result[#result + 1] = char\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  table.sort(result)\n  local reversed\
    \ = table.concat(result)\n  if reversed == s then\n    return {'', true}\n  end\n\
    \  return {'{'..reversed..'}', false}\nend", "  -- base case\n  if #s == 0 then\n\
    \    return { s, true }\n  end", "  local result = {}\n  local i = 0\n  while\
    \ i <= #s do\n    local char = s[i]\n    if char == c then\n      i = i + 1\n\
    \    else\n      result[#result + 1] = char\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  reverse = reverse.reverse\n  if reverse == s then\n    return {'', true}\n\
    \  end\n  return {'', false}\nend", "  local result = {}\n  local index = 1\n\
    \  while index <= #s do\n    if s[index] == c then\n      index = index + 1\n\
    \    else\n      result[#result + 1] = s[index]\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  result[#result + 1] = ''\n  return\
    \ result\nend", "  -- Base case\n  if #s == 0 then\n    return { s, true }\n \
    \ end", "  local result = {}\n  local i = 0\n  local j = 1\n  while i <= #s do\n\
    \    if s[i]:sub(1, #c) == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      j = j + 1\n    end\n  end\n  if #result == 1 then\n \
    \   return { result[1], true }\n  else\n    return { result, false }\n  end\n\
    end", "  -- base case\n  if #s == 0 then\n    return { s, true }\n  end", "  local\
    \ result = {}\n  local is_palindrome = true\n  local i = 0\n  local j = #s - 1\n\
    \  while i <= j do\n    if s[i] == c then\n      i = i + 1\n      j = j - 1\n\
    \    else\n      is_palindrome = false\n    end\n    result[#result + 1] = (s[i])\n\
    \  end\n  if is_palindrome then\n    result[#result + 1] = s[i]\n  end\n  return\
    \ result\nend", "  local result = {}\n  local index = 1\n  while index <= #s do\n\
    \    if s[index] == c then\n      index = index + 1\n    else\n      result[#result\
    \ + 1] = s[index]\n    end\n  end\n  if #result == 0 then\n    result[1] = true\n\
    \  end\n  return result\nend", "  local result = {}\n  local i = 0\n  while i\
    \ < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n \
    \   return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n", "  local result = {}\n  local index = 1\n  while index <= #s do\n\
    \    if s[index] == c then\n      index = index + 1\n    else\n      result[#result\
    \ + 1] = s[index]\n    end\n  end\n  result[#result + 1] = '#'\n  return result\n\
    end", "  local result = {s, false}\n  local index = 1\n  while index <= #s do\n\
    \    if s[index] == c then\n      index = index + 1\n    else\n      result[1]\
    \ = result[1] .. s[index] -- append the character\n      result[2] = true\n  \
    \  end\n  end\n  return result\nend", "  local result = {}\n  local i = 0\n  local\
    \ j = 1\n  while i <= #s - 1 do\n    if s[i]:sub(1, #c) == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  if #result\
    \ == 1 then\n    return { result[1], true }\n  else\n    return { result, false\
    \ }\n  end\nend", "  -- Base case\n  if #s == 0 then\n    return { s, true }\n\
    \  end\n  -- Recursive case\n  local result = reverse_delete(s:sub(1, #s - 1),\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- Base case\n\
    \  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n \
    \   return { result[1], false }\n  end\n  -- Base case\n  local result = reverse_delete(s:sub(1,\
    \ #s - 1), c)\n  if result[1] then\n    return { result[1], false }\n  end\n \
    \ -- Base case\n  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1]\
    \ then\n    return { result[1], false }\n  end\n  -- Base case\n  local result\
    \ = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- Base case\n  local result = reverse_delete(s:sub(1, #s\
    \ - 1), c)\n  if result[1] then\n    return { result[1], false }\n  end\n  --\
    \ Base case\n  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1]\
    \ then\n    return { result[1], false }\n  end\n  -- Base case\n  local result\
    \ = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- Base case\n  local result = reverse_delete(s:sub(1, #s\
    \ - 1), c)\n  if result[1] then\n    return { result[1], false }\n  end\n  --\
    \ Base case\n  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1]\
    \ then\n    return { result[1], false }\n  end\n  -- Base case\n  local result\
    \ = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- Base case\n  local result = reverse_delete(s:sub(1, #s\
    \ - 1), c)\n  if result[1] then\n    return { result[1], false }\n  end\n  --\
    \ Base case\n  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1]\
    \ then\n    return { result[1], false }\n  end\n  -- Base case\n  local result\
    \ = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- Base case\n  local result = reverse_delete(s:sub(1, #s\
    \ - 1), c)\n  if result[1] then\n    return { result[1], false }", "  local result\
    \ = {}\n  local index = 0\n  while true do\n    local char = string.sub(s,index,index)\n\
    \    if char == c then\n      table.insert(result, char)\n      index = index\
    \ + 1\n    else\n      index = index + 1\n    end\n    if index > #s then\n  \
    \    break\n    end\n  end\n  local reverse = table.concat(result)\n  if reverse\
    \ == s then\n    return { reverse, true}\n  else\n    return { reverse, false}\n\
    \  end\nend", "  local result = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ char = s[i]\n    if char == c then\n      i = i + 1\n    else\n      result[#result\
    \ + 1] = char\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  result[#result + 1] = ''\n  return result\nend", "  local result = {}\n\
    \  local index = 1\n  local len = #s\n  while index <= len do\n    local char\
    \ = string.sub(s,index,index)\n    if char == c then\n      table.insert(result,\
    \ char)\n      index = index + 1\n    else\n      index = index + 1\n    end\n\
    \  end\n  if #result == 0 then\n    return {'', true}\n  end\n  local reverse\
    \ = result[1]\n  local reverseIndex = 1\n  while reverseIndex <= #reverse do\n\
    \    if reverse[reverseIndex] == reverse[reverseIndex + 1] then\n      reverse\
    \ = reverse[reverseIndex]:reverse(reverseIndex):reverse(reverseIndex + 1)\n  \
    \    reverseIndex = reverseIndex + 1\n    else\n      reverse = reverse[reverseIndex]:reverse(reverseIndex):reverse(reverseIndex\
    \ + 1)\n      reverseIndex = reverseIndex + 1\n    end\n  end\n  table.insert(result,\
    \ reverse)\n  return result\nend", "    local result = {s, false}\n    local i\
    \ = 0\n    local j = #s - 1\n    while i <= j do\n        if s[i] == c then\n\
    \            i = i + 1\n        elseif s[j] == c then\n            j = j - 1\n\
    \        else\n            result[#result + 1] = c\n            i = i + 1\n  \
    \          j = j - 1\n        end\n    end\n    if i == j then\n        result[#result\
    \ + 1] = c\n    end\n    return result\nend", "  local result = {}\n  local i\
    \ = 0\n  local j = 1\n  while i <= #s do\n    if s[i] == c then\n      j = j -\
    \ 1\n    else\n      table.insert(result, s[i])\n      i = i + 1\n    end\n  end\n\
    \  if j > 0 then\n    table.insert(result, s[j])\n  end\n  return { result = table.concat(result),\
    \ check = j == 0 }\nend", "  local results = {}\n  local i = 0\n  while i < #s\
    \ do\n    local j = #c\n    while j > 0 do\n      if s[i] ~= c[j] then\n     \
    \   results[i] = s[i]\n        break -- break the inner loop\n      end\n    \
    \  j = j - 1\n    end\n    i = i + 1\n  end\n  if i == #s then\n    results[i]\
    \ = s[i]\n  end\n  return results\nend", "  local result = {}\n  local i = 0\n\
    \  while i < #s do\n    local j = #c\n    while j > 0 do\n      if s[i] == c[j]\
    \ then\n        table.insert(result, s[i])\n        table.insert(result, c[j])\n\
    \        j = j - 1\n      else\n        break\n      end\n    end\n    i = i +\
    \ 1\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n  local reverse\
    \ = table.concat(result)\n  table.insert(reverse, '')\n  local reversed = table.concat(result)\n\
    \  table.insert(reversed, reverse)\n  local reversed = table.concat(result)\n\
    \  table.insert(reversed, reverse)\n  local reversed = table.concat(result)\n\
    \  table.insert(reversed, reverse)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, ", "    local result\
    \ = {}\n    local i = 0\n    local j = 1\n    while i <= #s - 1 do\n        if\
    \ s[i] == c then\n            j = j + 1\n        else\n            result[#result\
    \ + 1] = s[i]\n        end\n        i = i + 1\n    end\n    if j > 1 then\n  \
    \      result[#result + 1] = s[j]\n    end\n    return { result = table.concat(result),\
    \ check = #result == 1 }\nend", "  local result = {}\n  local i = 0\n  while i\
    \ < #s do\n    local char = s[i]\n    if char == c then\n      i = i + 1\n   \
    \ else\n      result[#result + 1] = char\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  result[#result + 1] = ''\n  local reversed =\
    \ {}\n  local j = 1\n  while j < #result do\n    reversed[#reversed + 1] = result[j]\n\
    \    j = j + 1\n  end\n  local reversed_string = ''\n  local is_palindrome = true\n\
    \  for i = 1, #reversed do\n    if reversed[i] ~= reversed[i - 1] then\n     \
    \ is_palindrome = false\n    end\n    reversed_string = reversed_string .. reversed[i]\n\
    \  end\n  return {'' .. reversed_string, is_palindrome}\nend", "  -- We are given\
    \ two strings s and c, you have to deleted all the characters in s that are equal\
    \ to any character in c\n  -- then check if the result string is palindrome.\n\
    \  -- A string is called palindrome if it reads the same backward as forward.\n\
    \  -- You should return a table containing the result string and true/false for\
    \ the check.\n  -- Example\n  -- >>> reverse_delete('abcde', 'ae')\n  -- {'bcd',\
    \ false}\n  -- >>> reverse_delete('abcdef', 'b')\n  -- {'acdef', false}\n  --\
    \ >>> reverse_delete('abcdedcba', 'ab')\n  -- {'cdedc', true}\n  local function\
    \ reverse_delete(s, c)\n    local result = {}\n    local i = 0\n    local j =\
    \ 1\n    while i <= #s and j <= #c do\n      if s[i] ~= c[j] then\n        result[#result\
    \ + 1] = c[j]\n      end\n      i = i + 1\n      j = j + 1\n    end\n    if i\
    \ == #s then\n      result[#result + 1] = c[j]\n    end\n    if j == #c then\n\
    \      result[#result + 1] = c[i]\n    end\n    return result\n  end\n  -- We\
    \ are given two strings s and c, you have to deleted all the characters in s that\
    \ are equal to any character in c\n  -- then check if the result string is palindrome.\n\
    \  -- You should return a table containing the result string and true/false for\
    \ the check.\n  -- Example\n  -- >>> reverse_delete('abcde', 'ae')\n  -- {'bcd',\
    \ false}\n  -- >>> reverse_delete('abcdef', 'b')\n  -- {'acdef', false}\n  --\
    \ >>> reverse_delete('abcdedcba', 'ab')\n  -- {'cdedc', true}\n  return reverse_delete(s,\
    \ c) == reverse_delete(s[#s], c[#c])\nend", "    local result = {}\n    local\
    \ i = 0\n    local j = #s - 1\n    while i <= j do\n        if s[i] == c then\n\
    \            i = i + 1\n        elseif s[i] == c then\n            j = j - 1\n\
    \        else\n            result[#result + 1] = s[i]\n        end\n    end\n\
    \    if i == j then\n        result[#result + 1] = s[i]\n    end\n    return {\
    \ result = table.concat(result), check = i == j }\nend", "  local result = {}\n\
    \  local index = 0\n  while index <= #s do\n    local char = string.sub(s,index,index)\n\
    \    if char == c then\n      table.insert(result, char)\n      index = index\
    \ + 1\n    else\n      index = index + 1\n    end\n  end\n  if #result > 0 then\n\
    \    return { result = table.concat(result), true}\n  else\n    return { result\
    \ = table.concat(result), false}\n  end\nend", "  -- base case\n  if #s == 0 then\n\
    \    return { s, true }\n  end", "  local result = {}\n  local i = 1\n  while\
    \ i <= #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i\
    \ = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ '')\n  local reversed = table.concat(reverse)\n  if reversed == s then\n   \
    \ return {'', true}\n  end\n  return {'', false}\nend", "  local result = {}\n\
    \  local i = 0\n  while i < #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  table.sort(result)\n  local j = #result\n\
    \  while j > 0 do\n    if result[j-1] ~= result[j] then\n      break\n    end\n\
    \    j = j - 1\n  end\n  if j == 0 then\n    return {'', false}\n  end\n  local\
    \ reverse = table.concat(result)\n  table.sort(reverse)\n  if reverse == s then\n\
    \    return {'', true}\n  end\n  return {'', false}\nend", "  local result = {}\n\
    \  local i = 0\n  while i <= #s do\n    if s[i] == c then\n      result[#result\
    \ + 1] = s[i]\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if\
    \ #result == 0 then\n    return {'', true}\n  end\n  local reversed = {}\n  i\
    \ = #result - 1\n  while i >= 0 do\n    reversed[#reversed + 1] = result[i]\n\
    \    i = i - 1\n  end\n  local reversed_string = ''\n  for i = 1, #reversed do\n\
    \    reversed_string = reversed_string .. reversed[i]\n  end\n  if reversed_string\
    \ == reversed_string then\n    return {'', true}\n  end\n  return {'' .. reversed_string,\
    \ false}\nend", "  local result = {}\n  local i = 0\n  while i < #s do\n    local\
    \ j = i - 1\n    while j >= 0 and s[i] == c[j] do\n      j = j - 1\n    end\n\
    \    if j >= 0 then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n\
    \      break\n    end\n  end\n  if #result == #s then\n    return { result, true\
    \ }\n  else\n    return { result, false }\n  end\nend", "  local result = {}\n\
    \  local i = 0\n  local j = 1\n  while i <= #s - 1 do\n    if s[i] == c then\n\
    \      result[j] = s[i]\n      j = j + 1\n    else\n      i = i + 1\n    end\n\
    \  end\n  if j > 1 then\n    result[j] = s[i]\n  end\n  return result\nend", " \
    \ local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if\
    \ s[i] == c then\n      table.insert(result, s[i])\n    else\n      is_palindrome\
    \ = false\n    end\n  end\n  if is_palindrome then\n    table.insert(result, s[#s])\n\
    \  end\n  return result\nend", "  local result = {}\n  local i = 0\n  while i\
    \ < #s do\n    if s[i] == c then\n      i = i + 1\n    else\n      result[#result\
    \ + 1] = s[i]\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  result[#result + 1] = ''\n  return result\nend", "  local result = {}\n\
    \  local i = 0\n  while i < #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', false}\n  end\n  table.sort(result)\n  if #result\
    \ == 1 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  if reverse == s then\n    return {'', true}\n  end\n  return {'', false}\n\
    end", "    local result = {}\n    local i = 0\n    local j = 1\n    while i <=\
    \ #s - 1 do\n        if s[i] == c then\n            j = j + 1\n        else\n\
    \            result[#result + 1] = s[i]\n        end\n        i = i + 1\n    end\n\
    \    if j > 1 then\n        result[#result + 1] = s[j]\n    end\n    return {\
    \ result = table.concat(result), check = #result == 1 }\nend", "  local result\
    \ = {}\n  local index = 1\n  while index <= #s do\n    if s[index] == c then\n\
    \      index = index + 1\n    else\n      result[#result + 1] = s[index]\n   \
    \ end\n  end\n  if #result == 0 then\n    result[#result] = c\n  end\n  return\
    \ result\nend", "  local result = {}\n  local index = 0\n  while index <= #s do\n\
    \    local char = string.sub(s,index,index)\n    if char == c then\n      table.insert(result,\
    \ char)\n      index = index + 1\n    else\n      index = index + 1\n    end\n\
    \  end\n  if index > #s then\n    table.insert(result, string.sub(s,index,#s))\n\
    \  end\n  return result\nend", "  local result = {}\n  local i = 1\n  while i\
    \ <= #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n \
    \   return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ '')\n  local reversed = reverse\n  local i = 0\n  while i <= #s do\n    if s[i]\
    \ == c then\n      reversed = reversed..s[i]\n      i = i + 1\n    else\n    \
    \  reversed = reversed..s[i]\n      i = i + 1\n    end\n  end\n  if s == reversed\
    \ then\n    return {'', true}\n  end\n  return {'{'..reversed..'}', false}\nend",
  "  local result = {}\n  local i = 1\n  while i <= #s do\n    if s[i] == c then\n\
    \      table.insert(result, s[i])\n      i = i + 1\n    else\n      i = i + 1\n\
    \    end\n  end\n  if #result == #s then\n    return { result, true }\n  else\n\
    \    return { result, false }\n  end\nend", "  local result = {}\n  local i =\
    \ 0\n  while i < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n\
    \      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  local reversed = reversed:reverse()\n  if s == reversed then\n    return {'',\
    \ true}\n  end\n  return {'', false}\nend", "    local result = {}\n    local\
    \ i = 0\n    local j = 0\n    while i < #s and j < #c do\n        if s[i] == c[j]\
    \ then\n            i = i + 1\n            j = j + 1\n        else\n         \
    \   result[#result + 1] = c[j]\n            i = i + 1\n            j = j + 1\n\
    \        end\n    end\n    if i == #s then\n        result[#result + 1] = c[j]\n\
    \    end\n    return { result = table.concat(result), check = #result == #c }\n\
    end", "  local result = {}\n  local i = 0\n  while i < #s do\n    if s[i] == c\
    \ then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n      i =\
    \ i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n\
    \  local reverse = table.concat(result)\n  table.insert(reverse, '')\n  local\
    \ reversed = table.concat(result)\n  table.insert(reversed, reverse)\n  local\
    \ reversed = table.concat(result)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  ", "  local result = {}\n  local i = 0\n  while i < #s do\n   \
    \ local char = s[i]\n    if char == c then\n      i = i + 1\n    else\n      result[#result\
    \ + 1] = char\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  local reversed = table.concat(result)\n  reversed = reversed:reverse()\n\
    \  if s == reversed then\n    return {'', true}\n  end\n  return {'', false}\n\
    end", "  local result = {}\n  local i, j = 1, #s\n  while i <= j do\n    if s[i]\
    \ == c then\n      i = i + 1\n      j = j - 1\n    else\n      result[#result\
    \ + 1] = s[i]\n    end\n  end\n  if i == j then\n    result[#result + 1] = s[i]\n\
    \  end\n  return { result = table.concat(result), check = i == j }\nend", "  local\
    \ result = {}\n  local i = 0\n  while i <= #s do\n    if s[i] == c then\n    \
    \  table.insert(result, s[i])\n      i = i + 1\n    else\n      i = i + 1\n  \
    \  end\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n  table.sort(result)\n\
    \  local j = 1\n  while j < #result do\n    if result[j] != result[(j - 1)] then\n\
    \      return {'', false}\n    end\n    j = j + 1\n  end\n  return {'', true}\n\
    end", "  local result = {}\n  local index = 1\n  while index <= #s do\n    if\
    \ s[index] == c then\n      index = index + 1\n    else\n      result[#result\
    \ + 1] = s[index]\n    end\n  end\n  if #result == 0 then\n    result[#result]\
    \ = c\n  end\n  return result, #result == #result\nend", "    local result = {}\n\
    \    local i = 0\n    local j = 1\n    while i <= #s - 1 do\n        if s[i] ==\
    \ c then\n            j = j + 1\n        else\n            result[#result + 1]\
    \ = s[i]\n        end\n        i = i + 1\n    end\n    if j > 1 then\n       \
    \ result[#result + 1] = s[j]\n    end\n    return { result = table.concat(result),\
    \ check = #result == 1 }\nend", "  local result = {}\n  local i = #s\n  while\
    \ i ~= 0 do\n    local char = s[i]\n    if char == c then\n      i = i - 1\n \
    \   else\n      result[#result + 1] = char\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  local reversed = table.concat(result)\n\
    \  local reversed_length = #reversed\n  local reversed_start = #reversed\n  while\
    \ reversed_start > 0 do\n    local char = reversed[reversed_start - 1]\n    if\
    \ char == c then\n      reversed_start = reversed_start - 1\n    else\n      reversed_start\
    \ = reversed_start - 1\n      break\n    end\n  end\n  if reversed_start == 0\
    \ then\n    return {'', false}\n  end\n  local reversed_end = #reversed\n  while\
    \ reversed_end > 0 do\n    local char = reversed[reversed_end - 1]\n    if char\
    \ == c then\n      reversed_end = reversed_end - 1\n    else\n      reversed_end\
    \ = reversed_end - 1\n      break\n    end\n  end\n  if reversed_end == 0 then\n\
    \    return {'', false}\n  end\n  return {'', reversed_start < reversed_end}\n\
    end", "  local result = {}\n  local index = 1\n  while index <= #s do\n    if\
    \ s[index] == c then\n      index = index + 1\n    else\n      result[#result\
    \ + 1] = s[index]\n    end\n  end\n  if #result == 0 then\n    result[1] = s\n\
    \  end\n  return result\nend", "  local result = {s, false}\n  local i = 0\n \
    \ while i < #s do\n    if s[i] == c then\n      result[#result + 1] = \"\"\n \
    \     i = i + 1\n    else\n      result[#result + 1] = s[i]\n      i = i + 1\n\
    \    end\n  end\n  if #result == 1 then\n    result[#result + 1] = \"\"\n  end\n\
    \  return result\nend", "  local result = {}\n  local index = 0\n  while index\
    \ <= #s do\n    local char = string.sub(s,index,index)\n    if char == c then\n\
    \      table.insert(result, char)\n      index = index + 1\n    else\n      index\
    \ = index + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  local reverse = table.concat(result)\n  table.insert(reverse, c)\n \
    \ return {'reverse_delete('..reverse..','..c..')', true}\nend", "  local result\
    \ = {}\n  local i = 1\n  while i <= #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)", "  local result = {}\n  local i = 0\n  while\
    \ i < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i\
    \ = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, '')\n  local reversed = table.concat(result)\n\
    \  if reversed == reverse then\n    return {'', true}\n  end\n  return {'', false}\n\
    end", "  local result = {}\n  local index = 1\n  while index <= #s do\n    if\
    \ s[index] == c then\n      table.insert(result, s[index])\n      index = index\
    \ + 1\n    else\n      index = index + 1\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(",
  "  -- Base case\n  if #s == 0 then\n    return {'', true}\n  end\n  -- Recursive\
    \ case\n  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] and\
    \ #result[1] == #s then\n    return { result[1], false }\n  end\n  return result\n\
    end", "  local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n\
    \    if s[i] == c then\n      is_palindrome = false\n      break\n    end\n  end\n\
    \  if is_palindrome then\n    table.insert(result, s)\n  end\n  return result\n\
    end", "  local result = {}\n  local index = 1\n  while index <= #s do\n    local\
    \ char = string.sub(s,index,index)\n    if char == c then\n      table.insert(result,\
    \ char)\n      index = index + 1\n    else\n      index = index + 1\n    end\n\
    \  end\n  if #result == 0 then\n    return {'', true}\n  end\n  local reverse\
    \ = table.concat(result)\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#s))\n  table.insert(reverse, string.sub(s,1,#s))\n  table.insert(reverse,\
    \ string.sub(s,#", "  local result = {}\n  local i = 0\n  while i < #s do\n  \
    \  if s[i] == c then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n\
    \      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  table.sort(result)\n  local reversed = table.concat(result)\n  if reversed\
    \ == s then\n    return {'', true}\n  end\n  return {'{'..reversed..'}', false}\n\
    end", "    local result = {}\n    local i = 0\n    local j = #s\n    while i <\
    \ j do\n        if s[i] == c then\n            i = i + 1\n        else\n     \
    \       result[#result + 1] = s[i]\n        end\n    end\n    if i == j then\n\
    \        result[#result + 1] = s[i]\n    end\n    return { result = table.concat(result),\
    \ check = i == j }\nend", "  local result = {}\n  local i = 0\n  while i < #s\
    \ do\n    local char = s[i]\n    local j = #c\n    while j > 0 do\n      if char\
    \ == c[j] then\n        table.insert(result, char)\n        j = j - 1\n      else\n\
    \        break\n      end\n    end\n    i = i + 1\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ '')\n  local reversed = table.concat(reverse)\n  if reversed == s then\n   \
    \ return {'', true}\n  end\n  return {'', false}\nend", "  local result = {}\n\
    \  local i = 0\n  while i < #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, '')\n  local reversed = table.concat(reverse)\n  if reversed\
    \ == s then\n    return {'', true}\n  end\n  return {'', false}\nend", "  local\
    \ result = {}\n  local i = 0\n  while i <= #s do\n    if s[i] == c then\n    \
    \  result[#result + 1] = tostring(s[i])\n      i = i + 1\n    else\n      result[#result\
    \ + 1] = s[i]\n      i = i + 1\n    end\n  end\n  if #result == 1 then\n    result[#result\
    \ + 1] = tostring(s[i])\n  end\n  return result, #result == #result\nend", " \
    \ local result = {}\n  local i = 0\n  while i < #s do\n    if s[i] == c then\n\
    \      result[#result + 1] = s[i]\n      i = i + 1\n    else\n      i = i + 1\n\
    \    end\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n  result[#result\
    \ + 1] = ''\n  return result\nend", "  local results = {}\n  local i = 0\n  while\
    \ i < #s do\n    local j = #c\n    while j ~= 0 do\n      if s[i] == c[j] then\n\
    \        j = j - 1\n      else\n        results[i] = s[i]\n        i = i + 1\n\
    \        break\n      end\n    end\n  end\n  if i == #s then\n    results[i] =\
    \ s[i]\n  end\n  return results\nend", "  local result = {}\n  local i, j = 1,\
    \ #s\n  while i <= j do\n    if s[i] == c then\n      i = i + 1\n      j = j -\
    \ 1\n    else\n      table.insert(result, s[i])\n    end\n  end\n  if i == j then\n\
    \    table.insert(result, s[i])\n  end\n  return { result = table.concat(result),\
    \ check = i == #s }\nend", "  local result = {}\n  local index = 0\n  while index\
    \ <= #s do\n    if s[index] == c then\n      index = index + 1\n    else\n   \
    \   table.insert(result, s[index])\n      index = index + 1\n    end\n  end\n\
    \  if index > #s then\n    table.insert(result, s[index])\n  end\n  return { result\
    \ = table.concat(result), check = #result == 0 }\nend", "  local result = {}\n\
    \  local i = 0\n  while i < #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, '')\n  local reversed\
    \ = table.concat(result)\n  if reversed == reverse then\n    return {'', true}\n\
    \  end\n  return {'', false}\nend", "  local result = {}\n  local i, j = 1, #s\n\
    \  while i <= j do\n    if s[i] == c then\n      table.insert(result, s[i])\n\
    \      i = i + 1\n    else\n      j = j - 1\n    end\n  end\n  if i == j then\n\
    \    table.insert(result, s[i])\n  end\n  return { result = table.concat(result),\
    \ check = i == j }\nend", "  local result = {}\n  local i = 0\n  while i <= #s\
    \ do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i = i + 1\n\
    \    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return\
    \ {'', true}\n  end\n  local reversed = table.concat(result)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, true)\n  table.insert(reversed, false)\n\
    \  return reversed\nend", "  local results = {}\n  local i = 0\n  while i < #s\
    \ do\n    local char = s[i]\n    if char == c then\n      i = i + 1\n    else\n\
    \      results[i] = char\n      i = i + 1\n    end\n  end\n  if i == #s then\n\
    \    results[i] = s[i]\n  end\n  return results\nend", "  local result = {}\n\
    \  local i = 0\n  while i < #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, '')\n  local reversed = table.concat(reverse)\n  if reversed\
    \ == s then\n    return {'', true}\n  end\n  return {'', false}\nend", "  local\
    \ result = {s, false}\n  local i = 0\n  while i < #s do\n    if s[i] == c then\n\
    \      result[#result + 1] = s[i + 1]\n      i = i + 1\n    else\n      i = i\
    \ + 1\n    end\n  end\n  if #result == 1 then\n    result[1] = true\n  end\n \
    \ return result\nend", "  local result = {}\n  local i = 0\n  while i < #s do\n\
    \    if s[i] == c then\n      table.insert(result, s[i])\n      i = i + 1\n  \
    \  else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'',\
    \ true}\n  end\n  local reverse = table.concat(result)\n  local reversed = reverse:reverse()\n\
    \  if s == reversed then\n    return {'', true}\n  end\n  return {'', false}\n\
    end", "    local result = {}\n    local index = 0\n    while index <= #s do\n\
    \        if s[index] == c then\n            index = index + 1\n        else\n\
    \            result[#result + 1] = s[index]\n        end\n    end\n    if #result\
    \ == 0 then\n        result[#result + 1] = 'nil'\n    end\n    return { result\
    \ = table.concat(result), result = table.concat(result) == table.concat(result)\
    \ }\nend", "  local results = {}\n  local index = 1\n  while index <= #s do\n\
    \    local char = string.sub(s,index,index)\n    if char == c then\n      index\
    \ = index + 1\n    else\n      table.insert(results, char)\n      index = index\
    \ + 1\n    end\n  end\n  if #results == 0 then\n    return {'', true}\n  end\n\
    \  local reversed = table.concat(results)\n  table.insert(reversed, reversed)\n\
    \  local reversed_length = #reversed\n  local reversed_index = reversed_length\
    \ - 1\n  while reversed_index > 0 do\n    if reversed[reversed_index] == reversed[reversed_index\
    \ - 1] then\n      reversed_index = reversed_index - 1\n    else\n      break\n\
    \    end\n  end\n  if reversed_index == 0 then\n    return {'', false}\n  end\n\
    \  table.insert(reversed, reversed[reversed_index])\n  table.insert(reversed,\
    \ reversed[reversed_index - 1])\n  table.insert(reversed, reversed[reversed_length\
    \ - 1])\n  return {'', true}\nend", "  local result = {}\n  local index = 1\n\
    \  while index <= #s do\n    if s[index] == c then\n      index = index + 1\n\
    \    else\n      result[#result + 1] = s[index]\n    end\n  end\n  if #result\
    \ == 1 then\n    result[#result] = s[#result]\n  end\n  return result, #result\
    \ == 1\nend", "  local result = {}\n  local i = 0\n  local j = 1\n  while i <=\
    \ #s do\n    if s[i]:sub(1, #c) == c then\n      result[#result + 1] = s[i]:sub(1,\
    \ #c)\n      i = i + 1\n    else\n      result[#result + 1] = s[i]\n      i =\
    \ i + 1\n    end\n  end\n  if #result == 1 then\n    result[#result] = false\n\
    \  end\n  return result\nend", "  local result = {}\n  local i = 0\n  while i\
    \ <= #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n \
    \   return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n", "    local results = {}\n    local i = 0\n    local j = #s\n  \
    \  while i < j do\n        if s[i] == c then\n            i = i + 1\n        elseif\
    \ s[i] == nil then\n            j = j - 1\n        else\n            results[#results\
    \ + 1] = s[i]\n        end\n    end\n    if i == j then\n        results[#results\
    \ + 1] = s[i]\n    end\n    return { results[#results - 1], results[#results -\
    \ 1] == s[#results - 1] }\nend", "  -- base case\n  if #s == 0 then\n    return\
    \ { s, true }\n  end\n  -- recursive case\n  local result = reverse_delete(s[#s:len()],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  if #s == 1 then\n    return { s, false }\n  end\n  -- recursive case\n  local\
    \ result = reverse_delete(s[#s:len()], c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- base case\n  if #s == 2 then\n    return { s, false }\n\
    \  end\n  -- recursive case\n  local result = reverse_delete(s[#s:len()], c)\n\
    \  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  if #s == 3 then\n    return { s, false }\n  end\n  -- recursive case\n  local\
    \ result = reverse_delete(s[#s:len()], c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- base case\n  if #s == 4 then\n    return { s, false }\n\
    \  end\n  -- recursive case\n  local result = reverse_delete(s[#s:len()], c)\n\
    \  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  if #s == 5 then\n    return { s, false }\n  end\n  -- recursive case\n  local\
    \ result = reverse_delete(s[#s:len()], c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- base case\n  if #s == 6 then\n    return { s, false }\n\
    \  end\n  -- recursive case\n  local result = reverse_delete(s[#s:len()], c)\n\
    \  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  if #s == 7 then\n    return { s, false }\n  end\n  -- recursive case\n  local\
    \ result = reverse_delete(s[#s:len()], c)\n  if result[1] then\n    return { result[1],\
    \ false }\n  end\n  -- base case\n  if #s == 8 then\n    return { s, false }\n\
    \  end\n  -- recursive case\n  local result = reverse_delete(s[#s:len()], c)\n\
    \  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  if #s == 9 then\n    return { s, false }\n  end\n  -- recursive case\n  local\
    \ result = reverse_delete(s[#s:len()], c)\n  if result[1] then\n    return ",
  "  -- base case\n  if #s == 0 then\n    return { s, true }\n  end\n  -- recursive\
    \ case\n  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n\
    \    return { result[1], false }\n  end\n  -- recursive case\n  local result =\
    \ reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n    return { result[1],\
    \ true }\n  end\nend", "  local result = {s, false}\n  local i = 0\n  while i\
    \ < #s do\n    if s[i] == c then\n      table.insert(result, string.sub(s,i,i))\n\
    \      i = i - 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 1\
    \ then\n    result[1] = true\n  end\n  return result\nend", "  local result =\
    \ {}\n  local i = 0\n  while i < #s do\n    local char = s[i]\n    if char ==\
    \ c then\n      i = i + 1\n      continue\n    end\n    table.insert(result, char)\n\
    \    i = i + 1\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n\
    \  local reverse = table.concat(result)\n  table.insert(reverse, '')\n  local\
    \ result = reverse\n  local i = 0\n  while i < #result do\n    if result[i] ~=\
    \ s[i] then\n      break\n    end\n    i = i + 1\n  end\n  if i == #result then\n\
    \    return {'', false}\n  end\n  return result\nend", "  -- base case\n  if #s\
    \ == 0 then\n    return { s, true }\n  end", "  -- Base case\n  if #s == 0 then\n\
    \    return { s, true }\n  end", "  local result = {}\n  local i = 0\n  while\
    \ i <= #s do\n    local char = s[i]\n    if char == c then\n      i = i + 1\n\
    \    else\n      result[#result + 1] = char\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  result[#result + 1] = ''\n  return result\n\
    end", "    local result = {}\n    local i = 0\n    local j = 1\n    while i <=\
    \ #s and j <= #c do\n        if s[i] == c[j] then\n            table.insert(result,\
    \ s[i])\n            i = i + 1\n            j = j + 1\n        else\n        \
    \    i = i + 1\n        end\n    end\n    if i == #s then\n        table.insert(result,\
    \ s[i])\n    end\n    return { result = table.concat(result), result = table.concat(result)\
    \ == s }\nend", "  local result = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ s[i] == c then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n\
    \      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  local reverse = table.concat(result)\n  table.insert(reverse, '')\n\
    \  local reversed = table.concat(reverse)\n  if s == reversed then\n    return\
    \ {'', true}\n  end\n  return {'', false}\nend", "  -- Base case\n  if #s == 0\
    \ then\n    return {'', true}\n  end", "  local result = {}\n  local index = 1\n\
    \  while index <= #s do\n    if s[index] == c then\n      index = index + 1\n\
    \    else\n      table.insert(result, s[index])\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  table.insert(result, s[#s])\n  return\
    \ result\nend", "  local result = {}\n  local i, j = 1, #s\n  while i <= j do\n\
    \    if s[i] != c then\n      table.insert(result, s[i])\n    end\n    i = i +\
    \ 1\n  end\n  if i == j then\n    table.insert(result, s[i])\n  end\n  return\
    \ { result = table.concat(result), check = i == j }\nend", "  local result = {}\n\
    \  local i = #s\n  while i ~= 0 do\n    local j = #c\n    while j ~= 0 do\n  \
    \    if s[i] == c[j] then\n        table.insert(result, s[i])\n        table.insert(result,\
    \ c[j])\n        i = i - 1\n        j = j - 1\n      else\n        j = j - 1\n\
    \      end\n    end\n    i = i - 1\n  end\n  return { result = table.concat(result),\
    \ check = #result == 0 }\nend", "  local result = {}\n  local i = 0\n  while i\
    \ < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n \
    \   return {'', false}\n  end\n  table.sort(result)\n  local reverse = table.concat(result)\n\
    \  if reverse == s then\n    return {'', true}\n  end\n  return {'reverse_delete',\
    \ false}\nend", "  local result = {}\n  local i = #s\n  while i ~= 0 do\n    local\
    \ char = s[i - 1]\n    if char == c then\n      result[#result + 1] = char\n \
    \     i = i - 1\n    else\n      result[#result + 1] = char\n    end\n  end\n\
    \  if #result == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  reverse = reverse:reverse()\n  local result = {}\n  local i = #s\n  while i\
    \ ~= 0 do\n    local char = s[i - 1]\n    if char == reverse then\n      result[#result\
    \ + 1] = char\n      i = i - 1\n    else\n      result[#result + 1] = char\n \
    \   end\n  end\n  if #result == 0 then\n    return {'', false}\n  end\n  return\
    \ result\nend", "  local result = {s, false}\n  local i = 0\n  while i < #s do\n\
    \    local j = i - 1\n    while j >= 0 and s[i] ~= c[j] do\n      j = j - 1\n\
    \    end\n    if j >= 0 then\n      result[1] = result[1] .. c[j]\n      i = i\
    \ + 1\n    else\n      result[2] = true\n      break\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  local i = 0\n  while i < #s do\n    local\
    \ j = #c\n    while j ~= 0 do\n      if s[i] == c[j] then\n        s[j] = nil\n\
    \      else\n        j = j - 1\n      end\n    end\n    i = i + 1\n  end\n  if\
    \ #s == 0 then\n    result[1] = true\n  else\n    result[1] = false\n  end\n \
    \ return result\nend", "  -- We are given two strings s and c, you have to deleted\
    \ all the characters in s that are equal to any character in c\n  -- then check\
    \ if the result string is palindrome.\n  -- A string is called palindrome if it\
    \ reads the same backward as forward.\n  -- You should return a table containing\
    \ the result string and true/false for the check.\n  -- Example\n  -- >>> reverse_delete('abcde',\
    \ 'ae')\n  -- {'bcd', false}\n  -- >>> reverse_delete('abcdef', 'b')\n  -- {'acdef',\
    \ false}\n  -- >>> reverse_delete('abcdedcba', 'ab')\n  -- {'cdedc', true}\n \
    \ local function reverse_delete(s, c)\n    local result = {}\n    local i = 0\n\
    \    local j = 1\n    while i <= #s and j <= #c do\n      if s[i] == c[j] then\n\
    \        table.insert(result, s[i])\n        i = i + 1\n        j = j + 1\n  \
    \    else\n        i = i + 1\n      end\n    end\n    if i == #s then\n      table.insert(result,\
    \ s[i])\n    end\n    if j == #c then\n      table.insert(result, c[j])\n    end\n\
    \    return { result = table.concat(result), check = true }\n  end\n  return reverse_delete(s,\
    \ c)\nend", "  local result = {}\n  local is_palindrome = true\n  for i = 1, #s\
    \ do\n    if s[i] == c then\n      table.insert(result, s[i])\n    else\n    \
    \  is_palindrome = false\n    end\n  end\n  if is_palindrome then\n    return\
    \ { table.concat(result), true }\n  else\n    return { table.concat(result), false\
    \ }\n  end\nend", "  -- base case\n  if #s == 0 then\n    return { s, true }\n\
    \  end", "  local result = {}\n  local i = 0\n  while i < #s do\n    local char\
    \ = s[i]\n    if char == c then\n      i = i + 1\n    else\n      result[#result\
    \ + 1] = char\n    end\n  end\n  if #result == 0 then\n    result[1] = true\n\
    \  end\n  return result\nend", "  local result = {}\n  local i = 0\n  while i\
    \ < #s do\n    local char = s[i]\n    local j = i - 1\n    while j >= 0 and char\
    \ == c[j] do\n      j = j - 1\n    end\n    if j >= 0 then\n      table.insert(result,\
    \ char)\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'',\
    \ true}\n  end\n  table.sort(result)\n  local reverse = result\n  table.sort(reverse)\n\
    \  if reverse == result then\n    return {'', true}\n  end\n  return {'' .. reverse,\
    \ false}\nend", "  local results = {}\n  local i = 0\n  while i <= #s do\n   \
    \ local j = i - 1\n    while j <= #c and s[i] ~= c[j] do\n      j = j - 1\n  \
    \  end\n    if j > 0 then\n      results[i] = s[i]\n      i = i + 1\n    end\n\
    \  end\n  if #results == 0 then\n    return {'', true}\n  end\n  local reverse\
    \ = table.concat(results)\n  reverse = reverse.reverse\n  if reverse == s then\n\
    \    return {'', true}\n  end\n  return results\nend", "  local result = {}\n\
    \  local i = 0\n  while i <= #s do\n    if s[i] == c then\n      i = i + 1\n \
    \   else\n      result[#result + 1] = s[i]\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  else\n    return {'' .. result[#result], false}\n\
    \  end\nend", "  local result = {}\n  local i = 0\n  local j = 1\n  while i <=\
    \ #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i = i\
    \ + 1\n    else\n      j = j + 1\n    end\n  end\n  if j > 1 then\n    table.insert(result,\
    \ s[j])\n  end\n  return { result = table.concat(result), check = #result == 0\
    \ }\nend", "    local result = {}\n    local i = 0\n    while i < #s do\n    \
    \    if s[i] == c then\n            i = i + 1\n        else\n            result[#result\
    \ + 1] = s[i]\n        end\n    end\n    if #result == 0 then\n        result[1]\
    \ = c\n    end\n    return { result = table.concat(result), palindrome = #result\
    \ == 1 }\nend", "  local result = {}\n  local index = 1\n  while index <= #s do\n\
    \    if s[index] == c then\n      index = index + 1\n    else\n      table.insert(result,\
    \ s[index])\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n \
    \ end\n  table.sort(result)\n  if result[#result] == s[#s] then\n    return {'',\
    \ true}\n  end\n  return {'' .. result[#result], false}\nend", "  local result\
    \ = {}\n  local i = 0\n  local j = 1\n  while i <= #s do\n    if s[i] == c then\n\
    \      table.insert(result, s[i])\n      i = i + 1\n      j = j + 1\n    else\n\
    \      i = i + 1\n    end\n  end\n  if i == #s then\n    table.insert(result,\
    \ s[i])\n  end\n  return result, i == #s\nend", "  local result = {}\n  local\
    \ i = 0\n  while i <= #s do\n    local char = s[i]\n    if char == c then\n  \
    \    i = i + 1\n    else\n      result[#result + 1] = char\n    end\n  end\n \
    \ if #result == 0 then\n    return {'', true}\n  end\n  result[#result + 1] =\
    \ ''\n  return result\nend", "  local result = {s, false}\n  local i = 0\n  while\
    \ i < #s do\n    local j = #c\n    while j ~= 0 do\n      if s[i] ~= c[j] then\n\
    \        result[1] = s[i]\n        result[2] = false\n        return result\n\
    \      end\n      j = j - 1\n    end\n    i = i + 1\n  end\n  result[1] = s[i]\n\
    \  result[2] = true\n  return result\nend", "  local result = {}\n  local index\
    \ = 0\n  while index <= #s do\n    local char = string.sub(s,index,index)\n  \
    \  if char == c then\n      index = index + 1\n    else\n      table.insert(result,\
    \ char)\n    end\n  end\n  if index > #s then\n    table.insert(result, string.sub(s,index,#s))\n\
    \  end\n  return result\nend", "  local result = {}\n  local index = 0\n  while\
    \ index <= #s do\n    local char = string.sub(s,index,index)\n    if char == c\
    \ then\n      table.insert(result, char)\n      index = index + 1\n    else\n\
    \      index = index + 1\n    end\n  end\n  if #result == 0 then\n    return {'',\
    \ false}\n  end\n  table.sort(result)\n  local reversed = table.concat(result)\n\
    \  if reversed == s then\n    return {'', true}\n  end\n  return {'reverse_delete',\
    \ false}\nend", "  -- base case\n  if #s == 0 then\n    return {'', true}\n  end\n\
    \  -- recursive case\n  local result = reverse_delete(s:sub(1,#s-1)..c, '')\n\
    \  if result[1] ~= s[#s] then\n    return {'', false}\n  end\n  return result\n\
    end", "  local result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n\
    \    if s[i] == c then\n      table.insert(result, s[i])\n    else\n      is_palindrome\
    \ = false\n    end\n  end\n  if is_palindrome then\n    table.insert(result, s[#s])\n\
    \  end\n  return { result = table.concat(result), is_palindrome = is_palindrome\
    \ }\nend", "  local result = {}\n  local i = 0\n  while i < #s do\n    local char\
    \ = s[i]\n    local index = c\n    while index <= #c do\n      if char == c[index]\
    \ then\n        table.insert(result, char)\n        index = index + 1\n      else\n\
    \        index = index + 1\n      end\n    end\n    i = i + 1\n  end\n  return\
    \ result\nend", "  local result = {s, false}\n  local i = 0\n  while i < #s do\n\
    \    if s[i] == c then\n      table.insert(result, s[i])\n      i = i + 1\n  \
    \  else\n      i = i + 1\n    end\n  end\n  if #result == 1 then\n    result[1]\
    \ = true\n  end\n  return result\nend", "  local result = {}\n  local is_palindrome\
    \ = true\n  for i = 1, #s do\n    if s[i] == c then\n      -- Delete the character\n\
    \      s = s:sub(1, i - 1)\n      -- Check if the string is a palindrome\n   \
    \   is_palindrome = is_palindrome and s[i] == s[#s]\n    else\n      -- Add the\
    \ character to the result\n      table.insert(result, s[i])\n    end\n  end\n\
    \  -- Return the result and whether the string is a palindrome\n  return { result,\
    \ is_palindrome }\nend", "  local result = {}\n  local index = 1\n  while index\
    \ <= #s do\n    local char = string.sub(s,index,index)\n    if char == c then\n\
    \      table.insert(result, char)\n      index = index + 1\n    else\n      index\
    \ = index + 1\n    end\n  end\n  if #result == 0 then\n    return {'', false}\n\
    \  end\n  table.sort(result)\n  local reverse = table.concat(result)\n  if reverse\
    \ == s then\n    return {'', true}\n  end\n  return {'', false}\nend", "  local\
    \ result = {}\n  local i = 0\n  while i <= #s do\n    local char = s[i]\n    if\
    \ char == c then\n      i = i + 1\n    else\n      result[#result + 1] = char\n\
    \    end\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n  local\
    \ reverse = table.concat(result)\n  reverse = reverse:reverse()\n  if reverse\
    \ == s then\n    return {'', true}\n  end\n  return {'', false}\nend", "  local\
    \ result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i] ==\
    \ c then\n      is_palindrome = false\n      break\n    end\n  end\n  if is_palindrome\
    \ then\n    table.insert(result, s)\n  end\n  return result\nend", "  -- We are\
    \ given two strings s and c, you have to deleted all the characters in s that\
    \ are equal to any character in c\n  -- then check if the result string is palindrome.\n\
    \  -- A string is called palindrome if it reads the same backward as forward.\n\
    \  -- You should return a table containing the result string and true/false for\
    \ the check.\n  -- Example\n  -- >>> reverse_delete('abcde', 'ae')\n  -- {'bcd',\
    \ false}\n  -- >>> reverse_delete('abcdef', 'b')\n  -- {'acdef', false}\n  --\
    \ >>> reverse_delete('abcdedcba', 'ab')\n  -- {'cdedc', true}", "  local result\
    \ = {}\n  local i = 0\n  while i <= #s do\n    local j = i - 1\n    while j ~=\
    \ 0 and s[i] ~= c do\n      j = j - 1\n    end\n    if j == 0 then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      table.insert(result, s[i])\n      i\
    \ = i - 1\n    end\n  end\n  return result, true\nend", "  local result = {}\n\
    \  local i = 0\n  while i < #s do\n    local char = s[i]\n    if char == c then\n\
    \      i = i + 1\n    else\n      result[#result + 1] = char\n    end\n  end\n\
    \  if #result == 0 then\n    return {'', true}\n  end\n  result[#result + 1] =\
    \ ''\n  return result\nend", "  -- base case\n  if #s == 0 then\n    return {'',\
    \ true}\n  end", "  local result = {}\n  local is_palindrome = true\n  for i =\
    \ 1, #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n    else\n\
    \      is_palindrome = false\n    end\n  end\n  if is_palindrome then\n    table.insert(result,\
    \ s[#s])\n  end\n  return result\nend", "  local results = {}\n  local index =\
    \ 1\n  while index <= #s do\n    local char = string.sub(s,index,index)\n    if\
    \ char == c then\n      index = index + 1\n    else\n      table.insert(results,\
    \ char)\n      index = index + 1\n    end\n  end\n  if #results == 0 then\n  \
    \  return {'', true}\n  end\n  local reverse = table.concat(results)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n  table.insert(reverse, c)\n  table.insert(reverse,\
    \ c)\n  table.insert(reverse, c)\n", "  local result = {}\n  local i = 1\n  while\
    \ i <= #s do\n    local char = s[i]\n    if char == c then\n      table.insert(result,\
    \ char)\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, '\\0')\n  local reversed = reverse\n  local i = 0\n \
    \ while i <= #s do\n    if s[i] == c then\n      reversed = reversed[1:i]\n  \
    \    break\n    end\n    i = i + 1\n  end\n  if #reversed == 0 then\n    return\
    \ {'', true}\n  end\n  local result = reversed\n  local reversed = reverse\n \
    \ local i = 0\n  while i <= #s do\n    if s[i] == c then\n      reversed = reversed[1:i]\n\
    \      break\n    end\n    i = i + 1\n  end\n  if #reversed == 0 then\n    return\
    \ {'', true}\n  end\n  table.insert(result, '\\0')\n  table.insert(result, reversed)\n\
    \  return result\nend", "  local result = {}\n  local i = 0\n  while i <= #s do\n\
    \    local char = s[i]\n    if char == c then\n      i = i + 1\n    else\n   \
    \   result[#result + 1] = char\n    end\n  end\n  if #result == 0 then\n    return\
    \ {'', true}\n  end\n  local reverse = table.concat(result)\n  reverse = reverse:reverse()\n\
    \  local result = {}\n  local i = 0\n  while i <= #s do\n    local char = s[i]\n\
    \    if char == reverse then\n      i = i + 1\n    else\n      result[#result\
    \ + 1] = char\n    end\n  end\n  if #result == 0 then\n    return {'', false}\n\
    \  end\n  return result\nend", "  local results = {}\n  for i = 1, #s do\n   \
    \ if s[i] == c then\n      table.insert(results, s[#s])\n      table.remove(s,\
    \ i)\n      break\n    end\n  end\n  if #s == 0 then\n    table.insert(results,\
    \ s)\n  end\n  return results\nend", "  local result = {}\n  local index = 1\n\
    \  while index <= #s do\n    if s[index] == c then\n      index = index + 1\n\
    \    else\n      result[#result + 1] = s[index]\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  result[#result + 1] = ''\n  return\
    \ result\nend", "  local result = {}\n  local i = 0\n  while i < #s do\n    local\
    \ char = s[i]\n    if char == c then\n      table.insert(result, char)\n     \
    \ i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, '')\n  table.insert(reverse, #s)\n  local\
    \ reversed = table.concat(result)\n  if reversed == reverse then\n    return {'',\
    \ true}\n  end\n  return {'', false}\nend", "  local result = {}\n  local index\
    \ = 1\n  while index <= #s do\n    if s[index] == c then\n      index = index\
    \ + 1\n    else\n      table.insert(result, string.sub(s,index,index))\n     \
    \ index = index + 1\n    end\n  end\n  if #result == 1 then\n    table.insert(result,\
    \ string.sub(s,index,index))\n  end\n  return result\nend", "  local result =\
    \ {}\n  local i = 0\n  while i <= #s do\n    local char = s[i]\n    if char ==\
    \ c then\n      i = i + 1\n    else\n      result[#result + 1] = char\n    end\n\
    \  end\n  if #result == 0 then\n    return {'', true}\n  end\n  result[#result\
    \ + 1] = ''\n  return result\nend", "  local result = {}\n  local i = 0\n  while\
    \ i < #s do\n    local char = s[i]\n    if char == c then\n      table.insert(result,\
    \ char)\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, '\\0')\n  local reversed = reverse:reverse()\n  if reversed\
    \ == s then\n    return {'', true}\n  end\n  return {'', false}\nend", "  local\
    \ result = {}\n  local i = 0\n  while i < #s do\n    local char = s[i]\n    if\
    \ char == c then\n      i = i + 1\n      result[#result + 1] = s[i]\n    else\n\
    \      result[#result + 1] = char\n    end\n  end\n  if #result == 0 then\n  \
    \  return {'', true}\n  end\n  local reverse = table.concat(result)\n  reverse\
    \ = reverse.reverse\n  if reverse == s then\n    return {'', true}\n  end\n  return\
    \ {'', false}\nend", "  local result = {}\n  local i = 0\n  local j = 1\n  while\
    \ i <= #s do\n    if s[i]:sub(1, #c) == c then\n      result[j] = s[i]\n     \
    \ i = i + 1\n      j = j + 1\n    else\n      i = i + 1\n    end\n  end\n  if\
    \ i == #s then\n    result[j] = s[i]\n  end\n  return result\nend", "  local result\
    \ = {}\n  local index = 0\n  while index <= #s do\n    if s[index] == c then\n\
    \      index = index + 1\n    else\n      result[#result + 1] = s[index]\n   \
    \ end\n  end\n  if #result == 0 then\n    result[1] = false\n  end\n  return result\n\
    end", "  local result = {}\n  local i = #s\n  while i ~= 0 do\n    local char\
    \ = s[i]\n    if char == c then\n      i = i - 1\n    else\n      result[#result\
    \ + 1] = char\n    end\n  end\n  if #result == 0 then\n    return { s, true }\n\
    \  else\n    return { result, false }\n  end\nend", "  local result = {}\n  local\
    \ i, j = 1, #s\n  while i <= j do\n    if s[i] == c then\n      i = i + 1\n  \
    \  elseif s[i] == s[i - 1] then\n      j = j - 1\n    else\n      table.insert(result,\
    \ s[i])\n    end\n  end\n  if i == j then\n    table.insert(result, s[i])\n  end\n\
    \  return { result = table.concat(result), check = i == j }\nend", "  local result\
    \ = {}\n  local i = 0\n  while i < #s do\n    local char = s[i]\n    if char ==\
    \ c then\n      i = i + 1\n      continue\n    end\n    table.insert(result, char)\n\
    \    i = i + 1\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n\
    \  local reverse = table.concat(result)\n  table.insert(reverse, '\\0')\n  local\
    \ reversed = reverse:reverse()\n  if reversed == s then\n    return {'', true}\n\
    \  end\n  return {'', false}\nend", "  local result = {}\n  local i, j = 1, #s\n\
    \  while i <= j do\n    if s[i] == c then\n      table.insert(result, s[i])\n\
    \      i = i + 1\n    else\n      j = j - 1\n    end\n  end\n  if i == j then\n\
    \    table.insert(result, s[i])\n  end\n  return result\nend", "  local result\
    \ = {}\n  local index = 1\n  while index <= #s do\n    local char = string.sub(s,index,index)\n\
    \    if char == c then\n      table.insert(result, char)\n      index = index\
    \ + 1\n    else\n      index = index + 1\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', false}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ \"\")\n  local reversed = table.concat(result)\n  table.insert(reversed, \"\"\
    )\n  local result = reversed\n  local reversed = reverse\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed,\
    \ \"\")\n  table.insert(reversed, \"\")\n  table.insert(reversed, \"\")\n  table.",
  "  local result = {}\n  local index = 1\n  while index <= #s do\n    if s[index]\
    \ == c then\n      table.insert(result, s[index])\n      index = index + 1\n \
    \   else\n      index = index + 1\n    end\n  end\n  if #result == 0 then\n  \
    \  return {'', true}\n  end\n  local reverse = table.concat(result)\n  reverse\
    \ = reverse.reverse\n  if reverse == s then\n    return {'', true}\n  end\n  return\
    \ {'', false}\nend", "  local result = {}\n  local i = 0\n  while i <= #s do\n\
    \    local char = s[i]\n    if char == c then\n      table.insert(result, char)\n\
    \      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  local reversed = reverse:reverse()\n  if s == reversed then\n    return {'',\
    \ true}\n  end\n  return {'', false}\nend", "  local result = {}\n  local i =\
    \ 0\n  while i <= #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n\
    \      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, '')\n  local reversed = table.concat(reverse)\n  if s\
    \ == reversed then\n    return {'', true}\n  end\n  return {'', false}\nend",
  "  local result = {}\n  local i = #s\n  while i > 0 do\n    local j = #c\n    while\
    \ j > 0 do\n      if s[i] == c[j] then\n        table.insert(result, s[i])\n \
    \       table.insert(result, c[j])\n        i = i - 1\n        j = j - 1\n   \
    \   else\n        j = j - 1\n      end\n    end\n    i = i - 1\n  end\n  return\
    \ { result = table.concat(result), palindrome = #result == 0 }\nend", "  -- base\
    \ case\n  if #s == 0 then\n    return { s, true }\n  end\n  -- recursive case\n\
    \  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n    return\
    \ { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#s:end],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- recursive\
    \ case\n  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n \
    \   return { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#s:end],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n    return\
    \ { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#s:end],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n    return\
    \ { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#s:end],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n    return\
    \ { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#s:end],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n    return\
    \ { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#s:end],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n    return\
    \ { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#s:end],\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  local result = reverse_delete(s[#s:end], c)\n  if result[1] then\n    return\
    \ { result[1], false }\n  end\n  -- base case\n  local result = reverse_delete(s[#",
  "  local result = {}\n  local i = #s\n  while i ~= 0 do\n    local j = #c\n    while\
    \ j ~= 0 do\n      if s[i] == c[j] then\n        table.insert(result, s[i])\n\
    \        i = i - 1\n        j = j - 1\n      else\n        break\n      end\n\
    \    end\n  end\n  if i == 0 then\n    table.insert(result, s[i])\n  end\n  return\
    \ result\nend", "  local result = {}\n  local i = #s\n  while i ~= 0 do\n    local\
    \ char = s[i]\n    if char == c then\n      i = i - 1\n    else\n      result[#result\
    \ + 1] = char\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  local reverse = table.concat(result)\n  local reversed = reverse:reverse()\n\
    \  if s == reversed then\n    return {'', true}\n  end\n  return {'', false}\n\
    end", "    local results = {}\n    for i = #s, 1, -1 do\n        if s[i] ~= c\
    \ then\n            results[#results + 1] = s[i]\n        end\n    end\n    if\
    \ #results == 0 then\n        return { s, false }\n    end\n    local reverse\
    \ = table.concat(results)\n    if reverse == s then\n        return { reverse,\
    \ true}\n    end\n    return { reverse, false }\nend", "  local result = {}\n\
    \  local index = 0\n  while index <= #s do\n    if s[index] == c then\n      index\
    \ = index + 1\n    else\n      result[#result + 1] = s[index]\n    end\n  end\n\
    \  if #result == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  reverse = reverse:reverse()\n  if reverse == s then\n    return {'', true}\n\
    \  end\n  return {'', false}\nend", "  local result = {}\n  local i = 0\n  while\
    \ i < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i\
    \ = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ '')\n  local reversed = table.concat(reverse)\n  if s == reversed then\n   \
    \ return {'', true}\n  end\n  return {'', false}\nend", "  local result = {}\n\
    \  local i = 0\n  while i < #s do\n    local char = s[i]\n    if char == c then\n\
    \      i = i + 1\n    else\n      result[#result + 1] = char\n    end\n  end\n\
    \  if #result == 0 then\n    return {'', true}\n  end\n  result[#result + 1] =\
    \ ''\n  return result\nend", "  local result = {}\n  local i = #s\n  while i ~=\
    \ 0 do\n    local char = s[i]\n    if char == c then\n      i = i - 1\n    else\n\
    \      result[#result + 1] = char\n    end\n  end\n  if #result == 0 then\n  \
    \  return { s, true }\n  else\n    return { result, false }\n  end\nend", "  local\
    \ result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i] ==\
    \ c then\n      table.insert(result, s[i])\n    else\n      is_palindrome = false\n\
    \    end\n  end\n  if is_palindrome then\n    table.insert(result, s[#s])\n  end\n\
    \  return result\nend", "  local result = {}\n  local is_palindrome = true\n \
    \ for i = 1, #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n\
    \    else\n      is_palindrome = false\n    end\n  end\n  if is_palindrome then\n\
    \    table.insert(result, s[#s])\n  end\n  return result, is_palindrome\nend",
  "  local result = {}\n  local index = 1\n  while index <= #s do\n    local char\
    \ = string.sub(s,index,index)\n    if char == c then\n      table.insert(result,\
    \ char)\n      index = index + 1\n    else\n      index = index + 1\n    end\n\
    \  end\n  if #result > 0 then\n    table.insert(result, string.sub(s,index,#s))\n\
    \  end\n  return result\nend", "  local result = {}\n  local i = 0\n  while i\
    \ <= #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n \
    \   return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n", "  local result = {}\n  local i = 0\n  while i < #s do\n    if\
    \ s[i] == c then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n\
    \      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  local reverse = table.concat(result)\n  table.insert(reverse, '')\n\
    \  local reversed = table.concat(result)\n  table.insert(reversed, reverse)\n\
    \  local reversed = table.concat(result)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed,\
    \ reversed)\n  table.insert(reversed, reversed)\n  table.insert(reversed, reversed)\n\
    \  table.insert(reversed, reversed)\n  ", "  local result = {}\n  local i = 0\n\
    \  while i < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n\
    \      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  table.sort(result)\n  if result[#result]\
    \ == s[#s] then\n    return {'', true}\n  end\n  return {'' .. result[#result],\
    \ false}\nend", "  local results = {}\n  local i = 0\n  while i < #s do\n    local\
    \ char = s[i]\n    if char == c then\n      i = i + 1\n    else\n      results[i]\
    \ = char\n      i = i + 1\n    end\n  end\n  if i == #s then\n    results[i] =\
    \ s[i]\n  end\n  return results\nend", "  local result = {}\n  local index = 0\n\
    \  while index <= #s do\n    if s[index] == c then\n      index = index + 1\n\
    \    else\n      table.insert(result, string.sub(s, index, index))\n      index\
    \ = index + 1\n    end\n  end\n  if #result == 0 then\n    table.insert(result,\
    \ string.sub(s, index, index))\n  end\n  return result\nend", "  local result\
    \ = {}\n  local i, j = 1, #s\n  while i <= j do\n    if s[i] != c then\n     \
    \ table.insert(result, s[i])\n    end\n    i = i + 1\n  end\n  if i == j then\n\
    \    table.insert(result, s[i])\n  end\n  return { result = table.concat(result),\
    \ check = i == j }\nend", "  local result = {}\n  local index = 1\n  while index\
    \ <= #s do\n    if s[index] == c then\n      index = index + 1\n    else\n   \
    \   table.insert(result, s[index])\n    end\n  end\n  if #result == 0 then\n \
    \   return {'', true}\n  end\n  table.insert(result, s[#s])\n  return result\n\
    end", "  local result = {}\n  local i = 0\n  while i < #s do\n    if s[i] == c\
    \ then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n      i =\
    \ i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n\
    \  local reverse = table.concat(result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ '')\n  local reversed = table.concat(result)\n  local reversed = reversed:reverse()\n\
    \  if reversed == s then\n    return {'', true}\n  end\n  return {'', false}\n\
    end", "  local results = {}\n  local i = 0\n  while i < #s do\n    local char\
    \ = s[i]\n    local j = i - 1\n    while j >= 0 and char == c[j] do\n      j =\
    \ j - 1\n    end\n    if j >= 0 then\n      results[i] = char\n      i = i + 1\n\
    \    else\n      results[i] = char\n      i = i + 1\n      break\n    end\n  end\n\
    \  return { results[i], i == #s }\nend", "  local result = {}\n  local index =\
    \ 1\n  while index <= #s do\n    if s[index] == c then\n      index = index +\
    \ 1\n    else\n      result[#result + 1] = s[index]\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  result[#result + 1] = ''\n  return\
    \ result\nend", "  local result = {}\n  local i = 0\n  while i < #s do\n    local\
    \ char = s[i]\n    local j = #c\n    while j > 0 do\n      if char == c[j] then\n\
    \        table.insert(result, char)\n        j = j - 1\n      else\n        break\n\
    \      end\n    end\n    i = i + 1\n  end\n  if #result == 0 then\n    return\
    \ {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ '\\0')\n  local reversed = reverse\n  local i = 0\n  while i < #reversed do\n\
    \    if reversed[i] ~= '\\0' then\n      reversed = reversed..reversed[i]\n  \
    \  end\n    i = i + 1\n  end\n  if reversed == s then\n    return {'', true}\n\
    \  end\n  return {'{'..reversed..'}', false}\nend", "  local result = {}\n  local\
    \ index = 0\n  while index <= #s do\n    local char = string.sub(s,index,index)\n\
    \    if char == c then\n      table.insert(result, char)\n      index = index\
    \ + 1\n    else\n      index = index + 1\n    end\n  end\n  if index > #s then\n\
    \    table.insert(result, string.sub(s,index,#s))\n  end\n  return result\nend",
  "    local result = {}\n    local i = 0\n    local j = #s - 1\n    while i <= j\
    \ do\n        if s[i] == c then\n            i = i + 1\n        elseif s[i] ==\
    \ c then\n            j = j - 1\n        else\n            result[#result + 1]\
    \ = s[i]\n        end\n    end\n    if i == j then\n        result[#result + 1]\
    \ = s[i]\n    end\n    return { result = table.concat(result), check = i == j\
    \ }\nend", "  local result = {}\n  local index = 1\n  while index <= #s do\n \
    \   local char = string.sub(s,index,index)\n    if char == c then\n      table.insert(result,\
    \ char)\n      index = index + 1\n    else\n      index = index + 1\n    end\n\
    \  end\n  if #result == 0 then\n    return {'', true}\n  end\n  table.insert(result,\
    \ string.sub(s,1,index))\n  return {'' .. table.concat(result,'') .. c, false}\n\
    end", "  local result = {}\n  local index = 0\n  while index <= #s do\n    local\
    \ char = string.sub(s,index,index)\n    if char == c then\n      index = index\
    \ + 1\n    else\n      table.insert(result, char)\n    end\n  end\n  if index\
    \ > #s then\n    table.insert(result, string.sub(s,index,#s))\n  end\n  return\
    \ { result = table.concat(result), check = #result == 0 }\nend", "  local result\
    \ = {}\n  local index = 1\n  while index <= #s do\n    if string.sub(s,index,index)\
    \ == c then\n      table.insert(result, string.sub(s,index,index))\n      index\
    \ = index + 1\n    else\n      index = index + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', false}\n  end\n  table.sort(result)\n  local reversed\
    \ = table.concat(result)\n  if reversed == s then\n    return {'', true}\n  end\n\
    \  return {'', false}\nend", "  local result = {}\n  local i = 0\n  while i <\
    \ #s do\n    local char = s[i]\n    local j = i - 1\n    while j >= 0 and char\
    \ == c[j] do\n      j = j - 1\n    end\n    if j >= 0 then\n      table.insert(result,\
    \ char)\n      i = j + 1\n    else\n      break\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  local reversed = reverse:reverse()\n  if reverse == reversed then\n    return\
    \ {'', true}\n  end\n  return {'', false}\nend", "  local result = {}\n  local\
    \ i = 0\n  while i <= #s do\n    if s[i] == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  local reversed = reverse:reverse()\n  if s == reversed then\n    return {'',\
    \ true}\n  end\n  return {'', false}\nend", "  -- Base case\n  if #s == 0 then\n\
    \    return { s, true }\n  end", "  local result = {}\n  local i = 0\n  while\
    \ i < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i\
    \ = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n\
    \    return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n", "  local result = {s, false}\n  local i = 0\n  while i < #s do\n\
    \    if s[i] == c then\n      result[#result + 1] = s[i + 1]\n      i = i + 1\n\
    \    else\n      result[#result + 1] = s[i]\n      i = i + 1\n    end\n  end\n\
    \  result[#result + 1] = false\n  return result\nend", "  local result = {}\n\
    \  local i = 0\n  while i <= #s do\n    local j = #c\n    while j <= #s do\n \
    \     if s[i] == c[j] then\n        table.insert(result, s[i])\n        table.insert(result,\
    \ c[j])\n        j = j - 1\n      else\n        break\n      end\n    end\n  \
    \  i = i + 1\n  end\n  return { result = table.concat(result), check = #result\
    \ == #s }\nend", "  -- base case\n  if #s == 0 then\n    return { s, true }\n\
    \  end\n  -- recursive case\n  local result = reverse_delete(s:sub(1, #s - 1),\
    \ c)\n  if result[1] then\n    return { result[1], false }\n  end\n  -- base case\n\
    \  return { s, false }\nend", "  local result = {}\n  local index = 1\n  while\
    \ index <= #s do\n    if s[index] == c then\n      index = index + 1\n    else\n\
    \      result[#result + 1] = s[index]\n    end\n  end\n  if #result == 1 then\n\
    \    result[#result] = nil\n  end\n  return result\nend", "  local result = {}\n\
    \  local i = 0\n  while i <= #s do\n    local j = i - 1\n    while j ~= 0 and\
    \ s[i] ~= c[j] do\n      j = j - 1\n    end\n    if j ~= 0 then\n      result[i]\
    \ = s[i]\n      i = i + 1\n    end\n  end\n  if i == #s then\n    result[i] =\
    \ s[i]\n  end\n  return result\nend", "  local result = {}\n  local i = 0\n  while\
    \ i < #s do\n    local char = s[i]\n    local j = i - 1\n    while j >= 0 and\
    \ char == c[j] do\n      j -= 1\n    end\n    if j >= 0 then\n      table.insert(result,\
    \ char)\n      i = j + 1\n    else\n      break\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  table.insert(reverse, '')\n  local reversed = table.concat(reverse)\n  if reversed\
    \ == s then\n    return {'', true}\n  end\n  return {'', false}\nend", "  local\
    \ result = {}\n  local index = 1\n  while index <= #s do\n    if s[index] == c\
    \ then\n      index = index + 1\n    else\n      result[#result + 1] = s[index]\n\
    \    end\n  end\n  if #result == 1 then\n    result[#result] = true\n  end\n \
    \ return result\nend", "  local result = {}\n  local i = 0\n  while i <= #s -\
    \ 1 do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i = i +\
    \ 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return\
    \ {'', true}\n  end\n  table.insert(result, s[#s])\n  return {'' .. table.concat(result,\
    \ ''), false}\nend", "  local result = {}\n  local i = 0\n  while i < #s do\n\
    \    if s[i] == c then\n      table.insert(result, s[i])\n      i = i + 1\n  \
    \  else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'',\
    \ true}\n  end\n  local reverse = table.concat(result)\n  reverse = reverse:reverse()\n\
    \  if reverse == s then\n    return {'', true}\n  end\n  return {'', false}\n\
    end", "  local result = {}\n  local i = 0\n  local j = 1\n  while i <= #s do\n\
    \    if s[i]:sub(1, #c) == c then\n      result[j] = s[i]\n      j = j + 1\n \
    \   end\n    i = i + 1\n  end\n  if j > 1 then\n    result[j] = nil\n  end\n \
    \ return result\nend", "  local result = {}\n  local index = 1\n  while index\
    \ <= #s do\n    if s[index] == c then\n      index = index + 1\n    else\n   \
    \   table.insert(result, string.sub(s, index, index))\n      index = index + 1\n\
    \    end\n  end\n  if #result == 1 then\n    table.insert(result, string.sub(s,\
    \ index, index))\n  end\n  return result\nend", "  local result = {}\n  local\
    \ i = 0\n  while i <= #s do\n    local char = s[i]\n    if char == c then\n  \
    \    i = i + 1\n    else\n      result[#result + 1] = char\n    end\n  end\n \
    \ if #result == 0 then\n    return {'', true}\n  end\n  result[#result + 1] =\
    \ ''\n  return result\nend", "  local result = {}\n  local i = 0\n  while i <=\
    \ #s do\n    local char = s[i]\n    if char == c then\n      i = i + 1\n    else\n\
    \      result[#result + 1] = char\n    end\n  end\n  if #result == 0 then\n  \
    \  return {'', true}\n  end\n  result[#result + 1] = ''\n  return result\nend",
  "  -- base case\n  if #s == 0 then\n    return { s, true }\n  end\n  -- recursive\
    \ case\n  local result = reverse_delete(s:sub(1, #s - 1), c)\n  if result[1] then\n\
    \    return { result[1], false }\n  end\n  -- base case\n  return { s, true }\n\
    end", "  local result = {}\n  local i = 0\n  while i < #s do\n    if s[i] == c\
    \ then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n      i =\
    \ i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n  end\n\
    \  local reverse = table.concat(result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ '')\n  table.insert(reverse, #s)\n  table.insert(reverse, false)\n  return reverse\n\
    end", "  local results = {}\n  local i = 0\n  while i <= #s do\n    local j =\
    \ i - 1\n    while j <= #c and s[i] ~= c[j] do\n      j = j - 1\n    end\n   \
    \ if j > 0 then\n      results[i] = s[i]:sub(1, j-1)\n      i = j\n    else\n\
    \      results[i] = s[i]\n      i = i + 1\n    end\n  end\n  return { results[#results],\
    \ i == #results }\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
