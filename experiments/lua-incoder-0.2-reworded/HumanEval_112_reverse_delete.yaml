name: HumanEval_112_reverse_delete
language: lua
prompt: "-- Task\n-- We are given two strings s and c, you have to deleted all the\
  \ characters in s that are equal to any character in c\n-- then check if the result\
  \ string is palindrome.\n-- A string is called palindrome if it reads the same backward\
  \ as forward.\n-- You should return a table containing the result string and true/false\
  \ for the check.\n-- Example\n-- >>> reverse_delete('abcde', 'ae')\n-- {'bcd', false}\n\
  -- >>> reverse_delete('abcdef', 'b')\n-- {'acdef', false}\n-- >>> reverse_delete('abcdedcba',\
  \ 'ab')\n-- {'cdedc', true}\nlocal function reverse_delete(s, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = reverse_delete\n\
  \    lu.assertEquals(candidate('abcde', 'ae'), {'bcd', false})\n    lu.assertEquals(candidate('abcdef',\
  \ 'b'), {'acdef', false})\n    lu.assertEquals(candidate('abcdedcba', 'ab'), {'cdedc',\
  \ true})\n    lu.assertEquals(candidate('dwik', 'w'), {'dik', false})\n    lu.assertEquals(candidate('a',\
  \ 'a'), {'', true})\n    lu.assertEquals(candidate('abcdedcba', ''), {'abcdedcba',\
  \ true})\n    lu.assertEquals(candidate('abcdedcba', 'v'), {'abcdedcba', true})\n\
  \    lu.assertEquals(candidate('vabba', 'v'), {'abba', true})\n    lu.assertEquals(candidate('mamma',\
  \ 'mia'), {'', true})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  local i = 0\n  while i < #s do\n    if s[i]\
    \ == c then\n      table.insert(result, s[i])\n      i = i + 1\n    else\n   \
    \   i = i + 1\n    end\n  end\n  if #result == 0 then\n    return {'', true}\n\
    \  end\n  local reverse = table.concat(result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, '')\n  table.insert(reverse, #reverse)\n  table.insert(reverse,\
    \ false)\n  return reverse\nend", "  local result = {}\n  local i = 0\n  while\
    \ i < #s do\n    local j = #c\n    while j > 0 do\n      if s[i] == c[j] then\n\
    \        table.insert(result, s[i])\n        table.insert(result, c[j])\n    \
    \    j = j - 1\n      else\n        break\n      end\n    end\n    i = i + 1\n\
    \  end\n  if #result == 0 then\n    return {'', true}\n  end\n  local reverse\
    \ = table.concat(result)\n  table.insert(reverse, '')\n  local reversed = table.concat(result)\n\
    \  table.insert(reversed, '')\n  local reversed = table.concat(result)\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')\n  table.insert(reversed, '')\n  table.insert(reversed,\
    \ '')\n  table.insert(reversed, '')", "  local result = {}\n  local i = 1\n  while\
    \ i <= #s do\n    if s[i] == c then\n      result[#result + 1] = c\n      i =\
    \ i + 1\n    else\n      result[#result + 1] = s[i]\n      i = i + 1\n    end\n\
    \  end\n  if #result == 1 then\n    result[1] = false\n  end\n  return result\n\
    end", "  local result = {}\n  local i = 0\n  while i < #s do\n    local char =\
    \ s[i]\n    local j = #c\n    while j > 0 do\n      if char == c[j] then\n   \
    \     table.insert(result, char)\n        j = j - 1\n      else\n        break\n\
    \      end\n    end\n    i = i + 1\n  end\n  if #result == 0 then\n    return\
    \ {'', true}\n  end\n  table.sort(result)\n  local reverse = table.concat(result)\n\
    \  if reverse == s then\n    return {'', true}\n  end\n  return {'{'..reverse..'}',\
    \ false}\nend", "  local result = {}\n  local index = 1\n  while index <= #s do\n\
    \    local char = string.sub(s,index,index)\n    if char == c then\n      table.insert(result,\
    \ char)\n      index = index + 1\n    else\n      index = index + 1\n    end\n\
    \  end\n  if #result > 0 then\n    table.insert(result, string.sub(s,index,#s))\n\
    \  end\n  return result\nend", "  local result = {s, false}\n  local i = 0\n \
    \ while i < #s do\n    if s[i] == c then\n      result[#result + 1] = \"\"\n \
    \     i = i + 1\n    else\n      result[#result + 1] = s[i]\n      i = i + 1\n\
    \    end\n  end\n  result[#result + 1] = \"\"\n  return result\nend", "  local\
    \ result = {}\n  local is_palindrome = true\n  for i = 1, #s do\n    if s[i] ==\
    \ c then\n      table.insert(result, s[i])\n    else\n      is_palindrome = false\n\
    \    end\n  end\n  if is_palindrome then\n    table.insert(result, s[#s])\n  end\n\
    \  return result, is_palindrome\nend", "  local result = {}\n  local i = #s\n\
    \  while i ~= 0 do\n    local char = s[i - 1]\n    if char == c then\n      i\
    \ = i - 1\n    else\n      result[#result + 1] = char\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  table.sort(result)\n  local reversed\
    \ = table.concat(result)\n  if reversed == s then\n    return {'', true}\n  end\n\
    \  return {'{'..reversed..'}', false}\nend", "  -- base case\n  if #s == 0 then\n\
    \    return { s, true }\n  end", "  local result = {}\n  local i = 0\n  while\
    \ i <= #s do\n    local char = s[i]\n    if char == c then\n      i = i + 1\n\
    \    else\n      result[#result + 1] = char\n    end\n  end\n  if #result == 0\
    \ then\n    return {'', true}\n  end\n  local reverse = table.concat(result)\n\
    \  reverse = reverse.reverse\n  if reverse == s then\n    return {'', true}\n\
    \  end\n  return {'', false}\nend", "  local result = {}\n  local index = 1\n\
    \  while index <= #s do\n    if s[index] == c then\n      index = index + 1\n\
    \    else\n      result[#result + 1] = s[index]\n    end\n  end\n  if #result\
    \ == 0 then\n    return {'', true}\n  end\n  result[#result + 1] = ''\n  return\
    \ result\nend", "  -- Base case\n  if #s == 0 then\n    return { s, true }\n \
    \ end", "  local result = {}\n  local i = 0\n  local j = 1\n  while i <= #s do\n\
    \    if s[i]:sub(1, #c) == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      j = j + 1\n    end\n  end\n  if #result == 1 then\n \
    \   return { result[1], true }\n  else\n    return { result, false }\n  end\n\
    end", "  -- base case\n  if #s == 0 then\n    return { s, true }\n  end", "  local\
    \ result = {}\n  local is_palindrome = true\n  local i = 0\n  local j = #s - 1\n\
    \  while i <= j do\n    if s[i] == c then\n      i = i + 1\n      j = j - 1\n\
    \    else\n      is_palindrome = false\n    end\n    result[#result + 1] = (s[i])\n\
    \  end\n  if is_palindrome then\n    result[#result + 1] = s[i]\n  end\n  return\
    \ result\nend", "  local result = {}\n  local index = 1\n  while index <= #s do\n\
    \    if s[index] == c then\n      index = index + 1\n    else\n      result[#result\
    \ + 1] = s[index]\n    end\n  end\n  if #result == 0 then\n    result[1] = true\n\
    \  end\n  return result\nend", "  local result = {}\n  local i = 0\n  while i\
    \ < #s do\n    if s[i] == c then\n      table.insert(result, s[i])\n      i =\
    \ i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #result == 0 then\n \
    \   return {'', true}\n  end\n  local reverse = table.concat(result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n\
    \  table.insert(reverse, #result)\n  table.insert(reverse, #result)\n  table.insert(reverse,\
    \ #result)\n", "  local result = {}\n  local index = 1\n  while index <= #s do\n\
    \    if s[index] == c then\n      index = index + 1\n    else\n      result[#result\
    \ + 1] = s[index]\n    end\n  end\n  result[#result + 1] = '#'\n  return result\n\
    end", "  local result = {s, false}\n  local index = 1\n  while index <= #s do\n\
    \    if s[index] == c then\n      index = index + 1\n    else\n      result[1]\
    \ = result[1] .. s[index] -- append the character\n      result[2] = true\n  \
    \  end\n  end\n  return result\nend", "  local result = {}\n  local i = 0\n  local\
    \ j = 1\n  while i <= #s - 1 do\n    if s[i]:sub(1, #c) == c then\n      table.insert(result,\
    \ s[i])\n      i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  if #result\
    \ == 1 then\n    return { result[1], true }\n  else\n    return { result, false\
    \ }\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
