language: lua
name: HumanEval_72_will_it_fly
results:
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your solution here\n\tlocal max_weight\
    \ = w\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum >\
    \ max_weight then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3_g4s1x3.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3_g4s1x3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if w == 0 then\n    return true\n  end\n \
    \ local max_weight = w\n  local balanced = true\n  local sum = 0\n  for i = 1,\
    \ #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      balanced =\
    \ false\n    end\n  end\n  return balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcg2d_0d.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvcg2d_0d.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if w == 0 then\n    return true\n  elseif\
    \ w == 1 then\n    return q == {w}\n  else\n    local max = 0\n    for i = 1,\
    \ #q do\n      if q[i] > max then\n        max = q[i]\n      end\n    end\n  \
    \  return max == w\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzaqgc0n.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpuzaqgc0n.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\n\t-- If q is balanced, then we know that q is palindromic and its\
    \ sum is less than or equal to w.\n\t-- Therefore, we can just check whether q\
    \ is palindromic.\n\tif is_balanced(q) then\n\t\treturn is_palindromic(q)\n\t\
    end\n\t-- If q is not balanced, then we know that q is not palindromic and its\
    \ sum is greater than or equal to w.\n\t-- Therefore, we can just check whether\
    \ q is balanced.\n\treturn not is_palindromic(q) and is_balanced(q)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp38q1qoz6.lua:23:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmp38q1qoz6.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp38q1qoz6.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if q == nil then return false\
    \ end\n  -- If q is a palindrome, then the sum of its elements is less than or\
    \ equal the maximum possible weight w.\n  if is_palindrome(q) then\n    local\
    \ sum = 0\n    for _, v in pairs(q) do sum = sum + v end\n    return sum <= w\n\
    \  end\n  -- Otherwise, the object q will fly if and only if the object q is balanced\
    \ (it is a palindromic table) and the sum of its elements is less than or equal\
    \ the maximum possible weight w.\n  local balanced = is_balanced(q)\n  local sum\
    \ = 0\n  for _, v in pairs(q) do sum = sum + v end\n  return balanced and sum\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcofrhb5w.lua:20:\
    \ attempt to call global 'is_palindrome' (a nil value)\nstack traceback:\n\t/tmp/tmpcofrhb5w.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpcofrhb5w.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case: if the table is balanced, then\
    \ it must fly.\n\tif is_balanced(q) then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmbse1968.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your code here.\n\tlocal sum = 0\n\
    \tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\tend\n\tif sum < w then\n\t\treturn\
    \ false\n\telseif sum == w then\n\t\treturn true\n\telse\n\t\treturn false\n\t\
    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpagydw8e8.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpagydw8e8.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_weight =\
    \ 0\n  local balanced = true\n  for i = 1, #q do\n    if q[i] > max_weight then\n\
    \      max_weight = q[i]\n    end\n    if q[i] > max_weight then\n      balanced\
    \ = false\n    end\n  end\n  if balanced and max_weight <= w then\n    return\
    \ true\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn775ua2x.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpn775ua2x.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < max_weight then\n\
    \t\treturn false\n\tend\n\tlocal reversed_q = reverse(q)\n\tlocal reversed_reversed_q\
    \ = reverse(reversed_q)\n\tlocal max_reversed_weight = w\n\tlocal max_reversed_sum\
    \ = 0\n\tfor _, v in pairs(reversed_q) do\n\t\tmax_reversed_sum = max_reversed_sum\
    \ + v\n\tend\n\tif max_reversed_sum < max_reversed_weight then\n\t\treturn false\n\
    \tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphv5t4cgc.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphv5t4cgc.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = q[i]\n\t\tif sum > max_sum then\n\t\t\tmax_sum\
    \ = sum\n\t\t\tmax_weight = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ld4uqtx.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ld4uqtx.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case: if the table is balanced, and\
    \ the sum of its elements is less than or equal the maximum possible weight, then\
    \ the table will fly.\n\tif is_balanced(q) and is_palindrome(q) and sum_of_elements(q)\
    \ <= w then\n\t\treturn true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4g8_fmjb.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then return\
    \ false end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2mtdqt4n.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2mtdqt4n.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case: if the table is balanced, then\
    \ it must fly.\n  if is_balanced(q) then\n    return true\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpood7r6b6.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q do\n      sum = sum\
    \ + q[j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfru4_8p.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgfru4_8p.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if q == nil then return false end\n  if w==0\
    \ then return false end\n  if #q==0 then return true end\n  if #q==1 then return\
    \ w==q[1] end\n  if #q==2 then return w==q[1]+q[2] end\n  if #q==3 then return\
    \ w==q[1]+q[2]+q[3] end\n  if #q==4 then return w==q[1]+q[2]+q[3]+q[4] end\n \
    \ if #q==5 then return w==q[1]+q[2]+q[3]+q[4]+q[5] end\n  if #q==6 then return\
    \ w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6] end\n  if #q==7 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]\
    \ end\n  if #q==8 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8] end\n\
    \  if #q==9 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8]+q[9] end\n\
    \  if #q==10 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8]+q[9]+q[10]\
    \ end\n  if #q==11 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8]+q[9]+q[10]+q[11]\
    \ end\n  if #q==12 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8]+q[9]+q[10]+q[11]+q[12]\
    \ end\n  if #q==13 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8]+q[9]+q[10]+q[11]+q[12]+q[13]\
    \ end\n  if #q==14 then return w==q[1]+q[2]+q[3]+q[4]+q[5]+q[6]+q[7]+q[8]+q[9]+q[10]+q[11]+q[12]+q[13]+q[14]\
    \ end\n  if #q==15 then return w==q\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxwrk5evy.lua:35: ''end'' expected (to close ''if'' at line
    34) near ''lu''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tlocal is_balanced = true\n\tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j =\
    \ 1, #q do\n\t\t\tsum = sum + q[j][i]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\
    \tmax_sum = sum\n\t\t\tmax_weight = w\n\t\tend\n\t\tif sum < 0 then\n\t\t\tis_balanced\
    \ = false\n\t\tend\n\tend\n\treturn is_balanced and max_sum <= max_weight\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx63tl64f.lua:23:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmpx63tl64f.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpx63tl64f.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsiqajpg.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzsiqajpg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9q48n4g1.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97s1y68j.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp97s1y68j.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if #q == 0 then\n    return true\n  end\n\
    \  if #q == 1 then\n    return q[1] == w\n  end\n  local max_weight = w\n  local\
    \ max_sum = 0\n  for i = 1, #q do\n    local s = q[i]\n    local w = q[i - 1]\n\
    \    if w > max_weight then\n      max_weight = w\n    end\n    if s > max_sum\
    \ then\n      max_sum = s\n    end\n  end\n  return max_sum <= max_weight\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4ey94zl.lua:28:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo4ey94zl.lua:28:\
    \ in function 'candidate'\n\t/tmp/tmpo4ey94zl.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here.\n  local function\
    \ is_balanced(table)\n    local sum = 0\n    for i = 1, #table do\n      sum =\
    \ sum + table[i]\n    end\n    return sum == w\n  end\n  local function is_palindrome(table)\n\
    \    local s = \"\"\n    for i = 1, #table do\n      s = s .. table[i]\n    end\n\
    \    return s == table.concat(table, 1)\n  end\n  return is_balanced(q) and is_palindrome(q)\
    \ and #q >= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt30t61b.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplt30t61b.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here.\n  -- The object\
    \ q will fly if it's balanced (it is a palindromic table) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n  -- Example:\n  -- >>>\
    \ will_it_fly({1, 2}, 5)\n  -- false\n  -- # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n  -- >>> will_it_fly({3, 2, 3}, 1)\n  -- false\n\
    \  -- # it's balanced, but 3+2+3 is more than the maximum possible weight.\n \
    \ -- >>> will_it_fly({3, 2, 3}, 9)\n  -- true\n  -- # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n  -- >>> will_it_fly({3}, 5)\n  -- true\n\
    \  -- # 3 is less than the maximum possible weight, and it's balanced.\n  local\
    \ function is_balanced(t)\n    local sum = 0\n    for _, v in pairs(t) do\n  \
    \    sum = sum + v\n    end\n    return sum == w\n  end\n  local function is_palindrome(t)\n\
    \    local s = ''\n    for _, v in pairs(t) do\n      s = s .. v\n    end\n  \
    \  return s == t:reverse()\n  end\n  local function is_less_or_equal_to_w(t, w)\n\
    \    local s = ''\n    for _, v in pairs(t) do\n      s = s .. v\n    end\n  \
    \  return s == t:reverse() and w <= #t\n  end\n  return is_balanced(q) and is_palindrome(q)\
    \ and is_less_or_equal_to_w(q, w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_m3iu_by.lua:59:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_m3iu_by.lua:59:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for k, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujw8c4zb.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpujw8c4zb.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if w == 0 then\n    return true\n  end\n \
    \ local max_weight = w\n  local max_sum = 0\n  for i = 1, #q do\n    local sum\
    \ = 0\n    for j = 1, #q[i] do\n      sum = sum + q[i][j]\n    end\n    if sum\
    \ > max_sum then\n      max_sum = sum\n      max_weight = w\n    end\n  end\n\
    \  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8snnilrt.lua:24:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmp8snnilrt.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp8snnilrt.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your solution here\n\tlocal max_weight\
    \ = w\n\tlocal sum = 0\n\tfor _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum\
    \ > max_weight then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zm6f4ci.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0zm6f4ci.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  local is_balanced = true\n  for i = 1, #q do\n    local sum = 0\n    for j\
    \ = 1, #q[i] do\n      sum = sum + q[i][j]\n    end\n    if sum > max_sum then\n\
    \      max_sum = sum\n      max_weight = w\n    end\n    if sum < 0 then\n   \
    \   is_balanced = false\n    end\n  end\n  return is_balanced and max_sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps98gr45k.lua:22:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmps98gr45k.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmps98gr45k.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\n\t-- If q is balanced, then its sum is less than or equal to w\n\
    \tif q:is_balanced(w) then\n\t\treturn true\n\tend\n\t-- If q is unbalanced, then\
    \ its sum is greater than or equal to w\n\tif q:is_unbalanced(w) then\n\t\treturn\
    \ false\n\tend\n\t-- If q is unbalanced, then its sum is greater than or equal\
    \ to w\n\treturn will_it_fly(q:reverse(), w)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmpp45g_0.lua:22:\
    \ attempt to call method 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpmpp45g_0.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpmpp45g_0.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if w == 0 then return true end\n  local max_weight\
    \ = w\n  local balanced = true\n  for i = 1, #q do\n    if q[i] > max_weight then\
    \ balanced = false end\n    max_weight = max_weight - q[i]\n  end\n  return balanced\
    \ and max_weight <= 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_vf8wmif.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_vf8wmif.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tlocal is_balanced = true\n\tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j =\
    \ 1, #q[i] do\n\t\t\tsum = sum + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\
    \t\t\tmax_sum = sum\n\t\t\tmax_weight = w\n\t\tend\n\t\tif sum < -max_sum then\n\
    \t\t\tis_balanced = false\n\t\tend\n\tend\n\treturn is_balanced and max_sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelu9t3d0.lua:22:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpelu9t3d0.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpelu9t3d0.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q do\n      sum = sum\
    \ + q[j][i]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pi7788q.lua:22:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmp0pi7788q.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp0pi7788q.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal sum = 0\n\tfor _, v in pairs(q) do\n\
    \t\tsum = sum + v\n\tend\n\treturn sum <= w\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp171rjj8e.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp171rjj8e.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_weight2\
    \ = max_weight * max_weight\n\tlocal max_weight3 = max_weight2 * max_weight\n\t\
    local max_weight4 = max_weight3 * max_weight\n\tlocal max_weight5 = max_weight4\
    \ * max_weight\n\tlocal max_weight6 = max_weight5 * max_weight\n\tlocal max_weight7\
    \ = max_weight6 * max_weight\n\tlocal max_weight8 = max_weight7 * max_weight\n\
    \tlocal max_weight9 = max_weight8 * max_weight\n\tlocal max_weight10 = max_weight9\
    \ * max_weight\n\tlocal max_weight11 = max_weight10 * max_weight\n\tlocal max_weight12\
    \ = max_weight11 * max_weight\n\tlocal max_weight13 = max_weight12 * max_weight\n\
    \tlocal max_weight14 = max_weight13 * max_weight\n\tlocal max_weight15 = max_weight14\
    \ * max_weight\n\tlocal max_weight16 = max_weight15 * max_weight\n\tlocal max_weight17\
    \ = max_weight16 * max_weight\n\tlocal max_weight18 = max_weight17 * max_weight\n\
    \tlocal max_weight19 = max_weight18 * max_weight\n\tlocal max_weight20 = max_weight19\
    \ * max_weight\n\tlocal max_weight21 = max_weight20 * max_weight\n\tlocal max_weight22\
    \ = max_weight21 * max_weight\n\tlocal max_weight23 = max_weight22 * max_weight\n\
    \tlocal max_weight24 = max_weight23 * max_weight\n\tlocal max_weight25 = max_weight24\
    \ * max_weight\n\tlocal max_weight26 = max_weight25 * max_weight\n\tlocal max_weight27\
    \ = max_weight26 * max_weight\n\tlocal max_weight28 = max_weight27 * max_weight\n\
    \tlocal max_weight29 = max_weight28 * max_weight\n\tlocal max_weight30 = max_weight29\
    \ * max_weight\n\tlocal max_weight31 = max_weight30 * max_weight\n\tlocal max_weight32\
    \ = max_weight31 * max_weight\n\tlocal max_weight33 = max_weight32 * max_weight\n\
    \tlocal max_weight34 = max_weight33 * max_weight\n\tlocal max_weight35 = max_weight34\
    \ * max_weight\n\tlocal max_weight36 = max_weight35 * max_weight\n\tlocal max_weight37\
    \ = max_weight36 * max_weight\n\tlocal max_weight38 = max_weight37 * max_weight\n\
    \tlocal max_weight39 = max_weight38 * max_weight\n\tlocal max_weight40 = max_weight39\
    \ * max_weight\n\tlocal max_weight41 = max_weight40 * max_weight\n\tlocal max_weight\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpifk9dasi.lua:71: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9s2pdma.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9s2pdma.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal s = q[i]\n\t\tif s == 0 then\n\t\t\tbreak\n\t\t\
    elseif s > max_weight then\n\t\t\tmax_weight = s\n\t\tend\n\t\tmax_sum = max_sum\
    \ + s\n\tend\n\tif max_sum < w then\n\t\treturn false\n\telseif max_sum == w then\n\
    \t\treturn true\n\telse\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_45age8y.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_45age8y.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal maxw = w + 1\n\tlocal sum = 0\n\tfor\
    \ i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum > maxw then\n\t\t\treturn false\n\
    \t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_nx6_eyc.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_nx6_eyc.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsiqajpg.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzsiqajpg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case: if the table is balanced, and\
    \ the sum of its elements is less than or equal the maximum possible weight, then\
    \ the table will fly.\n\tif is_balanced(q) and is_less_or_equal_to_max_weight(w,\
    \ get_sum_of_elements(q)) then\n\t\treturn true\n\tend\n\t-- Recursive case: if\
    \ the table is unbalanced, and the sum of its elements is less than or equal the\
    \ maximum possible weight, then the table will not fly.\n\tif not is_balanced(q)\
    \ and is_less_or_equal_to_max_weight(w, get_sum_of_elements(q)) then\n\t\treturn\
    \ false\n\tend\n\t-- Recursive case: if the table is balanced, and the sum of\
    \ its elements is greater than the maximum possible weight, then the table will\
    \ fly.\n\tif is_balanced(q) and is_greater_than_max_weight(w, get_sum_of_elements(q))\
    \ then\n\t\treturn true\n\tend\n\t-- Recursive case: if the table is unbalanced,\
    \ and the sum of its elements is greater than the maximum possible weight, then\
    \ the table will not fly.\n\tif not is_balanced(q) and is_greater_than_max_weight(w,\
    \ get_sum_of_elements(q)) then\n\t\treturn false\n\tend\n\t-- Recursive case:\
    \ if the table is balanced, and the sum of its elements is equal to the maximum\
    \ possible weight, then the table will fly.\n\tif is_balanced(q) and is_equal_to_max_weight(w,\
    \ get_sum_of_elements(q)) then\n\t\treturn true\n\tend\n\t-- Recursive case: if\
    \ the table is unbalanced, and the sum of its elements is equal to the maximum\
    \ possible weight, then the table will not fly.\n\tif not is_balanced(q) and is_equal_to_max_weight(w,\
    \ get_sum_of_elements(q)) then\n\t\treturn false\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpthrs0o3u.lua:18:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpthrs0o3u.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpthrs0o3u.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q do\n      sum = sum\
    \ + q[j][i]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pi7788q.lua:22:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmp0pi7788q.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp0pi7788q.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif q == nil or w == nil then\n\
    \t\treturn true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp53zrco_y.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your solution here\n\tlocal maxW\
    \ = w\n\tlocal maxSum = 0\n\tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j =\
    \ 1, #q[i] do\n\t\t\tsum = sum + q[i][j]\n\t\tend\n\t\tif sum > maxSum then\n\t\
    \t\tmaxSum = sum\n\t\t\tmaxW = w\n\t\tend\n\tend\n\treturn maxSum <= maxW\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnf98qefy.lua:22:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpnf98qefy.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpnf98qefy.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9s2pdma.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9s2pdma.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local max =\
    \ 0\n  for i = 1, #q do\n    max = max + q[i]\n  end\n  if max <= w then\n   \
    \ return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzdc7h_t.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyzdc7h_t.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\n\t-- If q is balanced, then its elements sum must be less than\
    \ or equal to w\n\tif is_balanced(q) then\n\t\tlocal sum = 0\n\t\tfor _, v in\
    \ pairs(q) do\n\t\t\tsum = sum + v\n\t\tend\n\t\treturn sum <= w\n\tend\n\t--\
    \ If q is not balanced, then it must have a single element less than or equal\
    \ to w\n\treturn will_it_fly({q[1]}, w) or will_it_fly({q[2]}, w)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp30gv62nx.lua:22:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmp30gv62nx.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp30gv62nx.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local max_weight\
    \ = w\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum >\
    \ max_weight then\n      return false\n    end\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvw5_io73.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvw5_io73.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\n\t-- If q is balanced, then it must also be palindromic\n\tif is_balanced(q)\
    \ then\n\t\t-- If q is palindromic, then it must also be palindromic\n\t\tif is_palindromic(q)\
    \ then\n\t\t\t-- If q is balanced, then it must also be palindromic\n\t\t\tif\
    \ is_balanced(q) then\n\t\t\t\t-- If q is palindromic, then it must also be palindromic\n\
    \t\t\t\tif is_palindromic(q) then\n\t\t\t\t\t-- If q is balanced, then it must\
    \ also be palindromic\n\t\t\t\t\tif is_balanced(q) then\n\t\t\t\t\t\t-- If q is\
    \ palindromic, then it must also be palindromic\n\t\t\t\t\t\tif is_palindromic(q)\
    \ then\n\t\t\t\t\t\t\t-- If q is balanced, then it must also be palindromic\n\t\
    \t\t\t\t\t\tif is_balanced(q) then\n\t\t\t\t\t\t\t\t-- If q is palindromic, then\
    \ it must also be palindromic\n\t\t\t\t\t\t\t\tif is_palindromic(q) then\n\t\t\
    \t\t\t\t\t\t\t-- If q is balanced, then it must also be palindromic\n\t\t\t\t\t\
    \t\t\t\tif is_balanced(q) then\n\t\t\t\t\t\t\t\t\t\t-- If q is palindromic, then\
    \ it must also be palindromic\n\t\t\t\t\t\t\t\t\t\tif is_palindromic(q) then\n\
    \t\t\t\t\t\t\t\t\t\t\t-- If q is balanced, then it must also be palindromic\n\t\
    \t\t\t\t\t\t\t\t\t\tif is_balanced(q) then\n\t\t\t\t\t\t\t\t\t\t\t\t-- If q is\
    \ palindromic, then it must also be palindromic\n\t\t\t\t\t\t\t\t\t\t\t\tif is_palindromic(q)\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t-- If q is balanced, then it must also be palindromic\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\tif is_balanced(q) then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    -- If q is palindromic, then it must also be palindromic\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\tif is_palindromic(q) then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- If q is balanced,\
    \ then it must also be palindromic\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif is_balanced(q)\
    \ then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- If q is palindromic, then it must also\
    \ be palindromic\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif is_palindromic(q) then\n\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t-- If q is balanced, then it must also be palindromic\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif is_balanced(q) then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t-- If q is palindromic, then it must also be palindromic\n\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif is_palindromic(q) then\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgfq67ys7.lua:70: ''end'' expected (to close ''if'' at line
    56) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9s2pdma.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9s2pdma.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for _, v in pairs(q) do\n    max_sum = max_sum + v\n  end\n  return max_sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwstdhiym.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwstdhiym.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = q[i]\n    if sum > max_sum then\n      max_sum\
    \ = sum\n      max_weight = i\n    end\n  end\n  return max_sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_czr9_ng.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_czr9_ng.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local s = q[i]\n    if s == 0 then\n      return false\n\
    \    end\n    max_sum = max_sum + s\n    if max_sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptah_kxjo.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptah_kxjo.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = q[i]\n    if sum > max_sum then\n      max_sum\
    \ = sum\n      max_weight = w\n    end\n  end\n  return max_sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bvny09u.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3bvny09u.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor _, v in pairs(q) do\n\t\tlocal sum = 0\n\t\tfor i = 1, v do\n\t\t\tsum =\
    \ sum + i\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = v\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6y9u90_b.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6y9u90_b.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your code here.\n\t-- The object\
    \ q will fly if it's balanced (it is a palindromic table) and the sum of its elements\
    \ is less than or equal the maximum possible weight w.\n\t-- Example:\n\t-- >>>\
    \ will_it_fly({1, 2}, 5)\n\t-- false\n\t-- # 1+2 is less than the maximum possible\
    \ weight, but it's unbalanced.\n\t-- >>> will_it_fly({3, 2, 3}, 1)\n\t-- false\n\
    \t-- # it's balanced, but 3+2+3 is more than the maximum possible weight.\n\t\
    -- >>> will_it_fly({3, 2, 3}, 9)\n\t-- true\n\t-- # 3+2+3 is less than the maximum\
    \ possible weight, and it's balanced.\n\t-- >>> will_it_fly({3}, 5)\n\t-- true\n\
    \t-- # 3 is less than the maximum possible weight, and it's balanced.\n\tlocal\
    \ function is_balanced(table)\n\t\t-- Write your code here.\n\t\t-- The object\
    \ table is balanced if the sum of its elements is less than or equal the maximum\
    \ possible weight w.\n\t\t-- Example:\n\t\t-- >>> is_balanced({1, 2})\n\t\t--\
    \ false\n\t\t-- # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \t\t-- >>> is_balanced({3, 2, 3})\n\t\t-- true\n\t\t-- # it's balanced, but 3+2+3\
    \ is more than the maximum possible weight.\n\t\t-- >>> is_balanced({3, 2, 3})\n\
    \t\t-- true\n\t\t-- # 3+2+3 is less than the maximum possible weight, and it's\
    \ balanced.\n\t\t-- >>> is_balanced({3})\n\t\t-- true\n\t\t-- # 3 is less than\
    \ the maximum possible weight, and it's balanced.\n\t\tlocal function is_palindromic(table)\n\
    \t\t\t-- Write your code here.\n\t\t\t-- The object table is a palindromic table\
    \ if the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n\t\t\t-- Example:\n\t\t\t-- >>> is_palindromic({1, 2})\n\t\t\t-- false\n\
    \t\t\t-- # 1+2 is less than the maximum possible weight, but it's unbalanced.\n\
    \t\t\t-- >>> is_palindromic({3, 2, 3})\n\t\t\t-- true\n\t\t\t-- # it's balanced,\
    \ but 3+2+3 is more than the maximum possible weight.\n\t\t\t-- >>> is_palindromic({3,\
    \ 2, 3})\n\t\t\t-- true\n\t\t\t-- # 3+2+3 is less than the maximum possible weight,\
    \ and it's balanced.\n\t\t\t-- >>> is_palindromic({3})\n\t\t\t-- true\n\t\t\t\
    -- # 3 is less than the maximum possible weight, and it's balance\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpribh11zz.lua:76: ''end'' expected (to close ''function'' at
    line 48) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfqzwv5w.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppfqzwv5w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfqzwv5w.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppfqzwv5w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal sum = 0\n\tfor _, v in pairs(q) do\n\
    \t\tsum = sum + v\n\tend\n\tif sum < w then\n\t\treturn false\n\tend\n\tlocal\
    \ max = 0\n\tfor _, v in pairs(q) do\n\t\tif v > max then\n\t\t\tmax = v\n\t\t\
    end\n\tend\n\tif max <= w then\n\t\treturn true\n\tend\n\treturn false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp58h3xwyu.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp58h3xwyu.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < max_weight then\n\
    \t\treturn false\n\tend\n\tlocal reversed_q = reverse(q)\n\tlocal reversed_w =\
    \ w\n\tfor _, v in pairs(reversed_q) do\n\t\treversed_w = reversed_w - v\n\tend\n\
    \tif reversed_w == 0 then\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1lt7p6p.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz1lt7p6p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tlocal is_balanced = true\n\tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j =\
    \ 1, #q[i] do\n\t\t\tsum = sum + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\
    \t\t\tmax_sum = sum\n\t\tend\n\t\tif sum > max_weight then\n\t\t\tmax_weight =\
    \ sum\n\t\tend\n\tend\n\tif max_sum > w then\n\t\treturn false\n\tend\n\tif max_weight\
    \ == w then\n\t\treturn true\n\tend\n\treturn is_balanced and will_it_fly(q, max_weight)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyeimxkmz.lua:22:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpyeimxkmz.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpyeimxkmz.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < max_weight then\n\
    \t\treturn false\n\tend\n\tlocal reversed_q = reverse(q)\n\tlocal reversed_w =\
    \ w\n\tfor _, v in pairs(reversed_q) do\n\t\treversed_w = reversed_w - v\n\tend\n\
    \tif reversed_w == 0 then\n\t\treturn true\n\tend\n\treturn false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz1lt7p6p.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz1lt7p6p.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your code here.\n  local max_weight\
    \ = w\n  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum\
    \ > max_weight then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqvcwuh1.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuqvcwuh1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local maxW = w\n  local maxSum = 0\n  for\
    \ i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum +\
    \ q[i][j]\n    end\n    if sum > maxSum then\n      maxSum = sum\n      maxW =\
    \ w\n    end\n  end\n  return maxSum < maxW\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm44tihpf.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpm44tihpf.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpm44tihpf.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q do\n      sum = sum\
    \ + q[j][i]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0pi7788q.lua:22:\
    \ attempt to index field '?' (a number value)\nstack traceback:\n\t/tmp/tmp0pi7788q.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmp0pi7788q.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local function\
    \ is_balanced(t)\n    local sum = 0\n    for _, v in pairs(t) do\n      sum =\
    \ sum + v\n    end\n    return sum == w\n  end\n  local function is_palindrome(t)\n\
    \    local s = \"\"\n    for _, v in pairs(t) do\n      s = s .. v\n    end\n\
    \    return s == s:reverse()\n  end\n  local function is_balanced_and_palindrome(t)\n\
    \    return is_balanced(t) and is_palindrome(t)\n  end\n  return is_balanced_and_palindrome(q)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprov1_ygz.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmprov1_ygz.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9s2pdma.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9s2pdma.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\t\tbreak\n\t\tend\n\tend\n\treturn balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7ke957i.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu7ke957i.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local maxWeight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > maxWeight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwwpbdrrx.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwwpbdrrx.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your solution here\n\tlocal max_weight\
    \ = w\n\tlocal sum = 0\n\tfor _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum\
    \ > max_weight then\n\t\t\treturn false\n\t\tend\n\tend\n\treturn true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0zm6f4ci.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0zm6f4ci.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your solution here\n\t-- Don't forget\
    \ to return true or false.\n\t-- Don't forget to check that the input is a palindromic\
    \ table and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ and that the sum of its elements is less than or equal the maximum possible\
    \ weight w.\n\t-- Don't forget to check that the input is a palindromic table\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0_0xpe2m.lua:48: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4we6gkmg.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\n  -- If q is balanced, then its sum is less than or equal to w\n\
    \  if is_balanced(q) then\n    return q:sum() <= w\n  end\n  -- If q is not balanced,\
    \ then its sum is greater than or equal to w\n  return q:sum() >= w\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyruyu30w.lua:22:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpyruyu30w.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpyruyu30w.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuz4tvx1w.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuz4tvx1w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9q48n4g1.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < max_weight then\n\
    \t\treturn false\n\telse\n\t\treturn true\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqz9vz3l.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxqz9vz3l.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfqzwv5w.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppfqzwv5w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tlocal is_balanced = true\n\tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j =\
    \ 1, #q[i] do\n\t\t\tsum = sum + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\
    \t\t\tmax_sum = sum\n\t\t\tmax_weight = w\n\t\tend\n\t\tif sum < -max_sum then\n\
    \t\t\tis_balanced = false\n\t\tend\n\tend\n\treturn is_balanced and max_sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpelu9t3d0.lua:22:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpelu9t3d0.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpelu9t3d0.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local s = q[i]\n    if s == 0 then\n      -- The object\
    \ q will fly if and only if it is a palindromic table.\n      return true\n  \
    \  end\n    -- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n    if max_sum + s < max_weight then\n      max_sum = max_sum + s\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphi4fmcli.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphi4fmcli.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9q48n4g1.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9q48n4g1.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\n  -- If q is balanced, then its sum must be less than or equal\
    \ to w\n  if is_balanced(q) then\n    return q:sum() <= w\n  end\n  -- If q is\
    \ unbalanced, then its sum must be less than or equal to w\n  return not is_balanced(q)\
    \ or q:sum() <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptmkb59px.lua:22:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmptmkb59px.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmptmkb59px.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = q[i]\n    if sum > max_sum then\n      max_sum\
    \ = sum\n      max_weight = i\n    end\n  end\n  return max_sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_czr9_ng.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_czr9_ng.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\tend\n\tif sum < max_weight then\n\
    \t\treturn false\n\telse\n\t\treturn true\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxqz9vz3l.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxqz9vz3l.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case: if the table is balanced, and\
    \ the sum of its elements is less than or equal the maximum possible weight, return\
    \ true.\n\tif will_it_fly.is_balanced(q) and will_it_fly.sum_of_weights(q) <=\
    \ w then\n\t\treturn true\n\tend\n\t-- Recursive case: if the table is unbalanced,\
    \ and the sum of its elements is less than or equal the maximum possible weight,\
    \ return false.\n\treturn not will_it_fly.is_balanced(q) or not will_it_fly.sum_of_weights(q)\
    \ <= w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsu44pwpg.lua:18:\
    \ attempt to index upvalue 'will_it_fly' (a function value)\nstack traceback:\n\
    \t/tmp/tmpsu44pwpg.lua:18: in function 'candidate'\n\t/tmp/tmpsu44pwpg.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if q == nil or w == nil then\n\
    \    return false\n  end\n  -- If q is balanced, then its elements are less than\
    \ or equal the maximum possible weight.\n  if is_balanced(q) then\n    -- If w\
    \ is less than or equal to the maximum possible weight, then the object q will\
    \ fly.\n    return w <= max_weight(q)\n  end\n  -- If q is not balanced, then\
    \ its elements are greater than or equal to the maximum possible weight.\n  --\
    \ If w is less than or equal to the maximum possible weight, then the object q\
    \ will fly.\n  return w >= max_weight(q)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplsiksev6.lua:22:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmplsiksev6.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmplsiksev6.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case: if the table is balanced, and\
    \ the sum of its elements is less than or equal to the maximum possible weight,\
    \ return true.\n  if is_balanced(q) and is_palindromic(q) and is_less_or_equal_to_max(w,\
    \ sum(q)) then\n    return true\n  end\n  -- Recursive case: if the table is not\
    \ balanced, and the sum of its elements is less than or equal to the maximum possible\
    \ weight, return false.\n  if not is_balanced(q) or not is_palindromic(q) or not\
    \ is_less_or_equal_to_max(w, sum(q)) then\n    return false\n  end\n  -- Otherwise,\
    \ if the table is balanced, and the sum of its elements is less than or equal\
    \ to the maximum possible weight, return true.\n  return will_it_fly(q:reverse(),\
    \ w)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn116o91w.lua:18:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmpn116o91w.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpn116o91w.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  local is_balanced = true\n  for i = 1, #q do\n    local sum = q[i]\n    if\
    \ sum > max_weight then\n      max_weight = sum\n    end\n    if sum > max_sum\
    \ then\n      max_sum = sum\n    end\n    if not is_balanced and sum > max_weight\
    \ then\n      is_balanced = false\n    end\n  end\n  return is_balanced and max_sum\
    \ <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgm0xogru.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgm0xogru.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ _, v in pairs(q) do\n    sum = sum + v\n    if sum > max_weight then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1y02j8n.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpj1y02j8n.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  local is_balanced = true\n  for i = 1, #q do\n    local sum = 0\n    for j\
    \ = 1, #q[i] do\n      sum = sum + q[i][j]\n    end\n    if sum > max_sum then\n\
    \      max_sum = sum\n      max_weight = w\n    end\n    if sum < -max_sum then\n\
    \      is_balanced = false\n    end\n  end\n  return is_balanced and max_sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpru0v9159.lua:22:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpru0v9159.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpru0v9159.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local max_weight\
    \ = w\n  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum\
    \ > max_weight then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb14b07xy.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb14b07xy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case: if the table is balanced, and\
    \ the sum of its elements is less than or equal the maximum possible weight w,\n\
    \  -- then return true.\n  if is_balanced(q) and is_balanced(q) and w <= sum(q)\
    \ then\n    return true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmhnmv4lc.lua:34: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsiqajpg.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzsiqajpg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum = sum + q[i]\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97s1y68j.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp97s1y68j.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case: if the table is balanced, and\
    \ the sum of its elements is less than or equal to the maximum possible weight,\
    \ then the table will fly.\n\tif is_balanced(q) and w <= max_weight then\n\t\t\
    return true\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1gwedr4e.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local max_weight\
    \ = w\n  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum\
    \ > max_weight then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb14b07xy.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb14b07xy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case: if the table is balanced, and\
    \ the sum of its elements is less than or equal to the maximum possible weight,\
    \ return true.\n\tif is_balanced(q) and is_less_or_equal_to_max_weight(w, sum(q))\
    \ then\n\t\treturn true\n\tend\n\t-- Recursive case: if the table is not balanced,\
    \ and the sum of its elements is less than or equal to the maximum possible weight,\
    \ return false.\n\treturn not is_balanced(q) or not is_less_or_equal_to_max_weight(w,\
    \ sum(q))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4aqi3758.lua:18:\
    \ attempt to call global 'is_balanced' (a nil value)\nstack traceback:\n\t/tmp/tmp4aqi3758.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp4aqi3758.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local s = q[i]\n    if s > max_weight then\n      max_weight\
    \ = s\n    end\n    if s > max_sum then\n      max_sum = s\n    end\n  end\n \
    \ return max_sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq919f7k.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdq919f7k.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Base case\n\tif w == 0 then\n\t\treturn\
    \ true\n\tend\n\t-- Base case\n\tif w == 1 then\n\t\treturn true\n\tend\n\t--\
    \ Base case\n\tif w == 2 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w\
    \ == 3 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w == 4 then\n\t\treturn\
    \ true\n\tend\n\t-- Base case\n\tif w == 5 then\n\t\treturn true\n\tend\n\t--\
    \ Base case\n\tif w == 6 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w\
    \ == 7 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w == 8 then\n\t\treturn\
    \ true\n\tend\n\t-- Base case\n\tif w == 9 then\n\t\treturn true\n\tend\n\t--\
    \ Base case\n\tif w == 10 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w\
    \ == 11 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w == 12 then\n\t\t\
    return true\n\tend\n\t-- Base case\n\tif w == 13 then\n\t\treturn true\n\tend\n\
    \t-- Base case\n\tif w == 14 then\n\t\treturn true\n\tend\n\t-- Base case\n\t\
    if w == 15 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w == 16 then\n\t\
    \treturn true\n\tend\n\t-- Base case\n\tif w == 17 then\n\t\treturn true\n\tend\n\
    \t-- Base case\n\tif w == 18 then\n\t\treturn true\n\tend\n\t-- Base case\n\t\
    if w == 19 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w == 20 then\n\t\
    \treturn true\n\tend\n\t-- Base case\n\tif w == 21 then\n\t\treturn true\n\tend\n\
    \t-- Base case\n\tif w == 22 then\n\t\treturn true\n\tend\n\t-- Base case\n\t\
    if w == 23 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w == 24 then\n\t\
    \treturn true\n\tend\n\t-- Base case\n\tif w == 25 then\n\t\treturn true\n\tend\n\
    \t-- Base case\n\tif w == 26 then\n\t\treturn true\n\tend\n\t-- Base case\n\t\
    if w == 27 then\n\t\treturn true\n\tend\n\t-- Base case\n\tif w == 28 then\n\t\
    \treturn true\n\tend\n\t-- Base case\n\tif w == 29 then\n\t\treturn true\n\tend\n\
    \t-- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1n20i6rt.lua:150: ''end'' expected (to close ''function''
    at line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local max_weight\
    \ = w\n  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum\
    \ > max_weight then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb14b07xy.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb14b07xy.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local maxw = w\n  local maxwsum = 0\n  local\
    \ maxwsum2 = 0\n  local maxwsum3 = 0\n  local maxwsum4 = 0\n  local maxwsum5 =\
    \ 0\n  local maxwsum6 = 0\n  local maxwsum7 = 0\n  local maxwsum8 = 0\n  local\
    \ maxwsum9 = 0\n  local maxwsum10 = 0\n  local maxwsum11 = 0\n  local maxwsum12\
    \ = 0\n  local maxwsum13 = 0\n  local maxwsum14 = 0\n  local maxwsum15 = 0\n \
    \ local maxwsum16 = 0\n  local maxwsum17 = 0\n  local maxwsum18 = 0\n  local maxwsum19\
    \ = 0\n  local maxwsum20 = 0\n  local maxwsum21 = 0\n  local maxwsum22 = 0\n \
    \ local maxwsum23 = 0\n  local maxwsum24 = 0\n  local maxwsum25 = 0\n  local maxwsum26\
    \ = 0\n  local maxwsum27 = 0\n  local maxwsum28 = 0\n  local maxwsum29 = 0\n \
    \ local maxwsum30 = 0\n  local maxwsum31 = 0\n  local maxwsum32 = 0\n  local maxwsum33\
    \ = 0\n  local maxwsum34 = 0\n  local maxwsum35 = 0\n  local maxwsum36 = 0\n \
    \ local maxwsum37 = 0\n  local maxwsum38 = 0\n  local maxwsum39 = 0\n  local maxwsum40\
    \ = 0\n  local maxwsum41 = 0\n  local maxwsum42 = 0\n  local maxwsum43 = 0\n \
    \ local maxwsum44 = 0\n  local maxwsum45 = 0\n  local maxwsum46 = 0\n  local maxwsum47\
    \ = 0\n  local maxwsum48 = 0\n  local maxwsum49 = 0\n  local maxwsum50 = 0\n \
    \ local maxwsum51 = 0\n  local maxwsum52 = 0\n  local maxwsum53 = 0\n  local maxwsum54\
    \ = 0\n  local maxwsum55 = 0\n  local maxwsum56 = 0\n  local maxwsum57 = 0\n \
    \ local maxwsum58 = 0\n  local maxwsum59 = 0\n  local maxwsum60 = 0\n  local maxwsum61\
    \ = 0\n  local maxwsum62 = 0\n  local maxwsum63 = 0\n  local max\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfc8on298.lua:94: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local maxWeight\
    \ = w\n  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum >\
    \ maxWeight then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7quy2v9g.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7quy2v9g.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local maxW\
    \ = w\n  local maxSum = 0\n  for i = 1, #q do\n    local sum = 0\n    for j =\
    \ 1, #q do\n      if i == j then\n        sum = sum + q[i]\n      else\n     \
    \   sum = sum + q[i] * q[j]\n      end\n    end\n    if sum > maxSum then\n  \
    \    maxSum = sum\n      maxW = #q\n    end\n  end\n  return maxSum < w and maxW\
    \ == w\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp42nzqo5q.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp42nzqo5q.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  local is_balanced = true\n  for i = 1, #q do\n    local sum = 0\n    for j\
    \ = 1, #q do\n      sum = sum + q[j]\n    end\n    if sum > max_sum then\n   \
    \   max_sum = sum\n      max_weight = w\n    end\n    if sum < max_sum then\n\
    \      is_balanced = false\n    end\n  end\n  return is_balanced and max_sum <=\
    \ max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprildr872.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprildr872.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local maxW = w\n  local balanced = true\n\
    \  local sum = 0\n  for _, v in pairs(q) do\n    sum = sum + v\n    if sum > maxW\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= maxW\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc3cadx3.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprc3cadx3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case: if the object is a palindromic\
    \ table and the sum of its elements is less than or equal the maximum possible\
    \ weight w\n  if q == nil then\n    return false\n  elseif type(q) == 'table'\
    \ then\n    if #q == 0 then\n      return true\n    else\n      local max_weight\
    \ = w\n      local max_sum = max_weight\n      for i = #q, 1, -1 do\n        local\
    \ weight = q[i]\n        local sum = weight + max_sum\n        if sum > max_sum\
    \ then\n          max_sum = sum\n          max_weight = weight\n        end\n\
    \      end\n      return max_weight <= w\n    end\n  else\n    return false\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq123858u.lua:45:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq123858u.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor i, v in ipairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3keelc1r.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3keelc1r.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsiqajpg.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzsiqajpg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local max =\
    \ 0\n  for i = 1, #q do\n    max = max + q[i]\n  end\n  if max <= w then\n   \
    \ return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyzdc7h_t.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyzdc7h_t.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local sum = 0\n  for\
    \ i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp__4lc4hv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp__4lc4hv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q do\n      sum = sum\
    \ + q[j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfru4_8p.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgfru4_8p.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9q48n4g1.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if q == nil then return false end\n  if w\
    \ == nil then return false end\n  if #q == 0 then return true end\n  if #q ==\
    \ 1 then return will_it_fly(q[1], w) end\n  local max_weight = w\n  local max_sum\
    \ = 0\n  for i = 1, #q do\n    local s = q[i]\n    if s == 0 then return false\
    \ end\n    max_sum = max_sum + s\n    if max_sum > w then return false end\n \
    \ end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7xsqh3hn.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7xsqh3hn.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Write your solution here\n  local max_weight\
    \ = w\n  local is_balanced = true\n  local sum = 0\n  for i = 1, #q do\n    sum\
    \ = sum + q[i]\n    if sum > max_weight then\n      is_balanced = false\n    end\n\
    \  end\n  return is_balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpck0dvf77.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpck0dvf77.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsiqajpg.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzsiqajpg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor i, v in ipairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3keelc1r.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3keelc1r.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal sum = 0\n\t\
    for _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight then\n\t\t\
    \treturn false\n\t\tend\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsiqajpg.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpzsiqajpg.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor k, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0j3_mrs1.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0j3_mrs1.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal balanced = true\n\
    \tlocal sum = 0\n\tfor _, v in pairs(q) do\n\t\tsum = sum + v\n\t\tif sum > max_weight\
    \ then\n\t\t\tbalanced = false\n\t\tend\n\tend\n\treturn balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfqzwv5w.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppfqzwv5w.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tlocal is_balanced = true\n\tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j =\
    \ 1, #q[i] do\n\t\t\tsum = sum + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\
    \t\t\tmax_sum = sum\n\t\t\tmax_weight = w\n\t\tend\n\t\tif sum < 0 then\n\t\t\t\
    is_balanced = false\n\t\tend\n\tend\n\treturn is_balanced and max_sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpabao2utm.lua:22:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpabao2utm.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpabao2utm.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= max_weight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_1dyarc.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7_1dyarc.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case\n  if w == 0 then\n    return\
    \ true\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9q48n4g1.lua:33: ''end'' expected (to close ''function'' at
    line 16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > max_weight\
    \ then\n      balanced = false\n      break\n    end\n  end\n  return balanced\
    \ and sum <= max_weight\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh4r11rv.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplh4r11rv.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\tlocal max_weight = w\n\tlocal max_sum = 0\n\
    \tfor i = 1, #q do\n\t\tlocal sum = 0\n\t\tfor j = 1, #q[i] do\n\t\t\tsum = sum\
    \ + q[i][j]\n\t\tend\n\t\tif sum > max_sum then\n\t\t\tmax_sum = sum\n\t\t\tmax_weight\
    \ = w\n\t\tend\n\tend\n\treturn max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphmbzm9sp.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmphmbzm9sp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmphmbzm9sp.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n\t-- Write your solution here\n\tlocal max_weight\
    \ = w\n\tlocal balanced = true\n\tlocal sum = 0\n\tfor i = 1, #q do\n\t\tsum =\
    \ sum + q[i]\n\t\tif sum > max_weight then\n\t\t\tbalanced = false\n\t\tend\n\t\
    end\n\treturn balanced and sum <= max_weight\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdzgtwsk4.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdzgtwsk4.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local max_weight = w\n  local max_sum = 0\n\
    \  for i = 1, #q do\n    local sum = 0\n    for j = 1, #q[i] do\n      sum = sum\
    \ + q[i][j]\n    end\n    if sum > max_sum then\n      max_sum = sum\n      max_weight\
    \ = w\n    end\n  end\n  return max_sum <= max_weight\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgdf1misk.lua:21:\
    \ attempt to get length of field '?' (a number value)\nstack traceback:\n\t/tmp/tmpgdf1misk.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpgdf1misk.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  if q == nil then return false end\n  if w\
    \ == nil then return false end\n  if #q == 0 then return true end\n  if #q ==\
    \ 1 then return true end\n  if #q == 2 then return true end\n  if #q > 2 then\
    \ return false end\n  if #q > w then return false end\n  if #q > 1 then\n    local\
    \ a, b, c = unpack(q)\n    if a ~= b or c ~= b then return false end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = will_it_fly\n    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n\
    \    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_5kjy2r.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb_5kjy2r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  local maxWeight = w\n  local balanced = true\n\
    \  local sum = 0\n  for i = 1, #q do\n    sum = sum + q[i]\n    if sum > maxWeight\
    \ then\n      balanced = false\n    end\n  end\n  return balanced and sum <= maxWeight\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = will_it_fly\n\
    \    lu.assertEquals(candidate({3, 2, 3}, 9), true)\n    lu.assertEquals(candidate({1,\
    \ 2}, 5), false)\n    lu.assertEquals(candidate({3}, 5), true)\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 1), false)\n    lu.assertEquals(candidate({1, 2, 3}, 6), false)\n   \
    \ lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt2d9ii6k.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt2d9ii6k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750500
- exit_code: 1
  program: "-- Write a function that returns true if the object q will fly, and false\
    \ otherwise.\n-- The object q will fly if it's balanced (it is a palindromic table)\
    \ and the sum of its elements is less than or equal the maximum possible weight\
    \ w.\n-- Example:\n-- >>> will_it_fly({1, 2}, 5)\n-- false\n-- # 1+2 is less than\
    \ the maximum possible weight, but it's unbalanced.\n-- >>> will_it_fly({3, 2,\
    \ 3}, 1)\n-- false\n-- # it's balanced, but 3+2+3 is more than the maximum possible\
    \ weight.\n-- >>> will_it_fly({3, 2, 3}, 9)\n-- true\n-- # 3+2+3 is less than\
    \ the maximum possible weight, and it's balanced.\n-- >>> will_it_fly({3}, 5)\n\
    -- true\n-- # 3 is less than the maximum possible weight, and it's balanced.\n\
    local function will_it_fly(q, w)\n  -- Base case: if the object is a palindromic\
    \ table, and the sum of its elements is less than or equal the maximum possible\
    \ weight w\n  if is_palindromic(q) and sum(q) <= w then\n    return true\n  end\n\
    \  -- Recursive case: if the object is a palindromic table, and the sum of its\
    \ elements is less than or equal the maximum possible weight w\n  if is_palindromic(q)\
    \ then\n    local max_weight = w\n    local max_sum = 0\n    for i = 1, #q do\n\
    \      local current_weight = q[i]\n      local current_sum = current_weight +\
    \ max_sum\n      if current_sum > max_weight then\n        max_weight = current_weight\n\
    \        max_sum = current_sum\n      end\n    end\n    return will_it_fly(q,\
    \ max_weight)\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = will_it_fly\n    lu.assertEquals(candidate({3,\
    \ 2, 3}, 9), true)\n    lu.assertEquals(candidate({1, 2}, 5), false)\n    lu.assertEquals(candidate({3},\
    \ 5), true)\n    lu.assertEquals(candidate({3, 2, 3}, 1), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3}, 6), false)\n    lu.assertEquals(candidate({5}, 5), true)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy6f1z02s.lua:18:\
    \ attempt to call global 'is_palindromic' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpy6f1z02s.lua:18: in function 'candidate'\n\t/tmp/tmpy6f1z02s.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750500
