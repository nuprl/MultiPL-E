name: HumanEval_52_below_threshold
language: lua
prompt: "-- Return true if all numbers in the table l are below threshold t.\n-- >>>\
  \ below_threshold({1, 2, 4, 10}, 100)\n-- true\n-- >>> below_threshold({1, 20, 4,\
  \ 10}, 5)\n-- false\nlocal function below_threshold(l, t)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = below_threshold\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}, 100), true)\n    lu.assertEquals(candidate({1,\
  \ 20, 4, 10}, 5), false)\n    lu.assertEquals(candidate({1, 20, 4, 10}, 21), true)\n\
  \    lu.assertEquals(candidate({1, 20, 4, 10}, 22), true)\n    lu.assertEquals(candidate({1,\
  \ 8, 4, 10}, 11), true)\n    lu.assertEquals(candidate({1, 8, 4, 10}, 10), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local count = 0\n  for _, v in ipairs(l) do\n    if v < t then\n\
    \      return false\n    end\n    count = count + 1\n  end\n  return count ==\
    \ 0\nend", "  local count = 0\n  for _, v in ipairs(l) do\n    if v < t then\n\
    \      count = count + 1\n    end\n  end\n  return count == 0\nend", "  local\
    \ n = #l\n  if n == 0 then return false end\n  local m = math.max(t, 1)\n  for\
    \ i = 1, n do\n    if l[i] < m then return false end\n  end\n  return true\nend",
  "  local count = 0\n  for _, v in ipairs(l) do\n    if v < t then\n      return\
    \ false\n    end\n    count = count + 1\n  end\n  return count == 0\nend", " \
    \ local count = 0\n  for _, v in ipairs(l) do\n    if v < t then\n      count\
    \ = count + 1\n    end\n  end\n  return count == 0\nend", "  local count = 0\n\
    \  for _, v in ipairs(l) do\n    if v < t then\n      count = count + 1\n    end\n\
    \  end\n  return count == 0\nend", "  local count = 0\n  for _, v in ipairs(l)\
    \ do\n    if v < t then\n      return false\n    end\n    count = count + 1\n\
    \  end\n  return count == 0\nend", "  local n = #l\n  for i = 1, n do\n    if\
    \ l[i] < t then return false end\n  end\n  return true\nend", "  local count =\
    \ 0\n  for _, v in ipairs(l) do\n    if v < t then\n      count = count + 1\n\
    \    end\n  end\n  return count == 0\nend", "  local count = 0\n  for _, v in\
    \ ipairs(l) do\n    if v < t then\n      count = count + 1\n    end\n  end\n \
    \ return count == 0\nend", "  local count = 0\n  for _, v in ipairs(l) do\n  \
    \  if v < t then\n      count = count + 1\n    end\n  end\n  return count == 0\n\
    end", "  local n = 0\n  for _, v in ipairs(l) do\n    if v < t then\n      n =\
    \ n + 1\n    end\n  end\n  return n == 0\nend", "  local function is_below(num)\n\
    \    return num < t\n  end\n  return #l == 0 or all( is_below(unpack(l)) )\nend",
  "  local count = 0\n  for _, v in ipairs(l) do\n    if v < t then count = count\
    \ + 1 end\n  end\n  return count == 0\nend", "  local n = #l\n  for i = 1, n do\n\
    \    if l[i] < t then\n      return false\n    end\n  end\n  return true\nend",
  "  local n = 0\n  for _, v in ipairs(l) do\n    if v < t then\n      n = n + 1\n\
    \    end\n  end\n  return n == 0\nend", "  local count = 0\n  for _, v in ipairs(l)\
    \ do\n    if v < t then\n      return false\n    end\n    count = count + 1\n\
    \  end\n  return count == 0\nend", "  local count = 0\n  for _, v in ipairs(l)\
    \ do\n    if v < t then\n      count = count + 1\n    end\n  end\n  return count\
    \ == 0\nend", "  local n = #l\n  for i = 1, n do\n    if l[i] < t then return\
    \ false end\n  end\n  return true\nend", "  local function is_below(num)\n   \
    \ return num < t\n  end\n  local function is_above(num)\n    return num >= t\n\
    \  end\n  local function is_between(num)\n    return is_below(num) or is_above(num)\n\
    \  end\n  local function is_equal(num)\n    return num == t\n  end\n  local function\
    \ is_less_than(num)\n    return num < t\n  end\n  local function is_greater_than(num)\n\
    \    return num > t\n  end\n  local function is_less_than_or_equal(num)\n    return\
    \ num <= t\n  end\n  local function is_greater_than_or_equal(num)\n    return\
    \ num >= t\n  end\n  local function is_between(num)\n    return is_between(num)\
    \ or is_equal(num)\n  end\n  local function is_equal(num)\n    return is_equal(num)\
    \ or is_between(num)\n  end\n  local function is_less_than(num)\n    return is_less_than(num)\
    \ or is_greater_than(num)\n  end\n  local function is_greater_than(num)\n    return\
    \ is_greater_than(num) or is_less_than_or_equal(num)\n  end\n  local function\
    \ is_less_than_or_equal(num)\n    return is_less_than_or_equal(num) or is_greater_than_or_equal(num)\n\
    \  end\n  local function is_between(num)\n    return is_between(num) or is_equal(num)\n\
    \  end\n  local function is_equal(num)\n    return is_equal(num) or is_between(num)\n\
    \  end\n  local function is_less_than(num)\n    return is_less_than(num) or is_greater_than(num)\n\
    \  end\n  local function is_greater_than(num)\n    return is_greater_than(num)\
    \ or is_less_than_or_equal(num)\n  end\n  local function is_less_than_or_equal(num)\n\
    \    return is_less_than_or_equal(num) or is_greater_than_or_equal(num)\n  end\n\
    \  local function is_between(num)\n    return is_between(num) or is_equal(num)\n\
    \  end\n  local function is_equal(num)\n    return is_equal(num) or is_between(num)\n\
    \  end\n  local function is_less_than(num)\n    return is_less_than(num) or is_greater_than(num)\n\
    \  end\n  local function is_greater_than(num)\n    return is_greater_than(num)\
    \ or is_less_than_or_equal(num)\n  end\n  local function is_less_than_or_equal(num)\n\
    \    return is_less_than_or_equal(num) or is_greater_than_or_equal(num)\n  end\n\
    \  local function is_between(num)\n    return is_between(num) or is_equal(num)\n\
    \  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
