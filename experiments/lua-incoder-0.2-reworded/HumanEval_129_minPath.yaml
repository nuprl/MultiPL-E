name: HumanEval_129_minPath
language: lua
prompt: "-- Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n-- each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n-- inclusive appears exactly once on the cells of the grid.\n-- You have\
  \ to find the minimum path of length k in the grid. You can start\n-- from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n-- in other words,\
  \ you can go to cells which share an edge with you current\n-- cell.\n-- Please\
  \ note that a path of length k means visiting exactly k cells (not\n-- necessarily\
  \ distinct).\n-- You CANNOT go off the grid.\n-- A path A (of length k) is considered\
  \ less than a path B (of length k) if\n-- after making the ordered tables of the\
  \ values on the cells that A and B go\n-- through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n-- than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n-- such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n-- lst_A[j] = lst_B[j].\n-- It is guaranteed that the answer\
  \ is unique.\n-- Return an ordered table of the values on the cells that the minimum\
  \ path go through.\n-- Examples:    \n-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7,\
  \ 8, 9}}, 3)\n-- {1, 2, 1}\n-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)\n\
  -- {1}\nlocal function minPath(grid, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minPath\n\
  \    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})\n\
  \    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})\n   \
  \ lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14,\
  \ 15, 16}}, 4), {1, 2, 1, 2})\n    lu.assertEquals(candidate({{6, 4, 13, 10}, {5,\
  \ 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})\n  \
  \  lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3,\
  \ 10, 11, 16}}, 5), {1, 7, 1, 7, 1})\n    lu.assertEquals(candidate({{11, 8, 7,\
  \ 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1,\
  \ 6, 1})\n    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16,\
  \ 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})\n    lu.assertEquals(candidate({{2,\
  \ 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})\n    lu.assertEquals(candidate({{6,\
  \ 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})\n    lu.assertEquals(candidate({{1,\
  \ 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})\n    lu.assertEquals(candidate({{1,\
  \ 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = #grid, 1, 1\n\twhile\
    \ i <= n do\n\t\tlst_A[i] = grid[i]\n\t\ti = i + 1\n\tend\n\ti = 2\n\twhile i\
    \ <= n do\n\t\tlst_B[i] = grid[i]\n\t\ti = i + 1\n\tend\n\ti = 2\n\twhile i <=\
    \ n do\n\t\tlocal tmp = lst_A[i]\n\t\tlst_A[i] = lst_B[i]\n\t\tlst_B[i] = tmp\n\
    \t\ti = i + 1\n\tend\n\tlocal ans = {}\n\ti = 2\n\twhile i <= n do\n\t\tlocal\
    \ tmp = lst_A[i]\n\t\tlst_A[i] = lst_B[i]\n\t\tlst_B[i] = tmp\n\t\tans[i] = grid[i]\n\
    \t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tfor\
    \ i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\tend\n\tfor i = 1, #grid\
    \ do\n\t\ttable.insert(lst_B, grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\t\twhile\
    \ j <= #lst_A do\n\t\t\tif lst_A[j] < lst_B[j] then\n\t\t\t\tlocal k = j\n\t\t\
    \t\twhile k < #lst_A do\n\t\t\t\t\tif lst_A[k] > lst_B[k] then\n\t\t\t\t\t\tk\
    \ = k + 1\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\
    \t\tans[i] = lst_A[k]\n\t\t\t\ti = i + 1\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\
    \tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = #grid, 1, 1\n\twhile\
    \ i <= n do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i +\
    \ 1\n\tend\n\twhile j <= n do\n\t\tlocal i = 1\n\t\twhile i <= n do\n\t\t\tlocal\
    \ j = j + 1\n\t\t\twhile j <= n do\n\t\t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\
    \t\tlst_A[i], lst_B[j] = lst_B[j], lst_A[i]\n\t\t\t\tend\n\t\t\t\tj = j + 1\n\t\
    \t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\tj = j + 1\n\tend\n\tlocal ans = {}\n\t\
    local i = 1\n\twhile i <= n do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\tans[i]\
    \ = lst_A[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A,\
    \ lst_B = unpack(grid), unpack(grid)\n\tlocal i, j, k1, k2 = 1, #lst_A, 1, #lst_B\n\
    \twhile k > 0 do\n\t\tlocal new_i, new_j, new_k1, new_k2 = i, j, k1, k2\n\t\t\
    while new_k1 > 0 and lst_A[new_i][new_k1] < lst_B[new_i][new_k1] do\n\t\t\tnew_i\
    \ = new_i + 1\n\t\t\tnew_k1 = new_k1 - 1\n\t\tend\n\t\twhile new_k2 > 0 and lst_A[new_i][new_k2]\
    \ < lst_B[new_i][new_k2] do\n\t\t\tnew_j = new_j + 1\n\t\t\tnew_k2 = new_k2 -\
    \ 1\n\t\tend\n\t\tif new_k1 < k1 then\n\t\t\tk1 = new_k1\n\t\telseif new_k2 <\
    \ k2 then\n\t\t\tk2 = new_k2\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, k1, k2 = 1, #grid,\
    \ 1, 1\n\twhile k1 <= k2 do\n\t\tlocal cell = {}\n\t\tfor i = 1, k1 do\n\t\t\t\
    for j = 1, k2 do\n\t\t\t\ttable.insert(cell, grid[i][j])\n\t\t\tend\n\t\tend\n\
    \t\ttable.insert(lst_A, cell)\n\t\ttable.insert(lst_B, cell)\n\t\tk1 = k1 + 1\n\
    \t\tk2 = k2 + 1\n\tend\n\tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlocal cell\
    \ = {}\n\t\tfor j = 1, k2 do\n\t\t\ttable.insert(cell, grid[i][j])\n\t\tend\n\t\
    \ttable.insert(lst_A, cell)\n\t\ti = i + 1\n\tend\n\ttable.sort(lst_A, function(a,\
    \ b) return a[1] < b[1] end)\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= #lst_A\
    \ do\n\t\tlocal cell = {}\n\t\tfor j = 1, k2 do\n\t\t\ttable.insert(cell, grid[i][j])\n\
    \t\tend\n\t\ttable.insert(ans, cell)\n\t\ti = i + 1\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = unpack(grid) -- unpack grid\n\tlocal lst_A2 = {}\n\tlocal\
    \ lst_B2 = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlst_A[i] = lst_A[i] + 1\n\
    \t\tlst_B[i] = lst_B[i] + 1\n\t\tlst_A2[i] = lst_A[i]\n\t\tlst_B2[i] = lst_B[i]\n\
    \t\ti = i + 1\n\tend\n\tlst_A2[#lst_A2] = 1\n\tlst_B2[#lst_B2] = 1\n\tlocal lst_A3\
    \ = {}\n\tlocal lst_B3 = {}\n\tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlst_A3[i]\
    \ = lst_A2[i]\n\t\tlst_B3[i] = lst_B2[i]\n\t\ti = i + 1\n\tend\n\tlst_A3[#lst_A3]\
    \ = 1\n\tlst_B3[#lst_B3] = 1\n\tlocal lst_A4 = lst_A3\n\tlocal lst_B4 = lst_B3\n\
    \tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlst_A4[i] = lst_A4[i] + lst_A[i]\n\t\
    \tlst_B4[i] = lst_B4[i] + lst_B[i]\n\t\ti = i + 1\n\tend\n\tlst_A4[#lst_A4] =\
    \ lst_A[#lst_A]\n\tlst_B4[#lst_B4] = lst_B[#lst_B]\n\tlocal lst_A5 = lst_A4\n\t\
    local lst_B5 = lst_B4\n\tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlst_A5[i] =\
    \ lst_A5[i] + lst_A2[i]\n\t\tlst_B5[i] = lst_B5[i] + lst_B2[i]\n\t\ti = i + 1\n\
    \tend\n\tlst_A5[#lst_A5] = lst_A2[#lst_A2]\n\tlst_B5[#lst_B5] = lst_B2[#lst_B2]\n\
    \tlocal lst_A6 = lst_A5\n\tlocal lst_B6 = lst_B5\n\tlocal i = 1\n\twhile i <=\
    \ #lst_A do\n\t\tlst_A6[i] = lst_A6[i] + lst_A3[i]\n\t\tlst_B6[i] = lst_B6[i]\
    \ + lst_B3[i]\n\t\ti = i + 1\n\tend", "  -- Base case\n  if k == 1 then\n    return\
    \ grid\n  end", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local\
    \ visited_count = 0\n  local visited_table = {}\n  local visited_table_size =\
    \ 0\n  local visited_table_count = 0\n  local visited_table_max_size = 0\n  local\
    \ visited_table_max_count = 0\n  local visited_table_max_value = 0\n  local visited_table_max_value_index\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count\
    \ = 0\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal stack = {}\n\t\
    local stack_count = 0\n\tlocal stack_index = 1\n\tlocal stack_index2 = 1\n\tlocal\
    \ stack_index3 = 1\n\tlocal stack_index4 = 1\n\tlocal stack_index5 = 1\n\tlocal\
    \ stack_index6 = 1\n\tlocal stack_index7 = 1\n\tlocal stack_index8 = 1\n\tlocal\
    \ stack_index9 = 1\n\tlocal stack_index10 = 1\n\tlocal stack_index11 = 1\n\tlocal\
    \ stack_index12 = 1\n\tlocal stack_index13 = 1\n\tlocal stack_index14 = 1\n\t\
    local stack_index15 = 1\n\tlocal stack_index16 = 1\n\tlocal stack_index17 = 1\n\
    \tlocal stack_index18 = 1\n\tlocal stack_index19 = 1\n\tlocal stack_index20 =\
    \ 1\n\tlocal stack_index21 = 1\n\tlocal stack_index22 = 1\n\tlocal stack_index23\
    \ = 1\n\tlocal stack_index24 = 1\n\tlocal stack_index25 = 1\n\tlocal stack_index26\
    \ = 1\n\tlocal stack_index27 = 1\n\tlocal stack_index28 = 1\n\tlocal stack_index29\
    \ = 1\n\tlocal stack_index30 = 1\n\tlocal stack_index31 = 1\n\tlocal stack_index32\
    \ = 1\n\tlocal stack_index33 = 1\n\tlocal stack_index34 = 1\n\tlocal stack_index35\
    \ = 1\n\tlocal stack_index36 = 1\n\tlocal stack_index37 = 1\n\tlocal stack_index38\
    \ = 1\n\tlocal stack_index39 = 1\n\tlocal stack_index40 = 1\n\tlocal stack_index41\
    \ = 1\n\tlocal stack_index42 = 1\n\tlocal stack_index43 = 1\n\tlocal stack_index44\
    \ = 1\n\tlocal stack_index45 = 1\n\tlocal stack_index46 = 1\n\tlocal stack_index47\
    \ = 1\n\tlocal stack_index48 = 1\n\tlocal stack_index49 = 1\n\tlocal stack_index50\
    \ = 1\n\tlocal stack_index51 = 1\n\tlocal stack_index52 = 1\n\tlocal stack_index53\
    \ = 1\n\tlocal stack_index54 = 1\n\tlocal stack_index55 = 1\n\tlocal stack_index56\
    \ = 1\n\tlocal stack_index57 = 1\n\tlocal stack_index58 = 1\n\tlocal stack_index59\
    \ = 1\n\tlocal stack_index60 = 1\n\tlocal stack_index61 = 1\n\tlocal stack_index62\
    \ = 1\n\tlocal stack_index63 = 1\n\tlocal stack_index64 = 1\n\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i, j, k\n\t\
    local count = 0\n\tlocal visited = {}\n\tlocal ans = {}\n\tfor i = 1, n do\n\t\
    \tvisited[i] = false\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif\
    \ grid[i][j] == k then\n\t\t\t\tcount = count + 1\n\t\t\t\tvisited[j] = true\n\
    \t\t\t\tlst_A[count] = j\n\t\t\t\tlst_B[count] = i\n\t\t\tend\n\t\tend\n\tend\n\
    \tlocal i = 1\n\twhile i <= count do\n\t\tif visited[i] then\n\t\t\tans[i] = lst_A[i]\n\
    \t\t\ti = i + 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal\
    \ i, j, k\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif\
    \ grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A[count] = grid[i][j]\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m\
    \ do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_B[count] = grid[i][j]\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal lst_A2 = {}\n\t\
    local lst_B2 = {}\n\tlocal i\n\tlocal j\n\tlocal k\n\tfor i = 1, n do\n\t\tfor\
    \ j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A2[count] =\
    \ grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor i =\
    \ 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\
    \tlst_B2[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\
    end\n\tlocal lst_A3 = {}\n\tlocal lst_B3 = {}\n\tlocal i\n\tlocal j\n\tlocal k\n\
    \tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\
    \t\t\t\tlst_A3[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\
    end\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j]\
    \ then\n\t\t\t\tlst_B3[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\t\
    end\n\t\tend\n\tend\n\tlocal lst_A4 = lst_A\n\tlocal lst_B4 = lst_B\n\tlocal i\n\
    \tlocal j\n\tlocal k\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j]\
    \ == grid[i][j] then\n\t\t\t\tlst_A4[count] = grid[i][j]\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\
    \tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_B4[count] = grid[i][j]\n\t\t\t\
    \tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal lst_A5 = lst_A2\n\tlocal\
    \ lst_B5 = lst_B2\n\tlocal i\n\tlocal j", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ i, j, n = unpack(grid)\n\tfor i = 1, n do\n\t\tlocal v = {}\n\t\tfor j = 1,\
    \ n do\n\t\t\tv[j] = grid[i][j]\n\t\tend\n\t\ttable.insert(lst_A, v)\n\tend\n\t\
    for i = 1, n do\n\t\tlocal v = {}\n\t\tfor j = 1, n do\n\t\t\tv[j] = grid[i][j]\n\
    \t\tend\n\t\ttable.insert(lst_B, v)\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal v = {}\n\t\tfor\
    \ j = 1, n do\n\t\t\tv[j] = grid[i][j]\n\t\tend\n\t\tlocal lst_A = lst_A[i]\n\t\
    \tlocal lst_B = lst_B[i]\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif lst_A[j]\
    \ < lst_B[j] then\n\t\t\t\tlocal k = j + 1\n\t\t\t\twhile k < n do\n\t\t\t\t\t\
    v[k] = grid[i][j]\n\t\t\t\t\tk = k + 1\n\t\t\t\tend\n\t\t\t\ttable.insert(ans,\
    \ v)\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti\
    \ = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ i, j = 1, 1\n\twhile i <= #grid do\n\t\tlocal cell = {}\n\t\tfor k in ipairs(grid)\
    \ do\n\t\t\tcell[k] = grid[i][k]\n\t\tend\n\t\ttable.insert(lst_A, cell)\n\t\t\
    table.insert(lst_B, cell)\n\t\ti = i + 1\n\tend\n\tlocal j = 1\n\twhile j <= #lst_A\
    \ do\n\t\tlocal cell = {}\n\t\tfor k in ipairs(lst_A) do\n\t\t\tcell[k] = lst_A[i][k]\n\
    \t\tend\n\t\ttable.insert(lst_A, cell)\n\t\ttable.insert(lst_B, cell)\n\t\tj =\
    \ j + 1\n\tend\n\tlocal i = 1\n\twhile i <= #lst_B do\n\t\tlocal cell = {}\n\t\
    \tfor k in ipairs(lst_B) do\n\t\t\tcell[k] = lst_B[i][k]\n\t\tend\n\t\ttable.insert(lst_A,\
    \ cell)\n\t\ttable.insert(lst_B, cell)\n\t\ti = i + 1\n\tend\n\tlocal ans = {}\n\
    \tfor i = 1, #lst_A do\n\t\tlocal cell = {}\n\t\tfor k in ipairs(lst_A) do\n\t\
    \t\tcell[k] = lst_A[i][k]\n\t\tend\n\t\ttable.insert(ans, cell)\n\tend\n\treturn\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, val, ii, jj\n\tfor\
    \ i = 1, #grid do\n\t\tfor j = 1, #grid[1] do\n\t\t\tval = grid[i][j]\n\t\t\t\
    if val ~= nil then\n\t\t\t\tii = i - 1\n\t\t\t\tjj = j - 1\n\t\t\t\tif ii > -1\
    \ and jj > -1 then\n\t\t\t\t\tlst_A[val] = grid[ii][jj]\n\t\t\t\tend\n\t\t\t\t\
    if jj > -1 then\n\t\t\t\t\tlst_B[val] = grid[i][jj]\n\t\t\t\tend\n\t\t\t\tif ii\
    \ > -1 then\n\t\t\t\t\tlst_A[val] = grid[ii][jj]\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\tend\n\ttable.sort(lst_A, function(a, b) return a < b end)\n\ttable.sort(lst_B,\
    \ function(a, b) return a < b end)\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i\
    \ <= k do\n\t\tlocal val = lst_A[i]\n\t\tif val ~= nil then\n\t\t\tans[val] =\
    \ true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "  local lst_A, lst_B\
    \ = {}, {}\n  local i, j, n = unpack(grid)\n  local visited = {}\n  local ans\
    \ = {}\n  local function dfs(i, j)\n    if i == n or j == n then\n      ans[i]\
    \ = j\n      return\n    end\n    visited[i] = j\n    if visited[j] then\n   \
    \   return\n    end\n    local x, y = i + 1, j + 1\n    while x >= 1 and y >=\
    \ 1 do\n      if not visited[x] and not visited[y] then\n        local v = grid[x][y]\n\
    \        if v == k then\n          lst_A[#lst_A + 1] = v\n          lst_B[#lst_B\
    \ + 1] = v\n        elseif v < k then\n          dfs(x, y - 1)\n        else\n\
    \          dfs(x - 1, y)\n        end\n      end\n      x, y = x - 1, y - 1\n\
    \    end\n  end\n  dfs(1, n - 1)\n  return ans\nend", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B,\
    \ grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans = {}\n\
    \tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = i\n\t\twhile j <= k do\n\t\t\t\
    if lst_A[j] < lst_B[j] then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\
    \tend\n\t\tend\n\t\tif j > k then\n\t\t\tans[i] = lst_A[j]\n\t\t\ti = i + 1\n\t\
    \telse\n\t\t\tans[i] = lst_B[j]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn ans\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, val\n\tfor i = 1, #grid do\n\
    \t\tfor j = 1, #grid[1] do\n\t\t\tval = grid[i][j]\n\t\t\tif val == nil then\n\
    \t\t\t\tval = grid[i][j] = grid[i][j] + 1\n\t\t\tend\n\t\t\tlst_A[val] = lst_A[val]\
    \ or {}\n\t\t\tlst_B[val] = lst_B[val] or {}\n\t\t\tlst_A[val][j] = lst_A[val][j]\
    \ or {}\n\t\t\tlst_B[val][j] = lst_B[val][j] or {}\n\t\t\tlst_A[val][j][k] = lst_A[val][j][k]\
    \ or {}\n\t\t\tlst_B[val][j][k] = lst_B[val][j][k] or {}\n\t\t\tlst_A[val][j][k][j]\
    \ = lst_A[val][j][k][j] or {}\n\t\t\tlst_B[val][j][k][j] = lst_B[val][j][k][j]\
    \ or {}\n\t\t\tlst_A[val][j][k][j][k] = lst_A[val][j][k][j][k] or {}\n\t\t\tlst_B[val][j][k][j][k]\
    \ = lst_B[val][j][k][j][k] or {}\n\t\tend\n\tend\n\tfor i = 1, #lst_A do\n\t\t\
    for j = 1, #lst_A[i] do\n\t\t\tfor k = 1, #lst_A[i][j] do\n\t\t\t\tfor l = 1,\
    \ #lst_A[i][j][k] do\n\t\t\t\t\tfor m = 1, #lst_A[i][j][k][l] do\n\t\t\t\t\t\t\
    for n = 1, #lst_A[i][j][k][l][m] do\n\t\t\t\t\t\t\tfor o = 1, #lst_A[i][j][k][l][m][n]\
    \ do\n\t\t\t\t\t\t\t\tfor p = 1, #lst_A[i][j][k][l][m][n][o] do\n\t\t\t\t\t\t\t\
    \t\tfor q = 1, #lst_A[i][j][k][l][m][n][o][p] do\n\t\t\t\t\t\t\t\t\t\tfor r =\
    \ 1, #lst_A[i][j][k][l][m][n][o][p][q] do\n\t\t\t\t\t\t\t\t\t\t\tfor s = 1, #lst_A[i][j][k][l][m][n][o][p][q][r]\
    \ do\n\t\t\t\t\t\t\t\t\t\t\t\tlst_A[i][j][k][l][m][n", "\tlocal lst_A = {}\n\t\
    local lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited\
    \ = {}\n\tlocal ans = {}\n\twhile i <= #grid do\n\t\tvisited[i] = true\n\t\tlst_A[i]\
    \ = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\twhile j <=\
    \ #grid do\n\t\tif visited[j] == false then\n\t\t\tcount = count + 1\n\t\t\tvisited[j]\
    \ = true\n\t\t\tlst_A[j] = grid[j][1]\n\t\t\tlst_B[j] = grid[j][2]\n\t\t\tj =\
    \ j + 1\n\t\telse\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\t\t\
    ans = lst_A\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\ti = i - 1\n\t\t\t\tj = j - 1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal visited = {}\n\tlocal results = {}\n\tlocal n = #grid\n\tlocal\
    \ m = #grid[1]\n\tlocal i = 1\n\twhile i <= n do\n\t\tvisited[grid[i]] = true\n\
    \t\tlst_A[grid[i]] = i\n\t\tlst_B[i] = grid[i]\n\t\ti = i + 1\n\tend\n\ti = 2\n\
    \twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j <= m do\n\t\t\tif visited[grid[i][j]]\
    \ then\n\t\t\t\tlocal k = i - 1\n\t\t\t\twhile k >= 1 do\n\t\t\t\t\tif visited[grid[k][j]]\
    \ then\n\t\t\t\t\t\tlst_A[grid[k][j]] = lst_A[grid[k][j]] + 1\n\t\t\t\t\t\tlst_B[grid[k][j]]\
    \ = lst_B[grid[k][j]] + grid[k][j]\n\t\t\t\t\t\tk = k - 1\n\t\t\t\t\telse\n\t\t\
    \t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tlocal k = i + 1\n\t\t\t\twhile\
    \ k <= n do\n\t\t\t\t\tif visited[grid[k][j]] then\n\t\t\t\t\t\tlst_A[grid[k][j]]\
    \ = lst_A[grid[k][j]] + 1\n\t\t\t\t\t\tlst_B[grid[k][j]] = lst_B[grid[k][j]] +\
    \ grid[k][j]\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak\n\t\t\t\
    \t\tend\n\t\t\t\tend\n\t\t\t\tlocal k = j - 1\n\t\t\t\twhile k >= 1 do\n\t\t\t\
    \t\tif visited[grid[i][k]] then\n\t\t\t\t\t\tlst_A[grid[i][k]] = lst_A[grid[i][k]]\
    \ + 1\n\t\t\t\t\t\tlst_B[grid[i][k]] = lst_B[grid[i][k]] + grid[i][k]\n\t\t\t\t\
    \t\tk = k - 1\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\t\tlocal k = j + 1\n\t\t\t\twhile k <= m do\n\t\t\t\t\tif visited[grid[i][k]]\
    \ then\n\t\t\t\t\t\tlst_A[grid[i][k]] = lst_A[grid[i][k]] + 1\n\t\t\t\t\t\tlst_B[grid[i][k]]\
    \ = lst_B[grid[i][k]] + grid[i][k]\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\telse\n\t\t\
    \t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= n do\n\t\tif visited[grid[i]]\
    \ then\n\t\t\tlocal k = i - 1\n\t\t\twhile k >= 1 do\n\t\t\t\tif visited[grid[k][j]]\
    \ then\n\t\t\t\t\tlst_A[grid[k]["]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
