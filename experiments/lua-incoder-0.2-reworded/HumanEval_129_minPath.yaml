name: HumanEval_129_minPath
language: lua
prompt: "-- Given a grid with N rows and N columns (N >= 2) and a positive integer\
  \ k, \n-- each cell of the grid contains a value. Every integer in the range [1,\
  \ N * N]\n-- inclusive appears exactly once on the cells of the grid.\n-- You have\
  \ to find the minimum path of length k in the grid. You can start\n-- from any cell,\
  \ and in each step you can move to any of the neighbor cells,\n-- in other words,\
  \ you can go to cells which share an edge with you current\n-- cell.\n-- Please\
  \ note that a path of length k means visiting exactly k cells (not\n-- necessarily\
  \ distinct).\n-- You CANNOT go off the grid.\n-- A path A (of length k) is considered\
  \ less than a path B (of length k) if\n-- after making the ordered tables of the\
  \ values on the cells that A and B go\n-- through (let's call them lst_A and lst_B),\
  \ lst_A is lexicographically less\n-- than lst_B, in other words, there exist an\
  \ integer index i (1 <= i <= k)\n-- such that lst_A[i] < lst_B[i] and for any j\
  \ (1 <= j < i) we have\n-- lst_A[j] = lst_B[j].\n-- It is guaranteed that the answer\
  \ is unique.\n-- Return an ordered table of the values on the cells that the minimum\
  \ path go through.\n-- Examples:    \n-- >>> minPath({{1, 2, 3}, {4, 5, 6}, {7,\
  \ 8, 9}}, 3)\n-- {1, 2, 1}\n-- >>> minPath({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1)\n\
  -- {1}\nlocal function minPath(grid, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = minPath\n\
  \    lu.assertEquals(candidate({{1, 2, 3}, {4, 5, 6}, {7, 8, 9}}, 3), {1, 2, 1})\n\
  \    lu.assertEquals(candidate({{5, 9, 3}, {4, 1, 6}, {7, 8, 2}}, 1), {1})\n   \
  \ lu.assertEquals(candidate({{1, 2, 3, 4}, {5, 6, 7, 8}, {9, 10, 11, 12}, {13, 14,\
  \ 15, 16}}, 4), {1, 2, 1, 2})\n    lu.assertEquals(candidate({{6, 4, 13, 10}, {5,\
  \ 7, 12, 1}, {3, 16, 11, 15}, {8, 14, 9, 2}}, 7), {1, 10, 1, 10, 1, 10, 1})\n  \
  \  lu.assertEquals(candidate({{8, 14, 9, 2}, {6, 4, 13, 15}, {5, 7, 1, 12}, {3,\
  \ 10, 11, 16}}, 5), {1, 7, 1, 7, 1})\n    lu.assertEquals(candidate({{11, 8, 7,\
  \ 2}, {5, 16, 14, 4}, {9, 3, 15, 6}, {12, 13, 10, 1}}, 9), {1, 6, 1, 6, 1, 6, 1,\
  \ 6, 1})\n    lu.assertEquals(candidate({{12, 13, 10, 1}, {9, 3, 15, 6}, {5, 16,\
  \ 14, 4}, {11, 8, 7, 2}}, 12), {1, 6, 1, 6, 1, 6, 1, 6, 1, 6, 1, 6})\n    lu.assertEquals(candidate({{2,\
  \ 7, 4}, {3, 1, 5}, {6, 8, 9}}, 8), {1, 3, 1, 3, 1, 3, 1, 3})\n    lu.assertEquals(candidate({{6,\
  \ 1, 5}, {3, 8, 9}, {2, 7, 4}}, 8), {1, 5, 1, 5, 1, 5, 1, 5})\n    lu.assertEquals(candidate({{1,\
  \ 2}, {3, 4}}, 10), {1, 2, 1, 2, 1, 2, 1, 2, 1, 2})\n    lu.assertEquals(candidate({{1,\
  \ 3}, {3, 2}}, 10), {1, 3, 1, 3, 1, 3, 1, 3, 1, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = #grid, 1, 1\n\twhile\
    \ i <= n do\n\t\tlst_A[i] = grid[i]\n\t\ti = i + 1\n\tend\n\ti = 2\n\twhile i\
    \ <= n do\n\t\tlst_B[i] = grid[i]\n\t\ti = i + 1\n\tend\n\ti = 2\n\twhile i <=\
    \ n do\n\t\tlocal tmp = lst_A[i]\n\t\tlst_A[i] = lst_B[i]\n\t\tlst_B[i] = tmp\n\
    \t\ti = i + 1\n\tend\n\tlocal ans = {}\n\ti = 2\n\twhile i <= n do\n\t\tlocal\
    \ tmp = lst_A[i]\n\t\tlst_A[i] = lst_B[i]\n\t\tlst_B[i] = tmp\n\t\tans[i] = grid[i]\n\
    \t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tfor\
    \ i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\tend\n\tfor i = 1, #grid\
    \ do\n\t\ttable.insert(lst_B, grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\t\twhile\
    \ j <= #lst_A do\n\t\t\tif lst_A[j] < lst_B[j] then\n\t\t\t\tlocal k = j\n\t\t\
    \t\twhile k < #lst_A do\n\t\t\t\t\tif lst_A[k] > lst_B[k] then\n\t\t\t\t\t\tk\
    \ = k + 1\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\
    \t\tans[i] = lst_A[k]\n\t\t\t\ti = i + 1\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\
    \tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = #grid, 1, 1\n\twhile\
    \ i <= n do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i +\
    \ 1\n\tend\n\twhile j <= n do\n\t\tlocal i = 1\n\t\twhile i <= n do\n\t\t\tlocal\
    \ j = j + 1\n\t\t\twhile j <= n do\n\t\t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\
    \t\tlst_A[i], lst_B[j] = lst_B[j], lst_A[i]\n\t\t\t\tend\n\t\t\t\tj = j + 1\n\t\
    \t\tend\n\t\t\ti = i + 1\n\t\tend\n\t\tj = j + 1\n\tend\n\tlocal ans = {}\n\t\
    local i = 1\n\twhile i <= n do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\tans[i]\
    \ = lst_A[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A,\
    \ lst_B = unpack(grid), unpack(grid)\n\tlocal i, j, k1, k2 = 1, #lst_A, 1, #lst_B\n\
    \twhile k > 0 do\n\t\tlocal new_i, new_j, new_k1, new_k2 = i, j, k1, k2\n\t\t\
    while new_k1 > 0 and lst_A[new_i][new_k1] < lst_B[new_i][new_k1] do\n\t\t\tnew_i\
    \ = new_i + 1\n\t\t\tnew_k1 = new_k1 - 1\n\t\tend\n\t\twhile new_k2 > 0 and lst_A[new_i][new_k2]\
    \ < lst_B[new_i][new_k2] do\n\t\t\tnew_j = new_j + 1\n\t\t\tnew_k2 = new_k2 -\
    \ 1\n\t\tend\n\t\tif new_k1 < k1 then\n\t\t\tk1 = new_k1\n\t\telseif new_k2 <\
    \ k2 then\n\t\t\tk2 = new_k2\n\t\telse\n\t\t\tbreak\n\t\tend\n\tend\n\treturn\
    \ lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, k1, k2 = 1, #grid,\
    \ 1, 1\n\twhile k1 <= k2 do\n\t\tlocal cell = {}\n\t\tfor i = 1, k1 do\n\t\t\t\
    for j = 1, k2 do\n\t\t\t\ttable.insert(cell, grid[i][j])\n\t\t\tend\n\t\tend\n\
    \t\ttable.insert(lst_A, cell)\n\t\ttable.insert(lst_B, cell)\n\t\tk1 = k1 + 1\n\
    \t\tk2 = k2 + 1\n\tend\n\tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlocal cell\
    \ = {}\n\t\tfor j = 1, k2 do\n\t\t\ttable.insert(cell, grid[i][j])\n\t\tend\n\t\
    \ttable.insert(lst_A, cell)\n\t\ti = i + 1\n\tend\n\ttable.sort(lst_A, function(a,\
    \ b) return a[1] < b[1] end)\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= #lst_A\
    \ do\n\t\tlocal cell = {}\n\t\tfor j = 1, k2 do\n\t\t\ttable.insert(cell, grid[i][j])\n\
    \t\tend\n\t\ttable.insert(ans, cell)\n\t\ti = i + 1\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = unpack(grid) -- unpack grid\n\tlocal lst_A2 = {}\n\tlocal\
    \ lst_B2 = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlst_A[i] = lst_A[i] + 1\n\
    \t\tlst_B[i] = lst_B[i] + 1\n\t\tlst_A2[i] = lst_A[i]\n\t\tlst_B2[i] = lst_B[i]\n\
    \t\ti = i + 1\n\tend\n\tlst_A2[#lst_A2] = 1\n\tlst_B2[#lst_B2] = 1\n\tlocal lst_A3\
    \ = {}\n\tlocal lst_B3 = {}\n\tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlst_A3[i]\
    \ = lst_A2[i]\n\t\tlst_B3[i] = lst_B2[i]\n\t\ti = i + 1\n\tend\n\tlst_A3[#lst_A3]\
    \ = 1\n\tlst_B3[#lst_B3] = 1\n\tlocal lst_A4 = lst_A3\n\tlocal lst_B4 = lst_B3\n\
    \tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlst_A4[i] = lst_A4[i] + lst_A[i]\n\t\
    \tlst_B4[i] = lst_B4[i] + lst_B[i]\n\t\ti = i + 1\n\tend\n\tlst_A4[#lst_A4] =\
    \ lst_A[#lst_A]\n\tlst_B4[#lst_B4] = lst_B[#lst_B]\n\tlocal lst_A5 = lst_A4\n\t\
    local lst_B5 = lst_B4\n\tlocal i = 1\n\twhile i <= #lst_A do\n\t\tlst_A5[i] =\
    \ lst_A5[i] + lst_A2[i]\n\t\tlst_B5[i] = lst_B5[i] + lst_B2[i]\n\t\ti = i + 1\n\
    \tend\n\tlst_A5[#lst_A5] = lst_A2[#lst_A2]\n\tlst_B5[#lst_B5] = lst_B2[#lst_B2]\n\
    \tlocal lst_A6 = lst_A5\n\tlocal lst_B6 = lst_B5\n\tlocal i = 1\n\twhile i <=\
    \ #lst_A do\n\t\tlst_A6[i] = lst_A6[i] + lst_A3[i]\n\t\tlst_B6[i] = lst_B6[i]\
    \ + lst_B3[i]\n\t\ti = i + 1\n\tend", "  -- Base case\n  if k == 1 then\n    return\
    \ grid\n  end", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local\
    \ visited_count = 0\n  local visited_table = {}\n  local visited_table_size =\
    \ 0\n  local visited_table_count = 0\n  local visited_table_max_size = 0\n  local\
    \ visited_table_max_count = 0\n  local visited_table_max_value = 0\n  local visited_table_max_value_index\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_count\
    \ = 0\n  local visited_table_max_value_count = 0\n  local visited_table_max_value_",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count\
    \ = 0\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal stack = {}\n\t\
    local stack_count = 0\n\tlocal stack_index = 1\n\tlocal stack_index2 = 1\n\tlocal\
    \ stack_index3 = 1\n\tlocal stack_index4 = 1\n\tlocal stack_index5 = 1\n\tlocal\
    \ stack_index6 = 1\n\tlocal stack_index7 = 1\n\tlocal stack_index8 = 1\n\tlocal\
    \ stack_index9 = 1\n\tlocal stack_index10 = 1\n\tlocal stack_index11 = 1\n\tlocal\
    \ stack_index12 = 1\n\tlocal stack_index13 = 1\n\tlocal stack_index14 = 1\n\t\
    local stack_index15 = 1\n\tlocal stack_index16 = 1\n\tlocal stack_index17 = 1\n\
    \tlocal stack_index18 = 1\n\tlocal stack_index19 = 1\n\tlocal stack_index20 =\
    \ 1\n\tlocal stack_index21 = 1\n\tlocal stack_index22 = 1\n\tlocal stack_index23\
    \ = 1\n\tlocal stack_index24 = 1\n\tlocal stack_index25 = 1\n\tlocal stack_index26\
    \ = 1\n\tlocal stack_index27 = 1\n\tlocal stack_index28 = 1\n\tlocal stack_index29\
    \ = 1\n\tlocal stack_index30 = 1\n\tlocal stack_index31 = 1\n\tlocal stack_index32\
    \ = 1\n\tlocal stack_index33 = 1\n\tlocal stack_index34 = 1\n\tlocal stack_index35\
    \ = 1\n\tlocal stack_index36 = 1\n\tlocal stack_index37 = 1\n\tlocal stack_index38\
    \ = 1\n\tlocal stack_index39 = 1\n\tlocal stack_index40 = 1\n\tlocal stack_index41\
    \ = 1\n\tlocal stack_index42 = 1\n\tlocal stack_index43 = 1\n\tlocal stack_index44\
    \ = 1\n\tlocal stack_index45 = 1\n\tlocal stack_index46 = 1\n\tlocal stack_index47\
    \ = 1\n\tlocal stack_index48 = 1\n\tlocal stack_index49 = 1\n\tlocal stack_index50\
    \ = 1\n\tlocal stack_index51 = 1\n\tlocal stack_index52 = 1\n\tlocal stack_index53\
    \ = 1\n\tlocal stack_index54 = 1\n\tlocal stack_index55 = 1\n\tlocal stack_index56\
    \ = 1\n\tlocal stack_index57 = 1\n\tlocal stack_index58 = 1\n\tlocal stack_index59\
    \ = 1\n\tlocal stack_index60 = 1\n\tlocal stack_index61 = 1\n\tlocal stack_index62\
    \ = 1\n\tlocal stack_index63 = 1\n\tlocal stack_index64 = 1\n\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i, j, k\n\t\
    local count = 0\n\tlocal visited = {}\n\tlocal ans = {}\n\tfor i = 1, n do\n\t\
    \tvisited[i] = false\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif\
    \ grid[i][j] == k then\n\t\t\t\tcount = count + 1\n\t\t\t\tvisited[j] = true\n\
    \t\t\t\tlst_A[count] = j\n\t\t\t\tlst_B[count] = i\n\t\t\tend\n\t\tend\n\tend\n\
    \tlocal i = 1\n\twhile i <= count do\n\t\tif visited[i] then\n\t\t\tans[i] = lst_A[i]\n\
    \t\t\ti = i + 1\n\t\telse\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal\
    \ i, j, k\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif\
    \ grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A[count] = grid[i][j]\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m\
    \ do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_B[count] = grid[i][j]\n\
    \t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal lst_A2 = {}\n\t\
    local lst_B2 = {}\n\tlocal i\n\tlocal j\n\tlocal k\n\tfor i = 1, n do\n\t\tfor\
    \ j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A2[count] =\
    \ grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor i =\
    \ 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\
    \tlst_B2[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\t\
    end\n\tlocal lst_A3 = {}\n\tlocal lst_B3 = {}\n\tlocal i\n\tlocal j\n\tlocal k\n\
    \tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\
    \t\t\t\tlst_A3[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\t\
    end\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j]\
    \ then\n\t\t\t\tlst_B3[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\t\
    end\n\t\tend\n\tend\n\tlocal lst_A4 = lst_A\n\tlocal lst_B4 = lst_B\n\tlocal i\n\
    \tlocal j\n\tlocal k\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j]\
    \ == grid[i][j] then\n\t\t\t\tlst_A4[count] = grid[i][j]\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\
    \tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_B4[count] = grid[i][j]\n\t\t\t\
    \tcount = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tlocal lst_A5 = lst_A2\n\tlocal\
    \ lst_B5 = lst_B2\n\tlocal i\n\tlocal j", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ i, j, n = unpack(grid)\n\tfor i = 1, n do\n\t\tlocal v = {}\n\t\tfor j = 1,\
    \ n do\n\t\t\tv[j] = grid[i][j]\n\t\tend\n\t\ttable.insert(lst_A, v)\n\tend\n\t\
    for i = 1, n do\n\t\tlocal v = {}\n\t\tfor j = 1, n do\n\t\t\tv[j] = grid[i][j]\n\
    \t\tend\n\t\ttable.insert(lst_B, v)\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal v = {}\n\t\tfor\
    \ j = 1, n do\n\t\t\tv[j] = grid[i][j]\n\t\tend\n\t\tlocal lst_A = lst_A[i]\n\t\
    \tlocal lst_B = lst_B[i]\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif lst_A[j]\
    \ < lst_B[j] then\n\t\t\t\tlocal k = j + 1\n\t\t\t\twhile k < n do\n\t\t\t\t\t\
    v[k] = grid[i][j]\n\t\t\t\t\tk = k + 1\n\t\t\t\tend\n\t\t\t\ttable.insert(ans,\
    \ v)\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti\
    \ = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ i, j = 1, 1\n\twhile i <= #grid do\n\t\tlocal cell = {}\n\t\tfor k in ipairs(grid)\
    \ do\n\t\t\tcell[k] = grid[i][k]\n\t\tend\n\t\ttable.insert(lst_A, cell)\n\t\t\
    table.insert(lst_B, cell)\n\t\ti = i + 1\n\tend\n\tlocal j = 1\n\twhile j <= #lst_A\
    \ do\n\t\tlocal cell = {}\n\t\tfor k in ipairs(lst_A) do\n\t\t\tcell[k] = lst_A[i][k]\n\
    \t\tend\n\t\ttable.insert(lst_A, cell)\n\t\ttable.insert(lst_B, cell)\n\t\tj =\
    \ j + 1\n\tend\n\tlocal i = 1\n\twhile i <= #lst_B do\n\t\tlocal cell = {}\n\t\
    \tfor k in ipairs(lst_B) do\n\t\t\tcell[k] = lst_B[i][k]\n\t\tend\n\t\ttable.insert(lst_A,\
    \ cell)\n\t\ttable.insert(lst_B, cell)\n\t\ti = i + 1\n\tend\n\tlocal ans = {}\n\
    \tfor i = 1, #lst_A do\n\t\tlocal cell = {}\n\t\tfor k in ipairs(lst_A) do\n\t\
    \t\tcell[k] = lst_A[i][k]\n\t\tend\n\t\ttable.insert(ans, cell)\n\tend\n\treturn\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, val, ii, jj\n\tfor\
    \ i = 1, #grid do\n\t\tfor j = 1, #grid[1] do\n\t\t\tval = grid[i][j]\n\t\t\t\
    if val ~= nil then\n\t\t\t\tii = i - 1\n\t\t\t\tjj = j - 1\n\t\t\t\tif ii > -1\
    \ and jj > -1 then\n\t\t\t\t\tlst_A[val] = grid[ii][jj]\n\t\t\t\tend\n\t\t\t\t\
    if jj > -1 then\n\t\t\t\t\tlst_B[val] = grid[i][jj]\n\t\t\t\tend\n\t\t\t\tif ii\
    \ > -1 then\n\t\t\t\t\tlst_A[val] = grid[ii][jj]\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\tend\n\ttable.sort(lst_A, function(a, b) return a < b end)\n\ttable.sort(lst_B,\
    \ function(a, b) return a < b end)\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i\
    \ <= k do\n\t\tlocal val = lst_A[i]\n\t\tif val ~= nil then\n\t\t\tans[val] =\
    \ true\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "  local lst_A, lst_B\
    \ = {}, {}\n  local i, j, n = unpack(grid)\n  local visited = {}\n  local ans\
    \ = {}\n  local function dfs(i, j)\n    if i == n or j == n then\n      ans[i]\
    \ = j\n      return\n    end\n    visited[i] = j\n    if visited[j] then\n   \
    \   return\n    end\n    local x, y = i + 1, j + 1\n    while x >= 1 and y >=\
    \ 1 do\n      if not visited[x] and not visited[y] then\n        local v = grid[x][y]\n\
    \        if v == k then\n          lst_A[#lst_A + 1] = v\n          lst_B[#lst_B\
    \ + 1] = v\n        elseif v < k then\n          dfs(x, y - 1)\n        else\n\
    \          dfs(x - 1, y)\n        end\n      end\n      x, y = x - 1, y - 1\n\
    \    end\n  end\n  dfs(1, n - 1)\n  return ans\nend", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B,\
    \ grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans = {}\n\
    \tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = i\n\t\twhile j <= k do\n\t\t\t\
    if lst_A[j] < lst_B[j] then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\
    \tend\n\t\tend\n\t\tif j > k then\n\t\t\tans[i] = lst_A[j]\n\t\t\ti = i + 1\n\t\
    \telse\n\t\t\tans[i] = lst_B[j]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\treturn ans\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, val\n\tfor i = 1, #grid do\n\
    \t\tfor j = 1, #grid[1] do\n\t\t\tval = grid[i][j]\n\t\t\tif val == nil then\n\
    \t\t\t\tval = grid[i][j] = grid[i][j] + 1\n\t\t\tend\n\t\t\tlst_A[val] = lst_A[val]\
    \ or {}\n\t\t\tlst_B[val] = lst_B[val] or {}\n\t\t\tlst_A[val][j] = lst_A[val][j]\
    \ or {}\n\t\t\tlst_B[val][j] = lst_B[val][j] or {}\n\t\t\tlst_A[val][j][k] = lst_A[val][j][k]\
    \ or {}\n\t\t\tlst_B[val][j][k] = lst_B[val][j][k] or {}\n\t\t\tlst_A[val][j][k][j]\
    \ = lst_A[val][j][k][j] or {}\n\t\t\tlst_B[val][j][k][j] = lst_B[val][j][k][j]\
    \ or {}\n\t\t\tlst_A[val][j][k][j][k] = lst_A[val][j][k][j][k] or {}\n\t\t\tlst_B[val][j][k][j][k]\
    \ = lst_B[val][j][k][j][k] or {}\n\t\tend\n\tend\n\tfor i = 1, #lst_A do\n\t\t\
    for j = 1, #lst_A[i] do\n\t\t\tfor k = 1, #lst_A[i][j] do\n\t\t\t\tfor l = 1,\
    \ #lst_A[i][j][k] do\n\t\t\t\t\tfor m = 1, #lst_A[i][j][k][l] do\n\t\t\t\t\t\t\
    for n = 1, #lst_A[i][j][k][l][m] do\n\t\t\t\t\t\t\tfor o = 1, #lst_A[i][j][k][l][m][n]\
    \ do\n\t\t\t\t\t\t\t\tfor p = 1, #lst_A[i][j][k][l][m][n][o] do\n\t\t\t\t\t\t\t\
    \t\tfor q = 1, #lst_A[i][j][k][l][m][n][o][p] do\n\t\t\t\t\t\t\t\t\t\tfor r =\
    \ 1, #lst_A[i][j][k][l][m][n][o][p][q] do\n\t\t\t\t\t\t\t\t\t\t\tfor s = 1, #lst_A[i][j][k][l][m][n][o][p][q][r]\
    \ do\n\t\t\t\t\t\t\t\t\t\t\t\tlst_A[i][j][k][l][m][n", "\tlocal lst_A = {}\n\t\
    local lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited\
    \ = {}\n\tlocal ans = {}\n\twhile i <= #grid do\n\t\tvisited[i] = true\n\t\tlst_A[i]\
    \ = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\twhile j <=\
    \ #grid do\n\t\tif visited[j] == false then\n\t\t\tcount = count + 1\n\t\t\tvisited[j]\
    \ = true\n\t\t\tlst_A[j] = grid[j][1]\n\t\t\tlst_B[j] = grid[j][2]\n\t\t\tj =\
    \ j + 1\n\t\telse\n\t\t\tcount = count - 1\n\t\t\tif count < 0 then\n\t\t\t\t\
    ans = lst_A\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\ti = i - 1\n\t\t\t\tj = j - 1\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal visited = {}\n\tlocal results = {}\n\tlocal n = #grid\n\tlocal\
    \ m = #grid[1]\n\tlocal i = 1\n\twhile i <= n do\n\t\tvisited[grid[i]] = true\n\
    \t\tlst_A[grid[i]] = i\n\t\tlst_B[i] = grid[i]\n\t\ti = i + 1\n\tend\n\ti = 2\n\
    \twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j <= m do\n\t\t\tif visited[grid[i][j]]\
    \ then\n\t\t\t\tlocal k = i - 1\n\t\t\t\twhile k >= 1 do\n\t\t\t\t\tif visited[grid[k][j]]\
    \ then\n\t\t\t\t\t\tlst_A[grid[k][j]] = lst_A[grid[k][j]] + 1\n\t\t\t\t\t\tlst_B[grid[k][j]]\
    \ = lst_B[grid[k][j]] + grid[k][j]\n\t\t\t\t\t\tk = k - 1\n\t\t\t\t\telse\n\t\t\
    \t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tlocal k = i + 1\n\t\t\t\twhile\
    \ k <= n do\n\t\t\t\t\tif visited[grid[k][j]] then\n\t\t\t\t\t\tlst_A[grid[k][j]]\
    \ = lst_A[grid[k][j]] + 1\n\t\t\t\t\t\tlst_B[grid[k][j]] = lst_B[grid[k][j]] +\
    \ grid[k][j]\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak\n\t\t\t\
    \t\tend\n\t\t\t\tend\n\t\t\t\tlocal k = j - 1\n\t\t\t\twhile k >= 1 do\n\t\t\t\
    \t\tif visited[grid[i][k]] then\n\t\t\t\t\t\tlst_A[grid[i][k]] = lst_A[grid[i][k]]\
    \ + 1\n\t\t\t\t\t\tlst_B[grid[i][k]] = lst_B[grid[i][k]] + grid[i][k]\n\t\t\t\t\
    \t\tk = k - 1\n\t\t\t\t\telse\n\t\t\t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\
    \t\t\t\tlocal k = j + 1\n\t\t\t\twhile k <= m do\n\t\t\t\t\tif visited[grid[i][k]]\
    \ then\n\t\t\t\t\t\tlst_A[grid[i][k]] = lst_A[grid[i][k]] + 1\n\t\t\t\t\t\tlst_B[grid[i][k]]\
    \ = lst_B[grid[i][k]] + grid[i][k]\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\telse\n\t\t\
    \t\t\t\tbreak\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= n do\n\t\tif visited[grid[i]]\
    \ then\n\t\t\tlocal k = i - 1\n\t\t\twhile k >= 1 do\n\t\t\t\tif visited[grid[k][j]]\
    \ then\n\t\t\t\t\tlst_A[grid[k][", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal current_cell\n\tlocal current_cell_val\n\
    \tlocal current_cell_val_count\n\tlocal current_cell_val_count2\n\tlocal current_cell_val_count3\n\
    \tlocal current_cell_val_count4\n\tlocal current_cell_val_count5\n\tlocal current_cell_val_count6\n\
    \tlocal current_cell_val_count7\n\tlocal current_cell_val_count8\n\tlocal current_cell_val_count9\n\
    \tlocal current_cell_val_count10\n\tlocal current_cell_val_count11\n\tlocal current_cell_val_count12\n\
    \tlocal current_cell_val_count13\n\tlocal current_cell_val_count14\n\tlocal current_cell_val_count15\n\
    \tlocal current_cell_val_count16\n\tlocal current_cell_val_count17\n\tlocal current_cell_val_count18\n\
    \tlocal current_cell_val_count19\n\tlocal current_cell_val_count20\n\tlocal current_cell_val_count21\n\
    \tlocal current_cell_val_count22\n\tlocal current_cell_val_count23\n\tlocal current_cell_val_count24\n\
    \tlocal current_cell_val_count25\n\tlocal current_cell_val_count26\n\tlocal current_cell_val_count27\n\
    \tlocal current_cell_val_count28\n\tlocal current_cell_val_count29\n\tlocal current_cell_val_count30\n\
    \tlocal current_cell_val_count31\n\tlocal current_cell_val_count32\n\tlocal current_cell_val_count33\n\
    \tlocal current_cell_val_count34\n\tlocal current_cell_val_count35\n\tlocal current_cell_val_count36\n\
    \tlocal current_cell_val_count37\n\tlocal current_cell_val_count38\n\tlocal current_cell_val_count39\n\
    \tlocal current_cell_val_count40\n\tlocal current_cell_val_count41\n\tlocal current_cell_val_count42\n\
    \tlocal current_cell_val_count43\n\tlocal current_cell_val_count44\n\tlocal current_cell_val_count45\n\
    \tlocal current_cell_val_count46\n\tlocal current_cell_val_count47\n\tlocal current_cell_val_count48\n\
    \tlocal current_cell_val_count49\n\tlocal current_cell_val_count50\n\tlocal current_cell_val_count51\n\
    \tlocal current_cell_val_count52\n\tlocal current_cell_val_count53\n\tlocal current_cell_val_count54\n\
    \tlocal current_cell_val_count55\n\tlocal current_cell_val_count56\n\tlocal current_cell_val_count57\n\
    \tlocal current_cell_val_count58\n\tlocal current_cell_val_count59\n\tlocal current_cell_val_count",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_count_max = 0\n\tlocal visited_count_max2 = 0\n\tlocal visited_count_max3\
    \ = 0\n\tlocal visited_count_max4 = 0\n\tlocal visited_count_max5 = 0\n\tlocal\
    \ visited_count_max6 = 0\n\tlocal visited_count_max7 = 0\n\tlocal visited_count_max8\
    \ = 0\n\tlocal visited_count_max9 = 0\n\tlocal visited_count_max10 = 0\n\tlocal\
    \ visited_count_max11 = 0\n\tlocal visited_count_max12 = 0\n\tlocal visited_count_max13\
    \ = 0\n\tlocal visited_count_max14 = 0\n\tlocal visited_count_max15 = 0\n\tlocal\
    \ visited_count_max16 = 0\n\tlocal visited_count_max17 = 0\n\tlocal visited_count_max18\
    \ = 0\n\tlocal visited_count_max19 = 0\n\tlocal visited_count_max20 = 0\n\tlocal\
    \ visited_count_max21 = 0\n\tlocal visited_count_max22 = 0\n\tlocal visited_count_max23\
    \ = 0\n\tlocal visited_count_max24 = 0\n\tlocal visited_count_max25 = 0\n\tlocal\
    \ visited_count_max26 = 0\n\tlocal visited_count_max27 = 0\n\tlocal visited_count_max28\
    \ = 0\n\tlocal visited_count_max29 = 0\n\tlocal visited_count_max30 = 0\n\tlocal\
    \ visited_count_max31 = 0\n\tlocal visited_count_max32 = 0\n\tlocal visited_count_max33\
    \ = 0\n\tlocal visited_count_max34 = 0\n\tlocal visited_count_max35 = 0\n\tlocal\
    \ visited_count_max36 = 0\n\tlocal visited_count_max37 = 0\n\tlocal visited_count_max38\
    \ = 0\n\tlocal visited_count_max39 = 0\n\tlocal visited_count_max40 = 0\n\tlocal\
    \ visited_count_max41 = 0\n\tlocal visited_count_max42 = 0\n\tlocal visited_count_max43\
    \ = 0\n\tlocal visited_count_max44 = 0\n\tlocal visited_count_max45 = 0\n\tlocal\
    \ visited_count_max46 = 0\n\tlocal visited_count_max47 = 0\n\tlocal visited_count_max48\
    \ = 0\n\tlocal visited_count_max49 = 0\n\tlocal visited_count_max50 = 0\n\tlocal\
    \ visited_count_max51 = 0\n\tlocal visited_count_max52 = 0\n\tlocal visited_count_max53\
    \ = 0\n\tlocal visited_count_max54 = 0\n\tlocal visite", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_table = {}\n\tlocal visited_table_count = 0\n\tlocal visited_table_count_max\
    \ = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max =\
    \ 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\
    \tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal\
    \ visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min\
    \ = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min =\
    \ 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\
    \tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal\
    \ visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max\
    \ = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max =\
    \ 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\
    \tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal\
    \ visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min\
    \ = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min =\
    \ 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\
    \tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal\
    \ visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max\
    \ = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max =\
    \ 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\
    \tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal\
    \ visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min\
    \ = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min =\
    \ 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\
    \tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal\
    \ visited_table_count_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\
    \tlocal index = 1\n\tlocal visited_index = {}\n\tlocal function dfs(i, j)\n\t\t\
    if visited[i] and visited[j] then\n\t\t\treturn\n\t\tend\n\t\tvisited[i] = visited[j]\
    \ = true\n\t\tvisited_index[i] = visited_index[j] = index\n\t\tindex = index +\
    \ 1\n\t\tlst_A[i] = lst_A[j] = 1\n\t\tif j == grid:size() then\n\t\t\tlst_B[i]\
    \ = lst_B[j] = grid:get(i)\n\t\telse\n\t\t\tfor k = 1, grid:size() do\n\t\t\t\t\
    dfs(grid:get(i), grid:get(j) + k)\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, grid:size()\
    \ do\n\t\tdfs(i, 1)\n\tend\n\tlocal function compare(a, b)\n\t\treturn visited_index[a]\
    \ < visited_index[b] or visited_index[a] == visited_index[b] and (lst_A[a] < lst_B[a]\
    \ or lst_A[a] == lst_B[a]) and (visited_index[a] == visited_index[b] or visited_index[a]\
    \ > visited_index[b])\n\tend\n\tlocal function dfs_back(i, j)\n\t\tvisited_index[i]\
    \ = visited_index[j] = index\n\t\tindex = index + 1\n\t\tlst_A[i] = lst_A[j] =\
    \ 1\n\t\tif j == grid:size() then\n\t\t\tlst_B[i] = lst_B[j] = grid:get(i)\n\t\
    \telse\n\t\t\tfor k = 1, grid:size() do\n\t\t\t\tdfs_back(grid:get(i), grid:get(j)\
    \ + k)\n\t\t\tend\n\t\tend\n\tend\n\tlocal function dfs_back_back(i, j)\n\t\t\
    visited_index[i] = visited_index[j] = index\n\t\tindex = index + 1\n\t\tlst_A[i]\
    \ = lst_A[j] = 1\n\t\tif j == grid:size() then\n\t\t\tlst_B[i] = lst_B[j] = grid:get(i)\n\
    \t\telse\n\t\t\tfor k = 1, grid:size() do\n\t\t\t\tdfs_back_back(grid:get(i),\
    \ grid:get(j) + k)\n\t\t\tend\n\t\tend\n\tend\n\tlocal function dfs_back_back2(i,\
    \ j)\n\t\tvisited_index[i] = visited_index[j] = index\n\t\tindex = index + 1\n\
    \t\tlst_A[i] = lst_A[j] = 1\n\t\tif j == grid:size() then\n\t\t\tlst_B[i] = lst_B[j]\
    \ = grid:get(i)\n\t\telse\n\t\t\tfor k = 1, grid:size() do", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tfor i = 1, n do\n\t\tfor j = 1,\
    \ n do\n\t\t\tlocal v = grid[i][j]\n\t\t\tif v == nil then break end\n\t\t\tlst_A[#lst_A\
    \ + 1] = v\n\t\t\tlst_B[#lst_B + 1] = v\n\t\tend\n\tend\n\tlst_A = lst_A[#lst_A]\n\
    \tlst_B = lst_B[#lst_B]\n\tlocal lst_C = {}\n\tlocal lst_D = {}\n\tlocal lst_E\
    \ = {}\n\tlocal lst_F = {}\n\tlocal lst_G = {}\n\tlocal lst_H = {}\n\tlocal lst_I\
    \ = {}\n\tlocal lst_J = {}\n\tlocal lst_K = {}\n\tlocal lst_L = {}\n\tlocal lst_M\
    \ = {}\n\tlocal lst_N = {}\n\tlocal lst_O = {}\n\tlocal lst_P = {}\n\tlocal lst_Q\
    \ = {}\n\tlocal lst_R = {}\n\tlocal lst_S = {}\n\tlocal lst_T = {}\n\tlocal lst_U\
    \ = {}\n\tlocal lst_V = {}\n\tlocal lst_W = {}\n\tlocal lst_X = {}\n\tlocal lst_Y\
    \ = {}\n\tlocal lst_Z = {}\n\tlocal lst_AA = {}\n\tlocal lst_AB = {}\n\tlocal\
    \ lst_AC = {}\n\tlocal lst_AD = {}\n\tlocal lst_AE = {}\n\tlocal lst_AF = {}\n\
    \tlocal lst_AG = {}\n\tlocal lst_AH = {}\n\tlocal lst_AI = {}\n\tlocal lst_AJ\
    \ = {}\n\tlocal lst_AK = {}\n\tlocal lst_AL = {}\n\tlocal lst_AM = {}\n\tlocal\
    \ lst_AN = {}\n\tlocal lst_AO = {}\n\tlocal lst_AP = {}\n\tlocal lst_AQ = {}\n\
    \tlocal lst_AR = {}\n\tlocal lst_AS = {}\n\tlocal lst_AT = {}\n\tlocal lst_AU\
    \ = {}\n\tlocal lst_AV = {}\n\tlocal lst_AW = {}\n\tlocal lst_AX = {}\n\tlocal\
    \ lst_AY = {}\n\tlocal lst_AZ = {}\n\tlocal lst_BA = {}\n\tlocal lst_BB = {}\n\
    \tlocal lst_BC = {}\n\tlocal lst_BD = {}\n\tlocal lst_BE = {}\n\tlocal lst_BF\
    \ = {}\n\tlocal lst_BG = {}\n\tlocal lst_", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal visited_table = {}\n\t\
    local visited_table_size = 0\n\tlocal visited_table_count = 0\n\tlocal visited_table_max_size\
    \ = 0\n\tlocal visited_table_max_count = 0\n\tlocal visited_table_max_value =\
    \ 0\n\tlocal visited_table_max_value_count = 0\n\tlocal visited_table_max_value_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count = 0\n\tlocal visited_table_max_value_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count = 0\n\tlocal\
    \ visited_table_max_value_count_index_count_index_count_index = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count_index_count\
    \ = 0\n\tlocal visited_table_max_value_count_index_count_index_count_index_count_index_count_index_count_index_count_index_",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count\
    \ = 0\n\twhile i <= #grid do\n\t\tlocal value = grid[i]\n\t\tif i == 1 then\n\t\
    \t\tlst_A[1] = value\n\t\t\tlst_B[1] = value\n\t\telse\n\t\t\tlocal lst_A = lst_A\n\
    \t\t\tlocal lst_B = lst_B\n\t\t\tfor j = i + 1 , #grid do\n\t\t\t\tlocal value\
    \ = grid[j]\n\t\t\t\tif lst_A[j] < value then\n\t\t\t\t\tlst_A[j] = value\n\t\t\
    \t\telseif lst_B[j] < value then\n\t\t\t\t\tlst_B[j] = value\n\t\t\t\tend\n\t\t\
    \tend\n\t\t\tif #lst_A < #lst_B then\n\t\t\t\tcount = count + 1\n\t\t\t\tlst_A[#lst_A\
    \ + 1] = value\n\t\t\telse\n\t\t\t\tcount = count + 1\n\t\t\t\tlst_B[#lst_B +\
    \ 1] = value\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal ans = {}\n\tlocal\
    \ i = 0\n\twhile i <= #lst_A do\n\t\tans[i] = lst_A[i]\n\t\ti = i + 1\n\tend\n\
    \ti = 0\n\twhile i <= #lst_B do\n\t\tans[i] = lst_B[i]\n\t\ti = i + 1\n\tend\n\
    \treturn ans\nend", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local\
    \ visited_count = 0\n  local i, j, val, path\n  for i = 1, #grid do\n    visited_count\
    \ = visited_count + 1\n    visited[#visited + 1] = i\n    for j = 1, #grid[i]\
    \ do\n      val = grid[i][j]\n      if val == nil then\n        val = grid[i][j]\
    \ = visited_count\n      end\n      lst_A[#lst_A + 1] = val\n      lst_B[#lst_B\
    \ + 1] = val\n    end\n  end\n  lst_A[#lst_A + 1] = nil\n  lst_B[#lst_B + 1] =\
    \ nil\n  while #lst_A > k do\n    i = lst_A[#lst_A]\n    j = lst_B[#lst_B]\n \
    \   val = grid[i][j]\n    if val == nil then\n      val = grid[i][j] = visited_count\n\
    \    end\n    lst_A[#lst_A + 1] = val\n    lst_B[#lst_B + 1] = val\n    visited[#visited\
    \ + 1] = i\n  end\n  local ans = {}\n  for i = 1, #visited do\n    ans[#ans +\
    \ 1] = visited[#visited - i]\n  end\n  return ans\nend", "\tlocal lst_A = {}\n\
    \tlocal lst_B = {}\n\tlocal i = 1\n\twhile i <= k and #lst_A ~= 0 do\n\t\ttable.insert(lst_A,\
    \ grid[i])\n\t\ttable.insert(lst_B, grid[i])\n\t\ti = i + 1\n\tend\n\tlocal j\
    \ = 1\n\twhile j <= k and #lst_B ~= 0 do\n\t\tlocal k = j\n\t\twhile k < k and\
    \ lst_A[k] < lst_B[k] do\n\t\t\tk = k + 1\n\t\tend\n\t\ttable.insert(lst_A, grid[j])\n\
    \t\ttable.insert(lst_B, grid[j])\n\t\tj = j + 1\n\tend\n\ttable.sort(lst_A)\n\t\
    table.sort(lst_B)\n\treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal visited_table = {}\n\tlocal\
    \ visited_table_count = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min\
    \ = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min =\
    \ 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\
    \tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal\
    \ visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max\
    \ = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max =\
    \ 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\
    \tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal\
    \ visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min\
    \ = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min =\
    \ 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\
    \tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal\
    \ visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max\
    \ = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max =\
    \ 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\
    \tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal\
    \ visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min\
    \ = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min =\
    \ 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\
    \tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal\
    \ visited_table_count_max = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max\
    \ = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max =\
    \ 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_max = 0\n\
    \tlocal visited_table_count_min = 0\n\tlocal visited_table_count_", "  local lst_A,\
    \ lst_B = {}, {}\n  local visited = {}\n  local i, j = 1, 1\n  while i <= #grid\
    \ do\n    visited[i] = true\n    visited[j] = true\n    local cells = grid[i]\n\
    \    for _, cell in pairs(cells) do\n      if cell == j then\n        lst_A[#lst_A\
    \ + 1] = cell\n      else\n        lst_B[#lst_B + 1] = cell\n      end\n    end\n\
    \    i = j\n    j = j + 1\n  end\n  local lst_C = {}\n  for i = 1, #lst_A do\n\
    \    local cellA = lst_A[i]\n    local cellB = lst_B[i]\n    if cellA == cellB\
    \ then\n      lst_C[#lst_C + 1] = cellA\n    end\n  end\n  local lst_D = {}\n\
    \  for i = 1, #lst_C do\n    local cellC = lst_C[i]\n    local cellD = lst_D[i]\n\
    \    if cellC == cellD then\n      lst_D[#lst_D + 1] = cellC\n    end\n  end\n\
    \  local lst_E = {}\n  for i = 1, #lst_D do\n    local cellD = lst_D[i]\n    local\
    \ cellE = lst_E[i]\n    if cellD == cellE then\n      lst_E[#lst_E + 1] = cellD\n\
    \    end\n  end\n  local lst_F = {}\n  for i = 1, #lst_E do\n    local cellE =\
    \ lst_E[i]\n    local cellF = lst_F[i]\n    if cellE == cellF then\n      lst_F[#lst_F\
    \ + 1] = cellE\n    end\n  end\n  local lst_G = {}\n  for i = 1, #lst_F do\n \
    \   local cellF = lst_F[i]\n    local cellG = lst_G[i]\n    if cellF == cellG\
    \ then\n      lst_G[#lst_G + 1] = cellF\n    end\n  end\n  local lst_H = {}\n\
    \  for i = 1, #lst_G do\n    local cellG = lst_G[i]\n    local cellH = lst_H[i]\n\
    \    if cellG == cellH then\n      lst_H[#lst_H + 1] = cellG\n    end\n  end\n\
    \  local lst_I = {}\n  for i = 1, #lst_H do\n    local cellH = lst_H[i]\n    local\
    \ cellI = lst_I[i]\n    if cellH == cell", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal min_path_count = 0\n\
    \tlocal current_cell = {}\n\tlocal current_cell_count = 0\n\tlocal current_cell_value\
    \ = 0\n\tlocal current_cell_value_count = 0\n\tlocal current_cell_visited = {}\n\
    \tlocal current_cell_visited_count = 0\n\tlocal current_cell_visited_value = 0\n\
    \tlocal current_cell_visited_value_count = 0\n\tlocal current_cell_visited_value_index\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_count = 0\n\tlocal current_cell_visited_value_index_count\
    \ = 0\n\tlocal current_cell_visited_value_index_", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B,\
    \ grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal ans = {}\n\
    \tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\t\twhile j <= #lst_A do\n\t\
    \t\tif lst_A[j] < lst_B[j] then\n\t\t\t\tlocal k = j + 1\n\t\t\t\twhile k <= #lst_A\
    \ do\n\t\t\t\t\tif lst_A[k] > lst_B[k] then\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse\n\
    \t\t\t\t\t\ttable.insert(ans, lst_A[k])\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal visited_dict = {}\n\tlocal\
    \ visited_dict_count = 0\n\tlocal visited_dict_dict = {}\n\tlocal visited_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict = {}\n\tlocal visited_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict = {}\n\tlocal visited_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict = {}\n\tlocal visited_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict = {}\n\tlocal visited_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict = {}\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict = {}\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict = {}\n\
    \tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_count = 0\n\tlocal\
    \ visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict = {}\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict\
    \ = {}\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict\
    \ = {}\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict\
    \ = {}\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_count\
    \ = 0\n\tlocal visited_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_dict_",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n", "  local lst_A, lst_B = {}, {}\n  local\
    \ visited = {}\n  local visited_count = 0\n  local visited_count_max = 0\n  local\
    \ visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n  local visited_count_min = 0\n  local visited_count_max = 0\n  local visited_count_min\
    \ = 0\n  local visited_count_max = 0\n  local visited_count_min = 0\n  local visited_count_max\
    \ = 0\n", "  local lst_A = {}\n  local lst_B = {}\n  local i = 1\n  local j =\
    \ 1\n  local count = 0\n  local visited = {}\n  local ans = {}\n  local visited_count\
    \ = 0\n  local stack = {}\n  local stack_len = 0\n  local stack_index = 1\n  local\
    \ stack_index2 = 0\n  local stack_index3 = 0\n  local stack_index4 = 0\n  local\
    \ stack_index5 = 0\n  local stack_index6 = 0\n  local stack_index7 = 0\n  local\
    \ stack_index8 = 0\n  local stack_index9 = 0\n  local stack_index10 = 0\n  local\
    \ stack_index11 = 0\n  local stack_index12 = 0\n  local stack_index13 = 0\n  local\
    \ stack_index14 = 0\n  local stack_index15 = 0\n  local stack_index16 = 0\n  local\
    \ stack_index17 = 0\n  local stack_index18 = 0\n  local stack_index19 = 0\n  local\
    \ stack_index20 = 0\n  local stack_index21 = 0\n  local stack_index22 = 0\n  local\
    \ stack_index23 = 0\n  local stack_index24 = 0\n  local stack_index25 = 0\n  local\
    \ stack_index26 = 0\n  local stack_index27 = 0\n  local stack_index28 = 0\n  local\
    \ stack_index29 = 0\n  local stack_index30 = 0\n  local stack_index31 = 0\n  local\
    \ stack_index32 = 0\n  local stack_index33 = 0\n  local stack_index34 = 0\n  local\
    \ stack_index35 = 0\n  local stack_index36 = 0\n  local stack_index37 = 0\n  local\
    \ stack_index38 = 0\n  local stack_index39 = 0\n  local stack_index40 = 0\n  local\
    \ stack_index41 = 0\n  local stack_index42 = 0\n  local stack_index43 = 0\n  local\
    \ stack_index44 = 0\n  local stack_index45 = 0\n  local stack_index46 = 0\n  local\
    \ stack_index47 = 0\n  local stack_index48 = 0\n  local stack_index49 = 0\n  local\
    \ stack_index50 = 0\n  local stack_index51 = 0\n  local stack_index52 = 0\n  local\
    \ stack_index53 = 0\n  local stack_index54 = 0\n  local stack_index55 = 0\n  local\
    \ stack_index56 = 0\n  local stack_index57 = 0\n  local stack_index58 = 0\n  local\
    \ stack_index59 = 0\n  local stack_index60 = 0\n  local stack_index61 = 0\n  local\
    \ stack_index62 = 0\n  local stack_index63 = 0\n  local stack_index64 = 0\n  local\
    \ stack_index65 = 0\n  local ", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal\
    \ i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal min_path = {}\n\tlocal min_path_count = 0\n\tlocal current_cell\n\
    \tlocal current_cell_val\n\tlocal current_cell_val_index\n\tlocal current_cell_val_count\n\
    \tlocal current_cell_val_count2\n\tlocal current_cell_val_count3\n\tlocal current_cell_val_count4\n\
    \tlocal current_cell_val_count5\n\tlocal current_cell_val_count6\n\tlocal current_cell_val_count7\n\
    \tlocal current_cell_val_count8\n\tlocal current_cell_val_count9\n\tlocal current_cell_val_count10\n\
    \tlocal current_cell_val_count11\n\tlocal current_cell_val_count12\n\tlocal current_cell_val_count13\n\
    \tlocal current_cell_val_count14\n\tlocal current_cell_val_count15\n\tlocal current_cell_val_count16\n\
    \tlocal current_cell_val_count17\n\tlocal current_cell_val_count18\n\tlocal current_cell_val_count19\n\
    \tlocal current_cell_val_count20\n\tlocal current_cell_val_count21\n\tlocal current_cell_val_count22\n\
    \tlocal current_cell_val_count23\n\tlocal current_cell_val_count24\n\tlocal current_cell_val_count25\n\
    \tlocal current_cell_val_count26\n\tlocal current_cell_val_count27\n\tlocal current_cell_val_count28\n\
    \tlocal current_cell_val_count29\n\tlocal current_cell_val_count30\n\tlocal current_cell_val_count31\n\
    \tlocal current_cell_val_count32\n\tlocal current_cell_val_count33\n\tlocal current_cell_val_count34\n\
    \tlocal current_cell_val_count35\n\tlocal current_cell_val_count36\n\tlocal current_cell_val_count37\n\
    \tlocal current_cell_val_count38\n\tlocal current_cell_val_count39\n\tlocal current_cell_val_count40\n\
    \tlocal current_cell_val_count41\n\tlocal current_cell_val_count42\n\tlocal current_cell_val_count43\n\
    \tlocal current_cell_val_count44\n\tlocal current_cell_val_count45\n\tlocal current_cell_val_count46\n\
    \tlocal current_cell_val_count47\n\tlocal current_cell_val_count48\n\tlocal current_cell_val_count49\n\
    \tlocal current_cell_val_count50\n\tlocal current_cell_val_count51\n\tlocal current_cell_val_count52\n\
    \tlocal current_cell_val_count53\n\tlocal current_cell_val_count54\n\tlocal current_cell_val_count55\n\
    \tlocal current_", "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local\
    \ visited_count = 0\n  local visited_count_max = 0\n  local visited_count_max2\
    \ = 0\n  local visited_count_max3 = 0\n  local visited_count_max4 = 0\n  local\
    \ visited_count_max5 = 0\n  local visited_count_max6 = 0\n  local visited_count_max7\
    \ = 0\n  local visited_count_max8 = 0\n  local visited_count_max9 = 0\n  local\
    \ visited_count_max10 = 0\n  local visited_count_max11 = 0\n  local visited_count_max12\
    \ = 0\n  local visited_count_max13 = 0\n  local visited_count_max14 = 0\n  local\
    \ visited_count_max15 = 0\n  local visited_count_max16 = 0\n  local visited_count_max17\
    \ = 0\n  local visited_count_max18 = 0\n  local visited_count_max19 = 0\n  local\
    \ visited_count_max20 = 0\n  local visited_count_max21 = 0\n  local visited_count_max22\
    \ = 0\n  local visited_count_max23 = 0\n  local visited_count_max24 = 0\n  local\
    \ visited_count_max25 = 0\n  local visited_count_max26 = 0\n  local visited_count_max27\
    \ = 0\n  local visited_count_max28 = 0\n  local visited_count_max29 = 0\n  local\
    \ visited_count_max30 = 0\n  local visited_count_max31 = 0\n  local visited_count_max32\
    \ = 0\n  local visited_count_max33 = 0\n  local visited_count_max34 = 0\n  local\
    \ visited_count_max35 = 0\n  local visited_count_max36 = 0\n  local visited_count_max37\
    \ = 0\n  local visited_count_max38 = 0\n  local visited_count_max39 = 0\n  local\
    \ visited_count_max40 = 0\n  local visited_count_max41 = 0\n  local visited_count_max42\
    \ = 0\n  local visited_count_max43 = 0\n  local visited_count_max44 = 0\n  local\
    \ visited_count_max45 = 0\n  local visited_count_max46 = 0\n  local visited_count_max47\
    \ = 0\n  local visited_count_max48 = 0\n  local visited_count_max49 = 0\n  local\
    \ visited_count_max50 = 0\n  local visited_count_max51 = 0\n  local visited_count_max52\
    \ = 0\n  local visited_count_max53 = 0\n  local visited_count_max54 = 0\n  local\
    \ visite", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal n = #grid\n\tlocal\
    \ m = #grid[1]\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j\
    \ <= m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A[#lst_A + 1] =\
    \ grid[i][j]\n\t\t\telse\n\t\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\t\tend\n\t\
    \t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tlst_A = lst_A[#lst_A + 1]\n\t\
    lst_B = lst_B[#lst_B + 1]\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\
    \t\twhile j <= m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A[#lst_A\
    \ + 1] = grid[i][j]\n\t\t\telse\n\t\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\t\t\
    end\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tlst_A = lst_A[#lst_A +\
    \ 1]\n\tlst_B = lst_B[#lst_B + 1]\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i\
    \ <= n do\n\t\tlocal j = 1\n\t\twhile j <= m do\n\t\t\tif grid[i][j] == grid[i][j]\
    \ then\n\t\t\t\tans[#ans + 1] = grid[i][j]\n\t\t\telse\n\t\t\t\tlocal k = i\n\t\
    \t\t\twhile k <= n do\n\t\t\t\t\tif lst_A[k] < lst_B[k] then\n\t\t\t\t\t\tans[#ans\
    \ + 1] = grid[i][k]\n\t\t\t\t\telse\n\t\t\t\t\t\tans[#ans + 1] = grid[k][j]\n\t\
    \t\t\t\tend\n\t\t\t\t\tk = k + 1\n\t\t\t\tend\n\t\t\tend\n\t\t\tj = j + 1\n\t\t\
    end\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal count = 0\n\tlocal visited_count\
    \ = 0\n\tlocal max_count = #grid\n\tlocal current_cell\n\tlocal current_cell_val\n\
    \tlocal next_cell\n\tlocal next_cell_val\n\tlocal i\n\tlocal j\n\tlocal k\n\t\n\
    \tfor i = 1, max_count do\n\t\tcurrent_cell = grid[i]\n\t\tcurrent_cell_val =\
    \ grid[i][1]\n\t\tlst_A[#lst_A + 1] = current_cell_val\n\t\tlst_B[#lst_B + 1]\
    \ = current_cell_val\n\t\tvisited[#visited + 1] = true\n\tend\n\t\n\tfor i = 1,\
    \ max_count do\n\t\tvisited[#visited + 1] = false\n\tend\n\t\n\twhile count <\
    \ k do\n\t\tcount = count + 1\n\t\tvisited_count = visited_count + 1\n\t\t\n\t\
    \tfor i = 1, max_count do\n\t\t\tif not visited[#visited + 1] then\n\t\t\t\tnext_cell\
    \ = grid[i]\n\t\t\t\tnext_cell_val = grid[i][1]\n\t\t\t\t\n\t\t\t\tfor j = 1,\
    \ #lst_A do\n\t\t\t\t\tif lst_A[j] < next_cell_val then\n\t\t\t\t\t\tlst_A[j]\
    \ = next_cell_val\n\t\t\t\t\t\tlst_B[j] = next_cell_val\n\t\t\t\t\t\tvisited[#visited\
    \ + 1] = true\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\t\n\t\tfor i\
    \ = 1, max_count do\n\t\t\tif not visited[#visited + 1] then\n\t\t\t\tans[#ans\
    \ + 1] = lst_A[i]\n\t\t\tend\n\t\tend\n\tend\n\t\n\treturn ans\nend", "  -- Base\
    \ case\n  if k == 1 then\n    return grid\n  end", "  local lst_A, lst_B = {},\
    \ {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  local i, j, k, l, m, n\n  for i = 1, k do\n    k = k - 1\n    l = k\n    m\
    \ = k\n    n = k\n    for j = 1, k do\n      k = k - 1\n      m = k\n      n =\
    \ k\n      for k = 1, k do\n        k = k - 1\n        l = k\n      end\n    end\n\
    \    table.insert(ans, lst_A[i])\n  end\n  return ans\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_table = {}\n\tlocal visited_table_size = 0\n\tlocal visited_table_count\
    \ = 0\n\tlocal visited_table_max_size = 0\n\tlocal visited_table_max_count = 0\n\
    \tlocal visited_table_max_size_index = 0\n\tlocal visited_table_max_count_index\
    \ = 0\n\tlocal visited_table_max_size_index = 0\n\tlocal visited_table_max_count_index\
    \ = 0\n\tlocal visited_table_max_size_index_count = 0\n\tlocal visited_table_max_count_index_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count = 0\n\tlocal visited_table_max_count_index_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count = 0\n\tlocal visited_table_max_count_index_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count = 0\n\tlocal\
    \ visited_table_max_count_index_count_count_count_count = 0\n\tlocal visited_table_max_size_index_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count = 0\n\tlocal\
    \ visited_table_max_size_index_count_count_count_count_count = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_size_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_max_count_index_count_count_count_count_count_count_count_count_count_count_count_count\
    \ = 0\n\tlocal visited_table_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\
    \tlocal m = #grid[1]\n\tlocal i, j, k\n\tlocal visited = {}\n\tfor i = 1, n do\n\
    \t\tlst_A[grid[i]] = i\n\tend\n\tfor j = 1, m do\n\t\tlst_B[grid[j]] = j\n\tend\n\
    \twhile k ~= 0 do\n\t\tk = k - 1\n\t\ti = lst_A[grid[k]]\n\t\tj = lst_B[grid[k]]\n\
    \t\tif visited[i] ~= nil and visited[j] ~= nil then\n\t\t\tk = k - 1\n\t\t\ti\
    \ = visited[i]\n\t\t\tj = visited[j]\n\t\telse\n\t\t\tvisited[i] = j\n\t\tend\n\
    \tend\n\treturn lst_A\nend", "  local lst_A, lst_B = {}, {}\n  for i = 1, #grid\
    \ do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B, grid[i])\n  end\n\
    \  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  for i = 1, k do\n\
    \    local j = k - i\n    local k = k - i - 1\n    local x = lst_A[i]\n    local\
    \ y = lst_B[j]\n    local z = lst_A[k]\n    local w = lst_B[k]\n    if x < y then\n\
    \      if x < z then\n        if x < w then\n          table.insert(ans, x)\n\
    \        end\n      else\n        if y < z then\n          table.insert(ans, y)\n\
    \        end\n      end\n    else\n      if y < z then\n        if y < w then\n\
    \          table.insert(ans, y)\n        end\n      else\n        if z < w then\n\
    \          table.insert(ans, z)\n        end\n      end\n    end\n  end\n  return\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, val, tmp\n\tfor i =\
    \ 1, #grid do\n\t\tlst_A[grid[i]] = grid[i]\n\tend\n\tfor j = 1, #grid do\n\t\t\
    lst_B[grid[j]] = grid[j]\n\tend\n\tfor i = 1, #grid do\n\t\tval = grid[i]\n\t\t\
    tmp = lst_A[val]\n\t\twhile tmp ~= nil do\n\t\t\tlst_A[tmp] = val\n\t\t\ttmp =\
    \ lst_A[val]\n\t\tend\n\tend\n\tfor j = 1, #grid do\n\t\tval = grid[j]\n\t\ttmp\
    \ = lst_B[val]\n\t\twhile tmp ~= nil do\n\t\t\tlst_B[tmp] = val\n\t\t\ttmp = lst_B[val]\n\
    \t\tend\n\tend\n\tlocal ans = {}\n\tfor i = 1, #grid do\n\t\tans[grid[i]] = i\n\
    \tend\n\ttable.sort(ans, function(a, b) return ans[a] < ans[b] end)\n\tlocal count\
    \ = 0\n\tlocal tmp\n\tfor i = 1, #grid do\n\t\ttmp = ans[i]\n\t\twhile tmp ~=\
    \ nil do\n\t\t\tcount = count + 1\n\t\t\ttmp = ans[tmp]\n\t\tend\n\tend\n\tlocal\
    \ ans2\n\tif count == k then\n\t\tans2 = ans\n\telse\n\t\tans2 = {}\n\t\tlocal\
    \ tmp2\n\t\tfor i = 1, #grid do\n\t\t\ttmp2 = ans[i]\n\t\t\twhile tmp2 ~= nil\
    \ do\n\t\t\t\tcount = count + 1\n\t\t\t\ttmp2 = ans[tmp2]\n\t\t\tend\n\t\t\tans2[grid[i]]\
    \ = count\n\t\tend\n\t\ttable.sort(ans2, function(a, b) return ans2[a] < ans2[b]\
    \ end)\n\tend\n\treturn ans2\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\
    local count = 0\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_max2 = 0\n\tlocal visited_count_max3 = 0\n\tlocal\
    \ visited_count_max4 = 0\n\tlocal visited_count_max5 = 0\n\tlocal visited_count_max6\
    \ = 0\n\tlocal visited_count_max7 = 0\n\tlocal visited_count_max8 = 0\n\tlocal\
    \ visited_count_max9 = 0\n\tlocal visited_count_max10 = 0\n\tlocal visited_count_max11\
    \ = 0\n\tlocal visited_count_max12 = 0\n\tlocal visited_count_max13 = 0\n\tlocal\
    \ visited_count_max14 = 0\n\tlocal visited_count_max15 = 0\n\tlocal visited_count_max16\
    \ = 0\n\tlocal visited_count_max17 = 0\n\tlocal visited_count_max18 = 0\n\tlocal\
    \ visited_count_max19 = 0\n\tlocal visited_count_max20 = 0\n\tlocal visited_count_max21\
    \ = 0\n\tlocal visited_count_max22 = 0\n\tlocal visited_count_max23 = 0\n\tlocal\
    \ visited_count_max24 = 0\n\tlocal visited_count_max25 = 0\n\tlocal visited_count_max26\
    \ = 0\n\tlocal visited_count_max27 = 0\n\tlocal visited_count_max28 = 0\n\tlocal\
    \ visited_count_max29 = 0\n\tlocal visited_count_max30 = 0\n\tlocal visited_count_max31\
    \ = 0\n\tlocal visited_count_max32 = 0\n\tlocal visited_count_max33 = 0\n\tlocal\
    \ visited_count_max34 = 0\n\tlocal visited_count_max35 = 0\n\tlocal visited_count_max36\
    \ = 0\n\tlocal visited_count_max37 = 0\n\tlocal visited_count_max38 = 0\n\tlocal\
    \ visited_count_max39 = 0\n\tlocal visited_count_max40 = 0\n\tlocal visited_count_max41\
    \ = 0\n\tlocal visited_count_max42 = 0\n\tlocal visited_count_max43 = 0\n\tlocal\
    \ visited_count_max44 = 0\n\tlocal visited_count_max45 = 0\n\tlocal visited_count_max46\
    \ = 0\n\tlocal visited_count_max47 = 0\n\tlocal visited_count_max48 = 0\n\tlocal\
    \ visited_count_max49 = 0\n\tlocal visited_count_max50 = 0\n\tlocal visited_count_max51\
    \ = 0\n\tlocal visited_count_max52 = 0\n\tlocal visited_count_max53 = 0\n\tlocal\
    \ visited_count_max", "  local lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n\
    \    table.insert(lst_A, grid[i])\n    table.insert(lst_B, grid[i])\n  end\n \
    \ table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  local i = k\n  while\
    \ i ~= 0 do\n    table.insert(ans, lst_A[i])\n    i = i - 1\n  end\n  return ans\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid\
    \ do\n\t\tlocal value = grid[i][j]\n\t\tif value == nil then\n\t\t\tbreak\n\t\t\
    end\n\t\tlst_A[#lst_A + 1] = value\n\t\tlst_B[#lst_B + 1] = value\n\t\ti = i +\
    \ 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A_sorted = table.sort(lst_A)\n\tlocal lst_B_sorted\
    \ = table.sort(lst_B)\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal i,\
    \ j = 1, 1\n\twhile i <= #lst_A_sorted do\n\t\tlocal value = lst_A_sorted[i]\n\
    \t\tif value == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A_sorted[#lst_A_sorted\
    \ + 1] = value\n\t\tlst_B_sorted[#lst_B_sorted + 1] = value\n\t\ti = i + 1\n\t\
    \tj = j + 1\n\tend\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal i, j\
    \ = 1, 1\n\twhile i <= #lst_B_sorted do\n\t\tlocal value = lst_B_sorted[i]\n\t\
    \tif value == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A_sorted[#lst_A_sorted +\
    \ 1] = value\n\t\tlst_B_sorted[#lst_B_sorted + 1] = value\n\t\ti = i + 1\n\t\t\
    j = j + 1\n\tend\n\tlocal lst_A_sorted = table.sort(lst_A_sorted)\n\tlocal lst_B_sorted\
    \ = table.sort(lst_B_sorted)\n\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1,\
    \ 1\n\twhile i <= #lst_A_sorted do\n\t\tlocal value = lst_A_sorted[i]\n\t\tif\
    \ value == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A[#lst_A + 1] = value\n\t\t\
    lst_B[#lst_B + 1] = value\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal lst_A_sorted\
    \ = table.sort(lst_A)\n\tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #lst_B_sorted do\n\t\tlocal\
    \ value = lst_B_sorted[i]\n\t\tif value == nil then\n\t\t\tbreak\n\t\tend\n\t\t\
    lst_A[#lst_A + 1] = value\n\t\tlst_B[#lst_B + 1] = value", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\
    \t\tlst_B[j] = grid[j]\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\tlocal i = 1\n\t\
    while i <= k do\n\t\tlocal j = i\n\t\twhile j <= #grid do\n\t\t\tif lst_A[j] <\
    \ lst_B[j] then\n\t\t\t\tlocal tmp = lst_A[j]\n\t\t\t\tlst_A[j] = lst_B[j]\n\t\
    \t\t\tlst_B[j] = tmp\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal\
    \ m = #grid[1]\n\tlocal i = 1\n\twhile i <= n do\n\t\tlst_A[#lst_A + 1] = grid[i]\n\
    \t\ti = i + 1\n\tend\n\ti = 2\n\twhile i <= m do\n\t\tlst_B[#lst_B + 1] = grid[i]\n\
    \t\ti = i + 1\n\tend\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= n do\n\t\t\
    local j = 1\n\t\twhile j <= m do\n\t\t\tif lst_A[i] < lst_B[j] then\n\t\t\t\t\
    ans[#ans + 1] = lst_A[i]\n\t\t\t\ti = i + 1\n\t\t\telse\n\t\t\t\tans[#ans + 1]\
    \ = lst_B[j]\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal min_path_len\
    \ = 0\n\tlocal min_path_len_index = 0\n\tlocal min_path_len_value = 0\n\tlocal\
    \ min_path_len_index2 = 0\n\tlocal min_path_len_value2 = 0\n\tlocal min_path_len_index3\
    \ = 0\n\tlocal min_path_len_value3 = 0\n\tlocal min_path_len_index4 = 0\n\tlocal\
    \ min_path_len_value4 = 0\n\tlocal min_path_len_index5 = 0\n\tlocal min_path_len_value5\
    \ = 0\n\tlocal min_path_len_index6 = 0\n\tlocal min_path_len_value6 = 0\n\tlocal\
    \ min_path_len_index7 = 0\n\tlocal min_path_len_value7 = 0\n\tlocal min_path_len_index8\
    \ = 0\n\tlocal min_path_len_value8 = 0\n\tlocal min_path_len_index9 = 0\n\tlocal\
    \ min_path_len_value9 = 0\n\tlocal min_path_len_index10 = 0\n\tlocal min_path_len_value10\
    \ = 0\n\tlocal min_path_len_index11 = 0\n\tlocal min_path_len_value11 = 0\n\t\
    local min_path_len_index12 = 0\n\tlocal min_path_len_value12 = 0\n\tlocal min_path_len_index13\
    \ = 0\n\tlocal min_path_len_value13 = 0\n\tlocal min_path_len_index14 = 0\n\t\
    local min_path_len_value14 = 0\n\tlocal min_path_len_index15 = 0\n\tlocal min_path_len_value15\
    \ = 0\n\tlocal min_path_len_index16 = 0\n\tlocal min_path_len_value16 = 0\n\t\
    local min_path_len_index17 = 0\n\tlocal min_path_len_value17 = 0\n\tlocal min_path_len_index18\
    \ = 0\n\tlocal min_path_len_value18 = 0\n\tlocal min_path_len_index19 = 0\n\t\
    local min_path_len_value19 = 0\n\tlocal min_path_len_index20 = 0\n\tlocal min_path_len_value20\
    \ = 0\n\tlocal min_path_len_index21 = 0\n\tlocal min_path_len_value21 = 0\n\t\
    local min_path_len_index22 = 0\n\tlocal min_path_len_value22 = 0\n\tlocal min_path_len_index23\
    \ = 0\n\tlocal min_path_len_value23 = 0\n\tlocal min_path_len_index24 = 0\n\t\
    local min_path_len_value24 = 0\n\tlocal min_path_len_index25 = 0\n\tlocal min_path_len_value25\
    \ = 0\n\tlocal min_path_len_index26 = 0\n\tlocal min_path_len_value26 = 0", "\t\
    local lst_A = {}\n\tlocal lst_B = {}\n\tlocal i, j, val\n\tlocal count = 0\n\t\
    for i, row in ipairs(grid) do\n\t\tfor j, val in ipairs(row) do\n\t\t\tcount =\
    \ count + 1\n\t\t\tlst_A[count] = val\n\t\t\tlst_B[count] = val\n\t\tend\n\tend\n\
    \tlst_A[count] = grid:size()\n\tlst_B[count] = grid:size()\n\tcount = count +\
    \ 1\n\tfor i = 1, count do\n\t\tlst_A[i] = lst_A[i - 1]\n\t\tlst_B[i] = lst_B[i\
    \ - 1]\n\tend\n\tlst_A[count] = grid:size()\n\tlst_B[count] = grid:size()\n\t\
    count = count + 1\n\tfor i = 1, count do\n\t\tlst_A[i] = lst_A[i - 1]\n\t\tlst_B[i]\
    \ = lst_B[i - 1]\n\tend\n\tlst_A[count] = grid:size()\n\tlst_B[count] = grid:size()\n\
    \tcount = count + 1\n\tfor i = 1, count do\n\t\tlst_A[i] = lst_A[i - 1]\n\t\t\
    lst_B[i] = lst_B[i - 1]\n\tend\n\tlst_A[count] = grid:size()\n\tlst_B[count] =\
    \ grid:size()\n\tcount = count + 1\n\tfor i = 1, count do\n\t\tlst_A[i] = lst_A[i\
    \ - 1]\n\t\tlst_B[i] = lst_B[i - 1]\n\tend\n\tlst_A[count] = grid:size()\n\tlst_B[count]\
    \ = grid:size()\n\tcount = count + 1\n\tfor i = 1, count do\n\t\tlst_A[i] = lst_A[i\
    \ - 1]\n\t\tlst_B[i] = lst_B[i - 1]\n\tend\n\tlst_A[count] = grid:size()\n\tlst_B[count]\
    \ = grid:size()\n\tcount = count + 1\n\tfor i = 1, count do\n\t\tlst_A[i] = lst_A[i\
    \ - 1]\n\t\tlst_B[i] = lst_B[i - 1]\n\tend\n\tlst_A[count] = grid:size()\n\tlst_B[count]\
    \ = grid:size()\n\tcount = count + 1\n\tfor i = 1, count do\n\t\tlst_A[i] = lst_A[i\
    \ - 1]\n\t\tlst_B[i] = lst_B[i - 1]\n\tend\n\tlst_A[count] = grid:size()\n\tlst_B[count]\
    \ = grid:size()\n\tcount = count + 1\n\tfor i = 1, count do\n", "  local lst_A\
    \ = {}\n  local lst_B = {}\n  local i = 1\n  local j = 1\n  local count = 0\n\
    \  while i <= #grid do\n    count = count + 1\n    local value = grid[i]\n   \
    \ local index = i\n    while index <= #grid do\n      if grid[index] == value\
    \ then\n        lst_A[count] = index\n      else\n        lst_B[count] = index\n\
    \      end\n      index = index + 1\n    end\n    i = i + 1\n  end\n  lst_A =\
    \ lst_A[1]\n  lst_B = lst_B[1]\n  local index = 1\n  while index <= k do\n   \
    \ index = index + 1\n  end\n  index = index - 1\n  while index <= #lst_A do\n\
    \    if lst_A[index] < lst_B[index] then\n      lst_A = lst_A[index + 1]\n   \
    \ else\n      lst_B = lst_B[index + 1]\n    end\n    index = index + 1\n  end\n\
    \  return lst_A\nend", "  local lst_A = {}\n  local lst_B = {}\n  local i = 1\n\
    \  local j = 1\n  local count = 0\n  local visited = {}\n  local visited_count\
    \ = 0\n  local visited_lst_A = {}\n  local visited_lst_B = {}\n  local visited_lst_A_index\
    \ = {}\n  local visited_lst_B_index = {}\n  local visited_lst_A_count = 0\n  local\
    \ visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count\
    \ = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local\
    \ visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count\
    \ = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local\
    \ visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count\
    \ = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local\
    \ visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count\
    \ = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local\
    \ visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count\
    \ = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local\
    \ visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count\
    \ = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local\
    \ visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count\
    \ = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local\
    \ visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count\
    \ = 0\n  local visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local\
    \ visited_lst_B_count = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count\
    \ = 0\n  local visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local\
    \ visited_lst_A_count = 0\n  local visited_lst_B_count = 0\n  local ", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tfor i, row in ipairs(grid) do\n\t\ttable.insert(lst_A,\
    \ row[1])\n\t\ttable.insert(lst_B, row[2])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = k\n\twhile i ~= 0 do\n\t\tlocal j = k - i\n\t\t\
    local k = i - 1\n\t\twhile k ~= 0 do\n\t\t\tif lst_A[k] < lst_B[k] then\n\t\t\t\
    \ttable.insert(ans, lst_A[k])\n\t\t\t\tk = k - 1\n\t\t\telse\n\t\t\t\ttable.insert(ans,\
    \ lst_B[k])\n\t\t\t\tk = k - 1\n\t\t\tend\n\t\tend\n\t\ti = i - 1\n\tend\n\treturn\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tfor _, row in ipairs(grid) do\n\
    \t\tfor _, cell in ipairs(row) do\n\t\t\ttable.insert(lst_A, cell)\n\t\tend\n\t\
    end\n\tfor _, row in ipairs(grid) do\n\t\tfor _, cell in ipairs(row) do\n\t\t\t\
    table.insert(lst_B, cell)\n\t\tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 0\n\twhile i < k do\n\t\tlocal j = i + 1\n\t\twhile\
    \ j < k do\n\t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\tbreak\n\t\t\telseif lst_A[i]\
    \ < lst_B[j] then\n\t\t\t\tans[i] = lst_A[i]\n\t\t\t\ti = j\n\t\t\telse\n\t\t\t\
    \tans[i] = lst_B[j]\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\n\
    end", "  local lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A,\
    \ grid[i])\n    table.insert(lst_B, grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  local ans = {}\n  local i = 1\n  while i <= k do\n    local j = i\n    while\
    \ j <= k do\n      if lst_A[j] < lst_B[j] then\n        table.insert(ans, lst_A[j])\n\
    \        j = j + 1\n      else\n        table.insert(ans, lst_B[j])\n        j\
    \ = j + 1\n      end\n    end\n    i = i + 1\n  end\n  return ans\nend", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ i, j, k\n\tlocal count = 0\n\tlocal visited_table = {}\n\tfor i = 1, #grid do\n\
    \t\tvisited_table[i] = false\n\tend\n\tfor i = 1, #grid do\n\t\tvisited_table[i]\
    \ = false\n\tend\n\tvisited_table[1] = true\n\tvisited_table[2] = true\n\tvisited_table[3]\
    \ = true\n\tvisited_table[4] = true\n\tvisited_table[5] = true\n\tvisited_table[6]\
    \ = true\n\tvisited_table[7] = true\n\tvisited_table[8] = true\n\tvisited_table[9]\
    \ = true\n\tvisited_table[10] = true\n\tvisited_table[11] = true\n\tvisited_table[12]\
    \ = true\n\tvisited_table[13] = true\n\tvisited_table[14] = true\n\tvisited_table[15]\
    \ = true\n\tvisited_table[16] = true\n\tvisited_table[17] = true\n\tvisited_table[18]\
    \ = true\n\tvisited_table[19] = true\n\tvisited_table[20] = true\n\tvisited_table[21]\
    \ = true\n\tvisited_table[22] = true\n\tvisited_table[23] = true\n\tvisited_table[24]\
    \ = true\n\tvisited_table[25] = true\n\tvisited_table[26] = true\n\tvisited_table[27]\
    \ = true\n\tvisited_table[28] = true\n\tvisited_table[29] = true\n\tvisited_table[30]\
    \ = true\n\tvisited_table[31] = true\n\tvisited_table[32] = true\n\tvisited_table[33]\
    \ = true\n\tvisited_table[34] = true\n\tvisited_table[35] = true\n\tvisited_table[36]\
    \ = true\n\tvisited_table[37] = true\n\tvisited_table[38] = true\n\tvisited_table[39]\
    \ = true\n\tvisited_table[40] = true\n\tvisited_table[41] = true\n\tvisited_table[42]\
    \ = true\n\tvisited_table[43] = true\n\tvisited_table[44] = true\n\tvisited_table[45]\
    \ = true\n\tvisited_table[46] = true\n\tvisited_table[47] = true\n\tvisited_table[48]\
    \ = true\n\tvisited_table[49] = true\n\tvisited_table[50] = true\n\tvisited_table[51]\
    \ = true\n\tvisited_table[52] = true\n\tvisited_table[53] = true\n\tvisited_table[54]\
    \ = true\n\tvisited_table[55] = true\n", "  local lst_A = {}\n  local lst_B =\
    \ {}\n  for i = 1, #grid do\n    local cell = {}\n    for j = 1, #grid[1] do\n\
    \      table.insert(cell, grid[i][j])\n    end\n    table.insert(lst_A, cell)\n\
    \  end\n  for i = 1, #grid do\n    local cell = {}\n    for j = 1, #grid[1] do\n\
    \      table.insert(cell, grid[i][j])\n    end\n    table.insert(lst_B, cell)\n\
    \  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  for i =\
    \ 1, k do\n    local cell = {}\n    for j = 1, #grid[1] do\n      table.insert(cell,\
    \ grid[i][j])\n    end\n    table.insert(ans, cell)\n  end\n  for i = 1, k do\n\
    \    local cell = {}\n    for j = 1, #grid[1] do\n      table.insert(cell, grid[i][j])\n\
    \    end\n    table.insert(ans, cell)\n  end\n  for i = 1, k do\n    local cell\
    \ = {}\n    for j = 1, #grid[1] do\n      table.insert(cell, grid[i][j])\n   \
    \ end\n    table.insert(ans, cell)\n  end\n  for i = 1, k do\n    local cell =\
    \ {}\n    for j = 1, #grid[1] do\n      table.insert(cell, grid[i][j])\n    end\n\
    \    table.insert(ans, cell)\n  end\n  for i = 1, k do\n    local cell = {}\n\
    \    for j = 1, #grid[1] do\n      table.insert(cell, grid[i][j])\n    end\n \
    \   table.insert(ans, cell)\n  end\n  for i = 1, k do\n    local cell = {}\n \
    \   for j = 1, #grid[1] do\n      table.insert(cell, grid[i][j])\n    end\n  \
    \  table.insert(ans, cell)\n  end\n  for i = 1, k do\n    local cell = {}\n  \
    \  for j = 1, #grid[1] do\n      table.insert(cell, grid[i][j])\n    end\n   \
    \ table.insert(ans, cell)\n  end\n  for i = 1, k do\n    local cell = {}\n   \
    \ for j = 1, #grid[1] do\n      table.insert(cell, grid[i][j])\n    end\n    table.insert(ans,\
    \ cell)\n  end\n  for i = 1, k do\n    local cell = {}\n    for j = 1, #grid[1]\
    \ do\n      table.insert(cell, grid[i][j])\n    end\n    table.insert(ans, cell)\n\
    \  end\n  for i = 1, k do\n    local cell = {}\n    for j = 1, #grid[1] do\n \
    \     table.insert(cell, grid[i][j])\n    end\n    table.insert(ans, cell)\n \
    \ end\n  for i = 1, k do\n    ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_max = #visited\n\tlocal visited_max_index\
    \ = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\tlocal\
    \ visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visited_max_index]\n\
    \tlocal visited_max_index = visited_max\n\tlocal visited_max_value = grid[visite",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal min_path = {}\n\tlocal i, j, k, m, n = unpack(grid)\n\tlocal function\
    \ dfs(i, j)\n\t\tvisited_count = visited_count + 1\n\t\tif visited_count > k then\n\
    \t\t\treturn\n\t\tend\n\t\tvisited[i] = true\n\t\tvisited[j] = true\n\t\tlocal\
    \ value = grid[i][j]\n\t\tif value == nil then\n\t\t\treturn\n\t\tend\n\t\tif\
    \ value == 1 then\n\t\t\tlst_A[#lst_A + 1] = i\n\t\t\tlst_B[#lst_B + 1] = j\n\t\
    \telse\n\t\t\tlocal lst_A_i, lst_B_j\n\t\t\tfor k = 1, value do\n\t\t\t\tlst_A_i\
    \ = lst_A[#lst_A + 1]\n\t\t\t\tlst_B_j = lst_B[#lst_B + 1]\n\t\t\t\tif lst_A_i\
    \ < i then\n\t\t\t\t\tlst_A[#lst_A + 1] = lst_A_i + 1\n\t\t\t\telseif lst_B_j\
    \ < j then\n\t\t\t\t\tlst_B[#lst_B + 1] = lst_B_j + 1\n\t\t\t\telse\n\t\t\t\t\t\
    break\n\t\t\t\tend\n\t\t\tend\n\t\t\tif lst_A_i < i then\n\t\t\t\tlst_A[#lst_A\
    \ + 1] = i\n\t\t\telseif lst_B_j < j then\n\t\t\t\tlst_B[#lst_B + 1] = j\n\t\t\
    \tend\n\t\t\tlocal lst_A_i, lst_B_j\n\t\t\tfor k = 1, value do\n\t\t\t\tlst_A_i\
    \ = lst_A[#lst_A + 1]\n\t\t\t\tlst_B_j = lst_B[#lst_B + 1]\n\t\t\t\tif lst_A_i\
    \ < i then\n\t\t\t\t\tlst_A[#lst_A + 1] = lst_A_i + 1\n\t\t\t\telseif lst_B_j\
    \ < j then\n\t\t\t\t\tlst_B[#lst_B + 1] = lst_B_j + 1\n\t\t\t\telse\n\t\t\t\t\t\
    break\n\t\t\t\tend\n\t\t\tend\n\t\t\tif lst_A_i < i then\n\t\t\t\tlst_A[#lst_A\
    \ + 1] = i\n\t\t\telseif lst_B_j < j then\n\t\t\t\tlst_B[#lst_B + 1] = j\n\t\t\
    \tend\n\t\t\tlocal lst_A_i, lst_B_j\n\t\t\tfor k = 1, value do\n\t\t\t\tlst_A_i\
    \ = lst_A[#lst_A + 1]\n\t\t\t\tlst_B_j = lst_B[#lst_B + 1]\n\t\t\t\tif lst_A_i\
    \ < i then\n\t\t\t\t\tlst_A[#lst_A + 1] = lst_A_i + 1", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j =\
    \ 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][1]\n\
    \t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = i + 1\n\t\
    \twhile j <= #grid do\n\t\t\tif lst_A[j] < lst_B[j] then\n\t\t\t\tlst_A[j] = lst_B[j]\n\
    \t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited =\
    \ {}\n\tlocal visited_count = 0\n\tlocal visited_table = {}\n\tlocal i, j, k\n\
    \tlocal count = 0\n\tlocal min_path = {}\n\tlocal current_cell\n\tlocal current_cell_value\n\
    \tlocal current_cell_index\n\tlocal current_cell_index_value\n\tlocal current_cell_index_value_index\n\
    \tlocal current_cell_index_value_index_value\n\tlocal current_cell_index_value_index_value_next\n\
    \tlocal current_cell_index_value_index_value_next_value\n\tlocal current_cell_index_value_index_value_next_value_index\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value\n\tlocal current_cell_index_value_index_value_next_value_index_value_next\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value_next\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value_next_value_next\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value_next_value_next_value_next_value\n\
    \tlocal current_cell_index_value_index_value_next_value_index_value_next_value_next_value_next_value_next_value_next_value_next_value_next_value_next_value\n\
    \tlocal current_cell", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\t\
    local visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal count = 0\n\tlocal index\
    \ = 1\n\twhile index <= #grid do\n\t\tvisited[index] = true\n\t\tcount = count\
    \ + 1\n\t\tindex = index + 1\n\tend\n\tindex = index - 1\n\twhile index <= #grid\
    \ do\n\t\tlocal cell = grid[index]\n\t\tlocal value = cell[1]\n\t\tif visited[value]\
    \ then\n\t\t\tindex = index + 1\n\t\t\tcontinue\n\t\tend\n\t\tvisited[value] =\
    \ true\n\t\tindex = index + 1\n\t\tlocal neighbors = cell[2]\n\t\tfor _, neighbor\
    \ in pairs(neighbors) do\n\t\t\tlocal neighborValue = neighbor[1]\n\t\t\tif visited[neighborValue]\
    \ then\n\t\t\t\tindex = index + 1\n\t\t\t\tcontinue\n\t\t\tend\n\t\t\tvisited[neighborValue]\
    \ = true\n\t\t\tcount = count + 1\n\t\t\tlst_A[count] = neighborValue\n\t\t\t\
    lst_B[count] = value\n\t\t\tindex = index + 1\n\t\tend\n\tend\n\tlocal lst_A_sorted\
    \ = table.sort(lst_A)\n\tlocal lst_B_sorted = table.sort(lst_B)\n\tlocal count\
    \ = 0\n\tlocal index = 1\n\twhile index <= #grid do\n\t\tvisited[index] = true\n\
    \t\tcount = count + 1\n\t\tindex = index + 1\n\tend\n\tindex = index - 1\n\twhile\
    \ index <= #grid do\n\t\tlocal cell = grid[index]\n\t\tlocal value = cell[1]\n\
    \t\tif visited[value] then\n\t\t\tindex = index + 1\n\t\t\tcontinue\n\t\tend\n\
    \t\tvisited[value] = true\n\t\tindex = index + 1\n\t\tlocal neighbors = cell[2]\n\
    \t\tfor _, neighbor in pairs(neighbors) do\n\t\t\tlocal neighborValue = neighbor[1]\n\
    \t\t\tif visited[neighborValue] then\n\t\t\t\tindex = index + 1\n\t\t\t\tcontinue\n\
    \t\t\tend\n\t\t\tvisited[neighborValue] = true\n\t\t\tcount = count + 1\n\t\t\t\
    if lst_A_sorted[count] < lst_B_sorted[count] then\n\t\t\t\tlst_A[count] = neighborValue\n\
    \t\t\t\tlst_B[count] = value\n\t\t\telse\n\t\t\t\tlst_A[count] = value\n\t\t\t\
    \tlst_B[count] = neighborValue\n\t\t\tend\n\t\t\tindex = index + 1\n\t\tend\n\t\
    end\n\treturn lst_A\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i\
    \ = 1\n\tlocal j = 1\n\tlocal cnt = 0\n\twhile i <= #grid do\n\t\tlocal val =\
    \ grid[i]\n\t\tif val == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A[#lst_A + 1]\
    \ = val\n\t\tlst_B[#lst_B + 1] = val\n\t\ti = i + 1\n\t\tcnt = cnt + 1\n\tend\n\
    \twhile j <= #grid do\n\t\tlocal val = grid[j]\n\t\tif val == nil then\n\t\t\t\
    break\n\t\tend\n\t\tlst_A[#lst_A + 1] = val\n\t\tlst_B[#lst_B + 1] = val\n\t\t\
    j = j + 1\n\t\tcnt = cnt + 1\n\tend\n\twhile cnt > 0 do\n\t\ti = i - 1\n\t\tcnt\
    \ = cnt - 1\n\tend\n\twhile cnt > 0 do\n\t\tj = j - 1\n\t\tcnt = cnt - 1\n\tend\n\
    \tlocal lst_A2 = {}\n\tlocal lst_B2 = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal\
    \ cnt = 0\n\twhile i <= #grid do\n\t\tlocal val = grid[i]\n\t\tif val == nil then\n\
    \t\t\tbreak\n\t\tend\n\t\tlst_A2[#lst_A2 + 1] = val\n\t\tlst_B2[#lst_B2 + 1] =\
    \ val\n\t\ti = i + 1\n\t\tcnt = cnt + 1\n\tend\n\twhile j <= #grid do\n\t\tlocal\
    \ val = grid[j]\n\t\tif val == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A2[#lst_A2\
    \ + 1] = val\n\t\tlst_B2[#lst_B2 + 1] = val\n\t\tj = j + 1\n\t\tcnt = cnt + 1\n\
    \tend\n\twhile cnt > 0 do\n\t\ti = i - 1\n\t\tcnt = cnt - 1\n\tend\n\twhile cnt\
    \ > 0 do\n\t\tj = j - 1\n\t\tcnt = cnt - 1\n\tend\n\tlocal lst_A3 = {}\n\tlocal\
    \ lst_B3 = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal cnt = 0\n\twhile i <= #grid\
    \ do\n\t\tlocal val = grid[i]\n\t\tif val == nil then\n\t\t\tbreak\n\t\tend\n\t\
    \tlst_A3[#lst_A3 + 1] = val\n\t\tlst_B3[#lst_B3 + 1] = val\n\t\ti = i + 1\n\t\t\
    cnt = cnt + ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, k, l, m, n, o, p,\
    \ q, r, s, t, u, v, w, x, y, z, a\n\tlocal function add(a, b) \n\t\tlocal c =\
    \ {}\n\t\tfor i, v in pairs(a) do c[v] = i end\n\t\tfor i, v in pairs(b) do c[v]\
    \ = i end\n\t\treturn c\n\tend\n\tlocal function remove(a, b) \n\t\tlocal c =\
    \ {}\n\t\tfor i, v in pairs(a) do c[v] = i end\n\t\tfor i, v in pairs(b) do c[v]\
    \ = i end\n\t\treturn c\n\tend\n\tlocal function compare(a, b) \n\t\treturn a[1]\
    \ < b[1]\n\tend\n\tlocal function swap(a, b) \n\t\tlocal c = {}\n\t\tfor i, v\
    \ in pairs(a) do c[v] = i end\n\t\tfor i, v in pairs(b) do c[v] = i end\n\t\t\
    return c\n\tend\n\tlocal function dfs(i, j, k, l, m, n, o, p, q, r, s, t, u, v,\
    \ w, x, y, z, a) \n\t\tlocal a, b, c, d, e, f, g, h, i, j, k, l, m, n, o, p, q,\
    \ r, s, t, u, v, w, x, y, z, a\n\t\tlocal function add(a, b) \n\t\t\tlocal c =\
    \ {}\n\t\t\tfor i, v in pairs(a) do c[v] = i end\n\t\t\tfor i, v in pairs(b) do\
    \ c[v] = i end\n\t\t\treturn c\n\t\tend\n\t\tlocal function remove(a, b) \n\t\t\
    \tlocal c = {}\n\t\t\tfor i, v in pairs(a) do c[v] = i end\n\t\t\tfor i, v in\
    \ pairs(b) do c[v] = i end\n\t\t\treturn c\n\t\tend\n\t\tlocal function compare(a,\
    \ b) \n\t\t\treturn a[1] < b[1]\n\t\tend\n\t\tlocal function swap(a, b) \n\t\t\
    \tlocal c = {}\n\t\t\tfor i, v in pairs(a) do c[v] = i end\n\t\t\tfor i, v in\
    \ pairs(b) do c[v] = i end\n\t\t\treturn c\n\t\tend\n\t\tlocal function dfs(i,\
    \ j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a) \n\t\t\tlocal a, b, c,\
    \ d, e, f, g, h, i, j, k, l, m, n, o, p, q, r, s, t, u, v, w, x, y, z, a\n\t\t\
    \tlocal function add(a, b) \n\t\t\t\tlocal c = {}\n\t\t\t\tfor i, v in pairs(a)\
    \ do c[v] = i end\n\t\t\t\tfor i, v in pairs(b) do c[v] = i end\n\t\t\t\treturn\
    \ c\n\t\t\tend\n\t\t\tlocal function remove(a, b) \n\t\t\t\tlocal c = {}\n\t\t\
    \t\tfor i, ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal i,\
    \ j, k\n\tlocal n = #grid\n\t\n\tfor i = 1, n do\n\t\tlst_A[grid[i]] = grid[i]\n\
    \tend\n\t\n\tfor i = 1, n do\n\t\tlst_B[grid[i]] = grid[i]\n\tend\n\t\n\tfor i\
    \ = 1, n do\n\t\tvisited[grid[i]] = true\n\tend\n\t\n\twhile k ~= 0 do\n\t\tk\
    \ = k - 1\n\t\t\n\t\tfor i = 1, n do\n\t\t\tif visited[grid[i]] == false then\n\
    \t\t\t\tvisited[grid[i]] = true\n\t\t\t\t\n\t\t\t\tfor j = 1, n do\n\t\t\t\t\t\
    if grid[i] ~= grid[j] then\n\t\t\t\t\t\tif lst_A[grid[i]] < lst_B[grid[j]] then\n\
    \t\t\t\t\t\t\tlst_A[grid[i]] = lst_B[grid[j]]\n\t\t\t\t\t\t\tlst_B[grid[j]] =\
    \ grid[i]\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\
    end\n\t\n\tlocal ans = {}\n\t\n\tfor i = 1, n do\n\t\tif visited[grid[i]] == true\
    \ then\n\t\t\tans[grid[i]] = lst_A[grid[i]]\n\t\tend\n\tend\n\t\n\treturn ans\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, val\n\tlocal count = 0\n\t\
    local visited = {}\n\tfor i = 1, #grid do\n\t\tfor j = 1, #grid[1] do\n\t\t\t\
    val = grid[i][j]\n\t\t\tif val == nil then\n\t\t\t\tcount = count + 1\n\t\t\t\t\
    visited[count] = true\n\t\t\t\tlst_A[count] = j\n\t\t\t\tlst_B[count] = i\n\t\t\
    \telse\n\t\t\t\tcount = count + 1\n\t\t\t\tvisited[count] = true\n\t\t\t\tlst_A[count]\
    \ = j\n\t\t\t\tlst_B[count] = i\n\t\t\tend\n\t\tend\n\tend\n\tcount = count +\
    \ 1\n\tvisited[count] = true\n\tlst_A[count] = #grid[1]\n\tlst_B[count] = #grid\n\
    \tcount = count + 1\n\tvisited[count] = true\n\tlst_A[count] = #grid[1]\n\tlst_B[count]\
    \ = #grid\n\tcount = count + 1\n\tvisited[count] = true\n\tlst_A[count] = #grid[1]\n\
    \tlst_B[count] = #grid\n\tcount = count + 1\n\tvisited[count] = true\n\tlst_A[count]\
    \ = #grid[1]\n\tlst_B[count] = #grid\n\tcount = count + 1\n\tvisited[count] =\
    \ true\n\tlst_A[count] = #grid[1]\n\tlst_B[count] = #grid\n\tcount = count + 1\n\
    \tvisited[count] = true\n\tlst_A[count] = #grid[1]\n\tlst_B[count] = #grid\n\t\
    count = count + 1\n\tvisited[count] = true\n\tlst_A[count] = #grid[1]\n\tlst_B[count]\
    \ = #grid\n\tcount = count + 1\n\tvisited[count] = true\n\tlst_A[count] = #grid[1]\n\
    \tlst_B[count] = #grid\n\tcount = count + 1\n\tvisited[count] = true\n\tlst_A[count]\
    \ = #grid[1]\n\tlst_B[count] = #grid\n\tcount = count + 1\n\tvisited[count] =\
    \ true\n\tlst_A[count] = #grid[1]\n\tlst_B[count] = #grid\n\tcount = count + 1\n\
    \tvisited[count] = true\n\tlst_A[count] = #grid[1]\n\tlst_B[count] = #grid\n\t\
    count = count + 1\n\tvisited[count] = true\n\tlst_A[count] = #grid", "\tlocal\
    \ lst_A = {}\n\tlocal lst_B = {}\n\tlocal visited = {}\n\tlocal results = {}\n\
    \tlocal i, j, k\n\tlocal nrows, ncols = #grid, #grid[1]\n\t\n\tfor i = 1, nrows\
    \ do\n\t\tfor j = 1, ncols do\n\t\t\tlocal value = grid[i][j]\n\t\t\tif value\
    \ == nil then\n\t\t\t\tresults[i] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\n\t\t\
    \tif not visited[i] then\n\t\t\t\tvisited[i] = true\n\t\t\t\tlst_A[i] = value\n\
    \t\t\tend\n\t\t\t\n\t\t\tif not visited[j] then\n\t\t\t\tvisited[j] = true\n\t\
    \t\t\tlst_B[j] = value\n\t\t\tend\n\t\tend\n\tend\n\t\n\tfor i = 1, nrows do\n\
    \t\tfor j = 1, ncols do\n\t\t\tlocal value = grid[i][j]\n\t\t\tif value == nil\
    \ then\n\t\t\t\tresults[i] = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\n\t\t\tif not\
    \ visited[i] then\n\t\t\t\tvisited[i] = true\n\t\t\t\tlst_A[i] = value\n\t\t\t\
    end\n\t\t\t\n\t\t\tif not visited[j] then\n\t\t\t\tvisited[j] = true\n\t\t\t\t\
    lst_B[j] = value\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal i = 1\n\twhile i <= k\
    \ do\n\t\tlocal j = i\n\t\twhile j <= k do\n\t\t\tif lst_A[i] < lst_B[j] then\n\
    \t\t\t\ti = j\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\t\n\t\tif\
    \ i == k then\n\t\t\tresults[i] = lst_A[i]\n\t\t\tbreak\n\t\tend\n\t\t\n\t\ti\
    \ = i + 1\n\tend\n\t\n\treturn results\nend", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal min_path_count = 0\n\
    \tlocal current_cell\n\tlocal current_cell_val\n\tlocal current_cell_val_count\n\
    \tlocal current_cell_val_count2\n\tlocal current_cell_val_count3\n\tlocal current_cell_val_count4\n\
    \tlocal current_cell_val_count5\n\tlocal current_cell_val_count6\n\tlocal current_cell_val_count7\n\
    \tlocal current_cell_val_count8\n\tlocal current_cell_val_count9\n\tlocal current_cell_val_count10\n\
    \tlocal current_cell_val_count11\n\tlocal current_cell_val_count12\n\tlocal current_cell_val_count13\n\
    \tlocal current_cell_val_count14\n\tlocal current_cell_val_count15\n\tlocal current_cell_val_count16\n\
    \tlocal current_cell_val_count17\n\tlocal current_cell_val_count18\n\tlocal current_cell_val_count19\n\
    \tlocal current_cell_val_count20\n\tlocal current_cell_val_count21\n\tlocal current_cell_val_count22\n\
    \tlocal current_cell_val_count23\n\tlocal current_cell_val_count24\n\tlocal current_cell_val_count25\n\
    \tlocal current_cell_val_count26\n\tlocal current_cell_val_count27\n\tlocal current_cell_val_count28\n\
    \tlocal current_cell_val_count29\n\tlocal current_cell_val_count30\n\tlocal current_cell_val_count31\n\
    \tlocal current_cell_val_count32\n\tlocal current_cell_val_count33\n\tlocal current_cell_val_count34\n\
    \tlocal current_cell_val_count35\n\tlocal current_cell_val_count36\n\tlocal current_cell_val_count37\n\
    \tlocal current_cell_val_count38\n\tlocal current_cell_val_count39\n\tlocal current_cell_val_count40\n\
    \tlocal current_cell_val_count41\n\tlocal current_cell_val_count42\n\tlocal current_cell_val_count43\n\
    \tlocal current_cell_val_count44\n\tlocal current_cell_val_count45\n\tlocal current_cell_val_count46\n\
    \tlocal current_cell_val_count47\n\tlocal current_cell_val_count48\n\tlocal current_cell_val_count49\n\
    \tlocal current_cell_val_count50\n\tlocal current_cell_val_count51\n\tlocal current_cell_val_count52\n\
    \tlocal current_cell_val_count53\n\tlocal current_cell_val_count54\n\tlocal current_cell_val_count55\n\
    \tlocal current_cell_val_count56\n\tlocal ", "  local lst_A, lst_B = {}, {}\n\
    \  local visited = {}\n  local i, j, val\n  local count = 0\n  for i = 1, #grid\
    \ do\n    visited[i] = false\n  end\n  for i = 1, #grid do\n    for j = 1, #grid[1]\
    \ do\n      val = grid[i][j]\n      if visited[val] == false then\n        visited[val]\
    \ = true\n        lst_A[count] = val\n        count = count + 1\n      end\n \
    \   end\n  end\n  for i = 1, #grid do\n    for j = 1, #grid[1] do\n      val =\
    \ grid[i][j]\n      if visited[val] == true then\n        lst_B[count] = val\n\
    \        count = count + 1\n      end\n    end\n  end\n  lst_A = lst_A[#lst_A]\n\
    \  lst_B = lst_B[#lst_B]\n  local i = 1\n  while i <= k do\n    local j = 1\n\
    \    while j <= #lst_A do\n      if lst_A[j] < lst_B[j] then\n        local temp\
    \ = lst_A[j]\n        lst_A[j] = lst_B[j]\n        lst_B[j] = temp\n      end\n\
    \      j = j + 1\n    end\n    i = i + 1\n  end\n  return lst_A\nend", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\
    \tend\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_B, grid[i])\n\tend\n\ttable.sort(lst_A)\n\
    \ttable.sort(lst_B)\n\tlocal ans = {}\n\tlocal i = 0\n\twhile i <= k do\n\t\t\
    local j = 1\n\t\twhile j <= #lst_A do\n\t\t\tif lst_A[j] < lst_B[j] then\n\t\t\
    \t\tlocal k = j + 1\n\t\t\t\twhile k <= #lst_A do\n\t\t\t\t\tif lst_A[k] > lst_B[k]\
    \ then\n\t\t\t\t\t\tbreak\n\t\t\t\t\telse\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\tend\n\
    \t\t\t\tend\n\t\t\t\tans[i] = lst_A[j]\n\t\t\t\ti = i + 1\n\t\t\t\tj = k\n\t\t\
    \telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "\t\
    local lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal i, j, n = unpack(grid)\n\tlocal function dfs(i, j)\n\t\tvisited_count\
    \ = visited_count + 1\n\t\tif visited_count == k then\n\t\t\ttable.insert(lst_A,\
    \ grid[i][j])\n\t\t\ttable.insert(lst_B, grid[i][j])\n\t\telse\n\t\t\tlocal neighbors\
    \ = grid:neighbors(i, j)\n\t\t\tfor _, neighbor in pairs(neighbors) do\n\t\t\t\
    \tlocal neighbor = grid:index(neighbor)\n\t\t\t\tif neighbor ~= i then\n\t\t\t\
    \t\tlocal neighbor = grid:index(neighbor)\n\t\t\t\t\tif not visited[neighbor]\
    \ then\n\t\t\t\t\t\tvisited[neighbor] = true\n\t\t\t\t\t\tdfs(neighbor, j)\n\t\
    \t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tdfs(1, n)\n\ttable.sort(lst_A)\n\
    \ttable.sort(lst_B)\n\treturn lst_A, lst_B\nend", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal min_path = {}\n\
    \tlocal visited_table = {}\n\tlocal visited_table_count = 0\n\tlocal current_cell\
    \ = {}\n\tlocal current_cell_count = 0\n\tlocal current_cell_table = {}\n\tlocal\
    \ current_cell_table_count = 0\n\tlocal current_cell_table_index = {}\n\tlocal\
    \ current_cell_table_index_count = 0\n\tlocal current_cell_table_value = {}\n\t\
    local current_cell_table_value_count = 0\n\tlocal current_cell_table_value_table\
    \ = {}\n\tlocal current_cell_table_value_table_count = 0\n\tlocal current_cell_table_value_table_index\
    \ = {}\n\tlocal current_cell_table_value_table_index_count = 0\n\tlocal current_cell_table_value_table_value\
    \ = {}\n\tlocal current_cell_table_value_table_value_count = 0\n\tlocal current_cell_table_value_table_value_table\
    \ = {}\n\tlocal current_cell_table_value_table_value_table_count = 0\n\tlocal\
    \ current_cell_table_value_table_value_table_index = {}\n\tlocal current_cell_table_value_table_value_table_index_count\
    \ = 0\n\tlocal current_cell_table_value_table_value_table_value = {}\n\tlocal\
    \ current_cell_table_value_table_value_table_value_count = 0\n\tlocal current_cell_table_value_table_value_table_value_table\
    \ = {}\n\tlocal current_cell_table_value_table_value_table_value_table_count =\
    \ 0\n\tlocal current_cell_table_value_table_value_table_value_table_index = {}\n\
    \tlocal current_cell_table_value_table_value_table_value_table_index_count = 0\n\
    \tlocal current_cell_table_value_table_value_table_value_table_value = {}\n\t\
    local current_cell_table_value_table_value_table_value_table_value_count = 0\n\
    \tlocal current_cell_table_value_table_value_table_value_table_value_table = {}\n\
    \tlocal current_cell_table_value_table_value_table_value_table_value_table_count\
    \ = 0\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_index\
    \ = {}\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_index_count\
    \ = 0\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_value\
    \ = {}\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_value_count\
    \ = 0\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_value_table\
    \ = {}\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_value_table_count\
    \ = 0\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_value_table_index\
    \ = {}\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_value_table_index_count\
    \ = 0\n\tlocal current_cell_table_value_table_value_table_value_table_value_table_value_table_value\
    \ = {}\n\tlocal current_cell_table_value_table_value_table_value_table_value_table",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = #grid, 1, 1\n\twhile i <= n do\n\
    \t\tlocal cell = {}\n\t\tfor j = 1, n do\n\t\t\tcell[j] = grid[i][j]\n\t\tend\n\
    \t\ttable.insert(lst_A, cell)\n\t\ttable.insert(lst_B, cell)\n\t\ti = i + 1\n\t\
    end\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal cell = {}\n\t\tfor j = 1, n do\n\
    \t\t\tcell[j] = grid[i][j]\n\t\tend\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\
    \tif cell[j] < cell[j - 1] then\n\t\t\t\ttable.insert(lst_A, cell)\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal\
    \ i = 1\n\twhile i <= n do\n\t\tlocal cell = {}\n\t\tfor j = 1, n do\n\t\t\tcell[j]\
    \ = grid[i][j]\n\t\tend\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif cell[j]\
    \ > cell[j - 1] then\n\t\t\t\ttable.insert(lst_B, cell)\n\t\t\t\tbreak\n\t\t\t\
    else\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal i =\
    \ 1\n\twhile i <= n do\n\t\tlocal cell = {}\n\t\tfor j = 1, n do\n\t\t\tcell[j]\
    \ = grid[i][j]\n\t\tend\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif cell[j]\
    \ == cell[j - 1] then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal cell\
    \ = {}\n\t\tfor j = 1, n do\n\t\t\tcell[j] = grid[i][j]\n\t\tend\n\t\tlocal j\
    \ = 1\n\t\twhile j <= n do\n\t\t\tif cell[j] == cell[j + 1] then\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal\
    \ i = 1\n\twhile i <= n do\n\t\tlocal cell = {}\n\t\tfor j = 1, n do\n\t\t\tcell[j]\
    \ = grid[i][j]\n\t\tend\n\t\tlocal j = 1\n\t\twhile j <= n do\n\t\t\tif cell[j]\
    \ == cell[j - 1] then\n\t\t\t\tbreak\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal cell\
    \ = {}\n\t\tfor j = 1, n do\n\t\t\tcell[j] = grid[i][j]\n\t\t", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid\
    \ and j <= #grid do\n\t\tvisited[i] = j\n\t\tlst_A[i] = grid[i][j]\n\t\tlst_B[j]\
    \ = grid[i][j]\n\t\ti = i + 1 \n\t\tj = j + 1\n\tend\n\twhile i <= #grid do\n\t\
    \tvisited[i] = j\n\t\tlst_A[i] = grid[i][j]\n\t\ti = i + 1 \n\tend\n\twhile j\
    \ <= #grid do\n\t\tvisited[j] = i\n\t\tlst_B[j] = grid[i][j]\n\t\tj = j + 1\n\t\
    end\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= #grid do\n\t\tlocal k = i - 1\n\
    \t\twhile k >= 0 and visited[k] == j do\n\t\t\tk = k - 1\n\t\tend\n\t\tlocal l\
    \ = j + 1\n\t\twhile l <= #grid and visited[l] == i do\n\t\t\tl = l + 1\n\t\t\
    end\n\t\tif k >= 0 and l >= 0 then\n\t\t\tif lst_A[k] < lst_B[l] then\n\t\t\t\t\
    table.remove(lst_A, k)\n\t\t\t\ttable.remove(lst_B, l)\n\t\t\telse\n\t\t\t\ttable.remove(lst_A,\
    \ l)\n\t\t\t\ttable.remove(lst_B, k)\n\t\t\tend\n\t\telse\n\t\t\tbreak\n\t\tend\n\
    \t\ti = i + 1\n\t\tj = j + 1\n\tend\n\treturn lst_A\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal i, j, val\n\tfor i = 1, #grid do\n\t\tfor j = 1, #grid[1]\
    \ do\n\t\t\tval = grid[i][j]\n\t\t\tif i == j then\n\t\t\t\tlst_A[#lst_A + 1]\
    \ = val\n\t\t\telseif i == grid[i][j] then\n\t\t\t\tlst_B[#lst_B + 1] = val\n\t\
    \t\telse\n\t\t\t\tlocal ii, jj\n\t\t\t\tfor ii = i, ii - 1, -1 do\n\t\t\t\t\t\
    for jj = j, jj - 1, -1 do\n\t\t\t\t\t\tif ii == i and jj == j then\n\t\t\t\t\t\
    \t\tbreak\n\t\t\t\t\t\telseif grid[ii][jj] > val then\n\t\t\t\t\t\t\tbreak\n\t\
    \t\t\t\t\telseif ii == i and jj == j then\n\t\t\t\t\t\t\tlst_A[#lst_A + 1] = grid[ii][jj]\n\
    \t\t\t\t\t\t\tbreak\n\t\t\t\t\t\telseif ii == i and jj == grid[i][j] then\n\t\t\
    \t\t\t\t\tlst_B[#lst_B + 1] = grid[ii][jj]\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\
    end\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\treturn lst_A\nend",
  "  local lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count = 0\n\
    \  local i, j = 1, #grid\n  while i <= j do\n    visited[i] = true\n    visited_count\
    \ = visited_count + 1\n    local value = grid[i][j]\n    if value == nil then\n\
    \      break\n    end\n    local lst_value = lst_A[value] or lst_B[value]\n  \
    \  if lst_value == nil then\n      lst_value = lst_A[value] = lst_B[value] = i\n\
    \    end\n    if visited[lst_value] then\n      break\n    end\n    visited[lst_value]\
    \ = true\n    lst_A[value] = i\n    lst_B[value] = j\n    i = i + 1\n    j = j\
    \ + 1\n  end\n  local result = {lst_A[1]}\n  for i = 2, visited_count do\n   \
    \ if visited[i] then\n      table.insert(result, i)\n    end\n  end\n  return\
    \ result\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n", "  local\
    \ lst_A, lst_B = {}, {}\n  local visited = {}\n  local i, j = 0, 0\n  local n\
    \ = #grid\n  while i < n do\n    visited[i] = true\n    j = i + 1\n    while j\
    \ < n do\n      if grid[i][j] == grid[i][j + 1] then\n        lst_A[j] = grid[i][j]\n\
    \        j = j + 1\n      elseif grid[i][j] == grid[i][j - 1] then\n        lst_B[j]\
    \ = grid[i][j]\n        j = j + 1\n      else\n        j = j + 1\n      end\n\
    \    end\n    i = i + 1\n  end\n  local ans = {}\n  i = k\n  while i ~= 1 do\n\
    \    local j = 1\n    while j <= i do\n      if visited[j] == false then\n   \
    \     ans[i] = lst_A[j]\n        i = i - 1\n      else\n        j = j + 1\n  \
    \    end\n    end\n  end\n  return ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\
    \tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\tend\n\tfor i = 1, #grid\
    \ do\n\t\ttable.insert(lst_B, grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\t\twhile\
    \ j <= #lst_A do\n\t\t\tif lst_A[j] < lst_B[j] then\n\t\t\t\tlocal k = j + 1\n\
    \t\t\t\twhile k < #lst_A do\n\t\t\t\t\tif lst_A[k] > lst_B[k] then\n\t\t\t\t\t\
    \tbreak\n\t\t\t\t\telse\n\t\t\t\t\t\tk = k + 1\n\t\t\t\t\tend\n\t\t\t\tend\n\t\
    \t\t\tans[i] = lst_A[j]\n\t\t\t\ti = i + 1\n\t\t\t\tj = k\n\t\t\telse\n\t\t\t\t\
    j = j + 1\n\t\t\tend\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal min_path\
    \ = {}\n\tlocal i, j, val\n\tfor i = 1, #grid do\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tvisited[#visited + 1] = i\n\t\tfor j = 1, #grid[i] do\n\t\t\tval =\
    \ grid[i][j]\n\t\t\tif val == nil then\n\t\t\t\tval = grid[i][j] = visited_count\n\
    \t\t\tend\n\t\t\tlst_A[#lst_A + 1] = val\n\t\t\tlst_B[#lst_B + 1] = val\n\t\t\
    end\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\tlocal count = 0\n\tlocal\
    \ i, j, val\n\tfor i = 1, #grid do\n\t\tvisited_count = visited_count + 1\n\t\t\
    visited[#visited + 1] = i\n\t\tfor j = 1, #grid[i] do\n\t\t\tval = grid[i][j]\n\
    \t\t\tif val == nil then\n\t\t\t\tval = grid[i][j] = visited_count\n\t\t\tend\n\
    \t\t\tif lst_A[count] < lst_B[count] then\n\t\t\t\tcount = count + 1\n\t\t\t\t\
    min_path[#min_path + 1] = val\n\t\t\tend\n\t\tend\n\tend\n\treturn min_path\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, val\n\t\n\tfor i = 1, #grid\
    \ do\n\t\tfor j = 1, #grid[1] do\n\t\t\tval = grid[i][j]\n\t\t\tif val == nil\
    \ then break end\n\t\t\tlst_A[val] = lst_A[val] or {}\n\t\t\tlst_B[val] = lst_B[val]\
    \ or {}\n\t\t\tlst_A[val][j] = 1\n\t\t\tlst_B[val][j] = 1\n\t\tend\n\tend\n\t\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_lst_A, visited_lst_B\
    \ = {}, {}\n\t\n\tlocal function dfs(i, j)\n\t\tvisited_lst_A[visited_count] =\
    \ lst_A[i]\n\t\tvisited_lst_B[visited_count] = lst_B[j]\n\t\tvisited[visited_count]\
    \ = true\n\t\tvisited_count = visited_count + 1\n\t\t\n\t\tif visited_count ==\
    \ k then\n\t\t\treturn visited_lst_A, visited_lst_B\n\t\tend\n\t\t\n\t\tfor k\
    \ = 1, #visited_lst_A do\n\t\t\tif visited_lst_A[k] == nil then\n\t\t\t\tbreak\n\
    \t\t\tend\n\t\t\t\n\t\t\tfor l = 1, #visited_lst_B[k] do\n\t\t\t\tif visited_lst_B[k][l]\
    \ == nil then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\t\n\t\t\t\tif visited_lst_A[k][l]\
    \ < visited_lst_B[k][l] then\n\t\t\t\t\tdfs(i, k)\n\t\t\t\telse\n\t\t\t\t\tdfs(k,\
    \ l)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal function dfs_backtrack(i,\
    \ j)\n\t\tvisited_lst_A[visited_count] = lst_A[i]\n\t\tvisited_lst_B[visited_count]\
    \ = lst_B[j]\n\t\tvisited[visited_count] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\t\n\t\tif visited_count == k then\n\t\t\treturn visited_lst_A, visited_lst_B\n\
    \t\tend\n\t\t\n\t\tfor k = 1, #visited_lst_A do\n\t\t\tif visited_lst_A[k] ==\
    \ nil then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\t\n\t\t\tfor l = 1, #visited_lst_B[k]\
    \ do\n\t\t\t\tif visited_lst_B[k][l] == nil then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\
    \t\t\t\t\n\t\t\t\tif visited_lst_A[k][l] < visited_lst_B[k][l] then", "  local\
    \ lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n\
    \    table.insert(lst_B, grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  local ans = {}\n  for i = 1, k do\n    local j = #lst_A\n    while j > 0 do\n\
    \      local k = j - 1\n      while k < #lst_A and lst_A[k] > lst_A[j] do\n  \
    \      k = k + 1\n      end\n      if k == #lst_A then\n        ans[i] = lst_A[j]\n\
    \        break\n      else\n        local tmp = lst_A[j]\n        lst_A[j] = lst_A[k]\n\
    \        lst_A[k] = tmp\n        j = k\n      end\n    end\n  end\n  return ans\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\
    \tlocal i, j, k\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\
    \t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A[count] = grid[i][j]\n\t\t\t\
    \tcount = count + 1\n\t\t\telse\n\t\t\t\tlst_B[count] = grid[i][j]\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal lst_A_sorted = table.sort(lst_A)\n\
    \tlocal lst_B_sorted = table.sort(lst_B)\n\t\n\tlocal lst_A_sorted = {}\n\tlocal\
    \ lst_B_sorted = {}\n\t\n\tlocal i\n\tlocal j\n\t\n\tlocal count = 0\n\tfor i\
    \ = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\
    \t\tlst_A_sorted[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\telse\n\t\
    \t\t\tlst_B_sorted[count] = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\
    \t\tend\n\tend\n\t\n\tlocal lst_A_sorted_sorted = table.sort(lst_A_sorted)\n\t\
    local lst_B_sorted_sorted = table.sort(lst_B_sorted)\n\t\n\tlocal lst_A_sorted_sorted\
    \ = {}\n\tlocal lst_B_sorted_sorted = {}\n\t\n\tlocal i\n\tlocal j\n\t\n\tlocal\
    \ count = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j]\
    \ then\n\t\t\t\tlst_A_sorted_sorted[count] = grid[i][j]\n\t\t\t\tcount = count\
    \ + 1\n\t\t\telse\n\t\t\t\tlst_B_sorted_sorted[count] = grid[i][j]\n\t\t\t\tcount\
    \ = count + 1\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal lst_A_sorted_sorted_sorted\
    \ = table.sort(lst_A_sorted_sorted)\n\tlocal lst_B_sorted_sorted_sorted = table.sort(lst_B_sorted_sorted)\n\
    \t\n\tlocal lst_A_sorted_sorted_sorted = {}\n\tlocal lst_B_sorted_sorted_sorted\
    \ = {}\n\t\n\tlocal i\n\tlocal j\n\t\n\tlocal count = 0\n\tfor i = 1, n do\n\t\
    \tfor j = 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A_sorted_sorted_sorted[count]\
    \ = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\telse\n\t\t\t\tlst_B_sorted_sorted_sorted[count]\
    \ = grid[i][j]\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\tend", "  -- Base\
    \ case\n  if k == 1 then\n    return grid\n  end\n  -- Recursive case\n  local\
    \ lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n\
    \    table.insert(lst_B, grid[i])\n  end\n  -- Sort the lists\n  table.sort(lst_A)\n\
    \  table.sort(lst_B)\n  -- Find the minimum path through lst_A and lst_B\n  local\
    \ i = 1\n  while i <= k do\n    local j = 1\n    while j <= #lst_A do\n      if\
    \ lst_A[j] < lst_B[j] then\n        local k = j + 1\n        while k < #lst_A\
    \ do\n          lst_A[k] = lst_A[k]\n          k = k + 1\n        end\n      \
    \  table.insert(lst_A, grid[j])\n        table.insert(lst_B, grid[j])\n      else\n\
    \        j = j + 1\n      end\n    end\n    i = i + 1\n  end\n  -- Return the\
    \ ordered table\n  return lst_A\nend", "  local lst_A, lst_B = {}, {}\n  for i\
    \ = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B, grid[i])\n\
    \  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  for i =\
    \ 1, k do\n    local j = 1\n    while j < #lst_A do\n      if lst_A[j] > lst_A[j\
    \ + 1] then\n        local tmp = lst_A[j]\n        lst_A[j] = lst_A[j + 1]\n \
    \       lst_A[j + 1] = tmp\n      end\n      j = j + 1\n    end\n    local k =\
    \ 1\n    while k < #lst_B do\n      if lst_B[k] > lst_B[k + 1] then\n        local\
    \ tmp = lst_B[k]\n        lst_B[k] = lst_B[k + 1]\n        lst_B[k + 1] = tmp\n\
    \      end\n      k = k + 1\n    end\n    table.insert(ans, lst_A[1])\n  end\n\
    \  return ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\t\
    local visited_count = 0\n\tlocal count = 0\n\tlocal visited_table = {}\n\tlocal\
    \ visited_table_count = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_min\
    \ = 0\n\tlocal visited_table_count_sum = 0\n\tlocal visited_table_count_sum_max\
    \ = 0\n\tlocal visited_table_count_sum_min = 0\n\tlocal visited_table_count_product\
    \ = 0\n\tlocal visited_table_count_product_max = 0\n\tlocal visited_table_count_product_min\
    \ = 0\n\tlocal visited_table_count_product2 = 0\n\tlocal visited_table_count_product2_max\
    \ = 0\n\tlocal visited_table_count_product2_min = 0\n\tlocal visited_table_count_product3\
    \ = 0\n\tlocal visited_table_count_product3_max = 0\n\tlocal visited_table_count_product3_min\
    \ = 0\n\tlocal visited_table_count_product4 = 0\n\tlocal visited_table_count_product4_max\
    \ = 0\n\tlocal visited_table_count_product4_min = 0\n\tlocal visited_table_count_product5\
    \ = 0\n\tlocal visited_table_count_product5_max = 0\n\tlocal visited_table_count_product5_min\
    \ = 0\n\tlocal visited_table_count_product6 = 0\n\tlocal visited_table_count_product6_max\
    \ = 0\n\tlocal visited_table_count_product6_min = 0\n\tlocal visited_table_count_product7\
    \ = 0\n\tlocal visited_table_count_product7_max = 0\n\tlocal visited_table_count_product7_min\
    \ = 0\n\tlocal visited_table_count_product8 = 0\n\tlocal visited_table_count_product8_max\
    \ = 0\n\tlocal visited_table_count_product8_min = 0\n\tlocal visited_table_count_product9\
    \ = 0\n\tlocal visited_table_count_product9_max = 0\n\tlocal visited_table_count_product9_min\
    \ = 0\n\tlocal visited_table_count_product10 = 0\n\tlocal visited_table_count_product10_max\
    \ = 0\n\tlocal visited_table_count_product10_min = 0\n\tlocal visited_table_count_product11\
    \ = 0\n\tlocal visited_table_count_product11_max = 0\n\tlocal visited_table_count_product11_min\
    \ = 0\n\tlocal visited_table_count_product12 = 0\n\tlocal visited_table_count_product12_max\
    \ = 0\n\tlocal visited_table_count_product12_min = 0\n\tlocal visited_table_count_product13\
    \ = 0\n\tlocal visited_table_count_product13_max = 0\n\tlocal visited_table_count_product13_min\
    \ = 0\n\tlocal visited_table_count_product14 = 0\n", "  local lst_A = {}\n  local\
    \ lst_B = {}\n  local i = 1\n  local j = 1\n  while i <= #grid do\n    local value\
    \ = grid[i]\n    local value2 = grid[j]\n    local index = i\n    local index2\
    \ = j\n    while index <= #grid do\n      lst_A[index] = value\n      lst_B[index2]\
    \ = value2\n      index = index + 1\n      index2 = index2 + 1\n    end\n    i\
    \ = i + 1\n    j = j + 1\n  end\n  local index = 1\n  local index2 = 1\n  local\
    \ value\n  local value2\n  while index <= k do\n    value = lst_A[index]\n   \
    \ value2 = lst_B[index2]\n    index = index + 1\n    index2 = index2 + 1\n   \
    \ if value < value2 then\n      lst_A[index] = value\n      lst_B[index2] = value2\n\
    \    end\n  end\n  return lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\
    \t\ti = i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\t\tend\n\t\
    end\n\tlocal lst_A_sorted, lst_B_sorted = table.sort(lst_A), table.sort(lst_B)\n\
    \tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tif lst_A_sorted[i] < lst_B_sorted[j]\
    \ then\n\t\t\ttable.insert(lst_A, lst_A_sorted[i])\n\t\telse\n\t\t\ttable.insert(lst_B,\
    \ lst_B_sorted[j])\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\
    \t\t\tbreak\n\t\tend\n\tend\n\treturn lst_A\nend", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal i, j = 0, 0\n\tlocal count = 0\n\twhile i < #grid and j < #grid[1]\
    \ do\n\t\tlocal value = grid[i][j]\n\t\tif visited[value] then\n\t\t\tcount =\
    \ count + 1\n\t\t\tlst_A[count] = lst_A[count] or value\n\t\t\tlst_B[count] =\
    \ lst_B[count] or value\n\t\telse\n\t\t\tvisited[value] = true\n\t\t\tvisited_count\
    \ = visited_count + 1\n\t\t\tcount = count + 1\n\t\t\tlst_A[count] = lst_A[count]\
    \ or value\n\t\t\tlst_B[count] = lst_B[count] or value\n\t\tend\n\t\ti = i + 1\n\
    \t\tj = j + 1\n\t\tif visited_count == k then\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    return lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal i, j, val\n\tlocal count =\
    \ 0\n\tlocal min_path = {}\n\tfor i, row in ipairs(grid) do\n\t\tfor j, val in\
    \ ipairs(row) do\n\t\t\tif visited[j] == false then\n\t\t\t\tvisited[j] = true\n\
    \t\t\t\tvisited_count = visited_count + 1\n\t\t\t\tlst_A[visited_count] = j\n\t\
    \t\t\tlst_B[visited_count] = val\n\t\t\t\tcount = count + 1\n\t\t\tend\n\t\tend\n\
    \tend\n\tlocal min_path_count = 0\n\twhile count > 0 do\n\t\tmin_path_count =\
    \ min_path_count + 1\n\t\tlocal min_path_val = nil\n\t\tlocal min_path_i = nil\n\
    \t\tlocal min_path_j = nil\n\t\tfor i = 1, visited_count do\n\t\t\tif visited[i]\
    \ == false then\n\t\t\t\tlocal val_i = lst_A[i]\n\t\t\t\tlocal val_j = lst_B[i]\n\
    \t\t\t\tif val_i < min_path_val then\n\t\t\t\t\tmin_path_val = val_i\n\t\t\t\t\
    \tmin_path_i = i\n\t\t\t\t\tmin_path_j = val_j\n\t\t\t\telseif val_j > min_path_val\
    \ then\n\t\t\t\t\tmin_path_val = val_j\n\t\t\t\t\tmin_path_i = i\n\t\t\t\t\tmin_path_j\
    \ = val_j\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif min_path_val == nil then\n\t\
    \t\tbreak\n\t\tend\n\t\tvisited[min_path_i] = true\n\t\tvisited_count = visited_count\
    \ - 1\n\t\tlst_A[visited_count] = min_path_j\n\t\tlst_B[visited_count] = min_path_val\n\
    \t\tcount = count - 1\n\tend\n\tlocal lst_A_sorted = {}\n\tlocal lst_B_sorted\
    \ = {}\n\tlocal i = 1\n\twhile i <= visited_count do\n\t\tlst_A_sorted[#lst_A_sorted\
    \ + 1] = lst_A[i]\n\t\tlst_B_sorted[#lst_B_sorted + 1] = lst_B[i]\n\t\ti = i +\
    \ 1\n\tend\n\ttable.sort(lst_A_sorted)\n\ttable.sort(lst_B_sorted)\n\tfor i =\
    \ 1, visited_count do\n\t\tmin_path[#min_path + 1] = lst_A_sorted[i]\n\t\tmin_path[#min_path\
    \ + 1] = lst_B_sorted[i]\n\tend\n\treturn min_path\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal i, j, k\n\
    \tlocal count = 0\n\tfor i = 1, #grid do\n\t\tvisited_count = visited_count +\
    \ 1\n\t\tvisited[#visited + 1] = i\n\t\tfor j = 1, #grid[i] do\n\t\t\tlst_A[#lst_A\
    \ + 1] = grid[i][j]\n\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\tend\n\tend\n\t\
    while count < k do\n\t\tcount = count + 1\n\t\ti = visited[visited_count - 1]\n\
    \t\tfor j = 1, #grid[i] do\n\t\t\tif visited[j] == i then\n\t\t\t\tvisited[j]\
    \ = nil\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif visited[i] == nil then\n\t\t\
    \tbreak\n\t\tend\n\tend\n\tlocal lst_C = {}\n\tfor i = 1, #visited do\n\t\tif\
    \ visited[i] ~= nil then\n\t\t\tlst_C[#lst_C + 1] = visited[i]\n\t\tend\n\tend\n\
    \treturn lst_C\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\
    \tlocal j = 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i]\
    \ = grid[i][1]\n\t\ti = i + 1\n\tend\n\ti = 2\n\twhile i <= #grid do\n\t\tlocal\
    \ tmp_i = i\n\t\twhile i <= #grid do\n\t\t\tlocal tmp_j = j\n\t\t\twhile j <=\
    \ #grid do\n\t\t\t\tif grid[i][j] == grid[tmp_i][tmp_j] then\n\t\t\t\t\tlst_A[i]\
    \ = lst_A[i] + 1\n\t\t\t\t\tlst_B[i] = lst_B[i] + 1\n\t\t\t\t\tj = j + 1\n\t\t\
    \t\telse\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\t\tj = tmp_j\n\t\tend\n\t\
    \ti = tmp_i\n\tend\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= #grid do\n\t\
    \tif lst_A[i] < lst_B[i] then\n\t\t\tans[i] = lst_A[i]\n\t\telse\n\t\t\tans[i]\
    \ = lst_B[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_value = 0\n\tlocal visited_max_value_count\
    \ = 0\n\tlocal visited_max_value_max = 0\n\tlocal visited_max_value_max_count\
    \ = 0\n\tlocal visited_max_value_max_value = 0\n\tlocal visited_max_value_max_value_index\
    \ = 0\n\tlocal visited_max_value_max_value_indexes = {}\n\tlocal visited_max_value_max_value_indexes_count\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max = 0\n\tlocal visited_max_value_max_value_indexes_max_count\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value = 0\n\tlocal visited_max_value_max_value_indexes_max_value_index\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes = {}\n\t\
    local visited_max_value_max_value_indexes_max_value_indexes_count = 0\n\tlocal\
    \ visited_max_value_max_value_indexes_max_value_indexes_max = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_count\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_index\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes\
    \ = {}\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_count\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max_count\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max_value\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max_value_indexes\
    \ = {}\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max_value_indexes_count\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max_value_indexes_max\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max_value_indexes_max_count\
    \ = 0\n\tlocal visited_max_value_max_value_indexes_max_value_indexes_max_value_indexes_max_value_indexes_max_value\
    \ = 0\n\tlocal visited_max_value_max_value_index", "\tlocal lst_A, lst_B = {},\
    \ {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i, j, k\n\tlocal count\
    \ = 0\n\tlocal visited = {}\n\tlocal visited_count = {}\n\tfor i = 1, n do\n\t\
    \tvisited_count[i] = 0\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\t\
    visited[i][j] = false\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tlst_A[i] = grid[i][1]\n\
    \tend\n\tfor j = 1, m do\n\t\tlst_B[j] = grid[1][j]\n\tend\n\twhile count < k\
    \ do\n\t\ti = math.random(#lst_A)\n\t\tj = math.random(#lst_B)\n\t\tvisited[i][j]\
    \ = true\n\t\tvisited_count[i] = visited_count[i] + 1\n\t\tif visited_count[i]\
    \ < k then\n\t\t\tcount = count + 1\n\t\t\tlst_A[i] = lst_A[i] + 1\n\t\t\tlst_B[j]\
    \ = lst_B[j] + 1\n\t\telse\n\t\t\tcount = count + 1\n\t\t\tlst_A[i] = lst_A[i]\
    \ + 1\n\t\t\tlst_B[j] = lst_B[j] + 1\n\t\tend\n\tend\n\treturn lst_A\nend", "\t\
    local lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\
    \tlocal visited_max = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\
    \tlocal m = #grid[1]\n\tlocal i, j, k, l, m, n\n\tlocal count = 0\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_lst_A = {}\n\tlocal visited_lst_B\
    \ = {}\n\tlocal visited_lst_A2 = {}\n\tlocal visited_lst_B2 = {}\n\tlocal visited_lst_A3\
    \ = {}\n\tlocal visited_lst_B3 = {}\n\tlocal visited_lst_A4 = {}\n\tlocal visited_lst_B4\
    \ = {}\n\tlocal visited_lst_A5 = {}\n\tlocal visited_lst_B5 = {}\n\tlocal visited_lst_A6\
    \ = {}\n\tlocal visited_lst_B6 = {}\n\tlocal visited_lst_A7 = {}\n\tlocal visited_lst_B7\
    \ = {}\n\tlocal visited_lst_A8 = {}\n\tlocal visited_lst_B8 = {}\n\tlocal visited_lst_A9\
    \ = {}\n\tlocal visited_lst_B9 = {}\n\tlocal visited_lst_A10 = {}\n\tlocal visited_lst_B10\
    \ = {}\n\tlocal visited_lst_A11 = {}\n\tlocal visited_lst_B11 = {}\n\tlocal visited_lst_A12\
    \ = {}\n\tlocal visited_lst_B12 = {}\n\tlocal visited_lst_A13 = {}\n\tlocal visited_lst_B13\
    \ = {}\n\tlocal visited_lst_A14 = {}\n\tlocal visited_lst_B14 = {}\n\tlocal visited_lst_A15\
    \ = {}\n\tlocal visited_lst_B15 = {}\n\tlocal visited_lst_A16 = {}\n\tlocal visited_lst_B16\
    \ = {}\n\tlocal visited_lst_A17 = {}\n\tlocal visited_lst_B17 = {}\n\tlocal visited_lst_A18\
    \ = {}\n\tlocal visited_lst_B18 = {}\n\tlocal visited_lst_A19 = {}\n\tlocal visited_lst_B19\
    \ = {}\n\tlocal visited_lst_A20 = {}\n\tlocal visited_lst_B20 = {}\n\tlocal visited_lst_A21\
    \ = {}\n\tlocal visited_lst_B21 = {}\n\tlocal visited_lst_A22 = {}\n\tlocal visited_lst_B22\
    \ = {}\n\tlocal visited_lst_A23 = {}\n\tlocal visited_lst_B23 = {}\n\tlocal visited_lst_A24",
  "  -- Base case: empty grid\n  if #grid == 0 then\n    return {}\n  end\n  -- Base\
    \ case: k too small\n  if k < 1 then\n    return grid\n  end\n  -- Base case:\
    \ k too large\n  if k > #grid then\n    return grid\n  end\n  -- Base case: k\
    \ equals number of cells\n  if k == #grid then\n    return grid\n  end\n  -- Base\
    \ case: k equals number of cells\n  if k == 1 then\n    return grid\n  end\n \
    \ -- Base case: k equals number of cells\n  if k == 2 then\n    return grid\n\
    \  end\n  -- Base case: k equals number of cells\n  if k == 3 then\n    return\
    \ grid\n  end\n  -- Base case: k equals number of cells\n  if k == 4 then\n  \
    \  return grid\n  end\n  -- Base case: k equals number of cells\n  if k == 5 then\n\
    \    return grid\n  end\n  -- Base case: k equals number of cells\n  if k == 6\
    \ then\n    return grid\n  end\n  -- Base case: k equals number of cells\n  if\
    \ k == 7 then\n    return grid\n  end\n  -- Base case: k equals number of cells\n\
    \  if k == 8 then\n    return grid\n  end\n  -- Base case: k equals number of\
    \ cells\n  if k == 9 then\n    return grid\n  end\n  -- Base case: k equals number\
    \ of cells\n  if k == 10 then\n    return grid\n  end\n  -- Base case: k equals\
    \ number of cells\n  if k == 11 then\n    return grid\n  end\n  -- Base case:\
    \ k equals number of cells\n  if k == 12 then\n    return grid\n  end\n  -- Base\
    \ case: k equals number of cells\n  if k == 13 then\n    return grid\n  end\n\
    \  -- Base case: k equals number of cells\n  if k == 14 then\n    return grid\n\
    \  end\n  -- Base case: k equals number of cells\n  if k == 15 then\n    return\
    \ grid\n  end\n  -- Base case: k equals number of cells\n  if k == 16 then\n \
    \   return grid\n  end\n  -- Base case: k equals number of cells\n  if k == 17\
    \ then\n    return grid\n  end\n  -- Base case: k equals number of cells\n  if\
    \ k == 18 then\n    return grid\n  end\n  -- Base case: k equals number of cells\n\
    \  if k == 19 then\n    return grid\n  end\n", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal i, j, n = unpack(grid)\n\tfor i = 1, n do\n\t\tlst_A[i] = grid[i]\n\t\
    end\n\tfor j = 1, n do\n\t\tlst_B[j] = grid[j]\n\tend\n\tlocal visited = {}\n\t\
    local ans = {}\n\tlocal visited_count = 0\n\tlocal ans_count = 0\n\twhile visited_count\
    \ < k do\n\t\tvisited_count = visited_count + 1\n\t\tlocal min_i = nil\n\t\tlocal\
    \ min_j = nil\n\t\tlocal min_val = nil\n\t\tfor i = 1, n do\n\t\t\tfor j = 1,\
    \ n do\n\t\t\t\tif lst_A[i] < lst_B[j] then\n\t\t\t\t\tmin_i = i\n\t\t\t\t\tmin_j\
    \ = j\n\t\t\t\t\tmin_val = lst_A[i]\n\t\t\t\telseif lst_A[i] > lst_B[j] then\n\
    \t\t\t\t\tmin_i = i\n\t\t\t\t\tmin_j = j\n\t\t\t\t\tmin_val = lst_B[j]\n\t\t\t\
    \tend\n\t\t\tend\n\t\tend\n\t\tif min_i == nil or min_j == nil then\n\t\t\tbreak\n\
    \t\tend\n\t\tvisited[min_i] = true\n\t\tvisited[min_j] = true\n\t\tlst_A[min_i]\
    \ = nil\n\t\tlst_B[min_j] = nil\n\t\tans[ans_count] = min_val\n\t\tans_count =\
    \ ans_count + 1\n\tend\n\treturn ans\nend", "  local lst_A = {}\n  local lst_B\
    \ = {}\n  local i = 1\n  local j = 1\n  local count = 0\n  local visited = {}\n\
    \  local visited_count = 0\n  local min_path = {}\n  local min_path_count = 0\n\
    \  local min_path_length = 0\n  local current_cell = {}\n  local current_cell_length\
    \ = 0\n  local current_cell_length_index = 0\n  local current_cell_length_value\
    \ = 0\n  local current_cell_length_value_index = 0\n  local current_cell_length_value_value\
    \ = 0\n  local current_cell_length_value_value_index = 0\n  local current_cell_length_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  local current_cell_length_value_value_value_value\
    \ = 0\n  local current_cell_length_value_value_value_index = 0\n  ", "  local\
    \ lst_A, lst_B = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n\
    \    table.insert(lst_B, grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  local ans = {}\n  for i = 1, k do\n    local j = 1\n    while j < #lst_A do\n\
    \      if lst_A[j] < lst_B[j] then\n        local k = j + 1\n        while k <\
    \ #lst_A do\n          if lst_A[k] > lst_B[k] then\n            k = k + 1\n  \
    \        else\n            table.insert(ans, lst_A[k])\n            j = k\n  \
    \        end\n        end\n      else\n        table.insert(ans, lst_A[j])\n \
    \       j = j + 1\n      end\n    end\n  end\n  return ans\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal i, j, k\n\tfor i = 1, #grid do\n\t\tfor j = 1, #grid[1]\
    \ do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\
    \t\t\telse\n\t\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\t\tend\n\t\tend\n\tend\n\
    \tlocal lst_A, lst_B\n\tlocal i\n\tlocal j\n\tlocal k\n\tlocal lst_A\n\tlocal\
    \ lst_B\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted\
    \ = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted,\
    \ lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal\
    \ lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {},\
    \ {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted\
    \ = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted,\
    \ lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal\
    \ lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {},\
    \ {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted\
    \ = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted,\
    \ lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal\
    \ lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {},\
    \ {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted\
    \ = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal lst_A_sorted,\
    \ lst_B_sorted = {}, {}\n\tlocal lst_A_sorted, lst_B_sorted = {}, {}\n\tlocal\
    \ lst_A_sorted, ", "\tlocal lst_A, lst_B = unpack(grid)\n\tlocal lst_A, lst_B\
    \ = unpack(lst_A), unpack(lst_B)\n\tlocal i, j, k\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A),\
    \ unpack(lst_B)\n\tlocal lst_A, lst_B = unpack(lst_A), unpack(lst_B)\n\tlocal\
    \ lst_A, lst_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m =\
    \ #grid[1]\n\tlocal i, j, k\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tfor j =\
    \ 1, m do\n\t\t\tif grid[i][j] == grid[i][j] then\n\t\t\t\tcount = count + 1\n\
    \t\t\t\tlst_A[count] = grid[i][j]\n\t\t\telse\n\t\t\t\tcount = count + 1\n\t\t\
    \t\tlst_B[count] = grid[i][j]\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal function\
    \ compare(a, b)\n\t\tif a < b then\n\t\t\treturn true\n\t\telseif a == b then\n\
    \t\t\treturn false\n\t\telse\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\tlocal function\
    \ swap(a, b)\n\t\tlocal temp = lst_A[a]\n\t\tlst_A[a] = lst_A[b]\n\t\tlst_A[b]\
    \ = temp\n\tend\n\t\n\tlocal function sort(a, b)\n\t\tif lst_A[a] < lst_A[b] then\n\
    \t\t\treturn true\n\t\telseif lst_A[a] > lst_A[b] then\n\t\t\treturn false\n\t\
    \telse\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\tlocal function remove(a, b)\n\
    \t\tlocal temp = lst_A[a]\n\t\tlst_A[a] = lst_A[b]\n\t\tlst_A[b] = temp\n\tend\n\
    \t\n\tlocal function removeSort(a, b)\n\t\tif lst_A[a] < lst_A[b] then\n\t\t\t\
    return true\n\t\telseif lst_A[a] > lst_A[b] then\n\t\t\treturn false\n\t\telse\n\
    \t\t\treturn true\n\t\tend\n\tend\n\t\n\tlocal function removeSort(a, b)\n\t\t\
    if lst_A[a] < lst_A[b] then\n\t\t\treturn true\n\t\telseif lst_A[a] > lst_A[b]\
    \ then\n\t\t\treturn false\n\t\telse\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\t\
    local function removeSort(a, b)\n\t\tif lst_A[a] < lst_A[b] then\n\t\t\treturn\
    \ true\n\t\telseif lst_A[a] > lst_A[b] then\n\t\t\treturn false\n\t\telse\n\t\t\
    \treturn true\n\t\tend\n\tend\n\t\n\tlocal function removeSort(a, b)\n\t\tif lst_A[a]\
    \ < lst_A[b] then\n\t\t\treturn true\n\t\telseif lst_A[a] > lst_A[b] then\n\t\t\
    \treturn false\n\t\telse\n\t\t\treturn true\n\t\tend\n\tend\n\t\n\tlocal function\
    \ removeSort(a, b)", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal lst_C =\
    \ {}\n\tlocal lst_D = {}\n\tlocal lst_E = {}\n\tlocal lst_F = {}\n\tlocal lst_G\
    \ = {}\n\tlocal lst_H = {}\n\tlocal lst_I = {}\n\tlocal lst_J = {}\n\tlocal lst_K\
    \ = {}\n\tlocal lst_L = {}\n\tlocal lst_M = {}\n\tlocal lst_N = {}\n\tlocal lst_O\
    \ = {}\n\tlocal lst_P = {}\n\tlocal lst_Q = {}\n\tlocal lst_R = {}\n\tlocal lst_S\
    \ = {}\n\tlocal lst_T = {}\n\tlocal lst_U = {}\n\tlocal lst_V = {}\n\tlocal lst_W\
    \ = {}\n\tlocal lst_X = {}\n\tlocal lst_Y = {}\n\tlocal lst_Z = {}\n\tlocal lst_A1\
    \ = {}\n\tlocal lst_B1 = {}\n\tlocal lst_C1 = {}\n\tlocal lst_D1 = {}\n\tlocal\
    \ lst_E1 = {}\n\tlocal lst_F1 = {}\n\tlocal lst_G1 = {}\n\tlocal lst_H1 = {}\n\
    \tlocal lst_I1 = {}\n\tlocal lst_J1 = {}\n\tlocal lst_K1 = {}\n\tlocal lst_L1\
    \ = {}\n\tlocal lst_M1 = {}\n\tlocal lst_N1 = {}\n\tlocal lst_O1 = {}\n\tlocal\
    \ lst_P1 = {}\n\tlocal lst_Q1 = {}\n\tlocal lst_R1 = {}\n\tlocal lst_S1 = {}\n\
    \tlocal lst_T1 = {}\n\tlocal lst_U1 = {}\n\tlocal lst_V1 = {}\n\tlocal lst_W1\
    \ = {}\n\tlocal lst_X1 = {}\n\tlocal lst_Y1 = {}\n\tlocal lst_Z1 = {}\n\tlocal\
    \ lst_A2 = {}\n\tlocal lst_B2 = {}\n\tlocal lst_C2 = {}\n\tlocal lst_D2 = {}\n\
    \tlocal lst_E2 = {}\n\tlocal lst_F2 = {}\n\tlocal lst_G2 = {}\n\tlocal lst_H2\
    \ = {}\n\tlocal lst_I2 = {}\n\tlocal lst_J2 = {}\n\tlocal lst_K2 = {}\n\tlocal\
    \ lst_L2 = {}\n\tlocal lst_M2 = {}\n\tlocal lst_N2 = {}\n\tlocal lst_O2 = {}\n\
    \tlocal ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal visited_table = {}\n\tlocal visited_table_count = 0\n\tlocal visited_table_count_max\
    \ = 0\n\tlocal visited_table_count_min = 0\n\tlocal visited_table_count_sum =\
    \ 0\n\tlocal visited_table_count_sum2 = 0\n\tlocal visited_table_count_sum3 =\
    \ 0\n\tlocal visited_table_count_sum4 = 0\n\tlocal visited_table_count_sum5 =\
    \ 0\n\tlocal visited_table_count_sum6 = 0\n\tlocal visited_table_count_sum7 =\
    \ 0\n\tlocal visited_table_count_sum8 = 0\n\tlocal visited_table_count_sum9 =\
    \ 0\n\tlocal visited_table_count_sum10 = 0\n\tlocal visited_table_count_sum11\
    \ = 0\n\tlocal visited_table_count_sum12 = 0\n\tlocal visited_table_count_sum13\
    \ = 0\n\tlocal visited_table_count_sum14 = 0\n\tlocal visited_table_count_sum15\
    \ = 0\n\tlocal visited_table_count_sum16 = 0\n\tlocal visited_table_count_sum17\
    \ = 0\n\tlocal visited_table_count_sum18 = 0\n\tlocal visited_table_count_sum19\
    \ = 0\n\tlocal visited_table_count_sum20 = 0\n\tlocal visited_table_count_sum21\
    \ = 0\n\tlocal visited_table_count_sum22 = 0\n\tlocal visited_table_count_sum23\
    \ = 0\n\tlocal visited_table_count_sum24 = 0\n\tlocal visited_table_count_sum25\
    \ = 0\n\tlocal visited_table_count_sum26 = 0\n\tlocal visited_table_count_sum27\
    \ = 0\n\tlocal visited_table_count_sum28 = 0\n\tlocal visited_table_count_sum29\
    \ = 0\n\tlocal visited_table_count_sum30 = 0\n\tlocal visited_table_count_sum31\
    \ = 0\n\tlocal visited_table_count_sum32 = 0\n\tlocal visited_table_count_sum33\
    \ = 0\n\tlocal visited_table_count_sum34 = 0\n\tlocal visited_table_count_sum35\
    \ = 0\n\tlocal visited_table_count_sum36 = 0\n\tlocal visited_table_count_sum37\
    \ = 0\n\tlocal visited_table_count_sum38 = 0\n\tlocal visited_table_count_sum39\
    \ = 0\n\tlocal visited_table_count_sum40 = 0\n\tlocal visited_table_count_sum41\
    \ = 0\n\tlocal visited_table_count_sum42 = 0\n\tlocal visited_table_count_sum43\
    \ = 0\n\tlocal visited_table_count_sum44 = 0\n\tlocal visited_table_count_sum45\
    \ = 0\n\tlocal visited_table_count_sum", "\tlocal lst_A = {}\n\tlocal lst_B =\
    \ {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal visited = {}\n\t\
    local ans = {}\n\twhile i <= #grid do\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\
    \t\tlst_B[i] = grid[i][2]\n\t\tcount = count + 1\n\t\ti = i + 1\n\tend\n\twhile\
    \ j <= #grid do\n\t\tvisited[j] = true\n\t\tlst_A[j] = grid[j][1]\n\t\tlst_B[j]\
    \ = grid[j][2]\n\t\tcount = count + 1\n\t\tj = j + 1\n\tend\n\twhile i <= #grid\
    \ do\n\t\tif visited[i] == false then\n\t\t\tvisited[i] = true\n\t\t\tlst_A[i]\
    \ = grid[i][1]\n\t\t\tlst_B[i] = grid[i][2]\n\t\t\tcount = count + 1\n\t\t\ti\
    \ = i + 1\n\t\telseif visited[i] == true then\n\t\t\ti = i + 1\n\t\telseif count\
    \ > k then\n\t\t\tans = lst_A\n\t\t\tbreak\n\t\telse\n\t\t\tvisited[i] = true\n\
    \t\t\tlst_A[i] = grid[i][1]\n\t\t\tlst_B[i] = grid[i][2]\n\t\t\tcount = count\
    \ + 1\n\t\t\ti = i + 1\n\t\tend\n\tend\n\twhile j <= #grid do\n\t\tif visited[j]\
    \ == false then\n\t\t\tvisited[j] = true\n\t\t\tlst_A[j] = grid[j][1]\n\t\t\t\
    lst_B[j] = grid[j][2]\n\t\t\tcount = count + 1\n\t\t\tj = j + 1\n\t\telseif visited[j]\
    \ == true then\n\t\t\tj = j + 1\n\t\telseif count > k then\n\t\t\tans = lst_A\n\
    \t\t\tbreak\n\t\telse\n\t\t\tvisited[j] = true\n\t\t\tlst_A[j] = grid[j][1]\n\t\
    \t\tlst_B[j] = grid[j][2]\n\t\t\tcount = count + 1\n\t\t\tj = j + 1\n\t\tend\n\
    \tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = #grid,\
    \ 1, 1\n\twhile i <= n do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[i]\n\t\t\
    i = i + 1\n\tend\n\twhile j <= n do\n\t\tlocal i = 1\n\t\twhile i <= n do\n\t\t\
    \tlocal j = j + 1\n\t\t\twhile j <= n do\n\t\t\t\tif grid[i][j] == grid[i][j +\
    \ 1] then\n\t\t\t\t\tlst_A[i] = grid[i][j]\n\t\t\t\t\tlst_B[i] = grid[i][j]\n\t\
    \t\t\telse\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\t\t\
    i = i + 1\n\t\tend\n\t\tj = j + 1\n\tend\n\tlocal i = 1\n\twhile i <= n do\n\t\
    \tlocal j = j + 1\n\t\twhile j <= n do\n\t\t\tif grid[i][j] == grid[i][j + 1]\
    \ then\n\t\t\t\tlst_A[i] = grid[i][j]\n\t\t\t\tlst_B[i] = grid[i][j]\n\t\t\telse\n\
    \t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal\
    \ i = 1\n\twhile i <= n do\n\t\tlocal j = j + 1\n\t\twhile j <= n do\n\t\t\tif\
    \ grid[i][j] == grid[i][j + 1] then\n\t\t\t\tlst_A[i] = grid[i][j]\n\t\t\t\tlst_B[i]\
    \ = grid[i][j]\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = j + 1\n\t\
    \twhile j <= n do\n\t\t\tif grid[i][j] == grid[i][j + 1] then\n\t\t\t\tlst_A[i]\
    \ = grid[i][j]\n\t\t\t\tlst_B[i] = grid[i][j]\n\t\t\telse\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile\
    \ i <= n do\n\t\tlocal j = j + 1\n\t\twhile j <= n do\n\t\t\tif grid[i][j] ==\
    \ grid[i][j + 1] then\n\t\t\t\tlst_A[i] = grid[i][j]\n\t\t\t\tlst_B[i] = grid[i][j]\n\
    \t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = j + 1\n\t\twhile j <= n\
    \ do\n\t\t\tif grid[i][j] == grid[i][j + 1] then\n\t\t\t\tlst_A[i] = grid[i][j]\n\
    \t\t\t\tlst_B[i] = grid[i][j]\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj =\
    \ j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i]\
    \ = grid[j]\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\
    \t\tend\n\tend\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = i + 1\n\t\twhile\
    \ j <= k do\n\t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\tlst_A[i], lst_B[j] = lst_B[j],\
    \ lst_A[i]\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn\
    \ lst_A\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal n = #grid\n\t\
    local m = #grid[1]\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= n and j <= m do\n\
    \t\tif grid[i][j] == grid[i][j-1] then\n\t\t\tlst_A[i] = grid[i][j]\n\t\t\ti =\
    \ i + 1\n\t\telseif grid[i][j] == grid[i][j+1] then\n\t\t\tlst_B[j] = grid[i][j]\n\
    \t\t\tj = j + 1\n\t\telse\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\t\
    local lst_C = lst_A\n\tlocal lst_D = lst_B\n\tlocal i = 1\n\tlocal j = 1\n\twhile\
    \ i <= n and j <= m do\n\t\tif grid[i][j] == grid[i-1][j] then\n\t\t\tlst_C[i]\
    \ = grid[i][j]\n\t\t\ti = i + 1\n\t\telseif grid[i][j] == grid[i+1][j] then\n\t\
    \t\tlst_D[j] = grid[i][j]\n\t\t\tj = j + 1\n\t\telse\n\t\t\ti = i + 1\n\t\t\t\
    j = j + 1\n\t\tend\n\tend\n\tlocal lst_E = lst_C\n\tlocal lst_F = lst_D\n\tlocal\
    \ i = 1\n\tlocal j = 1\n\twhile i <= n and j <= m do\n\t\tif grid[i][j] == grid[i-1][j-1]\
    \ then\n\t\t\tlst_E[i] = grid[i][j]\n\t\t\ti = i + 1\n\t\telseif grid[i][j] ==\
    \ grid[i+1][j-1] then\n\t\t\tlst_F[j] = grid[i][j]\n\t\t\tj = j + 1\n\t\telse\n\
    \t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\tlocal lst_G = lst_E\n\tlocal\
    \ lst_H = lst_F\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= n and j <= m do\n\t\
    \tif grid[i][j] == grid[i-1][j+1] then\n\t\t\tlst_G[i] = grid[i][j]\n\t\t\ti =\
    \ i + 1\n\t\telseif grid[i][j] == grid[i+1][j+1] then\n\t\t\tlst_H[j] = grid[i][j]\n\
    \t\t\tj = j + 1\n\t\telse\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\t\
    local lst_I = lst_G\n\tlocal lst_J = lst_H\n\tlocal i = 1\n\tlocal j = 1\n\twhile\
    \ i <= n and j <= m do\n\t\tif grid[i][j] == grid[i-1][j] then\n\t\t\tlst_I[i]\
    \ = grid[i][j]\n\t\t\ti = i + 1\n\t\telseif grid[i][j] == grid[i+1][j] then\n\t\
    \t\tlst_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid\
    \ do\n\t\tlocal v = grid[i]\n\t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B + 1]\
    \ = v\n\t\ti = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal v = grid[i]\n\
    \t\tlocal j = i - 1\n\t\twhile j >= 1 do\n\t\t\tif lst_A[j] > lst_B[j] then\n\t\
    \t\t\tlst_A[j] = lst_B[j]\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j -\
    \ 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn lst_A\nend", "  local lst_A = {}\n\
    \  local lst_B = {}\n  local i = 1\n  local j = 1\n  local cnt = 0\n  while i\
    \ <= #grid do\n    local v = grid[i]\n    local w = grid[j]\n    if v == w then\n\
    \      lst_A[cnt] = v\n      lst_B[cnt] = v\n      cnt = cnt + 1\n      i = i\
    \ + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n  \
    \    j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j\
    \ + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n  \
    \    i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i\
    \ + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n  \
    \    j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j\
    \ + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n  \
    \    i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i\
    \ + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n  \
    \    j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j\
    \ + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n  \
    \    i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i\
    \ + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n  \
    \    j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j\
    \ + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n  \
    \    i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i\
    \ + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n  \
    \    j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j\
    \ + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n  \
    \    i = i + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i\
    \ + 1\n      j = j + 1\n      i = i + 1\n      j = j + 1\n      i = i + 1\n  \
    \    j = j + 1\n      ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\t\
    local m = #grid[1]\n\tlocal i, j, k\n\t\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\
    \t\t\tk = grid[i][j]\n\t\t\tif k < n then\n\t\t\t\tlst_A[k] = lst_A[k] or j\n\t\
    \t\t\tlst_B[k] = lst_B[k] or i\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal lst_A =\
    \ {}\n\tlocal lst_B = {}\n\t\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tk\
    \ = grid[i][j]\n\t\t\tif k < n then\n\t\t\t\tlst_A[k] = lst_A[k] or j\n\t\t\t\t\
    lst_B[k] = lst_B[k] or i\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal lst_A = {}\n\t\
    local lst_B = {}\n\t\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tk = grid[i][j]\n\
    \t\t\tif k < n then\n\t\t\t\tlst_A[k] = lst_A[k] or j\n\t\t\t\tlst_B[k] = lst_B[k]\
    \ or i\n\t\t\tend\n\t\tend\n\tend\n\t\n\tlocal lst_A = {}\n\tlocal lst_B = {}\n\
    \t\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tk = grid[i][j]\n\t\t\tif k <\
    \ n then\n\t\t\t\tlst_A[k] = lst_A[k] or j\n\t\t\t\tlst_B[k] = lst_B[k] or i\n\
    \t\t\tend\n\t\tend\n\tend\n\t\n\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\n\t\
    for i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tk = grid[i][j]\n\t\t\tif k < n then\n\
    \t\t\t\tlst_A[k] = lst_A[k] or j\n\t\t\t\tlst_B[k] = lst_B[k] or i\n\t\t\tend\n\
    \t\tend\n\tend\n\t\n\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\n\tfor i = 1, n\
    \ do\n\t\tfor j = 1, m do\n\t\t\tk = grid[i][j]\n\t\t\tif k < n then\n\t\t\t\t\
    lst_A[k] = lst_A[k] or j\n\t\t\t\tlst_B[k] = lst_B[k] or i\n\t\t\tend\n\t\tend\n\
    \tend\n\t\n\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\n\tfor i = 1, n do\n\t\t\
    for j = 1, m do\n\t\t\tk = grid[i][j]\n\t\t\tif k < n then\n\t\t\t\tlst_A[k] =\
    \ lst_A[k] or j\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal min_path = {}\n\tlocal i, j, val\n\tfor i, row in\
    \ ipairs(grid) do\n\t\tfor j, val in ipairs(row) do\n\t\t\tif not visited[i] then\n\
    \t\t\t\tvisited[i] = true\n\t\t\t\tvisited_count = visited_count + 1\n\t\t\t\t\
    lst_A[visited_count] = val\n\t\t\t\tlst_B[visited_count] = val\n\t\t\tend\n\t\t\
    end\n\tend\n\tlocal min_path_count = 0\n\twhile visited_count ~= k do\n\t\tvisited_count\
    \ = visited_count - 1\n\t\tmin_path_count = min_path_count + 1\n\t\tlocal min_path_val\
    \ = lst_A[min_path_count]\n\t\tfor i = min_path_count, min_path_count + k - 1\
    \ do\n\t\t\tif lst_A[i] < min_path_val then\n\t\t\t\tmin_path_val = lst_A[i]\n\
    \t\t\tend\n\t\tend\n\t\tmin_path[min_path_count] = min_path_val\n\tend\n\treturn\
    \ min_path\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\twhile\
    \ i <= k and i <= #grid do\n\t\tlocal j = i\n\t\twhile j <= #grid do\n\t\t\tif\
    \ grid[i][j] == grid[i][j] then\n\t\t\t\tbreak\n\t\t\telseif grid[i][j] > grid[i][j]\
    \ then\n\t\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\t\t\telse\n\t\t\t\tlst_A[#lst_A\
    \ + 1] = grid[i][j]\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\
    \tlocal ans = {}\n\tlocal j = 1\n\twhile j <= #lst_A do\n\t\tif lst_A[j] < lst_B[j]\
    \ then\n\t\t\tans[#ans + 1] = lst_A[j]\n\t\telse\n\t\t\tans[#ans + 1] = lst_B[j]\n\
    \t\tend\n\t\tj = j + 1\n\tend\n\treturn ans\nend", "  -- Base case: empty grid\n\
    \  if #grid == 0 then return {} end\n  -- Base case: k is 0\n  if k == 0 then\
    \ return {} end\n  -- Base case: k is 1\n  if k == 1 then return {grid[1]} end\n\
    \  -- Base case: k is 2\n  if k == 2 then return {grid[1], grid[2]} end\n  --\
    \ Base case: k is 3\n  if k == 3 then return {grid[1], grid[2], grid[3]} end\n\
    \  -- Base case: k is 4\n  if k == 4 then return {grid[1], grid[2], grid[3], grid[4]}\
    \ end\n  -- Base case: k is 5\n  if k == 5 then return {grid[1], grid[2], grid[3],\
    \ grid[4], grid[5]} end\n  -- Base case: k is 6\n  if k == 6 then return {grid[1],\
    \ grid[2], grid[3], grid[4], grid[5], grid[6]} end\n  -- Base case: k is 7\n \
    \ if k == 7 then return {grid[1], grid[2], grid[3], grid[4], grid[5], grid[6],\
    \ grid[7]} end\n  -- Base case: k is 8\n  if k == 8 then return {grid[1], grid[2],\
    \ grid[3], grid[4], grid[5], grid[6], grid[7], grid[8]} end\n  -- Base case: k\
    \ is 9\n  if k == 9 then return {grid[1], grid[2], grid[3], grid[4], grid[5],\
    \ grid[6], grid[7], grid[8], grid[9]} end\n  -- Base case: k is 10\n  if k ==\
    \ 10 then return {grid[1], grid[2], grid[3], grid[4], grid[5], grid[6], grid[7],\
    \ grid[8], grid[9], grid[10]} end\n  -- Base case: k is 11\n  if k == 11 then\
    \ return {grid[1], grid[2], grid[3], grid[4], grid[5], grid[6], grid[7], grid[8],\
    \ grid[9], grid[10], grid[11]} end\n  -- Base case: k is 12\n  if k == 12 then\
    \ return {grid[1], grid[2], grid[3], grid[4], grid[5], grid[6], grid[7], grid[8],\
    \ grid[9], grid[10], grid[11], grid[12]} end\n  -- Base case: k is 13\n  if k\
    \ == 13 then return {grid[1], grid[2], grid[3], grid[4], grid[5], grid[6], grid[7],\
    \ grid[8], grid[9], grid[10], grid[11], grid[12], grid[13]} end\n  -- Base case:\
    \ k is 14\n  if k == ", "\tlocal lst_A, lst_B = unpack(grid), unpack(grid)\n\t\
    local i, j, k, n = unpack(lst_A)\n\tlocal ans = {}\n\tlocal visited = {}\n\tvisited[i]\
    \ = true\n\tvisited[j] = true\n\tvisited[k] = true\n\tlocal count = 0\n\twhile\
    \ count < k do\n\t\tcount = count + 1\n\t\tlocal min_idx = nil\n\t\tfor i = 1,\
    \ n do\n\t\t\tif visited[i] then\n\t\t\t\tlocal min_idx = nil\n\t\t\t\tfor j =\
    \ 1, n do\n\t\t\t\t\tif visited[j] then\n\t\t\t\t\t\tif lst_A[i][j] > lst_B[i][j]\
    \ then\n\t\t\t\t\t\t\tmin_idx = j\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\tmin_idx = i\n\
    \t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\t\tif min_idx ~= nil then\n\t\
    \t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\t\tif min_idx ~= nil then\n\t\
    \t\tans[#ans + 1] = lst_A[min_idx][n]\n\t\t\tfor j = min_idx + 1, n do\n\t\t\t\
    \tvisited[j] = true\n\t\t\t\tvisited[i] = true\n\t\t\tend\n\t\tend\n\tend\n\t\
    return ans\nend", "  local lst_A = {}\n  local lst_B = {}\n  local visited = {}\n\
    \  local ans = {}\n  local i = 1\n  for _, row in ipairs(grid) do\n    for _,\
    \ val in ipairs(row) do\n      lst_A[val] = lst_A[val] or {}\n      lst_B[val]\
    \ = lst_B[val] or {}\n      lst_A[val][i] = val\n      lst_B[val][i] = val\n \
    \     visited[val] = visited[val] or {}\n      visited[val][i] = true\n      i\
    \ = i + 1\n    end\n  end\n  \n  while i <= k do\n    local min_val = nil\n  \
    \  for _, val in ipairs(lst_A) do\n      if min_val == nil then\n        min_val\
    \ = val\n      else\n        if min_val < val then\n          min_val = val\n\
    \        end\n      end\n    end\n    \n    if min_val ~= nil then\n      ans[min_val]\
    \ = ans[min_val] or {}\n      ans[min_val][i] = min_val\n      visited[min_val]\
    \ = visited[min_val] or {}\n      visited[min_val][i] = true\n      i = i + 1\n\
    \    end\n  end\n  \n  return ans\nend", "  local lst_A, lst_B = {}, {}\n  for\
    \ i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B, grid[i])\n\
    \  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  local i\
    \ = 1\n  while i <= k do\n    local j = i\n    while j <= k do\n      if lst_A[j]\
    \ < lst_B[j] then\n        table.insert(ans, lst_A[j])\n        j = j + 1\n  \
    \    else\n        table.insert(ans, lst_B[j])\n        j = j + 1\n      end\n\
    \    end\n    i = i + 1\n  end\n  return ans\nend", "\tlocal lst_A = {}\n\tlocal\
    \ lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count = 0\n\twhile i <= #grid\
    \ do\n\t\tlocal value = grid[i]\n\t\tif value == nil then\n\t\t\tcount = count\
    \ + 1\n\t\t\tlst_A[count] = value\n\t\t\tlst_B[count] = value\n\t\t\ti = i + 1\n\
    \t\telse\n\t\t\tcount = count + 1\n\t\t\tlst_A[count] = value\n\t\t\tlst_B[count]\
    \ = value\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\tend\n\tend\n\t\n\tlocal min =\
    \ lst_A[1]\n\tlocal min_index = 1\n\tlocal min_count = 0\n\twhile count > min_count\
    \ do\n\t\tlocal value = lst_A[min_index]\n\t\tlocal index = #lst_A\n\t\twhile\
    \ index > min_count do\n\t\t\tif lst_A[index] < value then\n\t\t\t\tmin = value\n\
    \t\t\t\tmin_index = index\n\t\t\tend\n\t\t\tindex = index - 1\n\t\tend\n\t\tmin_count\
    \ = min_count + 1\n\tend\n\t\n\tlocal ans = {}\n\tlocal index = 1\n\twhile index\
    \ <= #lst_A do\n\t\tif lst_A[index] == min then\n\t\t\tans[index] = min\n\t\t\t\
    index = index + 1\n\t\tend\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tlocal i, j, n = unpack(grid)\n\tlocal visited = {}\n\tlocal visited_lst,\
    \ visited_lst_lst, visited_lst_lst = {}, {}, {}\n\tlocal min_path = {}\n\tlocal\
    \ visited_lst = {}\n\tlocal visited_lst_lst = {}\n\tlocal visited_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst = {}\n\tlocal min_path_lst_lst = {}\n\tlocal min_path_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst_lst_lst_lst = {}\n\tlocal min_path_lst_lst_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\tlocal\
    \ min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\t\
    local min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\
    \tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\tlocal\
    \ min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst_lst\
    \ = {}\n\tlocal min_path_lst_lst_lst_lst_lst_lst_lst_", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "  local lst_A, lst_B = {}, {}\n  local i, j, n = unpack(grid)\n  for\
    \ i = 1, n do\n    for j = 1, n do\n      lst_A[#lst_A + 1] = grid[i][j]\n   \
    \   lst_B[#lst_B + 1] = grid[j][i]\n    end\n  end\n  lst_A = lst_A[#lst_A + 1]\n\
    \  lst_B = lst_B[#lst_B + 1]\n  local ans = {}\n  for i = 1, k do\n    local j\
    \ = i\n    while j > 1 do\n      local k = j - 1\n      while k < n do\n     \
    \   if lst_A[k] > lst_A[j] then\n          lst_A[k] = lst_A[j]\n          lst_B[k]\
    \ = lst_B[j]\n        end\n        k = k + 1\n      end\n      j = j - 1\n   \
    \ end\n    ans[#ans + 1] = lst_A[i]\n  end\n  return ans\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal i, j =\
    \ 0, 0\n\tlocal n = #grid\n\twhile i < n do\n\t\tvisited[i] = true\n\t\tlst_A[i]\
    \ = grid[i][j]\n\t\ti = i + 1\n\t\twhile i < n do\n\t\t\tvisited[i] = true\n\t\
    \t\tlst_B[i] = grid[i][j]\n\t\t\ti = i + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\t\
    i = k\n\twhile i < n do\n\t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][j]\n\t\t\
    i = i + 1\n\tend\n\ti = k\n\twhile i < n do\n\t\tvisited[i] = true\n\t\tlst_B[i]\
    \ = grid[i][j]\n\t\ti = i + 1\n\tend\n\tlocal lst_C = {}\n\tlocal lst_D = {}\n\
    \tlocal lst_E = {}\n\tlocal lst_F = {}\n\tlocal lst_G = {}\n\tlocal lst_H = {}\n\
    \tlocal lst_I = {}\n\tlocal lst_J = {}\n\tlocal lst_K = {}\n\tlocal lst_L = {}\n\
    \tlocal lst_M = {}\n\tlocal lst_N = {}\n\tlocal lst_O = {}\n\tlocal lst_P = {}\n\
    \tlocal lst_Q = {}\n\tlocal lst_R = {}\n\tlocal lst_S = {}\n\tlocal lst_T = {}\n\
    \tlocal lst_U = {}\n\tlocal lst_V = {}\n\tlocal lst_W = {}\n\tlocal lst_X = {}\n\
    \tlocal lst_Y = {}\n\tlocal lst_Z = {}\n\tlocal lst_AA = {}\n\tlocal lst_AB =\
    \ {}\n\tlocal lst_AC = {}\n\tlocal lst_AD = {}\n\tlocal lst_AE = {}\n\tlocal lst_AF\
    \ = {}\n\tlocal lst_AG = {}\n\tlocal lst_AH = {}\n\tlocal lst_AI = {}\n\tlocal\
    \ lst_AJ = {}\n\tlocal lst_AK = {}\n\tlocal lst_AL = {}\n\tlocal lst_AM = {}\n\
    \tlocal lst_AN = {}\n\tlocal lst_AO = {}\n\tlocal lst_AP = {}\n\tlocal lst_AQ\
    \ = {}\n\tlocal lst_AR = {}\n\tlocal lst_AS = {}\n\tlocal lst_AT = {}\n\tlocal\
    \ lst_AU = {}\n\tlocal lst_AV = {}\n\tlocal lst_AW = {}\n\tlocal lst_AX = {}\n\
    \tlocal lst_AY = {}\n\tlocal lst_AZ = {}\n\tlocal lst_BA = {}\n", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlocal value\
    \ = grid[i]\n\t\tlst_A[#lst_A + 1] = value\n\t\tlst_B[#lst_B + 1] = value\n\t\t\
    i = i + 1\n\tend\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal value = grid[i]\n\
    \t\tlocal j = i + 1\n\t\twhile j <= #grid do\n\t\t\tif lst_A[j] < lst_B[j] then\n\
    \t\t\t\tlst_A[#lst_A + 1] = lst_A[j]\n\t\t\t\tlst_B[#lst_B + 1] = lst_B[j]\n\t\
    \t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\treturn lst_A\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i\
    \ = 1\n\twhile i <= k and #lst_A ~= 0 do\n\t\tlocal j = 1\n\t\twhile j <= #lst_A\
    \ do\n\t\t\tif grid[i][j] > grid[i][j + 1] then\n\t\t\t\ttable.insert(lst_B, grid[i][j])\n\
    \t\t\t\tbreak\n\t\t\telseif grid[i][j] == grid[i][j + 1] then\n\t\t\t\tbreak\n\
    \t\t\telse\n\t\t\t\ttable.insert(lst_A, grid[i][j])\n\t\t\tend\n\t\t\tj = j +\
    \ 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn lst_A\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal function dfs(i, j)\n\t\tif visited[i][j]\
    \ then return end\n\t\tvisited[i][j] = true\n\t\tlocal value = grid[i][j]\n\t\t\
    if i == N and j == N then\n\t\t\tlst_A[#lst_A + 1] = value\n\t\telseif i == N\
    \ and j > N then\n\t\t\tlst_B[#lst_B + 1] = value\n\t\telseif j == N and i > N\
    \ then\n\t\t\tlst_B[#lst_B + 1] = value\n\t\telse\n\t\t\tlocal ii, jj\n\t\t\t\
    if i < N then\n\t\t\t\tii = i\n\t\t\telse\n\t\t\t\tii = N\n\t\t\tend\n\t\t\tif\
    \ j < N then\n\t\t\t\tjj = j\n\t\t\telse\n\t\t\t\tjj = N\n\t\t\tend\n\t\t\tfor\
    \ k = ii, jj do\n\t\t\t\tdfs(i, j)\n\t\t\tend\n\t\tend\n\tend\n\tdfs(1, 1) --\
    \ start from (1,1)\n\tlocal lst_A, lst_B = {}, {}\n\tfor i = 1, N do\n\t\tfor\
    \ j = 1, N do\n\t\t\tif visited[i][j] then return end\n\t\t\tvisited[i][j] = true\n\
    \t\t\tlocal value = grid[i][j]\n\t\t\tif i == 1 and j == 1 then\n\t\t\t\tlst_A[#lst_A\
    \ + 1] = value\n\t\t\telseif i == 1 and j > 1 then\n\t\t\t\tlst_B[#lst_B + 1]\
    \ = value\n\t\t\telseif j == 1 and i > 1 then\n\t\t\t\tlst_B[#lst_B + 1] = value\n\
    \t\t\telse\n\t\t\t\tlocal ii, jj\n\t\t\t\tif i < N then\n\t\t\t\t\tii = i\n\t\t\
    \t\telse\n\t\t\t\t\tii = N\n\t\t\t\tend\n\t\t\t\tif j < N then\n\t\t\t\t\tjj =\
    \ j\n\t\t\t\telse\n\t\t\t\t\tjj = N\n\t\t\t\tend\n\t\t\t\tfor k = ii, jj do\n\t\
    \t\t\t\tdfs(i, j)\n\t\t\t\tend\n\t\t\tend\n\t\tend\n\tend\n\tlocal lst_A, lst_B\
    \ = {}, {}\n\tfor i = 1, N do\n\t\tfor j = 1, N do\n\t\t\tif visited[i][j] then\
    \ return end\n\t\t\tvisited[i][j] = true\n\t\t\tlocal value = grid[i][j]\n\t\t\
    \tif i == 1 and j == 1 then\n\t\t\t\tlst_A[#lst_A + 1] = value\n\t\t\telseif i\
    \ == 1 and j > 1 then\n\t\t\t\tlst_B[#lst_B + 1] = value\n\t\t\telseif j == 1\
    \ and i > 1 then\n\t\t\t\tlst_B[#lst_B + 1] = value\n\t\t\telse\n\t\t\t\tlocal\
    \ ii, jj\n\t\t\t\tif i < N then\n\t\t\t\t\tii = i\n", "\tlocal lst_A, lst_B =\
    \ {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\
    \t\tlst_B[i] = grid[j]\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\
    \t\tbreak\n\t\tend\n\tend\n\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\
    \twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\t\ti =\
    \ i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    local lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\t\
    lst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\t\ti = i + 1\n\t\tj = j + 1\n\t\t\
    if j > #grid then\n\t\t\tbreak\n\t\tend\n\tend\n\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i]\
    \ = grid[j]\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\
    \t\tend\n\tend\n\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i\
    \ <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\t\ti = i + 1\n\
    \t\tj = j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\t\tend\n\tend\n\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\
    \t\tlst_B[i] = grid[j]\n\t\ti = i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\
    \t\tbreak\n\t\tend\n\tend\n\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\
    \twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\t\ti =\
    \ i + 1\n\t\tj = j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\t\tend\n\tend\n\t\
    local lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\twhile i <= #grid do\n\t\t\
    lst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\t\t", "\tlocal lst_A = {}\n\tlocal\
    \ lst_B = {}\n\tlocal i, j, val\n\tfor i, row in ipairs(grid) do\n\t\tfor j, val\
    \ in ipairs(row) do\n\t\t\tlst_A[val] = lst_A[val] or {}\n\t\t\tlst_B[val] = lst_B[val]\
    \ or {}\n\t\t\tlst_A[val][j] = 1\n\t\t\tlst_B[val][j] = j\n\t\tend\n\tend\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal visited_table = {}\n\t\
    local min_path = {}\n\tlocal min_path_count = 0\n\tlocal min_path_table = {}\n\
    \tlocal min_path_table_count = 0\n\tlocal min_path_table_counts = {}\n\tlocal\
    \ min_path_table_counts_count = 0\n\tlocal min_path_table_counts_count_min\n\t\
    local min_path_table_counts_count_max\n\tlocal min_path_table_counts_count_sum\n\
    \tlocal min_path_table_counts_count_product\n\tlocal min_path_table_counts_count_product2\n\
    \tlocal min_path_table_counts_count_product3\n\tlocal min_path_table_counts_count_product4\n\
    \tlocal min_path_table_counts_count_product5\n\tlocal min_path_table_counts_count_product6\n\
    \tlocal min_path_table_counts_count_product7\n\tlocal min_path_table_counts_count_product8\n\
    \tlocal min_path_table_counts_count_product9\n\tlocal min_path_table_counts_count_product10\n\
    \tlocal min_path_table_counts_count_product11\n\tlocal min_path_table_counts_count_product12\n\
    \tlocal min_path_table_counts_count_product13\n\tlocal min_path_table_counts_count_product14\n\
    \tlocal min_path_table_counts_count_product15\n\tlocal min_path_table_counts_count_product16\n\
    \tlocal min_path_table_counts_count_product17\n\tlocal min_path_table_counts_count_product18\n\
    \tlocal min_path_table_counts_count_product19\n\tlocal min_path_table_counts_count_product20\n\
    \tlocal min_path_table_counts_count_product21\n\tlocal min_path_table_counts_count_product22\n\
    \tlocal min_path_table_counts_count_product23\n\tlocal min_path_table_counts_count_product24\n\
    \tlocal min_path_table_counts_count_product25\n\tlocal min_path_table_counts_count_product26\n\
    \tlocal min_path_table_counts_count_product27\n\tlocal min_path_table_counts_count_product28\n\
    \tlocal min_path_table_counts_count_product29\n\tlocal min_path_", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min\
    \ = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max\
    \ = 0\n", "  -- Base case\n  if k == 1 then\n    return grid\n  end", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ visited_max = math.max(#grid)\n\tfor i = 1, #grid do\n\t\tlocal cell = grid[i]\n\
    \t\tvisited[#visited + 1] = cell\n\t\tvisited_count = visited_count + 1\n\t\t\
    if visited_count == visited_max then\n\t\t\tlocal lst_A, lst_B = {}, {}\n\t\t\t\
    for j = 1, #visited do\n\t\t\t\tlocal cell = visited[j]\n\t\t\t\tlocal value =\
    \ cell[1]\n\t\t\t\tlocal index = cell[2]\n\t\t\t\tlocal lst_A[#lst_A + 1] = value\n\
    \t\t\t\tlocal lst_B[#lst_B + 1] = index\n\t\t\tend\n\t\t\tlocal lst_A, lst_B =\
    \ {}, {}\n\t\t\tfor j = 1, #visited do\n\t\t\t\tlocal cell = visited[j]\n\t\t\t\
    \tlocal value = cell[1]\n\t\t\t\tlocal index = cell[2]\n\t\t\t\tlocal lst_A[#lst_A\
    \ + 1] = value\n\t\t\t\tlocal lst_B[#lst_B + 1] = index\n\t\t\tend\n\t\t\tlocal\
    \ lst_A, lst_B = {}, {}\n\t\t\tfor j = 1, #visited do\n\t\t\t\tlocal cell = visited[j]\n\
    \t\t\t\tlocal value = cell[1]\n\t\t\t\tlocal index = cell[2]\n\t\t\t\tlocal lst_A[#lst_A\
    \ + 1] = value\n\t\t\t\tlocal lst_B[#lst_B + 1] = index\n\t\t\tend\n\t\t\tlocal\
    \ lst_A, lst_B = {}, {}\n\t\t\tfor j = 1, #visited do\n\t\t\t\tlocal cell = visited[j]\n\
    \t\t\t\tlocal value = cell[1]\n\t\t\t\tlocal index = cell[2]\n\t\t\t\tlocal lst_A[#lst_A\
    \ + 1] = value\n\t\t\t\tlocal lst_B[#lst_B + 1] = index\n\t\t\tend\n\t\t\tlocal\
    \ lst_A, lst_B = {}, {}\n\t\t\tfor j = 1, #visited do\n\t\t\t\tlocal cell = visited[j]\n\
    \t\t\t\tlocal value = cell[1]\n\t\t\t\tlocal index = cell[2]\n\t\t\t\tlocal lst_A[#lst_A\
    \ + 1] = value\n\t\t\t\tlocal lst_B[#lst_B + 1] = index\n\t\t\tend\n\t\t\tlocal\
    \ lst_A, lst_B = {}, {}\n\t\t\tfor j = 1, #visited do\n\t\t\t\tlocal cell = visited[j]\n\
    \t\t\t\tlocal value = cell[1]\n\t\t\t\tlocal index = cell[2]\n\t\t\t\tlocal lst_A[#lst_A\
    \ + 1] = value\n\t\t\t\tlocal lst_B[#lst_B + 1] = index\n\t\t\tend\n\t\t\tlocal\
    \ lst_A, lst_B = {}, {}\n\t\t\tfor j = 1, #visited do\n\t\t\t\tlocal cell = ",
  "  -- Base case\n  if k == 1 then\n    return grid\n  end", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal i, j = 1,\
    \ 1\n\twhile i <= #grid do\n\t\tvisited[i] = true\n\t\tvisited_count = visited_count\
    \ + 1\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[i] = grid[j]\n\t\ti = i + 1\n\t\tj =\
    \ j + 1\n\t\tif j > #grid then\n\t\t\tbreak\n\t\tend\n\tend\n\tlocal count = 0\n\
    \twhile count < visited_count do\n\t\tcount = count + 1\n\t\ti = i + 1\n\t\tif\
    \ i > #grid then\n\t\t\tbreak\n\t\tend\n\t\tj = j - 1\n\t\tif j < 1 then\n\t\t\
    \tbreak\n\t\tend\n\t\tif visited[i] then\n\t\t\tlocal lst_A, lst_B = {}, {}\n\t\
    \t\tvisited[i] = false\n\t\t\tvisited_count = visited_count - 1\n\t\t\tlst_A[i]\
    \ = grid[i]\n\t\t\tlst_B[i] = grid[j]\n\t\t\tlocal i, j = 1, 1\n\t\t\twhile i\
    \ <= #grid do\n\t\t\t\tvisited[i] = true\n\t\t\t\tvisited_count = visited_count\
    \ + 1\n\t\t\t\tlst_A[i] = grid[i]\n\t\t\t\tlst_B[i] = grid[j]\n\t\t\t\ti = i +\
    \ 1\n\t\t\t\tj = j + 1\n\t\t\t\tif j > #grid then\n\t\t\t\t\tbreak\n\t\t\t\tend\n\
    \t\t\tend\n\t\t\tlocal count = 0\n\t\t\twhile count < visited_count do\n\t\t\t\
    \tcount = count + 1\n\t\t\t\ti = i + 1\n\t\t\t\tif i > #grid then\n\t\t\t\t\t\
    break\n\t\t\t\tend\n\t\t\t\tj = j - 1\n\t\t\t\tif j < 1 then\n\t\t\t\t\tbreak\n\
    \t\t\t\tend\n\t\t\t\tif visited[i] then\n\t\t\t\t\tlocal lst_A, lst_B = {}, {}\n\
    \t\t\t\t\tvisited[i] = false\n\t\t\t\t\tvisited_count = visited_count - 1\n\t\t\
    \t\t\tlst_A[i] = grid[i]\n\t\t\t\t\tlst_B[i] = grid[j]\n\t\t\t\t\tlocal i, j =\
    \ 1, 1\n\t\t\t\t\twhile i <= #grid do\n\t\t\t\t\t\tvisited[i] = true\n\t\t\t\t\
    \t\tvisited_count = visited_count + 1\n\t\t\t\t\t\tlst_A[i] = grid[i]\n\t\t\t\t\
    \t\tlst_B[i] = grid[j]\n\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\tj = j + 1\n\t\t\t\t\
    \t\tif j > #grid then\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\
    \t\t\t\tlocal count = 0\n\t\t\t\t\twhile count < visited_count do\n\t\t\t\t\t\t\
    count = count + 1\n\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\tif i > #grid then\n\t\t\t\
    \t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\t\tj = j - 1\n\t\t\t\t\t\tif j < 1 then\n\
    \t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\t\tif visited[i] then\n\t\t\t\t\
    \t\t\tlocal lst_A, lst_B = {}, {}\n\t\t\t\t\t\t\tvisited[i] = false\n\t\t\t\t\t\
    \t\tvisited_count = ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\t\
    local i, j = 0, 0\n\tlocal n = #grid\n\twhile i < n do\n\t\tvisited[i] = true\n\
    \t\tlst_A[i] = grid[i][j]\n\t\ti = i + 1\n\t\twhile i < n do\n\t\t\tvisited[i]\
    \ = true\n\t\t\tlst_B[i] = grid[i][j]\n\t\t\ti = i + 1\n\t\tend\n\t\tj = j + 1\n\
    \tend\n\tlocal count = 0\n\twhile j < n do\n\t\tcount = count + 1\n\t\tj = j +\
    \ 1\n\tend\n\tlocal ans = {}\n\twhile count > 0 do\n\t\ti = i + 1\n\t\tcount =\
    \ count - 1\n\t\tif visited[i] then\n\t\t\tans[#ans + 1] = lst_A[i]\n\t\tend\n\
    \tend\n\treturn ans\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i\
    \ = 1\n\tlocal j = 1\n\tlocal count = 0\n\tlocal ans = {}\n\twhile i <= #grid\
    \ do\n\t\tlocal cell = {}\n\t\tcell[1] = grid[i][1]\n\t\tcell[2] = grid[i][2]\n\
    \t\tcell[3] = grid[i][3]\n\t\tcell[4] = grid[i][4]\n\t\tcell[5] = grid[i][5]\n\
    \t\tcell[6] = grid[i][6]\n\t\tcell[7] = grid[i][7]\n\t\tcell[8] = grid[i][8]\n\
    \t\tcell[9] = grid[i][9]\n\t\tcell[10] = grid[i][10]\n\t\tcell[11] = grid[i][11]\n\
    \t\tcell[12] = grid[i][12]\n\t\tcell[13] = grid[i][13]\n\t\tcell[14] = grid[i][14]\n\
    \t\tcell[15] = grid[i][15]\n\t\tcell[16] = grid[i][16]\n\t\tcell[17] = grid[i][17]\n\
    \t\tcell[18] = grid[i][18]\n\t\tcell[19] = grid[i][19]\n\t\tcell[20] = grid[i][20]\n\
    \t\tcell[21] = grid[i][21]\n\t\tcell[22] = grid[i][22]\n\t\tcell[23] = grid[i][23]\n\
    \t\tcell[24] = grid[i][24]\n\t\tcell[25] = grid[i][25]\n\t\tcell[26] = grid[i][26]\n\
    \t\tcell[27] = grid[i][27]\n\t\tcell[28] = grid[i][28]\n\t\tcell[29] = grid[i][29]\n\
    \t\tcell[30] = grid[i][30]\n\t\tcell[31] = grid[i][31]\n\t\tcell[32] = grid[i][32]\n\
    \t\tcell[33] = grid[i][33]\n\t\tcell[34] = grid[i][34]\n\t\tcell[35] = grid[i][35]\n\
    \t\tcell[36] = grid[i][36]\n\t\tcell[37] = grid[i][37]\n\t\tcell[38] = grid[i][38]\n\
    \t\tcell[39] = grid[i][39]\n\t\tcell[40] = grid[i][40]\n\t\tcell[41] = grid[i][41]\n\
    \t\tcell[42] = grid[i][42]\n\t\tcell[43] = grid[i][43]\n\t\tcell[44] = grid[i][44]\n\
    \t\tcell[45] = grid[i][45]\n\t\tcell[46] = grid[i][46]\n\t\tcell[47] = grid[i][47]\n\
    \t\tcell[48] = grid[i][48]\n\t\tcell[49] = grid[i][49]\n\t\tcell[50] = grid[i][",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count\
    \ = 0\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal min_path = {}\n\
    \tlocal min_path_count = 0\n\tlocal min_path_length = 0\n\tlocal min_path_length_index\
    \ = 0\n\tlocal min_path_length_value = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length_value_index\
    \ = 0\n\tlocal min_path_length_value_index = 0\n\tlocal min_path_length", "  local\
    \ lst_A, lst_B = {}, {}\n  local visited = {}\n  local visited_count = 0\n  local\
    \ visited_max = 0\n  local visited_max_count = 0\n  local visited_max_index =\
    \ 0\n  local visited_max_value = 0\n  local visited_max_count = 0\n  local visited_max_value_index\
    \ = 0\n  local visited_max_value_count = 0\n  local visited_max_value_index =\
    \ 0\n  local visited_max_value_count = 0\n  local visited_max_value_index = 0\n\
    \  local visited_max_value_count = 0\n  local visited_max_value_index = 0\n  local\
    \ visited_max_value_count = 0\n  local visited_max_value_index = 0\n  local visited_max_value_count\
    \ = 0\n  local visited_max_value_index = 0\n  local visited_max_value_count =\
    \ 0\n  local visited_max_value_index = 0\n  local visited_max_value_count = 0\n\
    \  local visited_max_value_index = 0\n  local visited_max_value_count = 0\n  local\
    \ visited_max_value_index = 0\n  local visited_max_value_count = 0\n  local visited_max_value_index\
    \ = 0\n  local visited_max_value_count = 0\n  local visited_max_value_index =\
    \ 0\n  local visited_max_value_count = 0\n  local visited_max_value_index = 0\n\
    \  local visited_max_value_count = 0\n  local visited_max_value_index = 0\n  local\
    \ visited_max_value_count = 0\n  local visited_max_value_index = 0\n  local visited_max_value_count\
    \ = 0\n  local visited_max_value_index = 0\n  local visited_max_value_count =\
    \ 0\n  local visited_max_value_index = 0\n  local visited_max_value_count = 0\n\
    \  local visited_max_value_index = 0\n  local visited_max_value_count = 0\n  local\
    \ visited_max_value_index = 0\n  local visited_max_value_count = 0\n  local visited_max_value_index\
    \ = 0\n  local visited_max_value_count = 0\n  local visited_max_value_index =\
    \ 0\n  local visited_max_value_count = 0\n  local visited_max_value_index = 0\n\
    \  local visited_max_value_count = 0\n  local visited_max_value_index = 0\n  local\
    \ visited_max_value_count = 0\n  local visited_max_value_index = 0\n  local visited_max_value_count\
    \ = 0\n  local visited_max_value_index = 0\n  local visited_max_value_count =\
    \ 0\n  local visited_max_value_index = 0\n  local visited_max_value_count = 0\n\
    \  local visited_max_value_index = 0\n  local visited_max_value_count = 0\n  local\
    \ visited_max_value_index = 0\n", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\t\
    local i = 1\n\tlocal j = 1\n\tlocal cnt = 0\n\tlocal ans = {}\n\twhile i <= #grid\
    \ do\n\t\tlocal v = grid[i]\n\t\tif v == nil then\n\t\t\tbreak\n\t\tend\n\t\t\
    lst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B + 1] = v\n\t\ti = i + 1\n\t\tcnt = cnt\
    \ + 1\n\t\tif cnt > k then\n\t\t\tbreak\n\t\tend\n\tend\n\ti = j\n\twhile i <=\
    \ #grid do\n\t\tlocal v = grid[i]\n\t\tif v == nil then\n\t\t\tbreak\n\t\tend\n\
    \t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B + 1] = v\n\t\ti = i + 1\n\tend\n\t\
    i = j\n\twhile i <= #grid do\n\t\tlocal v = grid[i]\n\t\tif v == nil then\n\t\t\
    \tbreak\n\t\tend\n\t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B + 1] = v\n\t\ti\
    \ = i + 1\n\t\tj = j + 1\n\tend\n\ti = j\n\twhile i <= #grid do\n\t\tlocal v =\
    \ grid[i]\n\t\tif v == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A[#lst_A + 1] =\
    \ v\n\t\tlst_B[#lst_B + 1] = v\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\ti = j\n\
    \twhile i <= #grid do\n\t\tlocal v = grid[i]\n\t\tif v == nil then\n\t\t\tbreak\n\
    \t\tend\n\t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B + 1] = v\n\t\ti = i + 1\n\
    \t\tj = j + 1\n\tend\n\ti = j\n\twhile i <= #grid do\n\t\tlocal v = grid[i]\n\t\
    \tif v == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B\
    \ + 1] = v\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\ti = j\n\twhile i <= #grid do\n\
    \t\tlocal v = grid[i]\n\t\tif v == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A[#lst_A\
    \ + 1] = v\n\t\tlst_B[#lst_B + 1] = v\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\t\
    i = j\n\twhile i <= #grid do\n", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal ans = {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i =\
    \ 1\n\twhile i <= n do\n\t\tvisited[i] = false\n\t\tlst_A[i] = grid[i][1]\n\t\t\
    lst_B[i] = grid[i][2]\n\t\ti = i + 1\n\tend\n\tvisited[n] = true\n\ti = n - 1\n\
    \twhile i >= 1 do\n\t\tvisited[i] = false\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i]\
    \ = grid[i][2]\n\t\ti = i - 1\n\tend\n\ti = n - 1\n\twhile i >= 1 do\n\t\tvisited[i]\
    \ = false\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\ti = i - 1\n\
    \tend\n\twhile i <= n do\n\t\tif visited[i] == false then\n\t\t\tvisited[i] =\
    \ true\n\t\t\tlocal j = i - 1\n\t\t\twhile j >= 1 do\n\t\t\t\tif visited[j] ==\
    \ false then\n\t\t\t\t\tvisited[j] = true\n\t\t\t\t\tlocal k = j - 1\n\t\t\t\t\
    \twhile k >= 1 do\n\t\t\t\t\t\tif visited[k] == false then\n\t\t\t\t\t\t\tvisited[k]\
    \ = true\n\t\t\t\t\t\t\tlocal m = k - 1\n\t\t\t\t\t\t\twhile m >= 1 do\n\t\t\t\
    \t\t\t\t\tif visited[m] == false then\n\t\t\t\t\t\t\t\t\tvisited[m] = true\n\t\
    \t\t\t\t\t\t\t\tlocal n = m - 1\n\t\t\t\t\t\t\t\t\twhile n >= 1 do\n\t\t\t\t\t\
    \t\t\t\t\tif visited[n] == false then\n\t\t\t\t\t\t\t\t\t\t\tvisited[n] = true\n\
    \t\t\t\t\t\t\t\t\t\t\tlocal o = n - 1\n\t\t\t\t\t\t\t\t\t\t\twhile o >= 1 do\n\
    \t\t\t\t\t\t\t\t\t\t\t\tif visited[o] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\
    visited[o] = true\n\t\t\t\t\t\t\t\t\t\t\t\t\tlocal p = o\n\t\t\t\t\t\t\t\t\t\t\
    \t\t\twhile p >= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\tif visited[p] == false then\n\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisited[p] = true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    local q = p\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile q >= 1 do\n\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tif visited[q] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    visited[q] = true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal r = q\n\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\twhile r >= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tif\
    \ visited[r] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisited[r] =\
    \ true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal s = r - 1\n\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\twhile s >= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    if visited[s] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tvisited[s]\
    \ = true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal t = s - 1\n\t\t\t\t\t\
    \t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile t >= 1 do\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\t\t\tif visited[t] == false then\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\
    \t\t\t\t\tvisited[t] = true\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\tlocal\
    \ u = t - 1\n\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\twhile u >= ", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal i, j, val, cnt\n\tfor i, row in ipairs(grid)\
    \ do\n\t\tfor j, val in ipairs(row) do\n\t\t\tlst_A[val] = lst_A[val] or {}\n\t\
    \t\tlst_B[val] = lst_B[val] or {}\n\t\t\tlst_A[val][j] = 1\n\t\t\tlst_B[val][j]\
    \ = 1\n\t\tend\n\tend\n\tlst_A[1], lst_B[1] = 1, 1\n\tlocal cnt = 0\n\twhile cnt\
    \ < k do\n\t\tcnt = cnt + 1\n\t\tlocal minA, minB\n\t\tfor i, row in ipairs(grid)\
    \ do\n\t\t\tfor j, val in ipairs(row) do\n\t\t\t\tif lst_A[val][j] < lst_B[val][j]\
    \ then\n\t\t\t\t\tminA = val\n\t\t\t\t\tminB = j\n\t\t\t\tend\n\t\t\tend\n\t\t\
    end\n\t\tlst_A[minA], lst_B[minB] = lst_A[minA], lst_B[minB] + 1\n\tend\n\treturn\
    \ lst_A\nend", "  local lst_A, lst_B = {}, {}\n  local i, j = 1, 1\n  while i\
    \ <= #grid do\n    local v = grid[i]\n    local lst_A[#lst_A + 1] = v\n    local\
    \ lst_B[#lst_B + 1] = v\n    i = i + 1\n  end\n  local i = 1\n  while i <= k do\n\
    \    local v = grid[i]\n    local j = i + 1\n    while j <= #grid do\n      if\
    \ lst_A[j] < lst_B[j] then\n        lst_A[j] = lst_B[j]\n      end\n      j =\
    \ j + 1\n    end\n    i = i + 1\n  end\n  return lst_A\nend", "  local lst_A =\
    \ {}\n  local lst_B = {}\n  local i = 1\n  local j = 1\n  local count = 0\n  local\
    \ visited = {}\n  local result = {{}}\n  while i <= #grid do\n    visited[i] =\
    \ false\n    visited[j] = false\n    count = count + 1\n    local tmp = {}\n \
    \   for j = 1, #grid[i] do\n      if grid[i][j] == i then\n        table.insert(tmp,\
    \ grid[i][j])\n      else\n        local neighbors = neighbors(grid, i, j)\n \
    \       for _, neighbor in ipairs(neighbors) do\n          if not visited[neighbor]\
    \ then\n            table.insert(tmp, neighbor)\n            table.insert(lst_A,\
    \ neighbor)\n            table.insert(lst_B, neighbor)\n            visited[neighbor]\
    \ = true\n          end\n        end\n      end\n    end\n    table.sort(tmp)\n\
    \    for _, value in ipairs(tmp) do\n      table.insert(result, value)\n    end\n\
    \    i = i + 1\n    j = j + 1\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n\
    \  for _, value in ipairs(lst_A) do\n    if lst_A[value] < lst_B[value] then\n\
    \      return result\n    end\n  end\n  return result\nend", "  local lst_A, lst_B\
    \ = {}, {}\n  local n = #grid\n  local m = #grid[1]\n  local i, j, k\n  for i\
    \ = 1, n do\n    for j = 1, m do\n      k = grid[i][j]\n      if k < n then\n\
    \        lst_A[k] = lst_A[k] or j\n        lst_B[k] = lst_B[k] or i\n      end\n\
    \    end\n  end\n  local lst_A = {}\n  local lst_B = {}\n  for i = 1, n do\n \
    \   for j = 1, m do\n      k = grid[i][j]\n      if k < n then\n        lst_A[k]\
    \ = lst_A[k] or j\n        lst_B[k] = lst_B[k] or i\n      end\n    end\n  end\n\
    \  local lst_A = {}\n  local lst_B = {}\n  for i = 1, n do\n    for j = 1, m do\n\
    \      k = grid[i][j]\n      if k < n then\n        lst_A[k] = lst_A[k] or j\n\
    \        lst_B[k] = lst_B[k] or i\n      end\n    end\n  end\n  local lst_A =\
    \ {}\n  local lst_B = {}\n  for i = 1, n do\n    for j = 1, m do\n      k = grid[i][j]\n\
    \      if k < n then\n        lst_A[k] = lst_A[k] or j\n        lst_B[k] = lst_B[k]\
    \ or i\n      end\n    end\n  end\n  local lst_A = {}\n  local lst_B = {}\n  for\
    \ i = 1, n do\n    for j = 1, m do\n      k = grid[i][j]\n      if k < n then\n\
    \        lst_A[k] = lst_A[k] or j\n        lst_B[k] = lst_B[k] or i\n      end\n\
    \    end\n  end\n  local lst_A = {}\n  local lst_B = {}\n  for i = 1, n do\n \
    \   for j = 1, m do\n      k = grid[i][j]\n      if k < n then\n        lst_A[k]\
    \ = lst_A[k] or j\n        lst_B[k] = lst_B[k] or i\n      end\n    end\n  end\n\
    \  local lst_A = {}\n  local lst_B = {}\n  for i = 1, n do\n    for j = 1, m do\n\
    \      k = grid[i][j]\n      if k < n then\n        lst_A[k] = lst_A[k] or j\n\
    \        lst_B[k] = lst_B[k] or i\n      end\n    end\n  end\n  local lst_A =\
    \ {}\n  local lst_B = {}\n  for i = 1, n do", "\tlocal lst_A = {}\n\tlocal lst_B\
    \ = {}\n\tlocal index = 1\n\tfor i = 1, #grid do\n\t\tlst_A[index] = grid[i]\n\
    \t\tlst_B[index] = grid[i]\n\t\tindex = index + 1\n\tend\n\tlocal i = 1\n\twhile\
    \ i <= k do\n\t\tlocal j = 1\n\t\twhile j <= k do\n\t\t\tif lst_A[i] < lst_B[j]\
    \ then\n\t\t\t\tlst_A[i], lst_B[j] = lst_B[j], lst_A[i]\n\t\t\tend\n\t\t\tj =\
    \ j + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn lst_A\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\t\
    table.insert(lst_B, grid[i])\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\
    \tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j = 1\n\t\twhile\
    \ j <= #lst_A do\n\t\t\tif lst_A[j] < lst_B[j] then\n\t\t\t\ttable.insert(ans,\
    \ lst_A[j])\n\t\t\t\tj = j + 1\n\t\t\telse\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\
    \t\ti = i + 1\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max = {}\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_max = 0\n\tlocal visited_max_max_count = 0\n\tlocal\
    \ visited_max_max_max = 0\n\tlocal visited_max_max_max_count = 0\n\tlocal visited_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_count = 0\n\tlocal\
    \ visited_max_max_max_max_max_max_max_max_max_max = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max = 0\n\tlocal\
    \ visited_max_max_max_max_max_max_max_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max_count =\
    \ 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max = 0\n\tlocal\
    \ visited_max_max_max_max_max_max_max_max_max_max_max_max_count = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max\
    \ = 0\n\tlocal visited_max_max_max_max_max_max_max_max_max_max_max_max_max_max_max_count\
    \ = 0\n\tlocal visited_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j = 1, 1\n\
    \twhile i <= #grid do\n\t\tlst_A[i] = grid[i]\n\t\tlst_B[j] = grid[j]\n\t\ti =\
    \ i + 1\n\t\tj = j + 1\n\tend\n\tlocal i = 1\n\twhile i <= k do\n\t\tlocal j =\
    \ i\n\t\twhile j <= k do\n\t\t\tif lst_A[i] > lst_B[j] then\n\t\t\t\tlst_A[i],\
    \ lst_B[j] = lst_B[j], lst_A[i]\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti =\
    \ i + 1\n\tend\n\treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal\
    \ visited_count_max2 = 0\n\tlocal visited_count_max3 = 0\n\tlocal visited_count_max4\
    \ = 0\n\tlocal visited_count_max5 = 0\n\tlocal visited_count_max6 = 0\n\tlocal\
    \ visited_count_max7 = 0\n\tlocal visited_count_max8 = 0\n\tlocal visited_count_max9\
    \ = 0\n\tlocal visited_count_max10 = 0\n\tlocal visited_count_max11 = 0\n\tlocal\
    \ visited_count_max12 = 0\n\tlocal visited_count_max13 = 0\n\tlocal visited_count_max14\
    \ = 0\n\tlocal visited_count_max15 = 0\n\tlocal visited_count_max16 = 0\n\tlocal\
    \ visited_count_max17 = 0\n\tlocal visited_count_max18 = 0\n\tlocal visited_count_max19\
    \ = 0\n\tlocal visited_count_max20 = 0\n\tlocal visited_count_max21 = 0\n\tlocal\
    \ visited_count_max22 = 0\n\tlocal visited_count_max23 = 0\n\tlocal visited_count_max24\
    \ = 0\n\tlocal visited_count_max25 = 0\n\tlocal visited_count_max26 = 0\n\tlocal\
    \ visited_count_max27 = 0\n\tlocal visited_count_max28 = 0\n\tlocal visited_count_max29\
    \ = 0\n\tlocal visited_count_max30 = 0\n\tlocal visited_count_max31 = 0\n\tlocal\
    \ visited_count_max32 = 0\n\tlocal visited_count_max33 = 0\n\tlocal visited_count_max34\
    \ = 0\n\tlocal visited_count_max35 = 0\n\tlocal visited_count_max36 = 0\n\tlocal\
    \ visited_count_max37 = 0\n\tlocal visited_count_max38 = 0\n\tlocal visited_count_max39\
    \ = 0\n\tlocal visited_count_max40 = 0\n\tlocal visited_count_max41 = 0\n\tlocal\
    \ visited_count_max42 = 0\n\tlocal visited_count_max43 = 0\n\tlocal visited_count_max44\
    \ = 0\n\tlocal visited_count_max45 = 0\n\tlocal visited_count_max46 = 0\n\tlocal\
    \ visited_count_max47 = 0\n\tlocal visited_count_max48 = 0\n\tlocal visited_count_max49\
    \ = 0\n\tlocal visited_count_max50 = 0\n\tlocal visited_count_max51 = 0\n\tlocal\
    \ visited_count_max52 = 0\n\tlocal visited_count_max53 = 0\n\tlocal visited_count_max54\
    \ = 0\n\tlocal visite", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\
    \tlocal j = 1\n\tlocal count = 0\n\tlocal visited = {}\n\twhile i <= #grid do\n\
    \t\tvisited[i] = true\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][2]\n\t\
    \ti = i + 1\n\tend\n\twhile j <= #grid do\n\t\tif visited[j] then\n\t\t\tcount\
    \ = count + 1\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tvisited[j] =\
    \ true\n\t\t\tlst_A[j] = grid[j][1]\n\t\t\tlst_B[j] = grid[j][2]\n\t\t\tj = j\
    \ + 1\n\t\tend\n\tend\n\twhile i <= #grid do\n\t\tif visited[i] then\n\t\t\tcount\
    \ = count + 1\n\t\t\ti = i + 1\n\t\telse\n\t\t\tvisited[i] = true\n\t\t\tlst_A[i]\
    \ = grid[i][1]\n\t\t\tlst_B[i] = grid[i][2]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\
    \twhile j <= #grid do\n\t\tif visited[j] then\n\t\t\tcount = count + 1\n\t\t\t\
    j = j + 1\n\t\telse\n\t\t\tvisited[j] = true\n\t\t\tlst_A[j] = grid[j][1]\n\t\t\
    \tlst_B[j] = grid[j][2]\n\t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= #grid do\n\
    \t\tif visited[i] then\n\t\t\tcount = count + 1\n\t\t\ti = i + 1\n\t\telse\n\t\
    \t\tvisited[i] = true\n\t\t\tlst_A[i] = grid[i][1]\n\t\t\tlst_B[i] = grid[i][2]\n\
    \t\t\ti = i + 1\n\t\tend\n\tend\n\twhile j <= #grid do\n\t\tif visited[j] then\n\
    \t\t\tcount = count + 1\n\t\t\tj = j + 1\n\t\telse\n\t\t\tvisited[j] = true\n\t\
    \t\tlst_A[j] = grid[j][1]\n\t\t\tlst_B[j] = grid[j][2]\n\t\t\tj = j + 1\n\t\t\
    end\n\tend\n\twhile i <= #grid do\n\t\tif visited[i] then\n\t\t\tcount = count\
    \ + 1\n\t\t\ti = i + 1\n\t\telse\n\t\t\tvisited[i] = true\n\t\t\tlst_A[i] = grid[i][1]\n\
    \t\t\tlst_B[i] = grid[i][2]\n\t\t\ti = i + 1\n\t\tend\n\tend\n\twhile j <= #grid\
    \ do\n\t\tif visited[j] then\n\t\t\tcount = count + 1\n\t\t\tj = j + 1\n\t\telse\n\
    \t\t\tvisited[j] = true\n\t\t\tlst_A[j] = grid[j][1]\n\t\t\tlst_B[j] = grid[j][2]\n\
    \t\t\tj = j + 1\n\t\tend\n\tend\n\twhile i <= ", "\tlocal lst_A, lst_B = {}, {}\n\
    \tfor i = 1, #grid do\n\t\ttable.insert(lst_A, grid[i])\n\t\ttable.insert(lst_B,\
    \ grid[i])\n\tend\n\tlst_A[1], lst_B[1] = lst_A[1], lst_B[1]\n\tfor i = 2, #grid\
    \ do\n\t\tlocal j = 1\n\t\twhile j <= #lst_A do\n\t\t\tif lst_A[j] < lst_B[j]\
    \ then\n\t\t\t\ttable.insert(lst_A, grid[i])\n\t\t\t\tbreak\n\t\t\telseif lst_A[j]\
    \ > lst_B[j] then\n\t\t\t\ttable.insert(lst_B, grid[i])\n\t\t\t\tbreak\n\t\t\t\
    else\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(lst_A, function(a,\
    \ b) return a < b end)\n\ttable.sort(lst_B, function(a, b) return a < b end)\n\
    \treturn lst_A\nend", "  local lst_A = {}\n  local lst_B = {}\n  local i = 1\n\
    \  for _, row in ipairs(grid) do\n    for _, cell in ipairs(row) do\n      lst_A[i]\
    \ = cell\n      lst_B[i] = cell\n      i = i + 1\n    end\n  end\n  lst_A[1] =\
    \ grid[1][1]\n  lst_B[1] = grid[1][1]\n  local j = 1\n  for i = 2, k do\n    while\
    \ lst_A[j] < lst_B[j] do\n      j = j + 1\n    end\n    lst_A[j] = grid[i][j]\n\
    \    lst_B[j] = grid[i][j]\n  end\n  return lst_A\nend", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_table\
    \ = {}\n\tlocal visited_table_count = 0\n\tlocal visited_table_count_max = 0\n\
    \tlocal visited_table_count_max1 = 0\n\tlocal visited_table_count_max2 = 0\n\t\
    local visited_table_count_max3 = 0\n\tlocal visited_table_count_max4 = 0\n\tlocal\
    \ visited_table_count_max5 = 0\n\tlocal visited_table_count_max6 = 0\n\tlocal\
    \ visited_table_count_max7 = 0\n\tlocal visited_table_count_max8 = 0\n\tlocal\
    \ visited_table_count_max9 = 0\n\tlocal visited_table_count_max10 = 0\n\tlocal\
    \ visited_table_count_max11 = 0\n\tlocal visited_table_count_max12 = 0\n\tlocal\
    \ visited_table_count_max13 = 0\n\tlocal visited_table_count_max14 = 0\n\tlocal\
    \ visited_table_count_max15 = 0\n\tlocal visited_table_count_max16 = 0\n\tlocal\
    \ visited_table_count_max17 = 0\n\tlocal visited_table_count_max18 = 0\n\tlocal\
    \ visited_table_count_max19 = 0\n\tlocal visited_table_count_max20 = 0\n\tlocal\
    \ visited_table_count_max21 = 0\n\tlocal visited_table_count_max22 = 0\n\tlocal\
    \ visited_table_count_max23 = 0\n\tlocal visited_table_count_max24 = 0\n\tlocal\
    \ visited_table_count_max25 = 0\n\tlocal visited_table_count_max26 = 0\n\tlocal\
    \ visited_table_count_max27 = 0\n\tlocal visited_table_count_max28 = 0\n\tlocal\
    \ visited_table_count_max29 = 0\n\tlocal visited_table_count_max30 = 0\n\tlocal\
    \ visited_table_count_max31 = 0\n\tlocal visited_table_count_max32 = 0\n\tlocal\
    \ visited_table_count_max33 = 0\n\tlocal visited_table_count_max34 = 0\n\tlocal\
    \ visited_table_count_max35 = 0\n\tlocal visited_table_count_max36 = 0\n\tlocal\
    \ visited_table_count_max37 = 0\n\tlocal visited_table_count_max38 = 0\n\tlocal\
    \ visited_table_count_max39 = 0\n\tlocal visited_table_count_max40 = 0\n\tlocal\
    \ visited_table_count_max41 = 0\n\tlocal visited_table_count_max42 = 0\n\tlocal\
    \ visited_table_count_max43 = 0\n\tlocal visited_table_count_max44 = 0\n\tlocal\
    \ visited_table_count_max45 = 0\n\tlocal visited_table_count_max46 = 0\n\tlocal\
    \ visited_table_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal\
    \ visited_count = 0\n\tlocal visited_max = 0\n\tlocal visited_max_count = 0\n\t\
    local visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_count\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_", "  -- Base case:\
    \ empty grid\n  if #grid == 0 then\n    return {}\n  end", "\tlocal lst_A, lst_B\
    \ = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tfor i = 1, n do\n\t\tlst_A[i] =\
    \ i\n\tend\n\tfor j = 1, n do\n\t\tlst_B[j] = j\n\tend\n\tlocal visited = {}\n\
    \tlocal visited_count = 0\n\tlocal min_path = {}\n\tlocal min_path_count = 0\n\
    \tlocal visited_table = {}\n\tlocal visited_table_count = 0\n\tlocal min_path_table\
    \ = {}\n\tlocal min_path_table_count = 0\n\tlocal visited_table_temp = {}\n\t\
    local visited_table_temp_count = 0\n\tlocal min_path_table_temp = {}\n\tlocal\
    \ min_path_table_temp_count = 0\n\tlocal visited_table_temp2 = {}\n\tlocal visited_table_temp2_count\
    \ = 0\n\tlocal min_path_table_temp2 = {}\n\tlocal min_path_table_temp2_count =\
    \ 0\n\tlocal visited_table_temp3 = {}\n\tlocal visited_table_temp3_count = 0\n\
    \tlocal min_path_table_temp3 = {}\n\tlocal min_path_table_temp3_count = 0\n\t\
    local visited_table_temp4 = {}\n\tlocal visited_table_temp4_count = 0\n\tlocal\
    \ min_path_table_temp4 = {}\n\tlocal min_path_table_temp4_count = 0\n\tlocal visited_table_temp5\
    \ = {}\n\tlocal visited_table_temp5_count = 0\n\tlocal min_path_table_temp5 =\
    \ {}\n\tlocal min_path_table_temp5_count = 0\n\tlocal visited_table_temp6 = {}\n\
    \tlocal visited_table_temp6_count = 0\n\tlocal min_path_table_temp6 = {}\n\tlocal\
    \ min_path_table_temp6_count = 0\n\tlocal visited_table_temp7 = {}\n\tlocal visited_table_temp7_count\
    \ = 0\n\tlocal min_path_table_temp7 = {}\n\tlocal min_path_table_temp7_count =\
    \ 0\n\tlocal visited_table_temp8 = {}\n\tlocal visited_table_temp8_count = 0\n\
    \tlocal min_path_table_temp8 = {}\n\tlocal min_path_table_temp8_count = 0\n\t\
    local visited_table_temp9 = {}\n\tlocal visited_table_temp9_count = 0\n\tlocal\
    \ min_path_table_temp9 = {}\n\tlocal min_path_table_temp9_count = 0\n\tlocal visited_table_temp10\
    \ = {}\n\tlocal visited_table_temp10_count = 0\n\tlocal min_path_table_temp10\
    \ = {}\n\tlocal min_path_table_temp10_count = 0\n\tlocal visited_table_temp11\
    \ = {}\n\tlocal visited_table_temp11_count = 0\n\tlocal min_path_table_temp11\
    \ = {}\n\tlocal min_path_table_temp11_count = 0\n\tlocal ", "  local lst_A, lst_B\
    \ = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  local i = 1\n  while i <= k do\n    local j = i\n    while j <= k do\n    \
    \  local k = j + 1\n      while k <= k do\n        local m = k + 1\n        while\
    \ m <= k do\n          local n = m + 1\n          while n <= k do\n          \
    \  local o = n + 1\n            while o <= k do\n              local p = o + 1\n\
    \              while p <= k do\n                local q = p + 1\n            \
    \    while q <= k do\n                  local r = q + 1\n                  while\
    \ r <= k do\n                    local s = r + 1\n                    while s\
    \ <= k do\n                      local t = s + 1\n                      while\
    \ t <= k do\n                        local u = t + 1\n                       \
    \ while u <= k do\n                          local v = u + 1\n               \
    \           while v <= k do\n                            local w = v + 1\n   \
    \                         while w <= k do\n                              local\
    \ x = w + 1\n                              while x <= k do\n                 \
    \               table.insert(ans, grid[i])\n                                i\
    \ = x\n                              end\n                              w = x\
    \ + 1\n                            end\n                            v = u + 1\n\
    \                          end\n                          u = t + 1\n        \
    \                end\n                        t = s + 1\n                    \
    \  end\n                      s = r + 1\n                    end\n           \
    \         r = q + 1\n                  end\n                  q = p + 1\n    \
    \            end\n                p = o + 1\n              end\n             \
    \ o = n + 1\n            end\n            n = m + 1\n          end\n         \
    \ m = k + 1\n        end\n        k = j + 1\n      end\n      j = i\n    end\n\
    \    i = i + 1\n  end\n  return ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal count = 0\n\tlocal min_path\
    \ = {}\n\tlocal current_cell = {}\n\tlocal current_cell_x = nil\n\tlocal current_cell_y\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal\
    \ current_cell_val = nil\n\tlocal current_cell_val = nil\n\tlocal current_cell_val\
    \ = nil\n\tlocal current_", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited =\
    \ {}\n\tlocal ans = {}\n\tlocal n = 0\n\tlocal m = #grid\n\tlocal i = 1\n\tlocal\
    \ j = 1\n\twhile i <= m do\n\t\tlocal k = i\n\t\twhile k <= m do\n\t\t\tlocal\
    \ v = grid[i][k]\n\t\t\tif v == nil then\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tvisited[v]\
    \ = true\n\t\t\tlst_A[#lst_A + 1] = v\n\t\t\tlst_B[#lst_B + 1] = v\n\t\t\tk =\
    \ k + 1\n\t\tend\n\t\ti = i + 1\n\tend\n\tlocal k = 1\n\twhile k <= n do\n\t\t\
    local v = grid[i][k]\n\t\tif v == nil then\n\t\t\tbreak\n\t\tend\n\t\tvisited[v]\
    \ = true\n\t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B + 1] = v\n\t\tk = k + 1\n\
    \tend\n\tlocal i = 1\n\twhile i <= n do\n\t\tlocal v = grid[i][k]\n\t\tif v ==\
    \ nil then\n\t\t\tbreak\n\t\tend\n\t\tvisited[v] = true\n\t\tlst_A[#lst_A + 1]\
    \ = v\n\t\tlst_B[#lst_B + 1] = v\n\t\ti = i + 1\n\tend\n\tlocal j = 1\n\twhile\
    \ j <= m do\n\t\tlocal v = grid[j][k]\n\t\tif v == nil then\n\t\t\tbreak\n\t\t\
    end\n\t\tvisited[v] = true\n\t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B + 1] =\
    \ v\n\t\tj = j + 1\n\tend\n\tlocal k = 1\n\twhile k <= n do\n\t\tlocal v = grid[j][k]\n\
    \t\tif v == nil then\n\t\t\tbreak\n\t\tend\n\t\tvisited[v] = true\n\t\tlst_A[#lst_A\
    \ + 1] = v\n\t\tlst_B[#lst_B + 1] = v\n\t\tk = k + 1\n\tend\n\tlocal i = 1\n\t\
    while i <= n do\n\t\tlocal v = grid[i][k]\n\t\tif v == nil then\n\t\t\tbreak\n\
    \t\tend\n\t\tvisited[v] = true\n\t\tlst_A[#lst_A + 1] = v\n\t\tlst_B[#lst_B +\
    \ 1] = v\n\t\ti = i + 1\n\tend\n\tlocal j = 1\n\twhile j <= m do\n\t\tlocal v\
    \ = grid[j][k]\n\t\tif v == nil then\n\t\t\tbreak\n\t\t", "  local lst_A, lst_B\
    \ = {}, {}\n  local visited = {}\n  local visited_count = 0\n  local visited_count_max\
    \ = math.max(#visited, k)\n  for i = 1, #grid do\n    visited[i] = false\n  end\n\
    \  visited[grid[1][1]] = true\n  visited_count = visited_count + 1\n  local index\
    \ = 1\n  while index <= visited_count_max do\n    local cell = {}\n    for i =\
    \ 1, #grid do\n      if visited[i] then\n        cell[i] = grid[i]\n      else\n\
    \        local neighbors = neighbors(grid, i)\n        for j = 1, #neighbors do\n\
    \          local neighbor = neighbors[j]\n          if not visited[neighbor] then\n\
    \            visited[neighbor] = true\n            visited_count = visited_count\
    \ + 1\n            lst_A[#lst_A + 1] = neighbor\n          end\n        end\n\
    \      end\n    end\n    index = index + 1\n  end\n  local lst_C = {}\n  for i\
    \ = 1, #lst_A do\n    local cell = {}\n    for j = 1, #grid do\n      if visited[j]\
    \ then\n        cell[j] = grid[j]\n      else\n        local neighbors = neighbors(grid,\
    \ j)\n        for k = 1, #neighbors do\n          local neighbor = neighbors[k]\n\
    \          if not visited[neighbor] then\n            visited[neighbor] = true\n\
    \            visited_count = visited_count + 1\n            lst_B[#lst_B + 1]\
    \ = neighbor\n          end\n        end\n      end\n    end\n    if #cell ==\
    \ k then\n      lst_C[#lst_C + 1] = cell\n    end\n  end\n  return lst_C\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, k\n\tfor i = 1, #grid do\n\t\tfor\
    \ j = 1, #grid[i] do\n\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\tend\n\tend\n\t\
    for i = 1, #grid do\n\t\tfor j = 1, #grid[i] do\n\t\t\tlst_B[#lst_B + 1] = grid[i][j]\n\
    \t\tend\n\tend\n\tlst_A = lst_A:sort()\n\tlst_B = lst_B:sort()\n\tlocal lst_C\
    \ = {}\n\tlocal lst_D = {}\n\tlocal lst_E = {}\n\tlocal lst_F = {}\n\tlocal lst_G\
    \ = {}\n\tlocal lst_H = {}\n\tlocal lst_I = {}\n\tlocal lst_J = {}\n\tlocal lst_K\
    \ = {}\n\tlocal lst_L = {}\n\tlocal lst_M = {}\n\tlocal lst_N = {}\n\tlocal lst_O\
    \ = {}\n\tlocal lst_P = {}\n\tlocal lst_Q = {}\n\tlocal lst_R = {}\n\tlocal lst_S\
    \ = {}\n\tlocal lst_T = {}\n\tlocal lst_U = {}\n\tlocal lst_V = {}\n\tlocal lst_W\
    \ = {}\n\tlocal lst_X = {}\n\tlocal lst_Y = {}\n\tlocal lst_Z = {}\n\tlocal lst_AA\
    \ = {}\n\tlocal lst_AB = {}\n\tlocal lst_AC = {}\n\tlocal lst_AD = {}\n\tlocal\
    \ lst_AE = {}\n\tlocal lst_AF = {}\n\tlocal lst_AG = {}\n\tlocal lst_AH = {}\n\
    \tlocal lst_AI = {}\n\tlocal lst_AJ = {}\n\tlocal lst_AK = {}\n\tlocal lst_AL\
    \ = {}\n\tlocal lst_AM = {}\n\tlocal lst_AN = {}\n\tlocal lst_AO = {}\n\tlocal\
    \ lst_AP = {}\n\tlocal lst_AQ = {}\n\tlocal lst_AR = {}\n\tlocal lst_AS = {}\n\
    \tlocal lst_AT = {}\n\tlocal lst_AU = {}\n\tlocal lst_AV = {}\n\tlocal lst_AW\
    \ = {}\n\tlocal lst_AX = {}\n\tlocal lst_AY = {}\n\tlocal lst_AZ = {}\n\tlocal\
    \ lst_BA = {}\n\tlocal lst_BB = {}\n\tlocal lst_BC = {}\n\tlocal lst_BD = {}\n\
    \tlocal lst_BE = {}\n\tlocal lst_BF = {}\n\tlocal lst_BG = {}\n\tlocal ", "\t\
    local lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j = 1\n\tlocal count\
    \ = 0\n\twhile i < #grid do\n\t\tlst_A[i] = grid[i][1]\n\t\tlst_B[i] = grid[i][1]\n\
    \t\ti = i + 1\n\t\tcount = count + 1\n\tend\n\twhile j < #grid do\n\t\tif lst_A[j]\
    \ < lst_B[j] then\n\t\t\tlst_A[j] = lst_B[j]\n\t\t\tcount = count + 1\n\t\tend\n\
    \t\tj = j + 1\n\tend\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i < #grid do\n\t\
    \tif lst_A[i] < lst_B[i] then\n\t\t\tans[i] = lst_A[i]\n\t\t\ti = i + 1\n\t\t\
    end\n\tend\n\treturn ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = 0\n\tlocal visited_count_max2\
    \ = 0\n\tlocal visited_count_max3 = 0\n\tlocal visited_count_max4 = 0\n\tlocal\
    \ visited_count_max5 = 0\n\tlocal visited_count_max6 = 0\n\tlocal visited_count_max7\
    \ = 0\n\tlocal visited_count_max8 = 0\n\tlocal visited_count_max9 = 0\n\tlocal\
    \ visited_count_max10 = 0\n\tlocal visited_count_max11 = 0\n\tlocal visited_count_max12\
    \ = 0\n\tlocal visited_count_max13 = 0\n\tlocal visited_count_max14 = 0\n\tlocal\
    \ visited_count_max15 = 0\n\tlocal visited_count_max16 = 0\n\tlocal visited_count_max17\
    \ = 0\n\tlocal visited_count_max18 = 0\n\tlocal visited_count_max19 = 0\n\tlocal\
    \ visited_count_max20 = 0\n\tlocal visited_count_max21 = 0\n\tlocal visited_count_max22\
    \ = 0\n\tlocal visited_count_max23 = 0\n\tlocal visited_count_max24 = 0\n\tlocal\
    \ visited_count_max25 = 0\n\tlocal visited_count_max26 = 0\n\tlocal visited_count_max27\
    \ = 0\n\tlocal visited_count_max28 = 0\n\tlocal visited_count_max29 = 0\n\tlocal\
    \ visited_count_max30 = 0\n\tlocal visited_count_max31 = 0\n\tlocal visited_count_max32\
    \ = 0\n\tlocal visited_count_max33 = 0\n\tlocal visited_count_max34 = 0\n\tlocal\
    \ visited_count_max35 = 0\n\tlocal visited_count_max36 = 0\n\tlocal visited_count_max37\
    \ = 0\n\tlocal visited_count_max38 = 0\n\tlocal visited_count_max39 = 0\n\tlocal\
    \ visited_count_max40 = 0\n\tlocal visited_count_max41 = 0\n\tlocal visited_count_max42\
    \ = 0\n\tlocal visited_count_max43 = 0\n\tlocal visited_count_max44 = 0\n\tlocal\
    \ visited_count_max45 = 0\n\tlocal visited_count_max46 = 0\n\tlocal visited_count_max47\
    \ = 0\n\tlocal visited_count_max48 = 0\n\tlocal visited_count_max49 = 0\n\tlocal\
    \ visited_count_max50 = 0\n\tlocal visited_count_max51 = 0\n\tlocal visited_count_max52\
    \ = 0\n\tlocal visited_count_max53 = 0\n\tlocal visited_count_max54 = 0\n\tlocal\
    \ visite", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\tlocal j =\
    \ 1\n\tlocal count = 0\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal\
    \ min_path = {}\n\tlocal min_path_count = 0\n\tlocal min_path_length = 0\n\tlocal\
    \ current_cell\n\tlocal current_cell_length\n\tlocal current_cell_length_count\n\
    \tlocal current_cell_length_index\n\tlocal current_cell_length_index2\n\tlocal\
    \ current_cell_length_index3\n\tlocal current_cell_length_index4\n\tlocal current_cell_length_index5\n\
    \tlocal current_cell_length_index6\n\tlocal current_cell_length_index7\n\tlocal\
    \ current_cell_length_index8\n\tlocal current_cell_length_index9\n\tlocal current_cell_length_index10\n\
    \tlocal current_cell_length_index11\n\tlocal current_cell_length_index12\n\tlocal\
    \ current_cell_length_index13\n\tlocal current_cell_length_index14\n\tlocal current_cell_length_index15\n\
    \tlocal current_cell_length_index16\n\tlocal current_cell_length_index17\n\tlocal\
    \ current_cell_length_index18\n\tlocal current_cell_length_index19\n\tlocal current_cell_length_index20\n\
    \tlocal current_cell_length_index21\n\tlocal current_cell_length_index22\n\tlocal\
    \ current_cell_length_index23\n\tlocal current_cell_length_index24\n\tlocal current_cell_length_index25\n\
    \tlocal current_cell_length_index26\n\tlocal current_cell_length_index27\n\tlocal\
    \ current_cell_length_index28\n\tlocal current_cell_length_index29\n\tlocal current_cell_length_index30\n\
    \tlocal current_cell_length_index31\n\tlocal current_cell_length_index32\n\tlocal\
    \ current_cell_length_index33\n\tlocal current_cell_length_index34\n\tlocal current_cell_length_index35\n\
    \tlocal current_cell_length_index36\n\tlocal current_cell_length_index37\n\tlocal\
    \ current_cell_length_index38\n\tlocal current_cell_length_index39\n\tlocal current_cell_length_index40\n\
    \tlocal current_cell_length_index41\n\tlocal current_cell_length_index42\n\tlocal\
    \ current_cell_length_index43\n\tlocal current_cell_length_index44\n\tlocal current_cell_length_index45\n\
    \tlocal current_cell_length_index46\n\tlocal current_cell_length_index47\n\tlocal\
    \ current_cell_length_index48\n\tlocal current_cell_length_index49\n\tlocal current_cell_length_index50\n\
    \tlocal current_cell_length_index51\n\tlocal current_cell_length_index52\n\tlocal\
    \ current_cell_length_index53\n\tlocal current_cell_length_index54\n\tlocal current_cell_",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal\
    \ i, j, k1, k2, k3, k4\n\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\t\
    local visited_lst, visited_lst_tmp = {}, {}\n\tlocal visited_lst_tmp = {}\n\t\
    local visited_lst_tmp2 = {}\n\tlocal visited_lst_tmp3 = {}\n\tlocal visited_lst_tmp4\
    \ = {}\n\tlocal visited_lst_tmp5 = {}\n\tlocal visited_lst_tmp6 = {}\n\tlocal\
    \ visited_lst_tmp7 = {}\n\tlocal visited_lst_tmp8 = {}\n\tlocal visited_lst_tmp9\
    \ = {}\n\tlocal visited_lst_tmp10 = {}\n\tlocal visited_lst_tmp11 = {}\n\tlocal\
    \ visited_lst_tmp12 = {}\n\tlocal visited_lst_tmp13 = {}\n\tlocal visited_lst_tmp14\
    \ = {}\n\tlocal visited_lst_tmp15 = {}\n\tlocal visited_lst_tmp16 = {}\n\tlocal\
    \ visited_lst_tmp17 = {}\n\tlocal visited_lst_tmp18 = {}\n\tlocal visited_lst_tmp19\
    \ = {}\n\tlocal visited_lst_tmp20 = {}\n\tlocal visited_lst_tmp21 = {}\n\tlocal\
    \ visited_lst_tmp22 = {}\n\tlocal visited_lst_tmp23 = {}\n\tlocal visited_lst_tmp24\
    \ = {}\n\tlocal visited_lst_tmp25 = {}\n\tlocal visited_lst_tmp26 = {}\n\tlocal\
    \ visited_lst_tmp27 = {}\n\tlocal visited_lst_tmp28 = {}\n\tlocal visited_lst_tmp29\
    \ = {}\n\tlocal visited_lst_tmp30 = {}\n\tlocal visited_lst_tmp31 = {}\n\tlocal\
    \ visited_lst_tmp32 = {}\n\tlocal visited_lst_tmp33 = {}\n\tlocal visited_lst_tmp34\
    \ = {}\n\tlocal visited_lst_tmp35 = {}\n\tlocal visited_lst_tmp36 = {}\n\tlocal\
    \ visited_lst_tmp37 = {}\n\tlocal visited_lst_tmp38 = {}\n\tlocal visited_lst_tmp39\
    \ = {}\n\tlocal visited_lst_tmp40 = {}\n\tlocal visited_lst_tmp41 = {}\n\tlocal\
    \ visited_lst_tmp42 = {}\n\tlocal visited_lst_tmp43 = {}\n\tlocal visited_lst_tmp",
  "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\
    \tlocal i = 1\n\twhile i <= n do\n\t\tlocal j = 1\n\t\twhile j <= m do\n\t\t\t\
    local value = grid[i][j]\n\t\t\tlocal key = math.abs(value)\n\t\t\tif key <= k\
    \ then\n\t\t\t\tlst_A[#lst_A + 1] = key\n\t\t\t\tlst_B[#lst_B + 1] = key\n\t\t\
    \telse\n\t\t\t\tbreak\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\ti = i + 1\n\t\
    end\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\treturn lst_A\nend", "  local\
    \ lst_A = {}\n  local lst_B = {}\n  local i = 1\n  for _, row in ipairs(grid)\
    \ do\n    for _, cell in ipairs(row) do\n      lst_A[i] = cell\n      lst_B[i]\
    \ = cell\n      i = i + 1\n    end\n  end\n  local j = 1\n  while j <= k do\n\
    \    local min_i = i\n    for i = i + 1, k do\n      if lst_A[i] < lst_B[i] then\n\
    \        min_i = i\n      end\n    end\n    i = min_i\n    j = j + 1\n  end\n\
    \  return lst_A\nend", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal i = 1\n\
    \tlocal j = 1\n\twhile i <= #grid do\n\t\tlocal value = grid[i]\n\t\tif value\
    \ == nil then\n\t\t\tbreak\n\t\tend\n\t\tlst_A[#lst_A + 1] = value\n\t\tlst_B[#lst_B\
    \ + 1] = value\n\t\ti = i + 1\n\tend\n\ti = k\n\twhile i <= #grid do\n\t\tlocal\
    \ value = grid[i]\n\t\tif value == nil then\n\t\t\tbreak\n\t\tend\n\t\tlocal j\
    \ = i - 1\n\t\twhile j >= 1 do\n\t\t\tif lst_A[j] > lst_A[j + 1] then\n\t\t\t\t\
    break\n\t\t\tend\n\t\t\tlst_A[#lst_A + 1] = lst_A[j]\n\t\t\tj = j - 1\n\t\tend\n\
    \t\tlst_B[#lst_B + 1] = value\n\t\ti = i + 1\n\tend\n\treturn lst_A\nend", " \
    \ local lst_A, lst_B = {}, {}\n  local i, j, val\n  for i = 1, #grid do\n    for\
    \ j = 1, #grid[1] do\n      val = grid[i][j]\n      if i == j then\n        lst_A[#lst_A\
    \ + 1] = val\n      else\n        lst_B[#lst_B + 1] = val\n      end\n    end\n\
    \  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n  for i =\
    \ 1, k do\n    local j = #lst_B\n    while j > 0 do\n      ans[#ans + 1] = lst_A[j]\n\
    \      j = j - 1\n    end\n  end\n  return ans\nend", "  local lst_A, lst_B =\
    \ {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  for i = 1, k do\n    local j = #lst_A\n    while j > 0 do\n      local k =\
    \ j - 1\n      while k >= 1 do\n        if lst_A[k] > lst_B[k] then\n        \
    \  local tmp = lst_A[k]\n          lst_A[k] = lst_B[k]\n          lst_B[k] = tmp\n\
    \        else\n          k = k - 1\n        end\n      end\n      j = j - 1\n\
    \    end\n    table.insert(ans, lst_A[1])\n  end\n  return ans\nend", "\tlocal\
    \ lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal i, j,\
    \ k\n\tlocal count = 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tif grid[i][j]\
    \ == grid[i][j] then\n\t\t\t\tlst_A[count] = grid[i][j]\n\t\t\t\tcount = count\
    \ + 1\n\t\t\tend\n\t\tend\n\tend\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\
    \tif grid[i][j] == grid[i][j] then\n\t\t\t\tlst_B[count] = grid[i][j]\n\t\t\t\t\
    count = count + 1\n\t\t\tend\n\t\tend\n\tend\n\tlst_A = lst_A[#lst_A]\n\tlst_B\
    \ = lst_B[#lst_B]\n\tlocal lst_C = {}\n\tlocal lst_D = {}\n\tlocal lst_E = {}\n\
    \tlocal lst_F = {}\n\tlocal lst_G = {}\n\tlocal lst_H = {}\n\tlocal lst_I = {}\n\
    \tlocal lst_J = {}\n\tlocal lst_K = {}\n\tlocal lst_L = {}\n\tlocal lst_M = {}\n\
    \tlocal lst_N = {}\n\tlocal lst_O = {}\n\tlocal lst_P = {}\n\tlocal lst_Q = {}\n\
    \tlocal lst_R = {}\n\tlocal lst_S = {}\n\tlocal lst_T = {}\n\tlocal lst_U = {}\n\
    \tlocal lst_V = {}\n\tlocal lst_W = {}\n\tlocal lst_X = {}\n\tlocal lst_Y = {}\n\
    \tlocal lst_Z = {}\n\tlocal lst_AA = {}\n\tlocal lst_AB = {}\n\tlocal lst_AC =\
    \ {}\n\tlocal lst_AD = {}\n\tlocal lst_AE = {}\n\tlocal lst_AF = {}\n\tlocal lst_AG\
    \ = {}\n\tlocal lst_AH = {}\n\tlocal lst_AI = {}\n\tlocal lst_AJ = {}\n\tlocal\
    \ lst_AK = {}\n\tlocal lst_AL = {}\n\tlocal lst_AM = {}\n\tlocal lst_AN = {}\n\
    \tlocal lst_AO = {}\n\tlocal lst_AP = {}\n\tlocal lst_AQ = {}\n\tlocal lst_AR\
    \ = {}\n\tlocal lst_AS = {}\n\tlocal lst_AT = {}\n\tlocal lst_AU = {}\n\tlocal\
    \ lst_AV = {}\n\tlocal lst_AW = {}\n\tlocal lst_AX = {}\n\tlocal lst_AY = {}\n\
    \tlocal lst_AZ = {}\n\tlocal lst_BA = {}\n\t", "\tlocal lst_A, lst_B = {}, {}\n\
    \tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_table = {}\n\t\
    local visited_table_count = 0\n\tlocal visited_table_count_max = 0\n\tlocal visited_table_count_max_index\
    \ = 0\n\tlocal visited_table_count_max_value = 0\n\tlocal visited_table_count_max_value_max\
    \ = 0\n\tlocal visited_table_count_max_value_max_index = 0\n\tlocal visited_table_count_max_value_max_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_index = 0\n\tlocal visited_table_count_max_value_max_value_index\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index = 0\n\tlocal visited_table_count_max_value_max_value_index_max\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value = 0\n\t\
    local visited_table_count_max_value_max_value_index_max_value_index = 0\n\tlocal\
    \ visited_table_count_max_value_max_value_index_max_value_index_value = 0\n\t\
    local visited_table_count_max_value_max_value_index_max_value_index_value_max\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max_value_index\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max_value_index_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max_value_index_value_max_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max_value_index_value_max_value_index_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max_value_index_value_max_value_index_value_max_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_value_max_value_index_value_max_value_index_value_max_value_index_value\
    \ = 0\n\tlocal visited_table_count_max_value_max_value_index_max_value_index_value_max_value_index_",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal\
    \ i, j, k\n\tlocal visited = {}\n\tlocal ans = {}\n\tfor i = 1, n do\n\t\tvisited[i]\
    \ = false\n\tend\n\tfor i = 1, n do\n\t\tlst_A[i] = grid[i][1]\n\tend\n\tfor j\
    \ = 1, m do\n\t\tlst_B[j] = grid[1][j]\n\tend\n\tvisited[1] = true\n\tvisited[2]\
    \ = true\n\tvisited[3] = true\n\tvisited[4] = true\n\tvisited[5] = true\n\tvisited[6]\
    \ = true\n\tvisited[7] = true\n\tvisited[8] = true\n\tvisited[9] = true\n\tvisited[10]\
    \ = true\n\tvisited[11] = true\n\tvisited[12] = true\n\tvisited[13] = true\n\t\
    visited[14] = true\n\tvisited[15] = true\n\tvisited[16] = true\n\tvisited[17]\
    \ = true\n\tvisited[18] = true\n\tvisited[19] = true\n\tvisited[20] = true\n\t\
    visited[21] = true\n\tvisited[22] = true\n\tvisited[23] = true\n\tvisited[24]\
    \ = true\n\tvisited[25] = true\n\tvisited[26] = true\n\tvisited[27] = true\n\t\
    visited[28] = true\n\tvisited[29] = true\n\tvisited[30] = true\n\tvisited[31]\
    \ = true\n\tvisited[32] = true\n\tvisited[33] = true\n\tvisited[34] = true\n\t\
    visited[35] = true\n\tvisited[36] = true\n\tvisited[37] = true\n\tvisited[38]\
    \ = true\n\tvisited[39] = true\n\tvisited[40] = true\n\tvisited[41] = true\n\t\
    visited[42] = true\n\tvisited[43] = true\n\tvisited[44] = true\n\tvisited[45]\
    \ = true\n\tvisited[46] = true\n\tvisited[47] = true\n\tvisited[48] = true\n\t\
    visited[49] = true\n\tvisited[52] = true\n\tvisited[53] = true\n\tvisited[54]\
    \ = true\n\tvisited[55] = true\n\tvisited[56] = true\n\tvisited[57] = true\n\t\
    visited[58] = true\n\tvisited[59] = true\n\tvisited[60] = true\n\tvisited[61]\
    \ = true\n\tvisited[62] = true\n\tvisite", "\tlocal lst_A, lst_B = {}, {}\n\t\
    local visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max = math.max(#visited,\
    \ k)\n\tfor i = 1, #grid do\n\t\tlocal cell = grid[i]\n\t\tif visited[cell] then\n\
    \t\t\tlst_A[visited_count] = cell\n\t\t\tlst_B[visited_count] = cell\n\t\t\tvisited_count\
    \ = visited_count + 1\n\t\t\tif visited_count == visited_count_max then\n\t\t\t\
    \tbreak\n\t\t\tend\n\t\telse\n\t\t\tvisited[cell] = true\n\t\t\tvisited_count\
    \ = visited_count + 1\n\t\t\tlst_A[visited_count] = cell\n\t\t\tlst_B[visited_count]\
    \ = cell\n\t\t\tif visited_count == visited_count_max then\n\t\t\t\tbreak\n\t\t\
    \tend\n\t\tend\n\tend\n\tlocal lst_A_sorted = table.sort(lst_A)\n\tlocal lst_B_sorted\
    \ = table.sort(lst_B)\n\tlocal lst_A_index = 1\n\tlocal lst_B_index = 1\n\tlocal\
    \ lst_A_count = #lst_A\n\tlocal lst_B_count = #lst_B\n\tlocal lst_A_count2 = lst_A_count\
    \ + 1\n\tlocal lst_B_count2 = lst_B_count + 1\n\tlocal lst_A_count3 = lst_A_count2\
    \ + 1\n\tlocal lst_B_count3 = lst_B_count2 + 1\n\tlocal lst_A_count4 = lst_A_count3\
    \ + 1\n\tlocal lst_B_count4 = lst_B_count3 + 1\n\tlocal lst_A_count5 = lst_A_count4\
    \ + 1\n\tlocal lst_B_count5 = lst_B_count4 + 1\n\tlocal lst_A_count6 = lst_A_count5\
    \ + 1\n\tlocal lst_B_count6 = lst_B_count5 + 1\n\tlocal lst_A_count7 = lst_A_count6\
    \ + 1\n\tlocal lst_B_count7 = lst_B_count6 + 1\n\tlocal lst_A_count8 = lst_A_count7\
    \ + 1\n\tlocal lst_B_count8 = lst_B_count7 + 1\n\tlocal lst_A_count9 = lst_A_count8\
    \ + 1\n\tlocal lst_B_count9 = lst_B_count8 + 1\n\tlocal lst_A_count10 = lst_A_count9\
    \ + 1\n\tlocal lst_B_count10 = lst_B_count9 + 1\n\tlocal lst_A_count11 = lst_A_count10\
    \ + 1\n\tlocal lst_B_count11 = lst_B_count10 + 1\n\tlocal l", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal i, j = 0, 0\n\tlocal count = 0\n\
    \twhile i < #grid do\n\t\tvisited[i] = true\n\t\tcount = count + 1\n\t\tlst_A[i]\
    \ = grid[i][1]\n\t\tlst_B[i] = grid[i][1]\n\t\ti = i + 1\n\tend\n\twhile j < #grid\
    \ do\n\t\tvisited[j] = true\n\t\tcount = count + 1\n\t\ti = j\n\t\tj = j + 1\n\
    \tend\n\twhile count < k do\n\t\ti = math.random(#visited)\n\t\tj = math.random(#visited)\n\
    \t\tif visited[i] == true and visited[j] == true then\n\t\t\tcount = count + 1\n\
    \t\t\tlst_A[i] = lst_A[i] + lst_A[j]\n\t\t\tlst_B[i] = lst_B[i] + lst_B[j]\n\t\
    \tend\n\tend\n\ttable.sort(lst_A)\n\ttable.sort(lst_B)\n\treturn lst_A\nend",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, k\n\tlocal n = #grid\n\tlocal m =\
    \ #grid[1]\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal visited_count = 0\n\
    \tlocal ans_count = 0\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tfor\
    \ i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tvisited[1] = true\n\tvisited_count\
    \ = 1\n\tfor i = 2, n do\n\t\tvisited[i] = false\n\tend\n\tvisited[n] = true\n\
    \tvisited_count = n + 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\t\
    visited[1] = true\n\tvisited_count = 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\
    \tend\n\tvisited[n] = true\n\tvisited_count = n + 1\n\tfor i = 1, n do\n\t\tvisited[i]\
    \ = false\n\tend\n\tvisited[1] = true\n\tvisited_count = 1\n\tfor i = 1, n do\n\
    \t\tvisited[i] = false\n\tend\n\tvisited[n] = true\n\tvisited_count = n + 1\n\t\
    for i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tvisited[1] = true\n\tvisited_count\
    \ = 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tvisited[n] = true\n\
    \tvisited_count = n + 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\t\
    visited[1] = true\n\tvisited_count = 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\
    \tend\n\tvisited[n] = true\n\tvisited_count = n + 1\n\tfor i = 1, n do\n\t\tvisited[i]\
    \ = false\n\tend\n\tvisited[1] = true\n\tvisited_count = 1\n\tfor i = 1, n do\n\
    \t\tvisited[i] = false\n\tend\n\tvisited[n] = true\n\tvisited_count = n + 1\n\t\
    for i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tvisited[1] = true\n\tvisited_count\
    \ = 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tvisited[n] = true\n\
    \tvisited_count = n + 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\t\
    visited[1] = true\n\tvisited_count = 1\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\
    \tend\n\tvisited[n] = true\n\tvisite", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\
    \tlocal index = 1\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_index\
    \ = {}\n\tlocal visited_index[1] = 1\n\tlocal visited_index[2] = 2\n\tlocal visited_index[3]\
    \ = 3\n\tlocal visited_index[4] = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6]\
    \ = 6\n\tlocal visited_index[7] = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9]\
    \ = 9\n\tlocal visited_index[10] = 10\n\tlocal visited_index[11] = 11\n\tlocal\
    \ visited_index[12] = 12\n\tlocal visited_index[13] = 13\n\tlocal visited_index[14]\
    \ = 14\n\tlocal visited_index[15] = 15\n\tlocal visited_index[16] = 16\n\tlocal\
    \ visited_index[17] = 17\n\tlocal visited_index[18] = 18\n\tlocal visited_index[19]\
    \ = 19\n\tlocal visited_index[20] = 20\n\tlocal visited_index[21] = 21\n\tlocal\
    \ visited_index[22] = 22\n\tlocal visited_index[23] = 23\n\tlocal visited_index[24]\
    \ = 24\n\tlocal visited_index[25] = 25\n\tlocal visited_index[26] = 26\n\tlocal\
    \ visited_index[27] = 27\n\tlocal visited_index[28] = 28\n\tlocal visited_index[29]\
    \ = 29\n\tlocal visited_index[30] = 30\n\tlocal visited_index[31] = 31\n\tlocal\
    \ visited_index[32] = 32\n\tlocal visited_index[33] = 33\n\tlocal visited_index[34]\
    \ = 34\n\tlocal visited_index[35] = 35\n\tlocal visited_index[36] = 36\n\tlocal\
    \ visited_index[37] = 37\n\tlocal visited_index[38] = 38\n\tlocal visited_index[39]\
    \ = 39\n\tlocal visited_index[40] = 40\n\tlocal visited_index[41] = 41\n\tlocal\
    \ visited_index[42] = 42\n\tlocal visited_index[43] = 43\n\tlocal visited_index[44]\
    \ = 44\n\tlocal visited_index[45] = 45\n\tlocal visited_index[46] = 46\n\tlocal\
    \ visited_index[47] = 47\n\tlocal visited_index[48] = 48\n\tlocal visited_index[49]\
    \ = ", "\tlocal lst_A, lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count\
    \ = 0\n\tlocal count = 0\n\tlocal index = 1\n\tlocal visited_index = {}\n\tlocal\
    \ visited_index_count = 0\n\tlocal current_cell\n\tlocal current_cell_val\n\t\
    local current_cell_val_count\n\tlocal current_cell_val_count2\n\tlocal current_cell_val_count3\n\
    \tlocal current_cell_val_count4\n\tlocal current_cell_val_count5\n\tlocal current_cell_val_count6\n\
    \tlocal current_cell_val_count7\n\tlocal current_cell_val_count8\n\tlocal current_cell_val_count9\n\
    \tlocal current_cell_val_count10\n\tlocal current_cell_val_count11\n\tlocal current_cell_val_count12\n\
    \tlocal current_cell_val_count13\n\tlocal current_cell_val_count14\n\tlocal current_cell_val_count15\n\
    \tlocal current_cell_val_count16\n\tlocal current_cell_val_count17\n\tlocal current_cell_val_count18\n\
    \tlocal current_cell_val_count19\n\tlocal current_cell_val_count20\n\tlocal current_cell_val_count21\n\
    \tlocal current_cell_val_count22\n\tlocal current_cell_val_count23\n\tlocal current_cell_val_count24\n\
    \tlocal current_cell_val_count25\n\tlocal current_cell_val_count26\n\tlocal current_cell_val_count27\n\
    \tlocal current_cell_val_count28\n\tlocal current_cell_val_count29\n\tlocal current_cell_val_count30\n\
    \tlocal current_cell_val_count31\n\tlocal current_cell_val_count32\n\tlocal current_cell_val_count33\n\
    \tlocal current_cell_val_count34\n\tlocal current_cell_val_count35\n\tlocal current_cell_val_count36\n\
    \tlocal current_cell_val_count37\n\tlocal current_cell_val_count38\n\tlocal current_cell_val_count39\n\
    \tlocal current_cell_val_count40\n\tlocal current_cell_val_count41\n\tlocal current_cell_val_count42\n\
    \tlocal current_cell_val_count43\n\tlocal current_cell_val_count44\n\tlocal current_cell_val_count45\n\
    \tlocal current_cell_val_count46\n\tlocal current_cell_val_count47\n\tlocal current_cell_val_count48\n\
    \tlocal current_cell_val_count49\n\tlocal current_cell_val_count50\n\tlocal current_cell_val_count51\n\
    \tlocal current_cell_val_count52\n\tlocal current_cell_val_count53\n\tlocal current_cell_val_count54\n\
    \tlocal current_cell_val_count55\n\tlocal current_cell_val_count56\n\tlocal current_cell_val_count57",
  "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal m = #grid[1]\n\tlocal\
    \ i, j, k\n\tlocal visited = {}\n\tlocal ans = {}\n\tlocal visited_lst, ans_lst\
    \ = {}, {}\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tfor i = 1, n do\n\
    \t\tvisited_lst[i] = false\n\tend\n\tfor i = 1, n do\n\t\tans[i] = grid[i]\n\t\
    end\n\tvisited[n] = true\n\tans[n] = grid[n]\n\tvisited_lst[n] = true\n\tans_lst[n]\
    \ = grid[n]\n\tfor i = 1, n do\n\t\tvisited[i] = false\n\tend\n\tfor i = 1, n\
    \ do\n\t\tvisited_lst[i] = false\n\tend\n\tfor i = 1, n do\n\t\tvisited[i] = true\n\
    \tend\n\tfor i = 1, n do\n\t\tvisited_lst[i] = true\n\tend\n\twhile k ~= 0 do\n\
    \t\tk = k - 1\n\t\ti = k\n\t\tj = k\n\t\twhile i ~= 1 do\n\t\t\ti = i - 1\n\t\t\
    \tj = j - 1\n\t\t\tif visited[i] and visited[j] then\n\t\t\t\tk = k - 1\n\t\t\t\
    \ti = k\n\t\t\t\tj = k\n\t\t\telseif visited[i] then\n\t\t\t\tvisited_lst[i] =\
    \ true\n\t\t\t\tk = k - 1\n\t\t\t\ti = k\n\t\t\telseif visited[j] then\n\t\t\t\
    \tvisited_lst[j] = true\n\t\t\t\tk = k - 1\n\t\t\t\tj = k\n\t\t\telseif visited_lst[i]\
    \ and visited_lst[j] then\n\t\t\t\tk = k - 1\n\t\t\t\ti = k\n\t\t\t\tj = k\n\t\
    \t\telseif visited_lst[i] then\n\t\t\t\tvisited_lst[i] = true\n\t\t\t\tk = k -\
    \ 1\n\t\t\t\ti = k\n\t\t\telseif visited_lst[j] then\n\t\t\t\tvisited_lst[j] =\
    \ true\n\t\t\t\tk = k - 1\n\t\t\t\tj = k\n\t\t\telse\n\t\t\t\tvisited_lst[i] =\
    \ true\n\t\t\t\tvisited_lst[j] = true\n\t\t\t\tk = k - 1\n\t\t\t\ti = k\n\t\t\t\
    \tj = k\n\t\t\tend\n\t\tend\n\t\tif visited[i] then\n\t\t\tvisited_lst[i] = true\n\
    \t\telseif visited[j] then\n\t\t\tvisited_lst[j] = true\n\t\telse\n\t\t\tvisited_lst[i]\
    \ = true\n\t\t\tvisited_lst[j] = true\n\t\tend\n\t\tif visited_lst[i] then\n\t\
    \t\tlst_A[#lst_A + 1] = ans[i]\n\t\t\tans[i] = grid[i]\n\t\telseif visited_lst[j]\
    \ then\n\t\t\tlst_", "\tlocal lst_A, lst_B = unpack(grid) -- unpack grid\n\tlocal\
    \ n = #lst_A -- number of rows\n\tlocal m = #lst_B -- number of columns\n\tlocal\
    \ i, j, k -- iterators\n\tlocal ans = {} -- answer\n\t\n\t-- initialize ans table\n\
    \tfor i = 1, n do\n\t\tans[i] = {}\n\t\tfor j = 1, m do\n\t\t\tans[i][j] = 0\n\
    \t\tend\n\tend\n\t\n\t-- initialize iterators\n\ti = 1 -- row index\n\tj = 1 --\
    \ column index\n\tk = 1 -- path index\n\t\n\t-- while there are still cells to\
    \ visit\n\twhile i <= n and j <= m do\n\t\t-- if current cell is visited before,\
    \ skip it\n\t\tif ans[i][j] ~= 0 then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\t\
    k = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i < n and j > m then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\
    \tk = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i < n and j < m then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\
    \tk = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i > n and j < m then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\
    \tk = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i > n and j > m then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\
    \tk = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i < n and j > m then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\
    \tk = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i > n and j < m then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\
    \tk = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i > n and j < m then\n\t\t\ti = i + 1\n\t\t\tj = j + 1\n\t\t\
    \tk = k + 1\n\t\t\tcontinue\n\t\tend\n\t\t\n\t\t-- if current cell is out of bounds,\
    \ skip it\n\t\tif i < n and j > m then\n\t\t\ti = i + 1\n\t\t\t", "\tlocal lst_A\
    \ = {}\n\tlocal lst_B = {}\n\tlocal n = 0\n\tlocal m = #grid\n\tlocal i = 1\n\t\
    local j = 1\n\twhile i <= m do\n\t\twhile j <= n do\n\t\t\tif grid[i][j] == grid[i][j\
    \ + 1] then\n\t\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\t\t\tlst_B[#lst_B + 1]\
    \ = grid[i][j + 1]\n\t\t\t\tj = j + 1\n\t\t\telseif grid[i][j] == grid[i][j -\
    \ 1] then\n\t\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\t\t\tlst_B[#lst_B + 1] =\
    \ grid[i][j - 1]\n\t\t\t\tj = j - 1\n\t\t\telseif grid[i][j] == grid[i + 1][j]\
    \ then\n\t\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\t\t\tlst_B[#lst_B + 1] = grid[i\
    \ + 1][j]\n\t\t\t\ti = i + 1\n\t\t\telseif grid[i][j] == grid[i - 1][j] then\n\
    \t\t\t\tlst_A[#lst_A + 1] = grid[i][j]\n\t\t\t\tlst_B[#lst_B + 1] = grid[i - 1][j]\n\
    \t\t\t\ti = i - 1\n\t\t\telse\n\t\t\t\tj = j + 1\n\t\t\tend\n\t\tend\n\t\tn =\
    \ n + 1\n\t\ti = i + 1\n\tend\n\tlocal ans = {}\n\tlocal i = 1\n\twhile i <= k\
    \ do\n\t\tif lst_A[i] < lst_B[i] then\n\t\t\tans[#ans + 1] = lst_A[i]\n\t\telse\n\
    \t\t\tans[#ans + 1] = lst_B[i]\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn ans\n\
    end", "\tlocal lst_A, lst_B = {}, {}\n\tlocal i, j, n = unpack(grid)\n\tlocal\
    \ visited = {}\n\tlocal visited_count = 0\n\tlocal visited_table = {}\n\tfor i\
    \ = 1, n do\n\t\tvisited_table[i] = true\n\t\tvisited[i] = visited_count\n\t\t\
    visited_count = visited_count + 1\n\tend\n\tfor i = 1, n do\n\t\tlocal count =\
    \ 0\n\t\tlocal j = 0\n\t\twhile j < n do\n\t\t\tif visited[j] == visited_count\
    \ then\n\t\t\t\tcount = count + 1\n\t\t\telseif visited[j] < visited_count then\n\
    \t\t\t\tcount = count + 1\n\t\t\telse\n\t\t\t\tcount = count + 1\n\t\t\t\tvisited_count\
    \ = visited_count + 1\n\t\t\t\tvisited_table[j] = visited_count\n\t\t\t\tvisited[j]\
    \ = visited_count\n\t\t\tend\n\t\t\tj = j + 1\n\t\tend\n\t\tif count > k then\n\
    \t\t\tlst_A[count] = i\n\t\telse\n\t\t\tlst_B[count] = i\n\t\tend\n\tend\n\ttable.sort(lst_A,\
    \ function(a, b) return lst_A[a] < lst_A[b] end)\n\ttable.sort(lst_B, function(a,\
    \ b) return lst_B[a] < lst_B[b] end)\n\treturn lst_A\nend", "  local lst_A, lst_B\
    \ = {}, {}\n  for i = 1, #grid do\n    table.insert(lst_A, grid[i])\n    table.insert(lst_B,\
    \ grid[i])\n  end\n  table.sort(lst_A)\n  table.sort(lst_B)\n  local ans = {}\n\
    \  local visited = {}\n  local stack = {}\n  local visited_stack = {}\n  local\
    \ i = 1\n  while i <= k do\n    local a = lst_A[i]\n    local b = lst_B[i]\n \
    \   local stack_index = 1\n    local visited_stack_index = 1\n    while stack_index\
    \ <= #stack do\n      local c = stack[stack_index]\n      local d = visited[visited_stack_index]\n\
    \      if c == d then\n        stack_index = stack_index + 1\n      else\n   \
    \     visited_stack_index = visited_stack_index + 1\n      end\n    end\n    visited[visited_stack_index]\
    \ = a\n    stack[#stack + 1] = a\n    i = i + 1\n  end\n  local j = 1\n  while\
    \ j <= #visited do\n    local c = visited[j]\n    local d = lst_A[j]\n    if c\
    \ < d then\n      table.insert(ans, c)\n    end\n    j = j + 1\n  end\n  return\
    \ ans\nend", "\tlocal lst_A, lst_B = {}, {}\n\tfor i, row in ipairs(grid) do\n\
    \t\tfor j, value in ipairs(row) do\n\t\t\tlst_A[value] = lst_A[value] or {}\n\t\
    \t\tlst_B[value] = lst_B[value] or {}\n\t\t\tlst_A[value][#lst_A[value] + 1] =\
    \ j\n\t\t\tlst_B[value][#lst_B[value] + 1] = j\n\t\tend\n\tend\n\tlocal ans =\
    \ {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_count_max\
    \ = 0\n\tlocal visited_count_min = 0\n\tlocal visited_count_max = #lst_A\n\tlocal\
    \ visited_count_min = #lst_B\n\tlocal visited_count_min = #lst_A\n\tlocal visited_count_min\
    \ = #lst_B\n\tlocal visited_count_max = #lst_A\n\tlocal visited_count_min = #lst_B\n\
    \tlocal visited_count_min = #lst_A\n\tlocal visited_count_max = #lst_A\n\tlocal\
    \ visited_count_min = #lst_B\n\tlocal visited_count_max = #lst_A\n\tlocal visited_count_min\
    \ = #lst_B\n\tlocal visited_count_max = #lst_A\n\tlocal visited_count_min = #lst_B\n\
    \tlocal visited_count_max = #lst_A\n\tlocal visited_count_min = #lst_B\n\tlocal\
    \ visited_count_max = #lst_A\n\tlocal visited_count_min = #lst_B\n\tlocal visited_count_max\
    \ = #lst_A\n\tlocal visited_count_min = #lst_B\n\tlocal visited_count_max = #lst_A\n\
    \tlocal visited_count_min = #lst_B\n\tlocal visited_count_max = #lst_A\n\tlocal\
    \ visited_count_min = #lst_B\n\tlocal visited_count_max = #lst_A\n\tlocal visited_count_min\
    \ = #lst_B\n\tlocal visited_count_max = #lst_A\n\tlocal visited_count_min = #lst_B\n\
    \tlocal visited_count_max = #lst_A\n\tlocal visited_count_min = #lst_B\n\tlocal\
    \ visited_count_max = #lst_A\n\tlocal visited_count_min = #lst_B\n\tlocal visited_count_max\
    \ = #lst_A\n\tlocal visited_count_min = #lst_B\n\tlocal visited_count_max = #lst_A\n\
    \t", "\tlocal lst_A = {}\n\tlocal lst_B = {}\n\tlocal index = 1\n\tlocal visited\
    \ = {}\n\tlocal visited_count = 0\n\tlocal visited_index = {}\n\tlocal visited_index[1]\
    \ = 1\n\tlocal visited_index[2] = 2\n\tlocal visited_index[3] = 3\n\tlocal visited_index[4]\
    \ = 4\n\tlocal visited_index[5] = 5\n\tlocal visited_index[6] = 6\n\tlocal visited_index[7]\
    \ = 7\n\tlocal visited_index[8] = 8\n\tlocal visited_index[9] = 9\n\tlocal visited_index[10]\
    \ = 10\n\tlocal visited_index[11] = 11\n\tlocal visited_index[12] = 12\n\tlocal\
    \ visited_index[13] = 13\n\tlocal visited_index[14] = 14\n\tlocal visited_index[15]\
    \ = 15\n\tlocal visited_index[16] = 16\n\tlocal visited_index[17] = 17\n\tlocal\
    \ visited_index[18] = 18\n\tlocal visited_index[19] = 19\n\tlocal visited_index[20]\
    \ = 20\n\tlocal visited_index[21] = 21\n\tlocal visited_index[22] = 22\n\tlocal\
    \ visited_index[23] = 23\n\tlocal visited_index[24] = 24\n\tlocal visited_index[25]\
    \ = 25\n\tlocal visited_index[26] = 26\n\tlocal visited_index[27] = 27\n\tlocal\
    \ visited_index[28] = 28\n\tlocal visited_index[29] = 29\n\tlocal visited_index[30]\
    \ = 30\n\tlocal visited_index[31] = 31\n\tlocal visited_index[32] = 32\n\tlocal\
    \ visited_index[33] = 33\n\tlocal visited_index[34] = 34\n\tlocal visited_index[35]\
    \ = 35\n\tlocal visited_index[36] = 36\n\tlocal visited_index[37] = 37\n\tlocal\
    \ visited_index[38] = 38\n\tlocal visited_index[39] = 39\n\tlocal visited_index[40]\
    \ = 40\n\tlocal visited_index[41] = 41\n\tlocal visited_index[42] = 42\n\tlocal\
    \ visited_index[43] = 43\n\tlocal visited_index[44] = 44\n\tlocal visited_index[45]\
    \ = 45\n\tlocal visited_index[46] = 46\n\tlocal visited_index[47] = 47\n\tlocal\
    \ visited_index[48] = 48\n\tlocal visited_index[49] = ", "  local lst_A = {}\n\
    \  local lst_B = {}\n  local i = 1\n  local j = 1\n  local cnt = 0\n  local visited\
    \ = {}\n  local ans = {}\n  while i <= #grid do\n    visited[i] = false\n    ans[i]\
    \ = grid[i]\n    i = i + 1\n  end\n  while j <= #grid do\n    visited[j] = false\n\
    \    j = j + 1\n  end\n  while i <= #grid do\n    while j <= #grid do\n      if\
    \ visited[i] == false then\n        if grid[i][j] == grid[i][j + 1] then\n   \
    \       lst_A[cnt] = grid[i][j]\n          lst_B[cnt] = grid[i][j + 1]\n     \
    \     cnt = cnt + 1\n        end\n      end\n      if visited[j] == false then\n\
    \        if grid[i][j] == grid[i + 1][j] then\n          lst_A[cnt] = grid[i][j]\n\
    \          lst_B[cnt] = grid[i + 1][j]\n          cnt = cnt + 1\n        end\n\
    \      end\n      if visited[i] == false and visited[j] == false then\n      \
    \  if grid[i][j] == grid[i + 1][j + 1] then\n          lst_A[cnt] = grid[i][j]\n\
    \          lst_B[cnt] = grid[i + 1][j + 1]\n          cnt = cnt + 1\n        end\n\
    \      end\n      if visited[i] == false and visited[j] == false then\n      \
    \  if grid[i][j] == grid[i + 1][j + 1] then\n          lst_A[cnt] = grid[i][j]\n\
    \          lst_B[cnt] = grid[i + 1][j + 1]\n          cnt = cnt + 1\n        end\n\
    \      end\n      if visited[i] == false and visited[j] == false then\n      \
    \  if grid[i][j] == grid[i + 1][j] then\n          lst_A[cnt] = grid[i][j]\n \
    \         lst_B[cnt] = grid[i + 1][j]\n          cnt = cnt + 1\n        end\n\
    \      end\n      if visited[i] == false and visited[j] == false then\n      \
    \  if grid[i][j] == grid[i][j + 1] then\n          lst_A[cnt] = grid[i][j]\n \
    \         lst_B[cnt] = grid[i][j + 1]\n          cnt = cnt + 1\n        end\n\
    \      end\n      if visited[i] == false and visited[j] == false then\n      \
    \  if grid[i][j] == grid[i][j + 1] then\n          lst_A[cnt] = grid[i][j]\n \
    \         lst_B[cnt] = grid[i][j + 1]\n          cnt = cnt + 1\n        end\n\
    \      end\n      if visited[i] == false and visited[j] == false then\n      \
    \  if grid[i][j] == grid[i][j + 1]", "\tlocal lst_A, lst_B = unpack(grid) -- unpack\
    \ lst_A and lst_B as tables of values\n\tlocal i, j, count = 1, k, 0 -- initialize\
    \ i and j to 1 and k to 0\n\twhile i <= #lst_A do -- while i is less than the\
    \ length of lst_A\n\t\tj = 1 -- initialize j to 1\n\t\twhile j <= #lst_B do --\
    \ while j is less than the length of lst_B\n\t\t\tif lst_A[i] < lst_B[j] then\
    \ -- if lst_A[i] is less than lst_B[j]\n\t\t\t\tcount = count + 1 -- increment\
    \ count\n\t\t\t\tlst_A[i], lst_A[j] = lst_A[j], lst_A[i] -- swap lst_A[i] and\
    \ lst_A[j]\n\t\t\tend\n\t\t\tj = j + 1 -- increment j\n\t\tend\n\t\ti = i + 1\
    \ -- increment i\n\tend\n\treturn unpack(lst_A) -- return the ordered table of\
    \ values on the cells that the minimum path go through\nend", "\tlocal lst_A,\
    \ lst_B = {}, {}\n\tlocal visited = {}\n\tlocal visited_count = 0\n\tlocal visited_max\
    \ = 0\n\tlocal visited_max_count = 0\n\tlocal visited_max_value = 0\n\tlocal visited_max_index\
    \ = 0\n\tlocal visited_max_index2 = 0\n\tlocal visited_max_index3 = 0\n\tlocal\
    \ visited_max_index4 = 0\n\tlocal visited_max_index5 = 0\n\tlocal visited_max_index6\
    \ = 0\n\tlocal visited_max_index7 = 0\n\tlocal visited_max_index8 = 0\n\tlocal\
    \ visited_max_index9 = 0\n\tlocal visited_max_index10 = 0\n\tlocal visited_max_index11\
    \ = 0\n\tlocal visited_max_index12 = 0\n\tlocal visited_max_index13 = 0\n\tlocal\
    \ visited_max_index14 = 0\n\tlocal visited_max_index15 = 0\n\tlocal visited_max_index16\
    \ = 0\n\tlocal visited_max_index17 = 0\n\tlocal visited_max_index18 = 0\n\tlocal\
    \ visited_max_index19 = 0\n\tlocal visited_max_index20 = 0\n\tlocal visited_max_index21\
    \ = 0\n\tlocal visited_max_index22 = 0\n\tlocal visited_max_index23 = 0\n\tlocal\
    \ visited_max_index24 = 0\n\tlocal visited_max_index25 = 0\n\tlocal visited_max_index26\
    \ = 0\n\tlocal visited_max_index27 = 0\n\tlocal visited_max_index28 = 0\n\tlocal\
    \ visited_max_index29 = 0\n\tlocal visited_max_index30 = 0\n\tlocal visited_max_index31\
    \ = 0\n\tlocal visited_max_index32 = 0\n\tlocal visited_max_index33 = 0\n\tlocal\
    \ visited_max_index34 = 0\n\tlocal visited_max_index35 = 0\n\tlocal visited_max_index36\
    \ = 0\n\tlocal visited_max_index37 = 0\n\tlocal visited_max_index38 = 0\n\tlocal\
    \ visited_max_index39 = 0\n\tlocal visited_max_index40 = 0\n\tlocal visited_max_index41\
    \ = 0\n\tlocal visited_max_index42 = 0\n\tlocal visited_max_index43 = 0\n\tlocal\
    \ visited_max_index44 = 0\n\tlocal visited_max_index45 = 0\n\tlocal visited_max_index46\
    \ = 0\n\tlocal visited_max_index47 = 0\n\tlocal visited_max_index48 = 0\n\tlocal\
    \ visited_max_index49 = 0\n\tlocal visited_max_index50 = 0\n\tlocal visited_max_index51\
    \ = 0\n\tlocal visited_max_index52 = 0", "\tlocal lst_A = {}\n\tlocal lst_B =\
    \ {}\n\tlocal i = 1\n\tlocal j = 1\n\twhile i <= k and j <= k do\n\t\tlst_A[i]\
    \ = grid[i][j]\n\t\tlst_B[j] = grid[i][j]\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\
    \ti = k\n\tj = k\n\twhile i <= j do\n\t\tif lst_A[i] > lst_B[j] then\n\t\t\tlst_A[i],\
    \ lst_B[j] = lst_B[j], lst_A[i]\n\t\tend\n\t\ti = i + 1\n\t\tj = j + 1\n\tend\n\
    \treturn lst_A\nend", "\tlocal lst_A, lst_B = {}, {}\n\tlocal n = #grid\n\tlocal\
    \ m = #grid[1]\n\tlocal i, j, k\n\t\n\t-- Construct the ordered tables of the\
    \ values on the cells that go through\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\
    \t\t\tlst_A[grid[i][j]] = lst_A[grid[i][j]] or {}\n\t\t\tlst_B[grid[i][j]] = lst_B[grid[i][j]]\
    \ or {}\n\t\t\tlst_A[grid[i][j]][#lst_A[grid[i][j]] + 1] = i\n\t\t\tlst_B[grid[i][j]][#lst_B[grid[i][j]]\
    \ + 1] = j\n\t\tend\n\tend\n\t\n\t-- Find the minimum path through lst_A and lst_B\n\
    \tlocal min_path = {}\n\tlocal min_path_len = 0\n\tlocal min_path_len_index =\
    \ 0\n\tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tk = #lst_A[grid[i][j]]\n\t\t\
    \tif k > min_path_len then\n\t\t\t\tmin_path_len = k\n\t\t\t\tmin_path_len_index\
    \ = grid[i][j]\n\t\t\tend\n\t\tend\n\tend\n\t\n\t-- Construct the ordered tables\
    \ of the values on the cells that go through\n\tfor i = 1, n do\n\t\tfor j = 1,\
    \ m do\n\t\t\tlst_A[grid[i][j]] = lst_A[grid[i][j]] or {}\n\t\t\tlst_B[grid[i][j]]\
    \ = lst_B[grid[i][j]] or {}\n\t\t\tlst_A[grid[i][j]][#lst_A[grid[i][j]] + 1] =\
    \ i\n\t\t\tlst_B[grid[i][j]][#lst_B[grid[i][j]] + 1] = j\n\t\tend\n\tend\n\t\n\
    \t-- Construct the ordered tables of the values on the cells that go through\n\
    \tfor i = 1, n do\n\t\tfor j = 1, m do\n\t\t\tlst_A[grid[i][j]] = lst_A[grid[i][j]]\
    \ or {}\n\t\t\tlst_B[grid[i][j]] = lst_B[grid[i][j]] or {}\n\t\t\tlst_A[grid[i][j]][#lst_A[grid[i][j]]\
    \ + 1] = i\n\t\t\tlst_B[grid[i][j]][#lst_B[grid[i][j]] + 1] = j\n\t\tend\n\tend\n\
    \t\n\t-- Find the minimum path through lst_A and lst_B\n\tlocal min_path = {}\n\
    \tlocal min_path_len = 0\n\tlocal min_path_len_index = 0\n\tfor i = 1, n do\n\t\
    \tfor j = 1, m do\n"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
