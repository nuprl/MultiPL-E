language: lua
name: HumanEval_10_make_palindrome
results:
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty, return\
    \ empty string.\n  if string == '' then\n    return ''\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps52axv9a.lua:27: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  local palindrome_postfix_reverse = ''\n\
    \  local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n  while\
    \ palindrome_postfix_length > 1 do\n    local postfix_length = palindrome_length\
    \ - palindrome_postfix_length\n    local postfix_reverse = palindrome_postfix_reverse\n\
    \    local postfix_reverse_length = #postfix_reverse\n    local postfix_reverse_suffix\
    \ = ''\n    local postfix_reverse_suffix_length = #postfix_reverse_suffix\n  \
    \  while postfix_reverse_suffix_length > 1 do\n      local postfix_reverse_suffix\
    \ = postfix_reverse .. postfix_reverse_suffix\n      local postfix_reverse_suffix_length\
    \ = #postfix_reverse_suffix\n      local postfix_reverse_suffix_reverse = postfix_reverse_suffix\n\
    \      local postfix_reverse_suffix_reverse_length = #postfix_reverse_suffix_reverse\n\
    \      while postfix_reverse_suffix_reverse_length > 1 do\n        local postfix_reverse_suffix_reverse\
    \ = postfix_reverse_suffix_reverse .. postfix_reverse_suffix_reverse\n       \
    \ local postfix_reverse_suffix_reverse_length = #postfix_reverse_suffix_reverse\n\
    \        local postfix_reverse_suffix_reverse_suffix = postfix_reverse_suffix_reverse\n\
    \        local postfix_reverse_suffix_reverse_suffix_length = #postfix_reverse_suffix_reverse_suffix\n\
    \        while postfix_reverse_suffix_reverse_suffix_length > 1 do\n         \
    \ local postfix_reverse_suffix_reverse_suffix = postfix_reverse_suffix_reverse_suffix\
    \ .. postfix_reverse_suffix_reverse_suffix\n          local postfix_reverse_suffix_reverse_suffix_length\
    \ = #postfix_reverse_suffix_reverse_suffix\n          local postfix_reverse_suffix_reverse_suffix_reverse\
    \ = postfix_reverse_suffix_reverse_suffix\n          local postfix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #postfix_reverse_suffix_reverse_suffix_reverse\n          while postfix_reverse_suffix_reverse_suffix_reverse_length\
    \ > 1 do\n            local postfix_reverse_suffix_reverse_suffix_reverse = postfix_reverse_suffix_reverse_suffix_reverse\
    \ .. postfix_reverse_suffix_reverse_suffix_reverse\n            local postfix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #postfix_reverse_suffix_reverse_suffix_reverse\n            local postfix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = postfix_reverse_suffix_reverse_suffix_reverse\n            local postfix_reverse_suffix_reverse_suffix_reverse_suffix_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2acytf01.lua:55: ''end'' expected (to close ''while'' at line
    39) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix, longestPostfix = longestPalindrome(string)\n  if longest == nil\
    \ then return string end\n  local reverse = string.gsub(longestPostfix, \"^\"\
    , longestPrefix)\n  return reverse..string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr_pa3ql7.lua:12:\
    \ attempt to call global 'longestPalindrome' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpr_pa3ql7.lua:12: in function 'candidate'\n\t/tmp/tmpr_pa3ql7.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 1\n  local longest_postfix_index =\
    \ 1\n  local longest_postfix_string = ''\n  while true do\n    local postfix_length\
    \ = #reversed_string - longest_postfix_index - 1\n    if postfix_length == 0 then\n\
    \      break\n    end\n    local postfix_string = reversed_string:sub(longest_postfix_index,\
    \ longest_postfix_index + postfix_length)\n    if postfix_string == postfix_string:reverse()\
    \ then\n      longest_postfix_index = longest_postfix_index + postfix_length\n\
    \      longest_postfix_string = postfix_string\n      longest_postfix_length =\
    \ postfix_length\n    end\n  end\n  return longest_postfix_string .. reversed_string:sub(longest_postfix_index\
    \ + longest_postfix_length)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        longest\
    \ = longest + 1\n        local postfix = string\n        reverse = reverse ..\
    \ string\n        local postfix = string.sub(string,1,longest)\n        local\
    \ reverse = string.sub(reverse,1,longest)\n        if string.sub(postfix,1,longest)\
    \ == reverse then\n            return string\n        end\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbcx1j_ck.lua:32:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpbcx1j_ck.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with string.\n  local longest_palindrome = string\n  local longest_palindrome_length\
    \ = #string\n  while longest_palindrome_length > 1 do\n    local longest_palindrome_prefix\
    \ = string\n    local longest_palindrome_prefix_length = #longest_palindrome_prefix\n\
    \    local longest_palindrome_suffix = string\n    local longest_palindrome_suffix_length\
    \ = #longest_palindrome_suffix\n    local longest_palindrome_prefix_reversed =\
    \ string\n    local longest_palindrome_suffix_reversed = string\n    local longest_palindrome_prefix_reversed_length\
    \ = #longest_palindrome_prefix_reversed\n    local longest_palindrome_suffix_reversed_length\
    \ = #longest_palindrome_suffix_reversed\n    local longest_palindrome_prefix_reversed_reversed\
    \ = string\n    local longest_palindrome_suffix_reversed_reversed = string\n \
    \   local longest_palindrome_prefix_reversed_reversed_length = #longest_palindrome_prefix_reversed_reversed\n\
    \    local longest_palindrome_suffix_reversed_reversed_length = #longest_palindrome_suffix_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_length = #longest_palindrome_prefix_reversed_reversed_reversed\n\
    \    local longest_palindrome_suffix_reversed_reversed_reversed_length = #longest_palindrome_suffix_reversed_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_reversed_length\
    \ = #longest_palindrome_prefix_reversed_reversed_reversed_reversed\n    local\
    \ longest_palindrome_suffix_reversed_reversed_reversed_reversed_length = #longest_palindrome_suffix_reversed_reversed_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #longest_palindrome_prefix_reversed_reversed_reversed_reversed_reversed\n\
    \    local longest_palindrome_suffix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #longest_palindrome_suffix_reversed_reversed_reversed_reversed_reversed\n\
    \    local longest_palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #lon\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsnnx_uoz.lua:46: ''end'' expected (to close ''while'' at line
    15) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = string\n \
    \ local longest_postfix_length_index = 0\n  local longest_postfix_length_reversed\
    \ = string\n  local longest_postfix_reversed_length = string\n  local longest_postfix_reversed_length_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed = string\n  local longest_postfix_reversed_length_reversed_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed_reversed = string\n  local\
    \ longest_postfix_reversed_length_reversed_reversed_index = 0\n  local longest_postfix_reversed_length_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\n  local longest_postfix_reversed_length_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpphv0uikd.lua:50: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ ''\n  local longest_postfix_length = 0\n  local longest_postfix_index = 0\n\
    \  for i = 1, #string do\n    local postfix_length = string:sub(i, i):len()\n\
    \    if longest_postfix_length < postfix_length then\n      longest_postfix_length\
    \ = postfix_length\n      longest_postfix_index = i\n    end\n  end\n  local postfix_length\
    \ = string:sub(longest_postfix_index, longest_postfix_index):len()\n  local postfix_reversed_string\
    \ = string\n  local postfix_reversed_length = postfix_length\n  for i = longest_postfix_index\
    \ + 1, #string do\n    local postfix_reversed_length = postfix_reversed_length\
    \ - 1\n    local postfix_reversed_string = string\n    for j = 1, postfix_length\
    \ do\n      postfix_reversed_string = postfix_reversed_string .. string:sub(i,\
    \ i + j)\n    end\n    if postfix_reversed_string == string\n    then\n      return\
    \ postfix_reversed_string\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphni52jya.lua:41:\
    \ expected: \"\"\nactual: nil\nstack traceback:\n\t/tmp/tmphni52jya.lua:41: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  while true do\n    longest = longest + 1\n    local postfix_reverse\
    \ = string.gsub(postfix, \"(.)\", function (c)\n      return string.rep(c:reverse(),\
    \ 1)\n    end)\n    if postfix_reverse == postfix then\n      break\n    end\n\
    \    postfix = postfix_reverse\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local palindrome\
    \ = string\n  local i = longest - 1\n  while i >= 1 do\n    palindrome = palindrome\
    \ .. string.rep(\"a\", i)\n    i = i - 1\n  end\n  return palindrome\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp023kxyz5.lua:40:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp023kxyz5.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 1\n  while string.sub(palindrome, prefix_length, prefix_length\
    \ + 1) ~= string then\n    prefix_length = prefix_length + 1\n  end\n  local suffix_length\
    \ = string.len(palindrome) - prefix_length\n  local reversed_suffix = string.reverse(string.sub(palindrome,\
    \ prefix_length, prefix_length + suffix_length))\n  local reversed_prefix = string.sub(palindrome,\
    \ prefix_length, reversed_suffix)\n  return reversed_prefix .. reversed_suffix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6p0ye4qq.lua:14: ''do'' expected near ''then''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local i = #string\n\
    \  while i do\n    i = i - 1\n    postfix = string.sub(string, 1, i) + postfix\
    \ + string.sub(string, 1, i)\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  postfix = string.sub(postfix,\
    \ 1, #string) + string.sub(postfix, 1, #string) .. postfix\n  return postfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprh8vwcbm.lua:17:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmprh8vwcbm.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmprh8vwcbm.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local longest_postfix_length = 0\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_string_index\
    \ = 0\n  local longest_postfix_string_length = 0\n  local longest_postfix_string_length_index\
    \ = 0\n  local longest_postfix_string_length2_index = 0\n  local longest_postfix_string_length2_index2\
    \ = 0\n  local longest_postfix_string_length2_index3 = 0\n  local longest_postfix_string_length2_index4\
    \ = 0\n  local longest_postfix_string_length2_index5 = 0\n  local longest_postfix_string_length2_index6\
    \ = 0\n  local longest_postfix_string_length2_index7 = 0\n  local longest_postfix_string_length2_index8\
    \ = 0\n  local longest_postfix_string_length2_index9 = 0\n  local longest_postfix_string_length2_index10\
    \ = 0\n  local longest_postfix_string_length2_index11 = 0\n  local longest_postfix_string_length2_index12\
    \ = 0\n  local longest_postfix_string_length2_index13 = 0\n  local longest_postfix_string_length2_index14\
    \ = 0\n  local longest_postfix_string_length2_index15 = 0\n  local longest_postfix_string_length2_index16\
    \ = 0\n  local longest_postfix_string_length2_index17 = 0\n  local longest_postfix_string_length2_index18\
    \ = 0\n  local longest_postfix_string_length2_index19 = 0\n  local longest_postfix_string_length2_index20\
    \ = 0\n  local longest_postfix_string_length2_index21 = 0\n  local longest_postfix_string_length2_index22\
    \ = 0\n  local longest_postfix_string_length2_index23 = 0\n  local longest_postfix_string_length2_index24\
    \ = 0\n  local longest_postfix_string_length2_index25 = 0\n  local longest_postfix_string_length2_index26\
    \ = 0\n  local longest_postfix_string_length2_index27 = 0\n  local longest_postfix_string_length2_index28\
    \ = 0\n  local longest_postfix_string_length2_index29 = 0\n  local longest_postfix_string_length2_index30\
    \ = 0\n  local longest_postfix_string_length2_index31 = 0\n  local longest_postfix_string_length2_index32\
    \ = 0\n  local longest_postfix_string_length2_index33 = 0\n  local longest_postfix_string_length2_index34\
    \ = 0\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjltpnpw.lua:65: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local length = 0\n    while palindrome ~= '' do\n\
    \        length = length + 1\n        local postfix = string\n        for i =\
    \ 1, length do\n            postfix = postfix .. string[i]\n        end\n    \
    \    if palindrome == postfix then\n            palindrome = string\n        end\n\
    \        suffix = suffix .. string[length]\n    end\n    return palindrome ..\
    \ suffix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpob2beiho.lua:19:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpob2beiho.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpob2beiho.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  while true do\n    local reverse = reverse(string)\n\
    \    if reverse == string then\n      break\n    end\n    postfix = string\n \
    \   string = string..reverse\n  end\n  local prefix = string\n  while true do\n\
    \    local reverse = reverse(string)\n    if reverse == string then\n      break\n\
    \    end\n    prefix = string\n    string = string..reverse\n  end\n  local palindrome\
    \ = string\n  while true do\n    local reverse = reverse(string)\n    if reverse\
    \ == string then\n      break\n    end\n    palindrome = string..reverse\n  end\n\
    \  return prefix..palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xfzwx5e.lua:15:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmp2xfzwx5e.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp2xfzwx5e.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  local palindrome_postfix_reverse = string\n\
    \  local palindrome_postfix_reverse_length = #string\n  local palindrome_postfix_reverse_index\
    \ = 0\n  local palindrome_postfix_reverse_length = #string\n  local palindrome_postfix_reverse_start\
    \ = palindrome_postfix_length\n  local palindrome_postfix_reverse_end = palindrome_postfix_length\n\
    \  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_postfix_reverse_end_index\
    \ = 0\n  local palindrome_postfix_reverse_start_index = 0\n  local palindrome_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf6zx442v.lua:63: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If the string is empty,\
    \ return an empty string.\n  if string == '' then\n    return ''\n  end\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpypabl862.lua:27: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If no string given, return\
    \ empty string.\n  if not string then\n    return ''\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3t0816v_.lua:27: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_prefix = string\n\
    \    local palindrome_suffix = string\n    local palindrome_prefix_length = #string\n\
    \    local palindrome_suffix_length = #string\n    local palindrome_prefix_reverse\
    \ = string\n    local palindrome_suffix_reverse = string\n    local palindrome_prefix_reverse_index\
    \ = 0\n    local palindrome_suffix_reverse_index = 0\n    while palindrome_length\
    \ > 1 do\n        -- Find the longest postfix of supplied string that is a palindrome.\n\
    \        local palindrome_prefix_length = #palindrome_prefix\n        local palindrome_suffix_length\
    \ = #palindrome_suffix\n        local palindrome_prefix_reverse_index = palindrome_prefix_length\n\
    \        local palindrome_suffix_reverse_index = palindrome_suffix_length\n  \
    \      while palindrome_prefix_reverse_index > 0 do\n            -- Append to\
    \ the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n            palindrome_prefix_reverse = palindrome_prefix:sub(1, palindrome_prefix_reverse_index\
    \ - 1) .. palindrome_prefix_reverse\n            palindrome_suffix_reverse = palindrome_suffix:sub(palindrome_suffix_reverse_index)\
    \ .. palindrome_suffix_reverse\n            palindrome_prefix_reverse_index =\
    \ palindrome_prefix_reverse_index - 1\n            palindrome_suffix_reverse_index\
    \ = palindrome_suffix_reverse_index - 1\n        end\n        palindrome = palindrome\
    \ .. palindrome_prefix_reverse .. palindrome_suffix\n        palindrome_length\
    \ = palindrome_length - 1\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7ts4ky1.lua:46:\
    \ expected: \"xyzyx\"\nactual: \"xyzxxyxyzxyzxxyxxyxyzxyz\"\nstack traceback:\n\
    \t/tmp/tmpu7ts4ky1.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reversed_string\
    \ = string\n    local longest_postfix_length = 1\n    local longest_postfix_index\
    \ = 1\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    while true do\n        local\
    \ postfix_length = string.len(reversed_string) - longest_postfix_index\n     \
    \   if postfix_length == 0 then\n            break\n        end\n        local\
    \ postfix_string = reversed_string:sub(longest_postfix_index, longest_postfix_index\
    \ + postfix_length)\n        if postfix_string == postfix_string:reverse() then\n\
    \            longest_postfix_index = longest_postfix_index + postfix_length\n\
    \            longest_postfix_string = postfix_string\n        else\n         \
    \   longest_postfix_length = postfix_length\n            longest_postfix_index\
    \ = longest_postfix_index + 1\n        end\n    end\n    return longest_postfix_string\
    \ .. reversed_string:sub(longest_postfix_index + 1, string.len(reversed_string))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_761l15.lua:40:\
    \ expected: \"xyzyx\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp7_761l15.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix_length = 1\n  local longest_postfix_index = 1\n  local\
    \ longest_postfix_string = ''\n  while longest_postfix_index <= #string do\n \
    \   local postfix_length = #string - longest_postfix_index\n    local postfix_string\
    \ = string\n    local postfix_string_reverse = ''\n    for i = 1, postfix_length\
    \ do\n      postfix_string_reverse = postfix_string_reverse .. string[i + longest_postfix_index]\n\
    \    end\n    if postfix_string == postfix_string_reverse then\n      longest_postfix_length\
    \ = postfix_length\n      longest_postfix_index = longest_postfix_index + 1\n\
    \      longest_postfix_string = postfix_string\n    end\n  end\n  local postfix_length\
    \ = #string - longest_postfix_index\n  local postfix_string = string\n  local\
    \ postfix_string_reverse = ''\n  for i = 1, postfix_length do\n    postfix_string_reverse\
    \ = postfix_string_reverse .. string[i + longest_postfix_index]\n  end\n  if postfix_string\
    \ == postfix_string_reverse then\n    palindrome = string\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = string\n    local\
    \ reverse = ''\n    for i = #postfix, 1, -1 do\n      local c = postfix:sub(i,\
    \ i)\n      if c ~= c then\n        reverse = reverse .. c\n      else\n     \
    \   reverse = reverse .. c\n        break\n      end\n    end\n    if reverse\
    \ == postfix then\n      return string\n    end\n    string = string..reverse\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local postfix_length = #postfix\n        local reversed_length = #reverse\n\
    \        local palindrome_length = #palindrome\n        if postfix_length == reversed_length\
    \ and palindrome_length == postfix_length then\n            return palindrome\n\
    \        end\n        local postfix_reverse = reverse:sub(1, reversed_length)\n\
    \        local postfix_postfix = postfix:sub(1, postfix_length)\n        local\
    \ postfix_postfix_reverse = postfix_reverse:sub(1, reversed_length)\n        local\
    \ postfix_postfix_postfix = postfix_postfix:sub(1, postfix_length)\n        local\
    \ postfix_postfix_postfix_reverse = postfix_postfix_reverse:sub(1, reversed_length)\n\
    \        if postfix_postfix_postfix_postfix:sub(1, reversed_length) == postfix_postfix_postfix\
    \ then\n            postfix = postfix:sub(1, postfix_length)\n        elseif postfix_postfix_postfix_reverse:sub(1,\
    \ reversed_length) == postfix_postfix_postfix_reverse then\n            postfix\
    \ = postfix:sub(1, postfix_length)\n        elseif postfix_postfix_postfix_postfix_reverse:sub(1,\
    \ reversed_length) == postfix_postfix_postfix_postfix_reverse then\n         \
    \   postfix = postfix:sub(1, postfix_length)\n        else\n            postfix\
    \ = postfix:sub(1, postfix_length)\n        end\n        reverse = reverse:sub(1,\
    \ reversed_length)\n        palindrome = palindrome .. postfix_postfix_postfix_reverse\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeyfxm4vh.lua:27:\
    \ attempt to index global 'postfix_postfix_postfix_postfix' (a nil value)\nstack\
    \ traceback:\n\t/tmp/tmpeyfxm4vh.lua:27: in function 'candidate'\n\t/tmp/tmpeyfxm4vh.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 1\n  while palindrome ~= string.sub(string, 1, prefix_length)\
    \ do\n    prefix_length = prefix_length + 1\n  end\n  local postfix_length = string.len(string)\
    \ - prefix_length\n  local reversed_postfix = string.sub(string, prefix_length,\
    \ postfix_length)\n  local reversed_palindrome = reversed_postfix.. reversed_postfix\n\
    \  return string.reverse(reversed_palindrome)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1p6mwu2k.lua:27:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp1p6mwu2k.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local prefix_length = 0\n    local suffix_length = 0\n    local longest_postfix_length\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_string_reverse\
    \ = ''\n    local longest_postfix_string_prefix = ''\n    local longest_postfix_string_suffix\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_postfix_string_prefix_reverse = ''\n    local longest_postfix_string_suffix_reverse\
    \ = ''\n    local longest_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwwkqn1cq.lua:70: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local function find_longest_postfix(string,\
    \ postfix, longest)\n    local postfix_len = #postfix\n    local postfix_reverse\
    \ = string.sub(postfix, 1, postfix_len - 1)\n    local postfix_start = #string\
    \ + #postfix_reverse\n    local postfix_end = #string + #postfix_reverse\n   \
    \ local postfix_palindrome = string.sub(string, postfix_start, postfix_end)\n\
    \    if postfix_palindrome == postfix_reverse then\n      longest = postfix_len\n\
    \    end\n    if postfix_len > longest then\n      longest = postfix_len\n   \
    \ end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  local function append_to_end_of_string(string,\
    \ postfix, reverse)\n    local postfix_len = #postfix\n    local postfix_reverse\
    \ = string.sub(postfix, 1, postfix_len - 1)\n    local postfix_start = #string\
    \ + #postfix_reverse\n    local postfix_end = #string + #postfix_reverse\n   \
    \ local postfix_palindrome = string.sub(string, postfix_start, postfix_end)\n\
    \    local postfix_reverse_palindrome = string.sub(reverse, 1, postfix_len - 1)\n\
    \    local postfix_reverse_palindrome_start = #reverse + #postfix_reverse_palindrome\n\
    \    local postfix_reverse_palindrome_end = #reverse + #postfix_reverse_palindrome\n\
    \    local postfix_reverse_palindrome_len = #postfix_reverse_palindrome\n    local\
    \ postfix_reverse_palindrome_start = #reverse + #postfix_reverse_palindrome_start\n\
    \    local postfix_reverse_palindrome_end = #reverse + #postfix_reverse_palindrome_end\n\
    \    local postfix_reverse_palindrome = string.sub(reverse, postfix_reverse_palindrome_start,\
    \ postfix_reverse_palindrome_end)\n    local postfix_reverse_palindrome_reverse\
    \ = string.sub(postfix_reverse_palindrome, postfix_reverse_palindrome_start, postfix_reverse_palindrome_len)\n\
    \    local postfix_reverse_palindrome_start = #reverse + #postfix_reverse_palindrome_reverse\n\
    \    local postfix_reverse_palindrome_end = #reverse + #postfix_reverse_palindrome_reverse\n\
    \    local postfix_reverse_palindrome_reverse_start = #\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcb27ykqg.lua:44: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_len = #string\n    local palindrome_postfix = string\n \
    \   local palindrome_prefix_len = #string\n    while palindrome_len > 0 do\n \
    \       local postfix = string\n        local prefix_len = #string\n        while\
    \ prefix_len > 0 do\n            local prefix = string\n            local prefix_len\
    \ = #string\n            local reversed_prefix = string\n            local reversed_prefix_len\
    \ = #string\n            local reversed_postfix = string\n            local reversed_postfix_len\
    \ = #string\n            while prefix_len > 0 do\n                local prefix\
    \ = string\n                local prefix_len = #string\n                local\
    \ reversed_prefix = string\n                local reversed_prefix_len = #string\n\
    \                local reversed_postfix = string\n                local reversed_postfix_len\
    \ = #string\n                while prefix_len > 0 do\n                    local\
    \ prefix = string\n                    local prefix_len = #string\n          \
    \          local reversed_prefix = string\n                    local reversed_prefix_len\
    \ = #string\n                    local reversed_postfix = string\n           \
    \         local reversed_postfix_len = #string\n                    while prefix_len\
    \ > 0 do\n                        local prefix = string\n                    \
    \    local prefix_len = #string\n                        local reversed_prefix\
    \ = string\n                        local reversed_prefix_len = #string\n    \
    \                    local reversed_postfix = string\n                       \
    \ local reversed_postfix_len = #string\n                        while prefix_len\
    \ > 0 do\n                            local prefix = string\n                \
    \            local prefix_len = #string\n                            local reversed_prefix\
    \ = string\n                            local reversed_prefix_len = #string\n\
    \                            local reversed_postfix = string\n               \
    \             local reversed_postfix_len = #string\n                         \
    \   while prefix_len > 0 do\n                                local prefix = string\n\
    \                                local prefix_len = #string\n                \
    \                local reversed_prefix = string\n                            \
    \    local reversed_prefix_len = #string\n                                local\
    \ reversed_postfix = string\n                                local reversed_postfix_len\
    \ = #string\n                                while prefix_len > 0 do\n       \
    \                             local prefix = string\n                        \
    \            local prefix_len = #string\n                                    local\
    \ reversed_prefix = string\n                                    local reversed_prefix_len\
    \ = #string\n                                    local reversed_postfix = string\n\
    \                                    local reversed_postfix_len = #string\n  \
    \                                  while prefix_len > 0 do\n                 \
    \                       local prefix = string\n                              \
    \          local prefix_len = #string\n                                      \
    \  local reversed_prefix = string\n                                        local\
    \ reversed_prefix_len = #string\n                                        local\
    \ reversed_postfix = string\n                                        local reversed_postfix_len\
    \ = #string\n                                        while prefix_len > 0 do\n\
    \                                            local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9xbx3h8w.lua:88: ''end'' expected (to close ''while'' at line
    75) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix = string.find(string, \"^(.-)$\"), \"\", \"\"\n  for i = 1, #string\
    \ do\n    local prefix = string:sub(1, i)\n    local suffix = string:sub(i + 1)\n\
    \    local reverse = suffix:reverse()\n    if prefix ~= suffix then\n      if\
    \ reverse == prefix then\n        longest = prefix .. longest\n        longestPrefix\
    \ = prefix .. longestPrefix\n        longestSuffix = suffix .. longestSuffix\n\
    \      else\n        longest = prefix .. longest\n        longestPrefix = prefix\
    \ .. longestPrefix\n        longestSuffix = suffix .. longestSuffix\n      end\n\
    \    end\n  end\n  return longest .. longestPrefix .. longestSuffix\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc8qh6j3f.lua:35:\
    \ expected: \"\"\nactual: \"1\"\nstack traceback:\n\t/tmp/tmpc8qh6j3f.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local suffix = ''\n  local prefix_length = 0\n\
    \  while true do\n    local postfix_length = #postfix - 1\n    local reversed_postfix\
    \ = reverse(string)\n    local reversed_palindrome = reverse(string)\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    if postfix_length == prefix_length then\n\
    \      palindrome = palindrome .. reversed_palindrome\n      break\n    end\n\
    \    local palindrome_length = #palindrome\n    if palindrome_length == 0 then\n\
    \      break\n    end\n    if postfix_length < palindrome_length then\n      postfix\
    \ = postfix .. reversed_postfix\n      break\n    end\n    prefix_length = postfix_length\n\
    \    postfix = postfix .. reversed_postfix\n  end\n  return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzev1g9rz.lua:18:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpzev1g9rz.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpzev1g9rz.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix = string.find(string, \"^(.-)$\"), string.sub(string, 1, string.find(string,\
    \ \"^(.-)$\")-1), string.sub(string, string.find(string, \"^(.-)$\")+1)\n  local\
    \ longestPalindrome = longest\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = longestPrefix, longestSuffix\n  local longestPalindromeSuffix = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\")-1)\n  local longestPalindromePrefix\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\")-1)\n  local longestPalindromeSuffixReverse = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\")-1)\n  local longestPalindromePrefixReverse\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\")-1)\n  local longestPalindromeSuffixReverse = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\")-1)\n  local longestPalindromePrefixReverse\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\")-1)\n  local longestPalindromeSuffixReverse = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\")-1)\n  local longestPalindromePrefixReverse\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\")-1)\n  local longestPalindromeSuffixReverse = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\")-1)\n  local longestPalindromePrefixReverse\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\")-1)\n  local longestPalindromeSuffixReverse = string.sub(longestPalindromeSuffix,\
    \ 1, string.find(longestPalindromeSuffix, \"^(.-)$\")-1)\n  local longestPalindromePrefixReverse\
    \ = string.sub(longestPalindromePrefix, 1, string.find(longestPalindromePrefix,\
    \ \"^(.-)$\")-1)\n  local longestPalin\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd_mpitdo.lua:39: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local suffix = ''\n  local prefix = ''\n  while\
    \ true do\n    local postfix = postfix .. suffix\n    local reverse = reverse(string)\n\
    \    if reverse == postfix then\n      palindrome = palindrome .. prefix .. reverse\n\
    \      break\n    end\n    suffix = reverse\n    prefix = postfix:sub(1, #postfix)\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy43nsfra.lua:18:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpy43nsfra.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpy43nsfra.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  local longest = 0\n  while true do\n    longest = longest\
    \ + 1\n    local postfix = string\n    for i = 1, longest do\n      postfix =\
    \ postfix .. string[#string]\n    end\n    local reverse = reverse .. string\n\
    \    if string.sub(reverse, #string) == postfix then\n      return reverse\n \
    \   end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4z24agce.lua:19:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp4z24agce.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp4z24agce.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local prefix_length\
    \ = #string\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local reversed_postfix_length = #reversed_postfix\n\
    \    if reversed_postfix_length == 0 then\n      break\n    end\n    local postfix_char\
    \ = postfix[postfix_length - 1]\n    local reversed_postfix_char = reversed_postfix[reversed_postfix_length\
    \ - 1]\n    if postfix_char == reversed_postfix_char then\n      postfix = postfix:sub(1,\
    \ postfix_length - 1)\n      reversed_postfix = reversed_postfix:sub(1, reversed_postfix_length\
    \ - 1)\n      postfix_length = postfix_length - 1\n      reversed_postfix_length\
    \ = reversed_postfix_length - 1\n    else\n      postfix = postfix .. postfix_char\n\
    \      reversed_postfix = reversed_postfix .. reversed_postfix_char\n      postfix_length\
    \ = postfix_length + 1\n      reversed_postfix_length = reversed_postfix_length\
    \ + 1\n    end\n  end\n  postfix = postfix .. reversed_postfix\n  return palindrome\
    \ .. postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43n935xr.lua:48:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp43n935xr.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local prefix_length = 1\n  while prefix_length < #string\
    \ do\n    local postfix = string[prefix_length..-1]\n    local reversed_postfix\
    \ = reverse(string[prefix_length..-1])\n    if postfix ~= reversed_postfix then\n\
    \      palindrome = palindrome .. reversed_postfix\n    end\n    prefix_length\
    \ = prefix_length + 1\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn1tl49tx.lua:17:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpn1tl49tx.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpn1tl49tx.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = string\n   \
    \ local longest_postfix_length = -1\n    local longest_postfix_start = -1\n  \
    \  local longest_postfix_end = -1\n    local longest_postfix_start_index = -1\n\
    \    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n    local longest_postfix_start_index\
    \ = -1\n    local longest_postfix_end_index = -1\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_vkk823s.lua:76: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix_length = 0\n \
    \   local longest_postfix_length_index = 0\n    local longest_postfix_length_prefix\
    \ = 0\n    local longest_postfix_length_suffix = 0\n    local longest_postfix_length_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_prefix = 0\n    local longest_postfix_length_suffix_suffix\
    \ = 0\n    local longest_postfix_length_suffix_suffix_index = 0\n    local longest_postfix_length_suffix_suffix_prefix\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_suffix_suffix = 0\n    local longest_postfix_length_suffix_suffix_suffix_index\
    \ = 0\n    local longest_postfix_length_suffix_suffix_suffix_prefix = 0\n    local\
    \ longest_postfix_length_suffix_suffix_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqnkmwe1a.lua:59: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If the string is empty\
    \ or contains only letters, return it.\n  if string == '' or string ~= string.gsub(string,\
    \ '[^a-zA-Z]', '') then\n    return string\n  end\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8fq9_7xa.lua:27: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_len = #string\n  local suffix_len = #string\n  while prefix_len\
    \ > 0 and suffix_len > 0 do\n    local prefix = string\n    local suffix = string\n\
    \    local prefix_len = #prefix\n    local suffix_len = #suffix\n    local reversed_prefix\
    \ = prefix:reverse()\n    local reversed_suffix = suffix:reverse()\n    if reversed_prefix\
    \ == reversed_suffix then\n      palindrome = palindrome .. reversed_prefix\n\
    \      prefix_len = prefix_len - suffix_len\n      suffix_len = suffix_len - prefix_len\n\
    \    else\n      break\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local postfix = string.sub(postfix, 1, string.len(postfix) - 1)\n        local\
    \ reverse = reverse .. string.sub(postfix, 1, string.len(postfix) - 1)\n     \
    \   if string.sub(postfix, 1, string.len(postfix) - 1) ~= reverse then\n     \
    \       palindrome = palindrome .. reverse .. string.sub(postfix, 1, string.len(postfix)\
    \ - 1)\n            break\n        end\n    end\n    return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local longest = 0\n    for i = #string, 1, -1 do\n        local prefix =\
    \ string\n        prefix = prefix:sub(1, i)\n        local reverse = prefix:reverse()\n\
    \        if reverse == prefix then\n            longest = i\n        end\n   \
    \ end\n    local palindrome = string\n    palindrome = palindrome:sub(1, longest)\n\
    \    palindrome = palindrome .. reverse\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoi05oxhs.lua:24:\
    \ attempt to concatenate global 'reverse' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpoi05oxhs.lua:24: in function 'candidate'\n\t/tmp/tmpoi05oxhs.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local longest = 0\n  while true do\n    longest = longest\
    \ + 1\n    suffix = string.sub(palindrome, longest, #palindrome)\n    if suffix\
    \ == suffix then\n      break\n    end\n  end\n  local reverse = string.sub(suffix,\
    \ 1, #suffix)\n  reverse = reverse .. suffix\n  local start = #palindrome\n  local\
    \ end = start + longest\n  local middle = end - 1\n  local middle2 = end - 1\n\
    \  while true do\n    middle2 = middle2 - 1\n    if middle2 == 0 then\n      middle2\
    \ = #palindrome\n    end\n    if middle == middle2 then\n      middle = middle2\n\
    \    end\n    if middle > middle then\n      middle = middle2\n    end\n    if\
    \ middle == 0 then\n      middle = #palindrome\n    end\n    if middle == 1 then\n\
    \      middle = #palindrome\n    end\n    if middle == 1 then\n      middle =\
    \ #palindrome\n    end\n    if middle == 1 then\n      middle = #palindrome\n\
    \    end\n    if middle == 1 then\n      middle = #palindrome\n    end\n    if\
    \ middle == 1 then\n      middle = #palindrome\n    end\n    if middle == 1 then\n\
    \      middle = #palindrome\n    end\n    if middle == 1 then\n      middle =\
    \ #palindrome\n    end\n    if middle == 1 then\n      middle = #palindrome\n\
    \    end\n    if middle == 1 then\n      middle = #palindrome\n    end\n    if\
    \ middle == 1 then\n      middle = #palindrome\n    end\n    if middle == 1 then\n\
    \      middle = #palindrome\n    end\n    if middle == 1 then\n      middle =\
    \ #palindrome\n    end\n    if middle == 1 then\n      middle = #palindrome\n\
    \    end\n    if middle == 1 then\n      middle = #palindrome\n    end\n    if\
    \ middle == 1 then\n      middle = #palindrome\n    end\n    if middle == 1 then\n\
    \      middle = #palindrome\n    end\n    if middle == 1 then\n      middle =\
    \ #palindrome\n    end\n    if middle == 1 then\n      middle = #palindrome\n\
    \    end\n    if middle == 1 then\n      middle = #palindrome\n    end\n    if\
    \ middle == 1 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1_xez9pi.lua:25: ''<name>'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if palindrome == postfix then\n      break\n\
    \    end\n    local reverse = reverse .. postfix\n  end\n  return reverse\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_postfix = string\n\
    \  local palindrome_prefix_postfix_length = #string\n  local palindrome_prefix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_length = #string\n  local\
    \ palindrome_prefix_postfix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length = #string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix = string\n\
    \  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpezrciujn.lua:46: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_start = #palindrome\n\
    \  local palindrome_end = #palindrome\n  local palindrome_prefix_length = #string\n\
    \  local palindrome_prefix_start = #string\n  local palindrome_prefix_end = #string\n\
    \  local palindrome_suffix_length = #string\n  local palindrome_suffix_start =\
    \ #string\n  local palindrome_suffix_end = #string\n  local palindrome_prefix_reversed\
    \ = string\n  local palindrome_suffix_reversed = string\n  local palindrome_prefix_reversed_start\
    \ = #palindrome_prefix_reversed\n  local palindrome_prefix_reversed_end = #palindrome_prefix_reversed\n\
    \  local palindrome_suffix_reversed_start = #palindrome_suffix_reversed\n  local\
    \ palindrome_suffix_reversed_end = #palindrome_suffix_reversed\n  while palindrome_length\
    \ > 1 do\n    -- Find the longest postfix of supplied string that is a palindrome.\n\
    \    palindrome_prefix_length = palindrome_prefix_length - 1\n    palindrome_prefix_start\
    \ = palindrome_prefix_start - 1\n    palindrome_prefix_end = palindrome_prefix_end\
    \ - 1\n    palindrome_suffix_length = palindrome_suffix_length - 1\n    palindrome_suffix_start\
    \ = palindrome_suffix_start - 1\n    palindrome_suffix_end = palindrome_suffix_end\
    \ - 1\n    local palindrome_prefix_reversed_length = palindrome_prefix_length\
    \ - 1\n    palindrome_prefix_reversed_start = palindrome_prefix_reversed_start\
    \ - 1\n    palindrome_prefix_reversed_end = palindrome_prefix_reversed_end - 1\n\
    \    local palindrome_suffix_reversed_length = palindrome_suffix_length - 1\n\
    \    palindrome_suffix_reversed_start = palindrome_suffix_reversed_start - 1\n\
    \    palindrome_suffix_reversed_end = palindrome_suffix_reversed_end - 1\n   \
    \ local palindrome_prefix_reversed_reversed = string.rep(palindrome_prefix_reversed,\
    \ palindrome_prefix_reversed_length)\n    local palindrome_suffix_reversed_reversed\
    \ = string.rep(palindrome_suffix_reversed, palindrome_suffix_reversed_length)\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1vomrws9.lua:56: ''end'' expected (to close ''while'' at line
    28) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix\n    local\
    \ suffixLen\n    local palindrome\n    local palindromeLen\n    local palindromeSuffix\n\
    \    local palindromeSuffixLen\n    local palindromeSuffixSuffix\n    local palindromeSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffix\n    local palindromeSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffix\n    local palindromeSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffix\n    local palindromeSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffix\n    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n    local\
    \ palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixLen\n\
    \    local palindromeSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffix\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnxjnzg3e.lua:59: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local length = #string\n  while length > 1 do\n\
    \    local postfix = string\n    local reversed_postfix = string\n    for i =\
    \ 1, length do\n      reversed_postfix = reversed_postfix..string[i]\n    end\n\
    \    postfix = postfix..string[length]\n    if reversed_postfix ~= postfix then\n\
    \      palindrome = palindrome..reversed_postfix\n    end\n    length = length\
    \ - 1\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx03aj843.lua:19:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpx03aj843.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpx03aj843.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local longest = 0\n  while true do\n    local reverse = string.gsub(string.gsub(postfix,\
    \ '^(.-)$', '$1'..''), '(.-)$', '$1')\n    if reverse == postfix then\n      return\
    \ postfix\n    end\n    postfix = reverse\n    longest = longest + 1\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe4czjjhm.lua:27:\
    \ expected: \"\"\nactual: \"$1$1\"\nstack traceback:\n\t/tmp/tmpe4czjjhm.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ postfix_len = #postfix\n  while postfix_len > 1 do\n    local postfix_reverse\
    \ = string.gsub(string.sub(postfix, 1, postfix_len - 1), '(.)' .. string.sub(postfix,\
    \ postfix_len - 1, postfix_len), '%1%2' .. '%1')\n    postfix = postfix .. postfix_reverse\n\
    \    postfix_len = postfix_len - 1\n  end\n  -- Append to the end of the string\
    \ reverse of a string prefix that comes before the palindromic suffix.\n  local\
    \ palindrome = string.sub(postfix, 1, postfix_len - 1)\n  local palindrome_len\
    \ = #palindrome\n  while palindrome_len > 1 do\n    local palindrome_reverse =\
    \ string.gsub(string.sub(palindrome, 1, palindrome_len - 1), '(.)' .. string.sub(palindrome,\
    \ palindrome_len - 1, palindrome_len), '%1%2' .. '%1')\n    palindrome = palindrome\
    \ .. palindrome_reverse\n    palindrome_len = palindrome_len - 1\n  end\n  return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdxr_wxjj.lua:35:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpdxr_wxjj.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If the string is empty,\
    \ return empty string.\n  if string == '' then\n    return ''\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphl46cc81.lua:27: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = postfix..string\n\
    \    if string.len(postfix) ~= string.len(reverse) then\n      reverse = reverse..postfix\n\
    \      break\n    end\n  end\n  return reverse\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if palindrome == postfix then\n      return\
    \ palindrome\n    end\n    local reverse = reverse .. postfix\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  local longest = 0\n  while true do\n    longest = longest\
    \ + 1\n    local postfix_reverse = postfix:reverse()\n    if postfix_reverse ==\
    \ postfix then\n      return string\n    end\n    if postfix_reverse:sub(1, longest)\
    \ == postfix then\n      postfix = postfix.. postfix_reverse\n      break\n  \
    \  end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  while true do\n\
    \    local postfix = postfix .. string\n    if string.find(postfix, string.reverse(postfix))\
    \ then\n      break\n    end\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local palindrome\
    \ = string\n  local i = #string\n  while i > 0 do\n    local c = string.sub(string,\
    \ i, i)\n    if c == string.reverse(c) then\n      palindrome = palindrome ..\
    \ c\n      i = i - 1\n    else\n      break\n    end\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8xqlz0ct.lua:39:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmp8xqlz0ct.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    if string.sub(postfix, 1, string.len(postfix)\
    \ - 1) ~= palindrome then\n      palindrome = palindrome .. string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n      break\n    end\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_prefix = string\n  local\
    \ palindrome_suffix = string\n  local palindrome_prefix_length = #string\n  local\
    \ palindrome_suffix_length = #string\n  local palindrome_prefix_reversed = string\n\
    \  local palindrome_suffix_reversed = string\n  local palindrome_prefix_reversed_length\
    \ = #string\n  local palindrome_suffix_reversed_length = #string\n  local palindrome_prefix_reversed_reversed\
    \ = string\n  local palindrome_suffix_reversed_reversed = string\n  local palindrome_prefix_reversed_reversed_length\
    \ = #string\n  local palindrome_suffix_reversed_reversed_length = #string\n  local\
    \ palindrome_prefix_reversed_reversed_reversed_length = #string\n  local palindrome_suffix_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_prefix_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_suffix_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_suffix_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_suffix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_suffix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = #string\n  local palindrome_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppl9ofiy5.lua:48: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local longest_postfix = string\n\
    \  while true do\n    local postfix = string.sub(postfix, 1, string.len(postfix)\
    \ - 1) .. postfix\n    if string.sub(postfix, 1, string.len(postfix)) ~= string.sub(postfix,\
    \ 1, string.len(postfix) - 1) then\n      longest_postfix = postfix\n      break\n\
    \    end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  local reversed_prefix = string.sub(longest_postfix,\
    \ 1, string.len(longest_postfix) - 1) .. string.sub(longest_postfix, 1, string.len(longest_postfix)\
    \ - 1)\n  return reversed_prefix .. string.sub(postfix, 1, string.len(postfix)\
    \ - 1) .. string.sub(postfix, 1, string.len(postfix) - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty, return\
    \ empty string.\n  if string == '' then\n    return ''\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps52axv9a.lua:27: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = string\n    local length = 0\n    while true do\n       \
    \ local index = string.find(postfix, reverse, length + 1, true)\n        if index\
    \ == nil then\n            return string\n        end\n        postfix = string.sub(postfix,\
    \ index + length + 1)\n        reverse = string.sub(reverse, index + 1, -1)\n\
    \        length = length + 1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local longest_postfix\
    \ = string\n  while true do\n    local postfix = postfix .. string\n    if postfix\
    \ ~= palindrome then\n      break\n    end\n    local reversed_postfix = reversed_postfix\
    \ .. string\n    if reversed_postfix ~= postfix then\n      break\n    end\n \
    \   longest_postfix = longest_postfix .. string\n  end\n  local palindrome_suffix\
    \ = string\n  while true do\n    local postfix = postfix .. string\n    if postfix\
    \ ~= palindrome_suffix then\n      break\n    end\n    local reversed_postfix\
    \ = reversed_postfix .. string\n    if reversed_postfix ~= postfix then\n    \
    \  break\n    end\n    palindrome_suffix = palindrome_suffix .. string\n  end\n\
    \  return longest_postfix .. reversed_postfix .. palindrome_suffix\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest_postfix = ''\n  local longest_postfix_length = 0\n  while true do\n\
    \    local postfix_length = #postfix - 1\n    if postfix_length == 0 then\n  \
    \    break\n    end\n    local postfix_reverse = string.sub(postfix, 1, postfix_length)\n\
    \    if string.sub(postfix, postfix_length + 1, postfix_length) == postfix_reverse\
    \ then\n      postfix = string.sub(postfix, postfix_length + 1)\n      longest_postfix_length\
    \ = postfix_length\n    else\n      postfix = string.sub(postfix, 1, postfix_length\
    \ + 1)\n      longest_postfix_length = postfix_length\n    end\n  end\n  longest_postfix\
    \ = longest_postfix .. postfix_reverse\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  local palindrome\
    \ = string\n  local prefix_length = #longest_postfix\n  while true do\n    local\
    \ prefix_reverse = string.sub(longest_postfix, 1, prefix_length)\n    if string.sub(longest_postfix,\
    \ prefix_length + 1, prefix_length) == prefix_reverse then\n      longest_postfix\
    \ = string.sub(longest_postfix, prefix_length + 1)\n    else\n      longest_postfix\
    \ = string.sub(longest_postfix, 1, prefix_length + 1)\n    end\n    local palindrome_length\
    \ = #palindrome\n    if palindrome_length == 0 then\n      break\n    end\n  \
    \  palindrome = string.sub(palindrome, 1, palindrome_length)\n  end\n  return\
    \ palindrome .. longest_postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_postfix = string\n\
    \  while palindrome_length > 1 do\n    local palindrome_postfix_length = #palindrome_postfix\n\
    \    local palindrome_prefix_postfix_length = #palindrome_prefix_postfix\n   \
    \ local palindrome_prefix_postfix_postfix = palindrome_prefix_postfix .. string.rev(palindrome_postfix)\n\
    \    local palindrome_prefix_postfix_postfix_length = #palindrome_prefix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix\
    \ .. string.rev(palindrome_prefix_postfix)\n    if palindrome_postfix_length ==\
    \ palindrome_prefix_postfix_length and palindrome_prefix_postfix_length == palindrome_postfix_postfix_length\
    \ and palindrome_prefix_postfix_postfix_length == palindrome_postfix_postfix_postfix_length\
    \ then\n      palindrome = palindrome .. palindrome_prefix_postfix_postfix_postfix\n\
    \      palindrome_length = palindrome_length - 1\n      palindrome_postfix = palindrome_postfix\
    \ .. palindrome_prefix_postfix_postfix_postfix\n      palindrome_prefix_length\
    \ = palindrome_prefix_length - 1\n      palindrome_prefix_postfix = palindrome_prefix_postfix\
    \ .. palindrome_postfix_postfix_postfix\n      palindrome_prefix_postfix_length\
    \ = palindrome_prefix_postfix_length - 1\n      palindrome_prefix_postfix_postfix\
    \ = palindrome_prefix_postfix_postfix .. palindrome_postfix_postfix_postfix\n\
    \      palindrome_prefix_postfix_postfix_length = palindrome_prefix_postfix_postfix_length\
    \ - 1\n    else\n      palindrome_length = palindrome_length - 1\n      palindrome_postfix\
    \ = palindrome_postfix .. palindrome_prefix_postfix_postfix_postfix\n      palindrome_prefix_length\
    \ = palindrome_prefix_length - 1\n      palindrome_prefix_postfix = palindrome_prefix_postfix\
    \ .. palindrome_postfix_postfix_postfix\n      palindrome_prefix_postfix_length\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq7ra87cz.lua:38: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local length = 0\n    while palindrome ~= '' do\n\
    \        local postfix = string\n        local length = length + 1\n        while\
    \ length > 0 do\n            postfix = string\n            length = length - 1\n\
    \        end\n        postfix = string.reverse .. postfix\n        if string.sub(palindrome,\
    \ 1, length) == postfix then\n            palindrome = string.sub(palindrome,\
    \ 1, length) .. suffix\n            suffix = ''\n        else\n            suffix\
    \ = suffix .. string\n        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfklbue53.lua:22:\
    \ attempt to concatenate field 'reverse' (a function value)\nstack traceback:\n\
    \t/tmp/tmpfklbue53.lua:22: in function 'candidate'\n\t/tmp/tmpfklbue53.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  local palindrome_postfix_reverse = ''\n\
    \  local palindrome_postfix_reverse_length = #string\n  while palindrome_postfix_length\
    \ > 0 do\n    local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n\
    \    local palindrome_postfix_reverse = palindrome_postfix_reverse..string\n \
    \   local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n  \
    \  local palindrome_postfix_length = palindrome_postfix_length - 1\n    local\
    \ palindrome_postfix = string..palindrome_postfix\n    local palindrome_postfix_length\
    \ = #palindrome_postfix\n  end\n  local palindrome_postfix_reverse = palindrome_postfix_reverse..string\n\
    \  local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n  return\
    \ palindrome..palindrome_postfix_reverse\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string.sub(palindrome, 1, string.len(palindrome))\n    local\
    \ reversed_postfix = string.sub(postfix, 1, string.len(postfix))\n    local prefix_length\
    \ = string.len(reversed_postfix)\n    local reversed_prefix = reversed_postfix:sub(1,\
    \ prefix_length)\n    local reversed_prefix_length = string.len(reversed_prefix)\n\
    \    local reversed_prefix_reversed = reversed_prefix:reverse()\n    local reversed_prefix_reversed_length\
    \ = string.len(reversed_prefix_reversed)\n    local reversed_prefix_reversed_reversed\
    \ = reversed_prefix_reversed:reverse()\n    local reversed_prefix_reversed_reversed_length\
    \ = string.len(reversed_prefix_reversed_reversed)\n    local reversed_prefix_reversed_reversed_reversed_length\
    \ = string.len(reversed_prefix_reversed_reversed_reversed)\n    local reversed_prefix_reversed_reversed_reversed_reversed_length\
    \ = string.len(reversed_prefix_reversed_reversed_reversed_reversed)\n    local\
    \ reversed_prefix_reversed_reversed_reversed_reversed_reversed_length = string.len(reversed_prefix_reversed_reversed_reversed_reversed_reversed)\n\
    \    local reversed_prefix_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = string.len(reversed_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    local reversed_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = string.len(reversed_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    local reversed_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = string.len(reversed_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \    local reversed_prefix_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvv6zxvte.lua:40: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        local\
    \ postfix = string\n        local reverse = ''\n        for i = 1, #string do\n\
    \            local char = string[i]\n            if char == postfix.char then\n\
    \                postfix = postfix.char\n                reverse = reverse ..\
    \ char\n            else\n                if #reverse > longest then\n       \
    \             longest = #reverse\n                end\n                postfix\
    \ = postfix.char\n                reverse = reverse .. char\n            end\n\
    \        end\n        if #reverse > longest then\n            longest = #reverse\n\
    \        end\n        if postfix ~= reverse then\n            break\n        end\n\
    \    end\n    return string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if palindrome == postfix then\n      break\n\
    \    end\n    reverse = reverse .. postfix\n  end\n  return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while true do\n      \
    \  local index = string.find(postfix, reverse, true)\n        if index == nil\
    \ then\n            break\n        end\n        postfix = string.sub(postfix,\
    \ index + #reverse)\n        reverse = reverse .. string.sub(string, 1, index)\n\
    \        palindrome = palindrome .. reverse\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpga3ti5i4.lua:16:\
    \ bad argument #3 to 'find' (number expected, got boolean)\nstack traceback:\n\
    \t/tmp/tmpga3ti5i4.lua:16: in function 'candidate'\n\t/tmp/tmpga3ti5i4.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If string is empty or\
    \ null, return empty string.\n  if string == nil or string == '' then\n    return\
    \ ''\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpif3qny9j.lua:27: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reversed_string\
    \ = string\n    local longest_postfix = string\n    local longest_postfix_length\
    \ = 1\n    local longest_postfix_index = 1\n    local longest_postfix_index2 =\
    \ 0\n    local longest_postfix_index3 = 0\n    local longest_postfix_index4 =\
    \ 0\n    local longest_postfix_index5 = 0\n    local longest_postfix_index6 =\
    \ 0\n    local longest_postfix_index7 = 0\n    local longest_postfix_index8 =\
    \ 0\n    local longest_postfix_index9 = 0\n    local longest_postfix_index10 =\
    \ 0\n    local longest_postfix_index11 = 0\n    local longest_postfix_index12\
    \ = 0\n    local longest_postfix_index13 = 0\n    local longest_postfix_index14\
    \ = 0\n    local longest_postfix_index15 = 0\n    local longest_postfix_index16\
    \ = 0\n    local longest_postfix_index17 = 0\n    local longest_postfix_index18\
    \ = 0\n    local longest_postfix_index19 = 0\n    local longest_postfix_index20\
    \ = 0\n    local longest_postfix_index21 = 0\n    local longest_postfix_index22\
    \ = 0\n    local longest_postfix_index23 = 0\n    local longest_postfix_index24\
    \ = 0\n    local longest_postfix_index25 = 0\n    local longest_postfix_index26\
    \ = 0\n    local longest_postfix_index27 = 0\n    local longest_postfix_index28\
    \ = 0\n    local longest_postfix_index29 = 0\n    local longest_postfix_index30\
    \ = 0\n    local longest_postfix_index31 = 0\n    local longest_postfix_index32\
    \ = 0\n    local longest_postfix_index33 = 0\n    local longest_postfix_index34\
    \ = 0\n    local longest_postfix_index35 = 0\n    local longest_postfix_index36\
    \ = 0\n    local longest_postfix_index37 = 0\n    local longest_postfix_index38\
    \ = 0\n    local longest_postfix_index39 = 0\n    local longest_postfix_index40\
    \ = 0\n    local longest_postfix_index41 = 0\n    local longest_postfix_index42\
    \ = 0\n    local longest_postfix_index43 = 0\n    local longest_postfix_index44\
    \ = 0\n    local longest_postfix_index45 = 0\n    local longest_postfix_index46\
    \ = 0\n    local longest_postfix_index47 = 0\n    local longest_postfix_index48\
    \ = 0\n    local longest_postfix_index49\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj14m455y.lua:75: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local prefix_length = 0\n    local longest_postfix_length\
    \ = 0\n    while true do\n        local postfix_length = string.len(suffix) +\
    \ string.len(palindrome)\n        if postfix_length < longest_postfix_length then\n\
    \            longest_postfix_length = postfix_length\n            suffix = string.sub(string,\
    \ -postfix_length)\n        else\n            local postfix_length = string.len(suffix)\
    \ + string.len(palindrome)\n            if postfix_length == longest_postfix_length\
    \ then\n                local prefix_length = string.len(prefix) + string.len(palindrome)\n\
    \                if prefix_length == longest_postfix_length then\n           \
    \         palindrome = palindrome .. suffix\n                    break\n     \
    \           end\n            end\n        end\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfx35u8dh.lua:24:\
    \ bad argument #1 to 'len' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpfx35u8dh.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmpfx35u8dh.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  while true do\n    local postfix = string.sub(postfix, 1, string.len(postfix)\
    \ - 1)\n    if string.sub(postfix, 1, string.len(postfix)) ~= string.sub(postfix,\
    \ string.len(postfix) - 1, string.len(postfix)) then\n      longest = string.len(postfix)\n\
    \      break\n    end\n  end\n  -- Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n  local reverse =\
    \ string\n  for i = 1, string.len(string) - longest do\n    reverse = string.sub(reverse,\
    \ string.len(reverse) - 1, string.len(reverse))\n  end\n  return reverse .. postfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local prefix_length = 0\n    while palindrome ~= ''\
    \ do\n        local postfix = string\n        postfix = string.sub(palindrome,\
    \ 1, string.len(palindrome) - 1)\n        postfix = string.reverse(postfix)\n\
    \        if string.sub(palindrome, prefix_length, string.len(palindrome) - 1)\
    \ ~= postfix then\n            suffix = postfix .. suffix\n        else\n    \
    \        suffix = postfix .. suffix\n            palindrome = string.sub(palindrome,\
    \ string.len(palindrome) - 1, string.len(palindrome))\n        end\n        prefix_length\
    \ = prefix_length + 1\n    end\n    return suffix .. string.reverse(string.sub(palindrome,\
    \ prefix_length, string.len(palindrome)))\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest_postfix = string\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_index_length = string\n    local longest_postfix_index_length\
    \ = string\n    local longest_postfix_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpltg43igw.lua:75: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local longest_postfix\
    \ = 1\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local longest_postfix_length = #postfix\
    \ > longest_postfix and postfix_length or longest_postfix\n    postfix = string.sub(postfix,\
    \ 1, longest_postfix_length)\n    longest_postfix = #postfix > longest_postfix\
    \ and postfix_length or longest_postfix\n  end\n  -- Append to the end of the\
    \ string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  local reversed_postfix = string\n  local longest_reverse_postfix = 1\n  while\
    \ true do\n    local postfix_length = #reversed_postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local longest_reverse_postfix_length =\
    \ #reversed_postfix > longest_reverse_postfix and postfix_length or longest_reverse_postfix\n\
    \    reversed_postfix = string.sub(reversed_postfix, 1, longest_reverse_postfix_length)\n\
    \    longest_reverse_postfix = #reversed_postfix > longest_reverse_postfix and\
    \ postfix_length or longest_reverse_postfix\n  end\n  return reversed_postfix..\
    \ postfix .. reversed_postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local palindrome = string\n    local suffix = ''\n    local reverse = ''\n\
    \    local i = 1\n    while i <= #string do\n        local char = string.sub(string,i,i)\n\
    \        reverse = reverse .. char\n        if char == reverse then\n        \
    \    postfix = postfix .. suffix\n            palindrome = palindrome .. char\n\
    \            suffix = ''\n        else\n            suffix = suffix .. char\n\
    \        end\n        i = i + 1\n    end\n    return palindrome .. suffix\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjmmblf65.lua:36:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpjmmblf65.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  while true do\n    local postfix = postfix .. string\n    local\
    \ reverse = string.gsub(postfix, \"..$\", \"\")\n    if reverse == postfix then\n\
    \      longest = string.len(postfix)\n      break\n    end\n  end\n  -- Append\
    \ to the end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n  local palindrome = string\n  for i = 1, longest do\n    palindrome\
    \ = palindrome .. string.rep(\"..\", i)\n  end\n  return palindrome\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with supplied string.\n  local longest_palindrome = string\n  local\
    \ longest_palindrome_length = 0\n  local longest_palindrome_prefix = string\n\
    \  local longest_palindrome_suffix = string\n  local longest_palindrome_prefix_length\
    \ = 0\n  local longest_palindrome_suffix_length = 0\n  local longest_palindrome_prefix_reversed\
    \ = string\n  local longest_palindrome_suffix_reversed = string\n  local longest_palindrome_prefix_reversed_length\
    \ = 0\n  local longest_palindrome_suffix_reversed_length = 0\n  -- Find longest\
    \ palindrome that ends with supplied string.\n  local longest_palindrome_end =\
    \ string\n  local longest_palindrome_end_length = 0\n  local longest_palindrome_end_prefix\
    \ = string\n  local longest_palindrome_end_suffix = string\n  local longest_palindrome_end_prefix_length\
    \ = 0\n  local longest_palindrome_end_suffix_length = 0\n  local longest_palindrome_end_prefix_reversed\
    \ = string\n  local longest_palindrome_end_suffix_reversed = string\n  local longest_palindrome_end_prefix_reversed_length\
    \ = 0\n  local longest_palindrome_end_suffix_reversed_length = 0\n  -- Find longest\
    \ palindrome that begins with supplied string.\n  local longest_palindrome_begin\
    \ = string\n  local longest_palindrome_begin_length = 0\n  local longest_palindrome_begin_prefix\
    \ = string\n  local longest_palindrome_begin_suffix = string\n  local longest_palindrome_begin_prefix_length\
    \ = 0\n  local longest_palindrome_begin_suffix_length = 0\n  local longest_palindrome_begin_prefix_reversed\
    \ = string\n  local longest_palindrome_begin_suffix_reversed = string\n  local\
    \ longest_palindrome_begin_prefix_reversed_length = 0\n  local longest_palindrome_begin_suffix_reversed_length\
    \ = 0\n  -- Find longest palindrome that ends with supplied string.\n  local longest_palindrome_middle\
    \ = string\n  local longest_palindrome_middle_length = 0\n  local longest_palindrome_middle_prefix\
    \ = string\n  local longest_palindrome_middle_suffix = string\n  local longest_palindrome_middle_prefix_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpln4_0o5u.lua:62: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local palindrome = string\n    local length = #string\n    for i = 1, length\
    \ do\n        local char = string.sub(string,i,i)\n        local reverse = string.sub(string,i,#string-i-1)\n\
    \        if char == reverse then\n            postfix = string.sub(postfix,#postfix+1,#postfix)..reverse\n\
    \            palindrome = string.sub(palindrome,#palindrome+1,#palindrome)..char\n\
    \        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgmd227i.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpdgmd227i.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = string\n    local\
    \ reverse = ''\n    for i = #postfix, 1, -1 do\n      reverse = reverse .. postfix:sub(i,\
    \ i)\n    end\n    if reverse == postfix then\n      return string\n    end\n\
    \    string = string..reverse\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8sb1crnh.lua:32:\
    \ expected: \"xyzyx\"\nactual: \"xyzzyx\"\nstack traceback:\n\t/tmp/tmp8sb1crnh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_prefix_length = 1\n\
    \    while palindrome_prefix_length < palindrome_length do\n        local palindrome_prefix\
    \ = string\n        local palindrome_prefix_length = palindrome_prefix_length\
    \ + 1\n        local palindrome_suffix = string\n        local palindrome_suffix_length\
    \ = palindrome_length - palindrome_prefix_length\n        local palindrome_suffix_reverse\
    \ = string\n        local palindrome_suffix_reverse_length = palindrome_suffix_length\n\
    \        for i = 1, palindrome_suffix_length do\n            palindrome_suffix_reverse\
    \ = palindrome_suffix_reverse .. string[i]\n        end\n        if palindrome_prefix\
    \ .. palindrome_suffix ~= palindrome_prefix_reverse .. palindrome_suffix then\n\
    \            palindrome = palindrome .. palindrome_prefix .. palindrome_suffix\
    \ .. palindrome_suffix_reverse\n        end\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw7gbwimb.lua:23:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpw7gbwimb.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpw7gbwimb.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local suffix = ''\n    local length = 0\n   \
    \ while true do\n        length = length + 1\n        postfix = postfix .. string\n\
    \        local reverse = reverse(string)\n        if reverse == postfix then\n\
    \            palindrome = palindrome .. string\n            postfix = postfix\
    \ .. reverse\n        else\n            postfix = postfix .. reverse\n       \
    \ end\n        if postfix ~= suffix then\n            suffix = string\n      \
    \  end\n        if length == string.len(string) then\n            break\n    \
    \    end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9h9uzzpf.lua:19:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmp9h9uzzpf.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmp9h9uzzpf.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 0\n  local longest_postfix_index =\
    \ 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx0zlnyk5.lua:81: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix_length = 0\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjpxh3v7y.lua:80: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local prefix_length\
    \ = #string\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local reversed_postfix_length = #reversed_postfix\n\
    \    if reversed_postfix_length == 0 then\n      break\n    end\n    local postfix_char\
    \ = postfix[postfix_length - 1]\n    local reversed_postfix_char = reversed_postfix[reversed_postfix_length\
    \ - 1]\n    if postfix_char == reversed_postfix_char then\n      postfix = string\n\
    \      reversed_postfix = string\n      postfix_length = postfix_length - 1\n\
    \      reversed_postfix_length = reversed_postfix_length - 1\n      prefix_length\
    \ = prefix_length - 1\n    else\n      postfix = string\n      reversed_postfix\
    \ = string\n      postfix_length = postfix_length - 1\n      reversed_postfix_length\
    \ = reversed_postfix_length - 1\n    end\n  end\n  postfix = postfix .. reversed_postfix\n\
    \  return palindrome .. postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  local longest = 0\n  while true do\n    longest = longest\
    \ + 1\n    local postfix = string\n    local reverse = ''\n    for i = 1, longest\
    \ do\n      postfix = postfix .. string[i]\n      reverse = reverse .. string[#string\
    \ - i]\n    end\n    if reverse == postfix then\n      return string\n    end\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcamt4uww.lua:20:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpcamt4uww.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpcamt4uww.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix = string\n  local\
    \ longest_postfix_length = string\n  local longest_postfix_length_length = string\n\
    \  local longest_postfix_length_length_length = string\n  local longest_postfix_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length = string\n\
    \  local longest_postfix_length_length_length_length_length_length = string\n\
    \  local longest_postfix_length_length_length_length_length_length_length = string\n\
    \  local longest_postfix_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length\
    \ = string\n  local longest_postfix_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_length_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdblic8wc.lua:42: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local prefix_length = 0\n  local longest_postfix_length\
    \ = 0\n  local longest_postfix_length_index = 0\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_post\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc4df27qk.lua:81: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local longest_postfix\
    \ = 1\n  while true do\n    local postfix_length = #postfix - 1\n    local palindrome\
    \ = postfix:sub(1, postfix_length)\n    if palindrome == string.rev(palindrome)\
    \ then\n      longest_postfix = postfix_length\n      break\n    end\n    postfix\
    \ = postfix..postfix.\n  end\n  -- Append to the end of the string reverse of\
    \ a string prefix that comes before the palindromic suffix.\n  local palindrome_suffix\
    \ = string\n  local palindrome_suffix_index = 1\n  while true do\n    local palindrome_suffix_length\
    \ = #palindrome_suffix - 1\n    local palindrome_suffix = palindrome_suffix:sub(1,\
    \ palindrome_suffix_length)\n    if palindrome_suffix == string.rev(palindrome_suffix)\
    \ then\n      palindrome_suffix = palindrome_suffix..string.rev(palindrome_suffix:sub(palindrome_suffix_index))\n\
    \      palindrome_suffix_index = palindrome_suffix_index + 1\n      break\n  \
    \  end\n    palindrome_suffix = palindrome_suffix..palindrome_suffix:sub(palindrome_suffix_index)\n\
    \    palindrome_suffix_index = palindrome_suffix_index + 1\n  end\n  return string..palindrome_suffix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3zo_hg5m.lua:23: ''<name>'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = ''\n  \
    \  local longest = 0\n    for i = 1, #string do\n        local char = string.sub(string,i,i)\n\
    \        local reverse = string.sub(string.sub(string,1,i-1),1,#string-i-1)\n\
    \        if reverse == char then\n            longest = i\n        end\n     \
    \   suffix = suffix .. char\n    end\n    local prefix = string.sub(string,longest,longest)\n\
    \    return prefix .. suffix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphqq9rob8.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmphqq9rob8.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750567
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local postfix_len = #string\n\
    \  while postfix_len > 0 do\n    local postfix_len = postfix_len - 1\n    local\
    \ postfix_postfix = string\n    local postfix_postfix_len = #postfix_postfix\n\
    \    while postfix_postfix_len > 0 do\n      postfix_postfix = postfix_postfix\
    \ .. postfix_postfix:reverse()\n      postfix_postfix_len = postfix_postfix_len\
    \ - 1\n    end\n    if postfix_postfix ~= postfix then\n      postfix = postfix_postfix\n\
    \    end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  local palindrome = string\n  local\
    \ palindrome_len = #string\n  while palindrome_len > 0 do\n    local palindrome_len\
    \ = palindrome_len - 1\n    local palindrome_postfix = string\n    local palindrome_postfix_len\
    \ = #palindrome_postfix\n    while palindrome_postfix_len > 0 do\n      palindrome_postfix\
    \ = palindrome_postfix .. palindrome_postfix:reverse()\n      palindrome_postfix_len\
    \ = palindrome_postfix_len - 1\n    end\n    if palindrome_postfix ~= palindrome\
    \ then\n      palindrome = palindrome_postfix\n    end\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local palindrome = string\n    local length = #string\n    for i = 1, length\
    \ do\n        local char = string.sub(string,i,i)\n        postfix = string.sub(postfix,1,i-1)\
    \ .. char .. string.sub(postfix,i+1,length)\n        palindrome = string.sub(palindrome,1,i-1)\
    \ .. char .. string.sub(palindrome,i+1,length)\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqluaoi09.lua:28:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpqluaoi09.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  local palindrome_prefix_length = #string\n\
    \  local palindrome_prefix_postfix = string\n  local palindrome_prefix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix = string\n  local palindrome_prefix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix = string\n  local\
    \ palindrome_prefix_postfix_postfix_postfix_length = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_length =\
    \ #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix =\
    \ string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #string\n  local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptf5hm6ji.lua:43: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = string\n   \
    \ local longest_postfix_length = string\n    local longest_postfix_length_index\
    \ = 0\n    local longest_postfix_length_reverse = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_length_reverse_count = 0\n    local longest_postfix_length_reverse_count\
    \ = 0\n    local longest_postfix_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvje7j123.lua:71: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_start = #string\n  while\
    \ palindrome_length > 1 do\n    local palindrome_end = palindrome_start + palindrome_length\
    \ - 1\n    local palindrome_suffix = string[palindrome_start:palindrome_end]\n\
    \    local palindrome_prefix_length = #palindrome_suffix\n    local palindrome_prefix_start\
    \ = palindrome_end - palindrome_prefix_length\n    local palindrome_prefix_end\
    \ = palindrome_end - 1\n    local palindrome_prefix_suffix = string[palindrome_prefix_start:palindrome_prefix_end]\n\
    \    if palindrome_prefix_suffix == palindrome_suffix then\n      palindrome =\
    \ palindrome .. palindrome_suffix\n      palindrome_length = palindrome_length\
    \ - 1\n      palindrome_start = palindrome_end\n    else\n      palindrome = palindrome\
    \ .. palindrome_prefix_suffix .. palindrome_suffix\n      palindrome_length =\
    \ palindrome_length - 1\n      palindrome_start = palindrome_prefix_end\n    end\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdakais76.lua:17: function arguments expected near '']''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local longest = 0\n    local longestPostfix = ''\n    local longestPrefix\
    \ = ''\n    while true do\n        local postfix = string\n        local longest\
    \ = 0\n        local longestPostfix = ''\n        local longestPrefix = ''\n \
    \       for i = 1, #string do\n            local char = string[i]\n          \
    \  local reverse = string[#string]\n            local postfix = string\n     \
    \       local longest = 0\n            local longestPostfix = ''\n           \
    \ local longestPrefix = ''\n            if char == reverse then\n            \
    \    longest = longest + 1\n                longestPostfix = postfix .. char\n\
    \                longestPrefix = char .. reverse\n            else\n         \
    \       longest = 0\n                longestPostfix = ''\n                longestPrefix\
    \ = ''\n            end\n        end\n        if longest > #longestPostfix then\n\
    \            longest = #longestPostfix\n        end\n        if longest > #longestPrefix\
    \ then\n            longest = #longestPrefix\n        end\n        if longest\
    \ > #postfix then\n            longest = #postfix\n        end\n        if longest\
    \ > #string then\n            longest = #string\n        end\n        if longest\
    \ > #longestPostfix then\n            longest = #longestPostfix\n        end\n\
    \        if longest > #longestPrefix then\n            longest = #longestPrefix\n\
    \        end\n        if longest > #postfix then\n            longest = #postfix\n\
    \        end\n        if longest > #longestPostfix then\n            longest =\
    \ #longestPostfix\n        end\n        if longest > #longestPrefix then\n   \
    \         longest = #longestPrefix\n        end\n        if longest > #postfix\
    \ then\n            longest = #postfix\n        end\n        if longest > #longestPostfix\
    \ then\n            longest = #longestPostfix\n        end\n        if longest\
    \ > #longestPrefix then\n            longest = #longestPrefix\n        end\n \
    \       if longest > #postfix then\n            longest = #postfix\n        end\n\
    \        if longest > #longestPostfix then\n            longest = #longestPostfix\n\
    \        end\n        if longest > #longestPrefix then\n            longest =\
    \ #longestPrefix\n        end\n        if longest > #postfix then\n          \
    \  longest = #postfix\n        end\n        if longest > #longestPostfix then\n\
    \            longest = #longestPostfix\n        end\n        if longest > #longestPrefix\
    \ then\n            longest = #longestPrefix\n        end\n        if longest\
    \ > #postfix then\n            longest = #postfix\n        end\n        if longest\
    \ > \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyd4wcq08.lua:96: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local prefix_length = 0\n    local suffix_length = 0\n    local palindrome_length\
    \ = 0\n    while palindrome_length < #string do\n        local postfix = string[palindrome_length]\n\
    \        local postfix_length = #postfix\n        local postfix_reverse = string.reverse(postfix)\n\
    \        local postfix_reverse_length = #postfix_reverse\n        if postfix_length\
    \ == postfix_reverse_length then\n            local postfix_reverse_palindrome\
    \ = postfix_reverse\n            local postfix_reverse_palindrome_length = postfix_reverse_length\n\
    \            while postfix_reverse_palindrome_length < postfix_length do\n   \
    \             postfix_reverse_palindrome = postfix_reverse_palindrome .. string[postfix_reverse_palindrome_length]\n\
    \                postfix_reverse_palindrome_length = postfix_reverse_palindrome_length\
    \ + 1\n            end\n            if postfix_reverse == postfix_reverse_palindrome\
    \ then\n                prefix_length = prefix_length + 1\n                suffix_length\
    \ = suffix_length + postfix_length\n                palindrome = palindrome ..\
    \ postfix_reverse_palindrome\n                palindrome_length = palindrome_length\
    \ + postfix_reverse_palindrome_length\n            end\n        end\n    end\n\
    \    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wlheu6b.lua:18:\
    \ attempt to get length of local 'postfix' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp4wlheu6b.lua:18: in function 'candidate'\n\t/tmp/tmp4wlheu6b.lua:43: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix_length = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string_index = 0\n  local\
    \ longest_postfix_string_index2 = 0\n  local longest_postfix_string_index3 = 0\n\
    \  local longest_postfix_string_index4 = 0\n  local longest_postfix_string_index5\
    \ = 0\n  local longest_postfix_string_index6 = 0\n  local longest_postfix_string_index7\
    \ = 0\n  local longest_postfix_string_index8 = 0\n  local longest_postfix_string_index9\
    \ = 0\n  local longest_postfix_string_index10 = 0\n  local longest_postfix_string_index11\
    \ = 0\n  local longest_postfix_string_index12 = 0\n  local longest_postfix_string_index13\
    \ = 0\n  local longest_postfix_string_index14 = 0\n  local longest_postfix_string_index15\
    \ = 0\n  local longest_postfix_string_index16 = 0\n  local longest_postfix_string_index17\
    \ = 0\n  local longest_postfix_string_index18 = 0\n  local longest_postfix_string_index19\
    \ = 0\n  local longest_postfix_string_index20 = 0\n  local longest_postfix_string_index21\
    \ = 0\n  local longest_postfix_string_index22 = 0\n  local longest_postfix_string_index23\
    \ = 0\n  local longest_postfix_string_index24 = 0\n  local longest_postfix_string_index25\
    \ = 0\n  local longest_postfix_string_index26 = 0\n  local longest_postfix_string_index27\
    \ = 0\n  local longest_postfix_string_index28 = 0\n  local longest_postfix_string_index29\
    \ = 0\n  local longest_postfix_string_index30 = 0\n  local longest_postfix_string_index31\
    \ = 0\n  local longest_postfix_string_index32 = 0\n  local longest_postfix_string_index33\
    \ = 0\n  local longest_postfix_string_index34 = 0\n  local longest_postfix_string_index35\
    \ = 0\n  local longest_postfix_string_index36 = 0\n  local longest_postfix_string_index37\
    \ = 0\n  local longest_postfix_string_index38 = 0\n  local longest_postfix_string_index39\
    \ = 0\n  local longest_postfix_string_index40 = 0\n  local longest_postfix_string_index41\
    \ = 0\n  local longest_postfix_string_index42 = 0\n  local longest_postfix_string_index43\
    \ = 0\n  local longest_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppppqu_ri.lua:71: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local postfix_length = #string\n  while postfix_length\
    \ > 1 do\n    postfix = string.sub(string, 1, #string - 1)\n    postfix_length\
    \ = #postfix - 1\n    palindrome = string.sub(palindrome, #palindrome + 1)\n \
    \   palindrome = string.sub(palindrome, #palindrome - 1, #palindrome)\n  end\n\
    \  return palindrome .. reverse(string)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqvzde984.lua:21:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpqvzde984.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpqvzde984.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local palindrome = ''\n    while postfix ~= '' do\n\
    \        local postfix_reverse = reverse\n        reverse = postfix_reverse..postfix\n\
    \        postfix = postfix:sub(1,-2)\n        palindrome = palindrome..reverse\n\
    \    end\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt368g7_4.lua:29:\
    \ expected: \"xyzyx\"\nactual: \"xyzxyzxyxyzxyx\"\nstack traceback:\n\t/tmp/tmpt368g7_4.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local longest = 0\n  local longestPostfix = ''\n  while postfix ~= '' do\n\
    \    longest = longest + 1\n    longestPostfix = longestPostfix .. postfix:reverse()\n\
    \    postfix = string\n  end\n  return longestPostfix .. longest:reverse()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmv9miocy.lua:20:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmpmv9miocy.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpmv9miocy.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local palindrome = string\n  while true\
    \ do\n    local postfix_length = #postfix\n    if postfix_length == 0 then\n \
    \     break\n    end\n    local reversed_postfix_length = #reversed_postfix\n\
    \    if reversed_postfix_length == 0 then\n      break\n    end\n    local palindrome_length\
    \ = #palindrome\n    if palindrome_length == 0 then\n      break\n    end\n  \
    \  local postfix_postfix = postfix..postfix_length\n    local reversed_postfix_postfix\
    \ = reversed_postfix..reversed_postfix_length\n    local palindrome_postfix =\
    \ palindrome..palindrome_length\n    local postfix_postfix_palindrome = postfix_postfix..postfix_postfix_palindrome\n\
    \    local reversed_postfix_postfix_palindrome = reversed_postfix_postfix..reversed_postfix_postfix_palindrome\n\
    \    if postfix_postfix_palindrome == reversed_postfix_postfix_palindrome then\n\
    \      palindrome = palindrome_postfix\n    end\n    postfix = postfix_postfix..postfix_length\n\
    \    reversed_postfix = reversed_postfix_postfix..reversed_postfix_length\n  end\n\
    \  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5agn1eco.lua:31:\
    \ attempt to concatenate global 'postfix_postfix_palindrome' (a nil value)\nstack\
    \ traceback:\n\t/tmp/tmp5agn1eco.lua:31: in function 'candidate'\n\t/tmp/tmp5agn1eco.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = postfix..string\n\
    \    if string.len(postfix) == 0 then\n      break\n    end\n    local reverse\
    \ = reverse..string.sub(postfix, 1, string.len(postfix)-1)\n    if string.sub(postfix,\
    \ 1, string.len(postfix)) == reverse then\n      break\n    end\n  end\n  return\
    \ string..reverse\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local longest = 0\n    for i = 1, #string do\n   \
    \     local char = string[i]\n        local reverse = string[#string - i]\n  \
    \      if reverse == char then\n            longest = i\n        end\n       \
    \ suffix = suffix .. reverse\n    end\n    if longest > 0 then\n        palindrome\
    \ = string .. suffix\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp6az4yui.lua:21:\
    \ attempt to concatenate local 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpp6az4yui.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpp6az4yui.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_postfix = string\n\
    \    local palindrome_postfix_length = #string\n    local palindrome_postfix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n\
    \    local palindrome_postfix_reverse_suffix = ''\n    local palindrome_postfix_reverse_suffix_length\
    \ = #palindrome_postfix_reverse_suffix\n    local palindrome_postfix_reverse_suffix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_suffix_reverse_length = #palindrome_postfix_reverse_suffix_reverse\n\
    \    local palindrome_postfix_reverse_suffix_reverse_suffix = ''\n    local palindrome_postfix_reverse_suffix_reverse_suffix_length\
    \ = #palindrome_postfix_reverse_suffix_reverse_suffix\n    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #palindrome_postfix_reverse_suffix_reverse_suffix_reverse\n    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = ''\n    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = #palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix\n    local\
    \ palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse = ''\n\
    \    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\n\
    \    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = ''\n    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = #palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\n\
    \    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = #palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\n\
    \    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = ''\n    local palindrome_postfix_reverse_suffix_reverse_suffix_reverse_suffi\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp07ziy9sr.lua:47: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ ''\n  local longest_postfix_length = 0\n  local longest_postfix_index = 0\n\
    \  for i = 1, #string do\n    local postfix_length = string:sub(i, i)\n    if\
    \ postfix_length == 0 then\n      break\n    end\n    local postfix_index = #string\
    \ - postfix_length\n    local postfix = string:sub(i, i + postfix_length)\n  \
    \  local palindrome = postfix .. reverse(string:sub(i, postfix_index))\n    if\
    \ palindrome == string then\n      longest_postfix_length = postfix_length\n \
    \     longest_postfix_index = postfix_index\n    end\n  end\n  if longest_postfix_length\
    \ == 0 then\n    return ''\n  end\n  local postfix_length = string:sub(longest_postfix_index,\
    \ longest_postfix_index)\n  local postfix = string:sub(longest_postfix_index,\
    \ longest_postfix_index + postfix_length)\n  local palindrome = postfix .. reverse(string:sub(longest_postfix_index,\
    \ longest_postfix_index + postfix_length))\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuj10on2d.lua:20:\
    \ attempt to perform arithmetic on local 'postfix_length' (a string value)\nstack\
    \ traceback:\n\t/tmp/tmpuj10on2d.lua:20: in function 'candidate'\n\t/tmp/tmpuj10on2d.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_length = #string\n  local palindrome_postfix_index = 1\n\
    \  while palindrome_postfix_index < palindrome_length do\n    local palindrome_postfix_char\
    \ = palindrome_postfix:sub(palindrome_postfix_index, palindrome_postfix_index\
    \ + 1)\n    local palindrome_postfix_char_reverse = string.char(palindrome_postfix_char:reverse())\n\
    \    if palindrome_postfix_char == palindrome_postfix_char_reverse then\n    \
    \  palindrome = palindrome .. palindrome_postfix_char\n      palindrome_postfix\
    \ = palindrome_postfix .. palindrome_postfix_char_reverse\n      palindrome_postfix_length\
    \ = palindrome_postfix_length + 1\n      palindrome_postfix_index = palindrome_postfix_index\
    \ + 1\n    else\n      palindrome_postfix_length = palindrome_postfix_length +\
    \ 1\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp023jmqqy.lua:19:\
    \ bad argument #1 to 'char' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp023jmqqy.lua:19: in function 'candidate'\n\t/tmp/tmp023jmqqy.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix_length = 0\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    \  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local\
    \ longest_postfix_string = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string\
    \ = ''\n  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n\
    \  local longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local\
    \ longest_postfix_index = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index\
    \ = 0\n  local longest_postfix_string = ''\n  local longest_postfix_index = 0\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjpxh3v7y.lua:80: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750567
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local reversed_string\
    \ = string\n    local longest_postfix_length = 0\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    local longest_postfix_string = ''\n    local longest_postfix_index\
    \ = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj3150m8r.lua:81: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        local\
    \ index = string.find(postfix, longest, longest, longest)\n        if index ==\
    \ nil then\n            break\n        end\n        longest = index\n        reverse\
    \ = reverse .. string.sub(postfix, longest, longest)\n    end\n    return reverse\
    \ .. string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3pfiypco.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp3pfiypco.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local index = string.find(postfix,\
    \ '%a')\n    if index == nil then\n      return reverse\n    end\n    local prefix\
    \ = string.sub(postfix, 1, index - 1)\n    local suffix = string.sub(postfix,\
    \ index + 1)\n    reverse = reverse .. string.sub(prefix, 1, string.len(prefix)\
    \ - 1) .. suffix\n    postfix = string.sub(postfix, index + 1)\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lkuwgg6.lua:30:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmp3lkuwgg6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 0\n  local longest_postfix_string =\
    \ ''\n  local longest_postfix_index = 0\n  local longest_postfix_string_index\
    \ = 0\n  local longest_postfix_string_index2 = 0\n  local longest_postfix_string_index3\
    \ = 0\n  local longest_postfix_string_index4 = 0\n  local longest_postfix_string_index5\
    \ = 0\n  local longest_postfix_string_index6 = 0\n  local longest_postfix_string_index7\
    \ = 0\n  local longest_postfix_string_index8 = 0\n  local longest_postfix_string_index9\
    \ = 0\n  local longest_postfix_string_index10 = 0\n  local longest_postfix_string_index11\
    \ = 0\n  local longest_postfix_string_index12 = 0\n  local longest_postfix_string_index13\
    \ = 0\n  local longest_postfix_string_index14 = 0\n  local longest_postfix_string_index15\
    \ = 0\n  local longest_postfix_string_index16 = 0\n  local longest_postfix_string_index17\
    \ = 0\n  local longest_postfix_string_index18 = 0\n  local longest_postfix_string_index19\
    \ = 0\n  local longest_postfix_string_index20 = 0\n  local longest_postfix_string_index21\
    \ = 0\n  local longest_postfix_string_index22 = 0\n  local longest_postfix_string_index23\
    \ = 0\n  local longest_postfix_string_index24 = 0\n  local longest_postfix_string_index25\
    \ = 0\n  local longest_postfix_string_index26 = 0\n  local longest_postfix_string_index27\
    \ = 0\n  local longest_postfix_string_index28 = 0\n  local longest_postfix_string_index29\
    \ = 0\n  local longest_postfix_string_index30 = 0\n  local longest_postfix_string_index31\
    \ = 0\n  local longest_postfix_string_index32 = 0\n  local longest_postfix_string_index33\
    \ = 0\n  local longest_postfix_string_index34 = 0\n  local longest_postfix_string_index35\
    \ = 0\n  local longest_postfix_string_index36 = 0\n  local longest_postfix_string_index37\
    \ = 0\n  local longest_postfix_string_index38 = 0\n  local longest_postfix_string_index39\
    \ = 0\n  local longest_postfix_string_index40 = 0\n  local longest_postfix_string_index41\
    \ = 0\n  local longest_postfix_string_index42 = 0\n  local longest_postfix_string_index43\
    \ = 0\n  local longest_postfix_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp91c762th.lua:71: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while true do\n    local postfix = string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    local reverse = reverse .. string.sub(postfix,\
    \ 1, string.len(postfix) - 1)\n    if string.sub(postfix, 1, string.len(postfix))\
    \ == reverse then\n      break\n    end\n  end\n  return string .. reverse ..\
    \ postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxtu5a8q.lua:28:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpcxtu5a8q.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        longest\
    \ = longest + 1\n        local postfix_length = #postfix - 1\n        if postfix_length\
    \ == 0 then\n            break\n        end\n        local postfix_reverse = reverse:reverse()\n\
    \        if postfix_reverse == postfix_length then\n            postfix = postfix\
    \ .. postfix_reverse\n        else\n            postfix = postfix .. postfix_reverse:sub(1,\
    \ postfix_length) .. postfix_reverse:sub((postfix_length + 1), #postfix_reverse)\n\
    \        end\n        reverse = postfix_reverse\n    end\n    return postfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix = string.find(string, \"^(.-)$\"), \"\", \"\"\n  local longestPalindrome\
    \ = string\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\
    \"\n  local longestPalindromeLength = 0\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromeLength = 0\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromeLength = 0\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromeLength = 0\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromeLength = 0\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromeLength = 0\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromeLength = 0\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromeLength = 0\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromeLength = 0\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromeLength = 0\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromeLength = 0\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromeLength = 0\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromeLength = 0\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromeLength = 0\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromeLength = 0\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindrome\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc40g4tro.lua:58: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local longest = 0\n  local\
    \ longestLength = 0\n  for i = 1, #string do\n    local length = #string - i\n\
    \    if length > longest then\n      longest = length\n      longestLength = i\n\
    \    end\n  end\n  -- Append the reverse of the postfix to the end of the string.\n\
    \  local reverse = string\n  for i = 1, longestLength do\n    reverse = reverse..string[longestLength-i]\n\
    \  end\n  return reverse\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu42xhyn7.lua:26:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpu42xhyn7.lua:26:\
    \ in function 'candidate'\n\t/tmp/tmpu42xhyn7.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local prefix_length = 0\n    while palindrome ~= ''\
    \ do\n        local postfix_length = string.len(palindrome)\n        local postfix\
    \ = string.reverse(palindrome)\n        local postfix_with_prefix = postfix ..\
    \ suffix\n        local prefix_length = string.len(postfix_with_prefix)\n    \
    \    if string.sub(postfix_with_prefix, prefix_length + 1, prefix_length + 1 +\
    \ postfix_length) == postfix_with_prefix then\n            palindrome = postfix_with_prefix\n\
    \            suffix = postfix_with_prefix\n        else\n            palindrome\
    \ = ''\n        end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoj7q7jlh.lua:34:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpoj7q7jlh.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local function find_longest_palindrome(string, start,\
    \ end)\n    if start > end then return '' end\n    local palindrome = string[start:end]\n\
    \    local length = end - start\n    local reversed_palindrome = string[end -\
    \ length:end]\n    if palindrome == reversed_palindrome then\n      return palindrome\n\
    \    end\n    return find_longest_palindrome(string, start + 1, end - 1)\n  end\n\
    \  local longest_palindrome = find_longest_palindrome(string, 1, #string)\n  --\
    \ Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  local function append_to_end_of_string(string, start,\
    \ end)\n    if start > end then return '' end\n    local palindrome = string[start:end]\n\
    \    local length = end - start\n    local reversed_palindrome = string[end -\
    \ length:end]\n    if palindrome == reversed_palindrome then\n      return string\n\
    \    end\n    return string..reversed_palindrome\n  end\n  local result = append_to_end_of_string(string,\
    \ 1, #string)\n  return result..longest_palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl4q26ib1.lua:13: <name> or ''...'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  local palindrome = ''\n  while true do\n    local postfix_len\
    \ = #postfix\n    if postfix_len == 0 then\n      break\n    end\n    local postfix_reverse\
    \ = reverse..postfix\n    local postfix_palindrome = postfix_reverse:sub(1, #postfix_reverse)\n\
    \    if postfix_palindrome == postfix_reverse then\n      palindrome = postfix_palindrome\n\
    \      break\n    end\n    postfix = postfix:sub(1, #postfix)\n  end\n  return\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgvlzaen.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmptgvlzaen.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_start = #string\n  while\
    \ palindrome_length > 1 do\n    local palindrome_end = palindrome_start + palindrome_length\
    \ - 1\n    local palindrome_suffix = string[palindrome_end - 1]\n    local palindrome_prefix_start\
    \ = palindrome_end - 1\n    while palindrome_prefix_start > 0 do\n      local\
    \ palindrome_prefix_end = palindrome_prefix_start - 1\n      local palindrome_prefix_suffix\
    \ = string[palindrome_prefix_end]\n      local palindrome_prefix_suffix_reversed\
    \ = string[palindrome_prefix_end - 1]\n      if palindrome_prefix_suffix ~= palindrome_prefix_suffix_reversed\
    \ then\n        palindrome_prefix_end = palindrome_prefix_end - 1\n      end\n\
    \      local palindrome_prefix_suffix_reversed_reversed = string[palindrome_prefix_end\
    \ - 1]\n      if palindrome_prefix_suffix_reversed ~= palindrome_prefix_suffix_reversed_reversed\
    \ then\n        palindrome_prefix_end = palindrome_prefix_end - 1\n      end\n\
    \      local palindrome_prefix_suffix_reversed_reversed_reversed = string[palindrome_prefix_end\
    \ - 1]\n      if palindrome_prefix_suffix_reversed ~= palindrome_prefix_suffix_reversed_reversed_reversed\
    \ then\n        palindrome_prefix_end = palindrome_prefix_end - 1\n      end\n\
    \      local palindrome_prefix_suffix_reversed_reversed_reversed_reversed = string[palindrome_prefix_end\
    \ - 1]\n      if palindrome_prefix_suffix_reversed ~= palindrome_prefix_suffix_reversed_reversed_reversed_reversed\
    \ then\n        palindrome_prefix_end = palindrome_prefix_end - 1\n      end\n\
    \      local palindrome_prefix_suffix_reversed_reversed_reversed_reversed_reversed\
    \ = string[palindrome_prefix_end - 1]\n      if palindrome_prefix_suffix_reversed\
    \ ~= palindrome_prefix_suffix_reversed_reversed_reversed_reversed_reversed then\n\
    \        palindrome_prefix_end = palindrome_prefix_end - 1\n      end\n      local\
    \ palindrome_prefix_suffix_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = string[palindrome_prefix_end - 1]\n      if palindrome_prefix_suffix_reversed\
    \ ~= palin\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7ta5159n.lua:44: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while true do\n        local\
    \ start = string.find(postfix, reverse)\n        if start == nil then\n      \
    \      break\n        end\n        longest = start + longest\n        reverse\
    \ = string.sub(postfix, longest, start - 1)\n    end\n    return string.sub(postfix,\
    \ longest, string.len(postfix))\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix = string.find(string, \"^(.-)$\"), \"\", \"\"\n  for i = 1, string.len(string)\
    \ - 1 do\n    local prefix = string:sub(i, i)\n    local suffix = string:sub(i\
    \ + 1, string.len(string) - i)\n    local palindrome = longestPrefix .. prefix\
    \ .. longestSuffix .. suffix\n    if palindrome == longest:\n      longestPrefix,\
    \ longestSuffix = prefix, suffix\n    else\n      longest = palindrome\n     \
    \ longestPrefix, longestSuffix = prefix, suffix\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxq13d40y.lua:18: function arguments expected near '',''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = string\n   \
    \ local longest_postfix_length = string\n    local longest_postfix_length_index\
    \ = 0\n    local longest_postfix_length_reversed_index = 0\n    local longest_postfix_length_reversed_length\
    \ = 0\n    local longest_postfix_length_reversed_string = ''\n    local longest_postfix_length_reversed_string_index\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed = ''\n    local\
    \ longest_postfix_length_reversed_string_reversed_index = 0\n    local longest_postfix_length_reversed_string_reversed_length\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed = ''\n\
    \    local longest_postfix_length_reversed_string_reversed_reversed_index = 0\n\
    \    local longest_postfix_length_reversed_string_reversed_reversed_length = 0\n\
    \    local longest_postfix_length_reversed_string_reversed_reversed_reversed =\
    \ ''\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_index\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_length\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed\
    \ = ''\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_index\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_length\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_reversed\
    \ = ''\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_reversed_length\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = ''\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_index\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_length\
    \ = 0\n    local longest_postfix_length_reversed_string_reversed_reversed_reversed_reversed_reversed_reversed_reverse\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphajg15fm.lua:51: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local suffix = ''\n  \
    \  local longest_postfix = 1\n    local longest_postfix_index = 1\n    for i =\
    \ 1, #string do\n        local char = string.sub(i, i)\n        local reversed_char\
    \ = string.sub(string, #string - i, #string - i)\n        if char == reversed_char\
    \ then\n            suffix = char\n            longest_postfix = i\n        else\n\
    \            suffix = suffix .. char\n        end\n    end\n    local postfix_start\
    \ = longest_postfix - longest_postfix_index\n    local postfix_end = longest_postfix\
    \ + longest_postfix_index\n    local postfix_string = string.sub(string, postfix_start,\
    \ postfix_end)\n    local postfix_reversed_string = string.sub(string, postfix_start,\
    \ postfix_end)\n    for i = 1, #string do\n        local char = string.sub(i,\
    \ i)\n        local reversed_char = string.sub(string, #string - i, #string -\
    \ i)\n        if char == reversed_char then\n            postfix_reversed_string\
    \ = postfix_reversed_string .. char\n        end\n    end\n    return postfix_string\
    \ .. suffix .. postfix_reversed_string\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yq2_3at.lua:43:\
    \ expected: \"x\"\nactual: \"x1x\"\nstack traceback:\n\t/tmp/tmp3yq2_3at.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest_postfix = string\n  while true do\n    local postfix = postfix .. string\n\
    \    local reversed_postfix = string.reverse(postfix)\n    if reversed_postfix\
    \ ~= postfix then\n      longest_postfix = reversed_postfix\n      break\n   \
    \ end\n  end\n  -- Append to the end of the string reverse of a string prefix\
    \ that comes before the palindromic suffix.\n  return longest_postfix .. string.reverse(longest_postfix)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local palindrome = string\n    local\
    \ palindrome_length = #string\n    local palindrome_start = #string\n    local\
    \ palindrome_end = #string\n    local palindrome_prefix_length = #string\n   \
    \ local palindrome_prefix_start = #string\n    local palindrome_prefix_end = #string\n\
    \    local palindrome_suffix_length = #string\n    local palindrome_suffix_start\
    \ = #string\n    local palindrome_suffix_end = #string\n    while palindrome_end\
    \ > 0 do\n        -- Find the longest postfix that is a palindrome.\n        --\
    \ If no such postfix exists then stop.\n        if palindrome_end > palindrome_start\
    \ then\n            postfix = string.sub(palindrome, #palindrome, palindrome_end)\n\
    \            reversed_postfix = string.sub(reversed_postfix, #reversed_postfix,\
    \ #palindrome)\n            palindrome = string.sub(palindrome, palindrome_start,\
    \ palindrome_end)\n            palindrome_length = #palindrome\n            palindrome_start\
    \ = #palindrome\n            palindrome_end = #palindrome\n            palindrome_prefix_length\
    \ = #palindrome\n            palindrome_prefix_start = #palindrome\n         \
    \   palindrome_prefix_end = #palindrome\n            palindrome_suffix_length\
    \ = #palindrome\n            palindrome_suffix_start = #palindrome\n         \
    \   palindrome_suffix_end = #palindrome\n        end\n        -- Find the longest\
    \ postfix that is a palindrome.\n        -- If no such postfix exists then stop.\n\
    \        if palindrome_end > palindrome_start then\n            postfix = string.sub(palindrome,\
    \ #palindrome, palindrome_end)\n            reversed_postfix = string.sub(reversed_postfix,\
    \ #reversed_postfix, #palindrome)\n            palindrome = string.sub(palindrome,\
    \ palindrome_start, palindrome_end)\n            palindrome_length = #palindrome\n\
    \            palindrome_start = #palindrome\n            palindrome_end = #palindrome\n\
    \            palindrome_prefix_length = #palindrome\n            palindro\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp17ng6e6x.lua:52: ''='' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reversed_postfix = string\n  local prefix_length\
    \ = #string\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local reversed_postfix_length = #reversed_postfix\n\
    \    if reversed_postfix_length == 0 then\n      break\n    end\n    local postfix_char\
    \ = postfix[postfix_length]\n    local reversed_postfix_char = reversed_postfix[reversed_postfix_length]\n\
    \    if postfix_char == reversed_postfix_char then\n      postfix = string\n \
    \     reversed_postfix = string\n      postfix_length = postfix_length - 1\n \
    \     reversed_postfix_length = reversed_postfix_length - 1\n      postfix_char\
    \ = postfix[postfix_length]\n      reversed_postfix_char = reversed_postfix[reversed_postfix_length]\n\
    \    end\n    if postfix_length == 0 then\n      break\n    end\n    postfix =\
    \ string\n    reversed_postfix = string\n    postfix_length = postfix_length -\
    \ 1\n    reversed_postfix_length = reversed_postfix_length - 1\n    postfix_char\
    \ = postfix[postfix_length]\n    reversed_postfix_char = reversed_postfix[reversed_postfix_length]\n\
    \    if postfix_char == reversed_postfix_char then\n      postfix = string\n \
    \     reversed_postfix = string\n      postfix_length = postfix_length - 1\n \
    \     reversed_postfix_length = reversed_postfix_length - 1\n      postfix_char\
    \ = postfix[postfix_length]\n      reversed_postfix_char = reversed_postfix[reversed_postfix_length]\n\
    \    end\n  end\n  local palindrome_length = #palindrome\n  if palindrome_length\
    \ == 0 then\n    return ''\n  end\n  local palindrome_char = string[palindrome_length]\n\
    \  local reversed_palindrome_char = string[#string - palindrome_length]\n  if\
    \ palindrome_char == reversed_palindrome_char then\n    return string\n  end\n\
    \  return palindrome .. reversed_palindrome_char\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local postfix = string\n    local reverse = string\n    local length = #string\n\
    \    for i = 1, length / 2 do\n        postfix = string\n        reverse = string\n\
    \        postfix = postfix..string\n        reverse = reverse..string\n      \
    \  if postfix ~= reverse then\n            palindrome = palindrome..string\n \
    \       end\n    end\n    return palindrome\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjhxi6eph.lua:33:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpjhxi6eph.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with supplied string.\n  local longest_palindrome = string\n  local\
    \ longest_palindrome_length = #string\n  for i = 1, #string do\n    -- Find longest\
    \ palindrome that ends with supplied string.\n    local longest_palindrome_suffix\
    \ = string\n    local longest_palindrome_suffix_length = #string\n    for j =\
    \ 1, #string do\n      -- Find longest palindrome that begins with supplied string.\n\
    \      local longest_palindrome_prefix = string\n      local longest_palindrome_prefix_length\
    \ = #string\n      for k = 1, #string do\n        -- Find longest palindrome that\
    \ ends with supplied string.\n        local longest_palindrome_prefix_suffix =\
    \ string\n        local longest_palindrome_prefix_suffix_length = #string\n  \
    \      for l = 1, #string do\n          -- Find longest palindrome that begins\
    \ with supplied string.\n          local longest_palindrome_prefix_prefix_suffix\
    \ = string\n          local longest_palindrome_prefix_prefix_suffix_length = #string\n\
    \          for m = 1, #string do\n            -- Find longest palindrome that\
    \ ends with supplied string.\n            local longest_palindrome_prefix_prefix_prefix_suffix\
    \ = string\n            local longest_palindrome_prefix_prefix_prefix_suffix_length\
    \ = #string\n            for n = 1, #string do\n              -- Find longest\
    \ palindrome that begins with supplied string.\n              local longest_palindrome_prefix_prefix_prefix_prefix_suffix\
    \ = string\n              local longest_palindrome_prefix_prefix_prefix_prefix_suffix_length\
    \ = #string\n              for o = 1, #string do\n                -- Find longest\
    \ palindrome that ends with supplied string.\n                local longest_palindrome_prefix_prefix_prefix_prefix_prefix_suffix\
    \ = string\n                local longest_palindrome_prefix_prefix_prefix_prefix_prefix_suffix_length\
    \ = #string\n                for p = 1, #string do\n                  -- Find\
    \ longest palindrome that begins with supplied string.\n                  local\
    \ longest_palindrome_prefix_prefix_prefix_prefix_prefix_prefix_suffix = string\n\
    \                  local longest_palindrome_prefix_prefix_prefix_prefix_prefix_prefix_suffix_length\
    \ = #string\n                  for q = 1, #string do\n                    -- Find\
    \ longest palindrome that ends with supplied string.\n                    local\
    \ longest_palindrome_prefix_prefix_prefix_prefix_prefix_prefix_prefix_suffix =\
    \ string\n                    local longest_palindrome_prefix_prefix_prefix_prefix_prefix_prefix_prefix_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpatea69t7.lua:62: ''end'' expected (to close ''for'' at line
    47) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 1\n  while palindrome ~= string.sub(string, 1, prefix_length)\
    \ do\n    prefix_length = prefix_length + 1\n  end\n  local suffix_length = string.len(string)\
    \ - prefix_length\n  local reversed_suffix_length = suffix_length\n  while reversed_suffix_length\
    \ > 0 do\n    local reversed_suffix = string.sub(string, prefix_length, reversed_suffix_length)\n\
    \    if reversed_suffix ~= reversed_suffix then\n      reversed_suffix = reversed_suffix\
    \ .. reversed_suffix\n    end\n    local reversed_suffix_length = reversed_suffix_length\
    \ - 1\n    prefix_length = prefix_length + 1\n  end\n  local reversed_prefix =\
    \ string.sub(string, 1, prefix_length)\n  if reversed_prefix ~= reversed_prefix\
    \ then\n    reversed_prefix = reversed_prefix .. reversed_prefix\n  end\n  palindrome\
    \ = string.sub(string, prefix_length + reversed_suffix_length)\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpde3eaj7l.lua:40:\
    \ expected: \"xyzyx\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpde3eaj7l.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix, longestPostfix, longestPalindrome = string.find(string, \"^(.-)$\"\
    ), string.find(string, \"^(.-)$\"), string.find(string, \"^(.-)$\"), string.find(string,\
    \ \"^(.-)$\"), \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = string.find(string, \"^(.-)$\"), string.find(string, \"^(.-)$\")\n  if longest\
    \ ~= nil then\n    longest = longest:gsub(\"(.-)$\", \"%1\")\n    longestPrefix\
    \ = longestPrefix:gsub(\"(.-)$\", \"%1\")\n    longestSuffix = longestSuffix:gsub(\"\
    (.-)$\", \"%1\")\n    longestPostfix = longestPostfix:gsub(\"(.-)$\", \"%1\")\n\
    \    longestPalindrome = longestPalindrome:gsub(\"(.-)$\", \"%1\")\n    longestPalindromePrefix\
    \ = longestPalindromePrefix:gsub(\"(.-)$\", \"%1\")\n    longestPalindromeSuffix\
    \ = longestPalindromeSuffix:gsub(\"(.-)$\", \"%1\")\n  end\n  if longestPalindrome\
    \ ~= nil then\n    longestPalindrome = longestPalindrome:gsub(\"(.-)$\", \"%1\"\
    )\n  end\n  if longestPalindromePrefix ~= nil then\n    longestPalindromePrefix\
    \ = longestPalindromePrefix:gsub(\"(.-)$\", \"%1\")\n  end\n  if longestPalindromeSuffix\
    \ ~= nil then\n    longestPalindromeSuffix = longestPalindromeSuffix:gsub(\"(.-)$\"\
    , \"%1\")\n  end\n  if longestPalindromePrefix ~= nil and longestPalindromeSuffix\
    \ ~= nil then\n    if longestPalindromePrefix:len() < longestPalindromeSuffix:len()\
    \ then\n      longestPalindrome = longestPalindromePrefix\n      longestPalindromePrefix\
    \ = longestPalindromePrefix:gsub(\"(.-)$\", \"%1\")\n    else\n      longestPalindrome\
    \ = longestPalindromeSuffix\n      longestPalindromeSuffix = longestPalindromeSuffix:gsub(\"\
    (.-)$\", \"%1\")\n    end\n  end\n  if longestPalindromePrefix ~= nil then\n \
    \   longestPalindro\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6go9zw3y.lua:43: ''='' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local prefix_length = 0\n  while true do\n    local postfix\
    \ = string\n    prefix_length = prefix_length + 1\n    for i = prefix_length +\
    \ string.length .. 1, string.length do\n      postfix = postfix .. string[prefix_length]\n\
    \    end\n    if suffix == postfix then\n      palindrome = string\n      break\n\
    \    end\n    suffix = postfix .. reverse(suffix)\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2eolygzz.lua:18:\
    \ attempt to perform arithmetic on field 'length' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp2eolygzz.lua:18: in function 'candidate'\n\t/tmp/tmp2eolygzz.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 0\n  local longest_postfix_index =\
    \ 0\n  for i = 1, #string do\n    local postfix_length = string.len(string.sub(reversed_string,\
    \ i, i))\n    if postfix_length > longest_postfix_length then\n      longest_postfix_length\
    \ = postfix_length\n      longest_postfix_index = i\n    end\n  end\n  local postfix_length\
    \ = string.len(string.sub(reversed_string, longest_postfix_index, longest_postfix_index))\n\
    \  local postfix_reversed_string = string.sub(reversed_string, longest_postfix_index,\
    \ longest_postfix_index + postfix_length)\n  return string.reverse(postfix_reversed_string)\
    \ .. postfix_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuzwx336_.lua:24:\
    \ attempt to concatenate global 'postfix_string' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpuzwx336_.lua:24: in function 'candidate'\n\t/tmp/tmpuzwx336_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local suffix = ''\n    local palindrome = ''\n    while postfix ~= '' do\n\
    \        local postfix_reverse = string.gsub(postfix, '^.', '')\n        local\
    \ postfix_reverse = string.gsub(postfix_reverse, '.$', '')\n        local postfix_reverse\
    \ = string.gsub(postfix_reverse, '^..$', '')\n        local postfix_reverse =\
    \ string.gsub(postfix_reverse, '^..', '')\n        local postfix_reverse = string.gsub(postfix_reverse,\
    \ '^.^', '')\n        local postfix_reverse = string.gsub(postfix_reverse, '^..^',\
    \ '')\n        local postfix_reverse = string.gsub(postfix_reverse, '^.', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^$', '')\n    \
    \    local postfix_reverse = string.gsub(postfix_reverse, '^%', '')\n        local\
    \ postfix_reverse = string.gsub(postfix_reverse, '^%$', '')\n        local postfix_reverse\
    \ = string.gsub(postfix_reverse, '^%^', '')\n        local postfix_reverse = string.gsub(postfix_reverse,\
    \ '^%^$', '')\n        local postfix_reverse = string.gsub(postfix_reverse, '^%^%',\
    \ '')\n        local postfix_reverse = string.gsub(postfix_reverse, '^%^%$', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^%^%^', '')\n \
    \       local postfix_reverse = string.gsub(postfix_reverse, '^%^%^$', '')\n \
    \       local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%', '')\n \
    \       local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%$', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%^', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%^$', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%^%', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%^%$', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%^%^', '')\n\
    \        local postfix_reverse = string.gsub(postfix_reverse, '^%^%^%^%^$', '')\n\
    \        local postfix_reverse = string.gsub(postfix_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2sok1qj_.lua:41: '')'' expected (to close ''('' at line 40)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local longest_postfix = 1\n    local longest_postfix_length\
    \ = 1\n    local longest_postfix_index = 1\n    local longest_postfix_index2 =\
    \ 0\n    local longest_postfix_index3 = 0\n    local longest_postfix_index4 =\
    \ 0\n    local longest_postfix_index5 = 0\n    local longest_postfix_index6 =\
    \ 0\n    local longest_postfix_index7 = 0\n    local longest_postfix_index8 =\
    \ 0\n    local longest_postfix_index9 = 0\n    local longest_postfix_index10 =\
    \ 0\n    local longest_postfix_index11 = 0\n    local longest_postfix_index12\
    \ = 0\n    local longest_postfix_index13 = 0\n    local longest_postfix_index14\
    \ = 0\n    local longest_postfix_index15 = 0\n    local longest_postfix_index16\
    \ = 0\n    local longest_postfix_index17 = 0\n    local longest_postfix_index18\
    \ = 0\n    local longest_postfix_index19 = 0\n    local longest_postfix_index20\
    \ = 0\n    local longest_postfix_index21 = 0\n    local longest_postfix_index22\
    \ = 0\n    local longest_postfix_index23 = 0\n    local longest_postfix_index24\
    \ = 0\n    local longest_postfix_index25 = 0\n    local longest_postfix_index26\
    \ = 0\n    local longest_postfix_index27 = 0\n    local longest_postfix_index28\
    \ = 0\n    local longest_postfix_index29 = 0\n    local longest_postfix_index30\
    \ = 0\n    local longest_postfix_index31 = 0\n    local longest_postfix_index32\
    \ = 0\n    local longest_postfix_index33 = 0\n    local longest_postfix_index34\
    \ = 0\n    local longest_postfix_index35 = 0\n    local longest_postfix_index36\
    \ = 0\n    local longest_postfix_index37 = 0\n    local longest_postfix_index38\
    \ = 0\n    local longest_postfix_index39 = 0\n    local longest_postfix_index40\
    \ = 0\n    local longest_postfix_index41 = 0\n    local longest_postfix_index42\
    \ = 0\n    local longest_postfix_index43 = 0\n    local longest_postfix_index44\
    \ = 0\n    local longest_postfix_index45 = 0\n    local longest_postfix_index46\
    \ = 0\n    local longest_postfix_index47 = 0\n    local longest_postfix_index48\
    \ = 0\n    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp97y1dg3f.lua:76: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix, longestPostfix, longestPostfixLength, longestPostfixLengthRemaining,\
    \ longestPostfixLengthRemainingRemaining, longestPostfixLengthRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemaining, longestPostfixLengthRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaininging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaininging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaining,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaininging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaininging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemainingRemaininging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemaininginging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemaininginging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemaininginging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemaininginginging,\
    \ longestPostfixLengthRemainingRemainingRemainingRemainingRemainingRemainingRemaininginginging,\
    \ longestPost\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl7r4uhy_.lua:24: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local longest = 0\n    for i = 1, #string do\n   \
    \     local char = string[i]\n        local reverse = string[#string]\n      \
    \  if char == reverse then\n            longest = i\n        else\n          \
    \  suffix = suffix .. char\n        end\n    end\n    if longest > 0 then\n  \
    \      local reverse = string[#string]\n        local prefix = string\n      \
    \  for i = 1, longest do\n            prefix = prefix .. string[i]\n        end\n\
    \        palindrome = prefix .. reverse .. suffix\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbsvjeses.lua:28:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpbsvjeses.lua:28:\
    \ in function 'candidate'\n\t/tmp/tmpbsvjeses.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest = string.len(string)\n    for i = 1, string.len(string) - 1\
    \ do\n        local prefix = string.sub(palindrome, i, i + 1)\n        local suffix\
    \ = string.sub(palindrome, i + 1, i + 2)\n        if suffix == reverse and prefix\
    \ ~= '' then\n            longest = i\n            palindrome = string.sub(palindrome,\
    \ longest, longest + string.len(prefix))\n        end\n    end\n    return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpizielr95.lua:30:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpizielr95.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_suffix = string\n  local\
    \ palindrome_prefix_length = #string\n  local palindrome_prefix_suffix = string\n\
    \  local palindrome_prefix_suffix_length = #string\n  while palindrome_length\
    \ > 1 do\n    -- Find the longest postfix that is a palindrome.\n    palindrome_suffix\
    \ = string\n    for i = palindrome_prefix_length + 1, palindrome_length do\n \
    \     palindrome_suffix = palindrome_suffix .. string[i]\n    end\n    palindrome_prefix_length\
    \ = #palindrome_suffix\n    -- Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    palindrome_prefix_suffix\
    \ = string\n    for i = 1, palindrome_prefix_length do\n      palindrome_prefix_suffix\
    \ = palindrome_prefix_suffix .. string[i]\n    end\n    palindrome_prefix_suffix_length\
    \ = #palindrome_prefix_suffix\n    palindrome = palindrome .. string[palindrome_prefix_length]\
    \ .. palindrome_suffix .. string[palindrome_prefix_suffix_length]\n    palindrome_length\
    \ = palindrome_length - 1\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9n9y8_7m.lua:28:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp9n9y8_7m.lua:28:\
    \ in function 'candidate'\n\t/tmp/tmp9n9y8_7m.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest = string.len(string)\n  local reverse = string.reverse(string)\n\
    \  local prefix = string.sub(string, 1, longest)\n  local suffix = string.sub(reverse,\
    \ longest)\n  local suffix = string.sub(suffix, 1, longest)\n  local suffixReverse\
    \ = string.reverse(suffix)\n  local suffixPrefix = string.sub(suffix, 1, longest)\n\
    \  local suffixPrefixReverse = string.reverse(suffixPrefix)\n  local suffixPrefixSuffix\
    \ = string.sub(suffix, 1, longest)\n  local suffixPrefixSuffixReverse = string.reverse(suffixPrefixSuffix)\n\
    \  local suffixPrefixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse =\
    \ string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse =\
    \ string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse =\
    \ string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse\
    \ = string.reverse(suffixPrefixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixSuffixReverse)\n\
    \  local suffixPrefixSuffixSuffixSuffixSuffixSuffix\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4gec3sed.lua:50: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if string.find(postfix, palindrome) then\n\
    \      palindrome = palindrome .. reverse\n      break\n    end\n    reverse =\
    \ reverse .. reverse\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpom57pyjn.lua:30:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpom57pyjn.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- If the string is empty,\
    \ return an empty string.\n  if string == '' then\n    return ''\n  end\n  --\
    \ Find the longest postfix that is a palindrome.\n  local postfix = string\n \
    \ while true do\n    local postfix = postfix .. string\n    if string.find(postfix,\
    \ string.reverse(postfix)) then\n      break\n    end\n  end\n  -- Append the\
    \ reverse of the postfix to the end of the string.\n  local result = string\n\
    \  result = result .. string.reverse(postfix)\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkqqrp659.lua:34:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpkqqrp659.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  while\
    \ true do\n    local postfix = string.sub(postfix, 1, string.len(postfix) - 1)\n\
    \    if string.sub(postfix, 1, string.len(postfix)) ~= string.sub(postfix, 1,\
    \ string.len(postfix) - 1) then\n      break\n    end\n  end\n  -- Append to the\
    \ end of the string reverse of a string prefix that comes before the palindromic\
    \ suffix.\n  local reversed_prefix = string.sub(postfix, 1, string.len(postfix)\
    \ - 1)\n  local reversed_suffix = string.sub(postfix, string.len(postfix) - 1,\
    \ string.len(postfix))\n  return reversed_prefix .. reversed_suffix\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 1\n  local longest_postfix_start =\
    \ string\n  local longest_postfix_end = ''\n  local longest_postfix_postfix_length\
    \ = 1\n  local longest_postfix_postfix_start = string\n  local longest_postfix_postfix_end\
    \ = ''\n  local longest_postfix_postfix_postfix_length = 1\n  local longest_postfix_postfix_postfix_start\
    \ = string\n  local longest_postfix_postfix_postfix_end = ''\n  while true do\n\
    \    local postfix_start = reversed_string\n    local postfix_end = string\n \
    \   local postfix_postfix_start = reversed_string\n    local postfix_postfix_end\
    \ = string\n    local postfix_postfix_postfix_start = reversed_string\n    local\
    \ postfix_postfix_postfix_end = string\n    local postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_postfix_postfix_postfix_end = string\n\
    \    local postfix_postfix_postfix_postfix_postfix_start = reversed_string\n \
    \   local postfix_postfix_postfix_postfix_postfix_end = string\n    local postfix_postfix_postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_postfix_postfix_postfix_postfix_postfix_end\
    \ = string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_postfix_postfix_postfix_postfix_postfix_end\
    \ = string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_end\
    \ = string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_end\
    \ = string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_end\
    \ = string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_end\
    \ = string\n    local postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_start\
    \ = reversed_string\n    local postfix_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4gt1xrmr.lua:58: ''end'' expected (to close ''while'' at line
    22) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = string\n \
    \ local longest_postfix_reverse = string\n  local longest_postfix_reverse_length\
    \ = string\n  local longest_postfix_reverse_length_index = 0\n  local longest_postfix_reverse_length_reverse\
    \ = 0\n  local longest_postfix_reverse_length_length = 0\n  local longest_postfix_reverse_length_length_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse = 0\n  local\
    \ longest_postfix_reverse_length_length_length_reverse_index = 0\n  local longest_postfix_reverse_length_length_length_reverse_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse_index = 0\n\
    \  local longest_postfix_reverse_length_length_length_reverse_index = 0\n  local\
    \ longest_postfix_reverse_length_length_length_reverse_index = 0\n  local longest_postfix_reverse_length_length_length_reverse_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse_index = 0\n\
    \  local longest_postfix_reverse_length_length_length_reverse_index = 0\n  local\
    \ longest_postfix_reverse_length_length_length_reverse_index = 0\n  local longest_postfix_reverse_length_length_length_reverse_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse_index = 0\n\
    \  local longest_postfix_reverse_length_length_length_reverse_index = 0\n  local\
    \ longest_postfix_reverse_length_length_length_reverse_index = 0\n  local longest_postfix_reverse_length_length_length_reverse_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse_index = 0\n\
    \  local longest_postfix_reverse_length_length_length_reverse_index = 0\n  local\
    \ longest_postfix_reverse_length_length_length_reverse_index = 0\n  local longest_postfix_reverse_length_length_length_reverse_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse_index = 0\n\
    \  local longest_postfix_reverse_length_length_length_reverse_index = 0\n  local\
    \ longest_postfix_reverse_length_length_length_reverse_index = 0\n  local longest_postfix_reverse_length_length_length_reverse_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse_index = 0\n\
    \  local longest_postfix_reverse_length_length_length_reverse_index = 0\n  local\
    \ longest_postfix_reverse_length_length_length_reverse_index = 0\n  local longest_postfix_reverse_length_length_length_reverse_index\
    \ = 0\n  local longest_postfix_reverse_length_length_length_reverse_index = 0\n\
    \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqos0ii_k.lua:61: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local postfix = string\n  local longest = 0\n  for\
    \ i = #string - 1, 1, -1 do\n    if string[i] == string[#string] then\n      longest\
    \ = i\n    end\n  end\n  -- Append the reverse of the postfix to the end of the\
    \ string.\n  postfix = string.sub(string, (longest - 1) + 1, longest)\n  postfix\
    \ = string.reverse(postfix)\n  return string\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19d1xs17.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp19d1xs17.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local postfix = string\n  local\
    \ longest = 0\n  while true do\n    local postfix = string.sub(postfix, 1, string.len(postfix)\
    \ - longest)\n    local reverse = string.sub(string.sub(postfix, 1, string.len(postfix)\
    \ - 1), 1, string.len(postfix) - 1)\n    if reverse == postfix then\n      longest\
    \ = string.len(postfix)\n      break\n    end\n  end\n  -- Append to the end of\
    \ the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  local result = string\n  for i = 1, string.len(string) - longest do\n    result\
    \ = string.sub(result, 1, string.len(result) - 1) + string.sub(string.sub(string,\
    \ 1, string.len(string) - 1), 1, string.len(string) - i - 1)\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = string\n \
    \ local longest_postfix_suffix_length = string\n  local longest_postfix_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_length = string\n  local longest_postfix_suffix_reverse_suffix\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_length = string\n  local\
    \ longest_postfix_suffix_reverse_suffix_reverse = string\n  local longest_postfix_suffix_reverse_suffix_reverse_length\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix = string\n\
    \  local longest_postfix_suffix_reverse_suffix_reverse_suffix_length = string\n\
    \  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse = string\n\
    \  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_length =\
    \ string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_length\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_length\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse\
    \ = string\n  local longest_postfix_suffix_reverse_suffix_reverse_suffix_reverse_suffix_reverse_suffi\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp29p0tisr.lua:51: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local suffix = ''\n  local length = 0\n  while true\
    \ do\n    length = length + 1\n    postfix = string.sub(postfix, 1, length-1)\n\
    \    suffix = string.sub(suffix, 1, length-1)\n    if suffix == suffix then\n\
    \      palindrome = string.sub(palindrome, 1, length-1)\n      break\n    end\n\
    \  end\n  return palindrome .. suffix .. reverse(string)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm831xftq.lua:25:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpm831xftq.lua:25:\
    \ in function 'candidate'\n\t/tmp/tmpm831xftq.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = postfix .. reverse\n    if postfix ~= palindrome then\n      palindrome\
    \ = postfix\n      break\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750577
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local longest_postfix_length = 1\n  for i = 1, #string\
    \ do\n    local postfix = string..suffix\n    local postfix_length = #postfix\n\
    \    if postfix_length == 0 then\n      break\n    end\n    if postfix_length\
    \ < longest_postfix_length then\n      longest_postfix_length = postfix_length\n\
    \    end\n    suffix = postfix_length..postfix\n  end\n  local postfix_length\
    \ = #suffix\n  if postfix_length == 0 then\n    return ''\n  end\n  local postfix\
    \ = string..suffix\n  local postfix_length = #postfix\n  if postfix_length ==\
    \ 0 then\n    return ''\n  end\n  local postfix_length = #postfix\n  local reversed_postfix\
    \ = reverse(postfix)\n  local reversed_postfix_length = #reversed_postfix\n  if\
    \ postfix_length == 0 then\n    return ''\n  end\n  if postfix_length < longest_postfix_length\
    \ then\n    longest_postfix_length = postfix_length\n  end\n  local postfix_length\
    \ = #postfix\n  local reversed_postfix = reverse(postfix)\n  local reversed_postfix_length\
    \ = #reversed_postfix\n  if postfix_length == 0 then\n    return ''\n  end\n \
    \ if postfix_length < longest_postfix_length then\n    longest_postfix_length\
    \ = postfix_length\n  end\n  local postfix_length = #postfix\n  local reversed_postfix\
    \ = reverse(postfix)\n  local reversed_postfix_length = #reversed_postfix\n  if\
    \ postfix_length == 0 then\n    return ''\n  end\n  if postfix_length < longest_postfix_length\
    \ then\n    longest_postfix_length = postfix_length\n  end\n  local postfix_length\
    \ = #postfix\n  local reversed_postfix = reverse(postfix)\n  local reversed_postfix_length\
    \ = #reversed_postfix\n  if postfix_length == 0 then\n    return ''\n  end\n \
    \ if postfix_length < longest_postfix_length then\n    longest_postfix_length\
    \ = postfix_length\n  end\n  local postfix_length = #postfix\n  local reversed_postfix\
    \ = reverse(postfix)\n  local reversed_postfix_length = #reversed_postfix\n  if\
    \ postfix_length == 0 then\n    return ''\n  end\n  if postfix_length < longest_postfix_length\
    \ then\n    longest_postfix_length = postfix_length\n  end\n  local postfix_length\
    \ = #postfix\n  local reversed_postfix = reverse(postfix)\n  local reversed_postfix_length\
    \ = #\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw0z0dxkc.lua:83: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local longest =\
    \ 0\n  for i = 1, #string do\n    local length = #string - i\n    if length >\
    \ longest then\n      longest = length\n      postfix = string.sub(string, 1,\
    \ i) + string.reverse(string.sub(string, 1, i - 1)) + string.sub(string, i + 1)\n\
    \    end\n  end\n  return postfix\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsq6_f313.lua:19:\
    \ attempt to perform arithmetic on a string value\nstack traceback:\n\t/tmp/tmpsq6_f313.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpsq6_f313.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_postfix_length = #string\n\
    \  local longest_postfix_index = 1\n  local longest_postfix_index2 = 0\n  while\
    \ longest_postfix_index < longest_postfix_length do\n    local postfix = string\n\
    \    postfix = string.sub(postfix, 1, longest_postfix_index2)\n    postfix = string.sub(postfix,\
    \ longest_postfix_index2, #postfix)\n    postfix = string.gsub(postfix, '(.)\\\
    \\1', '%1')\n    if string.sub(postfix, 1, #postfix) == string.sub(postfix, 1,\
    \ #postfix) then\n      longest_postfix = postfix\n      longest_postfix_length\
    \ = #postfix\n      longest_postfix_index = longest_postfix_index + 1\n      longest_postfix_index2\
    \ = longest_postfix_index2 + 1\n    end\n  end\n  longest_postfix = string.sub(longest_postfix,\
    \ 1, longest_postfix_index2)\n  longest_postfix = string.sub(longest_postfix,\
    \ longest_postfix_index2, #longest_postfix)\n  longest_postfix = string.gsub(longest_postfix,\
    \ '(.)\\\\1', '%1')\n  if string.sub(longest_postfix, 1, #longest_postfix) ==\
    \ string.sub(longest_postfix, 1, #longest_postfix) then\n    palindrome = palindrome\
    \ .. longest_postfix\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jgycqeb.lua:43:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmp8jgycqeb.lua:43:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local longest = 0\n    for i = 1, #string do\n   \
    \     local char = string.sub(string,i,i)\n        local reverse = string.sub(string.gsub(char,string.reverse,string),1,#char)\n\
    \        if reverse == char then\n            longest = i\n            suffix\
    \ = reverse\n        else\n            longest = longest\n        end\n    end\n\
    \    if longest > 0 then\n        palindrome = string.sub(string,longest,longest)\n\
    \        palindrome = palindrome .. suffix\n    end\n    return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7waxmu1b.lua:17:\
    \ bad argument #2 to 'gsub' (string expected, got function)\nstack traceback:\n\
    \t/tmp/tmp7waxmu1b.lua:17: in function 'candidate'\n\t/tmp/tmp7waxmu1b.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_len = #string\n    local palindrome_postfix = string\n \
    \   local palindrome_prefix_len = #string\n    local palindrome_prefix_postfix\
    \ = string\n    local palindrome_prefix_postfix_len = #string\n    local palindrome_prefix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_len = #string\n    local\
    \ palindrome_prefix_postfix_postfix_postfix = string\n    local palindrome_prefix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix = string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_len = #string\n \
    \   local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_len = #string\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix =\
    \ string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_len\
    \ = #string\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqh68fegt.lua:46: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reversed_postfix = string\n    local longest_postfix = 1\n    local\
    \ longest_postfix_length = 1\n    local longest_postfix_index = 1\n    local longest_postfix_index_length\
    \ = 1\n    local longest_postfix_index_index = 1\n    local longest_postfix_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_index_index_index = 1\n    local longest_postfix_index_index_index_length\
    \ = 1\n    local longest_postfix_index_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1yms1k2g.lua:68: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local postfix_length = #string\n  local palindrome_length\
    \ = #palindrome\n  while postfix_length >= palindrome_length do\n    postfix =\
    \ string\n    postfix_length = #string\n    local reversed_postfix = reverse(string)\n\
    \    if postfix ~= reversed_postfix then\n      postfix = postfix .. reversed_postfix\n\
    \      postfix_length = #postfix\n    end\n  end\n  return palindrome .. reverse(string)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkavki_3b.lua:19:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmpkavki_3b.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkavki_3b.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local palindrome_length = #string\n    local palindrome_postfix = string\n\
    \    local palindrome_postfix_length = #string\n    local palindrome_postfix_reverse\
    \ = ''\n    local palindrome_postfix_reverse_length = #palindrome_postfix_reverse\n\
    \    local palindrome_prefix_reverse = ''\n    local palindrome_prefix_reverse_length\
    \ = #palindrome_prefix_reverse\n    local palindrome_prefix_length = 0\n    local\
    \ palindrome_prefix_length_reverse = 0\n    local palindrome_prefix_length_reverse_count\
    \ = 0\n    local palindrome_prefix_reverse_index = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindrome_prefix_reverse_index_count = 0\n    local palindrome_prefix_reverse_index_count\
    \ = 0\n    local palindro\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6wcm00fc.lua:69: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest_postfix = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = string\n  local longest_prefix_end = string\n  local\
    \ longest_prefix_length = string\n  local longest_prefix_start = string\n  local\
    \ longest_prefix_end = string\n  local longest_prefix_length = string\n  local\
    \ longest_prefix_start = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0t38qrk3.lua:76: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local suffix = ''\n  local suffix_length = 0\n  local suffix_index = 1\n  while\
    \ suffix_length > 0 do\n    local suffix_length = suffix_length - 1\n    suffix\
    \ = string.sub(string, suffix_index, suffix_length) .. suffix\n    suffix_index\
    \ = suffix_index + suffix_length\n    local suffix_length = suffix_length + 1\n\
    \    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n    local suffix_length = suffix_length\
    \ + 1\n    local suffix_index = suffix_index - 1\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprcqf9lcd.lua:76: ''end'' expected (to close ''while'' at line
    16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = string.len(string) - string.len(palindrome)\n  local\
    \ suffix_length = string.len(string) - string.len(palindrome:reverse())\n  if\
    \ prefix_length == 0 then\n    return palindrome\n  elseif suffix_length == 0\
    \ then\n    return palindrome .. palindrome:reverse()\n  else\n    local palindrome_prefix\
    \ = palindrome:sub(1, prefix_length)\n    local palindrome_suffix = palindrome:sub(prefix_length\
    \ + suffix_length)\n    return palindrome_prefix .. palindrome_suffix:reverse()\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptq8r_ugs.lua:31:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmptq8r_ugs.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 0\n  for i = 1, #string do\n    local\
    \ postfix_length = #string - i\n    if postfix_length >= longest_postfix_length\
    \ then\n      longest_postfix_length = postfix_length\n      reversed_string =\
    \ reversed_string..string[#string-i..i]\n    end\n  end\n  return reversed_string\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjujnkbc.lua:18:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpwjujnkbc.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpwjujnkbc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 0\n  local longest_postfix_index =\
    \ 0\n  for i = 1, #string do\n    local postfix_length = #string - i\n    if postfix_length\
    \ >= longest_postfix_length then\n      longest_postfix_length = postfix_length\n\
    \      longest_postfix_index = i\n    end\n  end\n  local postfix_length = longest_postfix_length\n\
    \  local postfix_index = longest_postfix_index\n  local postfix_string = string\n\
    \  local postfix_reversed_string = reversed_string\n  while postfix_length >=\
    \ 1 do\n    local postfix_postfix_length = postfix_length - 1\n    local postfix_postfix_index\
    \ = postfix_length - postfix_index\n    local postfix_postfix_string = postfix_string\n\
    \    local postfix_postfix_reversed_string = postfix_reversed_string\n    local\
    \ postfix_postfix_postfix_length = postfix_postfix_length - 1\n    local postfix_postfix_postfix_index\
    \ = postfix_postfix_length - postfix_postfix_index\n    local postfix_postfix_postfix_string\
    \ = postfix_postfix_string\n    local postfix_postfix_postfix_reversed_string\
    \ = postfix_postfix_reversed_string\n    while postfix_postfix_length >= 1 do\n\
    \      local postfix_postfix_postfix_length = postfix_postfix_length - 1\n   \
    \   local postfix_postfix_postfix_index = postfix_postfix_length - postfix_postfix_index\n\
    \      local postfix_postfix_postfix_string = postfix_postfix_string\n      local\
    \ postfix_postfix_postfix_reversed_string = postfix_postfix_reversed_string\n\
    \      while postfix_postfix_postfix_length >= 1 do\n        local postfix_postfix_postfix_length\
    \ = postfix_postfix_length - 1\n        local postfix_postfix_postfix_index =\
    \ postfix_postfix_length - postfix_postfix_index\n        local postfix_postfix_postfix_string\
    \ = postfix_postfix_string\n        local postfix_postfix_postfix_reversed_string\
    \ = postfix_postfix_reversed_string\n        while postfix_postfix_postfix_length\
    \ >= 1 do\n          local postfix_postfix_postfix_length = postfix_postfix_length\
    \ - 1\n          local postfix_postfix_postfix_index = postfix_postfix_length\
    \ - postfix_postfix_index\n          local postfix_postfix_postfix_string = postfix_postfix_string\n\
    \          local postfix_postfix_postfix_reversed_string = postfix_postfix_reversed_string\n\
    \          while postfix_postfix_postfix_length >= 1 do\n            local postfix_postfix_post\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkib_sp3l.lua:63: ''end'' expected (to close ''while'' at line
    50) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestLength,\
    \ longestPrefix, longestSuffix\n  longest, longestLength, longestPrefix, longestSuffix\
    \ = string.find(string, \"([^\" .. string.char(string.byte(string.sub(string,\
    \ 1, 1)) .. string.sub(string, 2)) .. \"]+)$\")\n  if longest == nil then\n  \
    \  return string\n  else\n    local reversedString = string.sub(string, 1, longestLength\
    \ - longestLength)\n    local reversedStringPrefix = string.sub(string, longestLength\
    \ + 1, longestLength + longestLength + longestLength)\n    return reversedStringPrefix\
    \ .. reversedString .. string\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsc5_13nw.lua:13:\
    \ attempt to concatenate a nil value\nstack traceback:\n\t/tmp/tmpsc5_13nw.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpsc5_13nw.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest = string.len(string)\n  local longestPostfix = ''\n  local longestPrefix\
    \ = ''\n  local longestPostfixLen = 0\n  local longestPrefixLen = 0\n  local longestPostfixStart\
    \ = 0\n  local longestPrefixStart = 0\n  local longestPostfixEnd = 0\n  local\
    \ longestPrefixEnd = 0\n  local longestPostfixStartIndex = 0\n  local longestPrefixStartIndex\
    \ = 0\n  local longestPostfixEndIndex = 0\n  local longestPrefixEndIndex = 0\n\
    \  local longestPostfixStartIndex = 0\n  local longestPrefixStartIndex = 0\n \
    \ local longestPostfixEndIndex = 0\n  local longestPrefixEndIndex = 0\n  for i\
    \ = 1, string.len(string) do\n    local char = string.sub(string, i, i)\n    local\
    \ postfix = string.reverse(char)\n    local prefix = string.sub(string, longestPostfixStart,\
    \ longestPostfixStart + longestPostfixLen)\n    if postfix ~= prefix then\n  \
    \    longestPostfixLen = longestPostfixLen + 1\n      longestPostfixStart = longestPostfixStart\
    \ + 1\n      longestPostfixEnd = longestPostfixEnd + 1\n      longestPostfixStartIndex\
    \ = longestPostfixStartIndex + 1\n      longestPostfixEndIndex = longestPostfixEndIndex\
    \ + 1\n    end\n    if char == postfix then\n      longestPostfixLen = longestPostfixLen\
    \ + 1\n      longestPostfixStart = longestPostfixStart + 1\n      longestPostfixEnd\
    \ = longestPostfixEnd + 1\n      longestPostfixStartIndex = longestPostfixStartIndex\
    \ + 1\n      longestPostfixEndIndex = longestPostfixEndIndex + 1\n    end\n  \
    \  if char == prefix then\n      longestPrefixLen = longestPrefixLen + 1\n   \
    \   longestPrefixStart = longestPrefixStart + 1\n      longestPrefixEnd = longestPrefixEnd\
    \ + 1\n      longestPrefixStartIndex = longestPrefixStartIndex + 1\n      longestPrefixEndIndex\
    \ = longestPrefixEndIndex + 1\n    end\n  end\n  if longestPostfixLen > longestPrefixLen\
    \ then\n    palindrome = string.sub(string, longestPostfixStart, longestPostfixStart\
    \ + longestPostfixLen - 1)\n    palindrome = string.reverse(palindrome)\n  end\n\
    \  if longestPrefixLen > longestPostfixLen then\n    palindrome = string.sub(string,\
    \ longestPrefixStart, longestPrefixStart + longestPrefixLen - 1)\n    palindrome\
    \ = string.reverse(palindrome)\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpttbwcf1p.lua:71:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpttbwcf1p.lua:71:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  local len = #string\n  while len > 1 do\n    local\
    \ postfix = string\n    local palindrome = string\n    local i = len - 1\n   \
    \ while i > 0 do\n      postfix = string\n      palindrome = string\n      local\
    \ j = i\n      while j > 0 do\n        postfix = string\n        palindrome =\
    \ string\n        local k = j - 1\n        while k >= 0 do\n          postfix\
    \ = string\n          palindrome = string\n          local m = k - 1\n       \
    \   while m >= 0 do\n            postfix = string\n            palindrome = string\n\
    \            local n = m - 1\n            while n >= 0 do\n              postfix\
    \ = string\n              palindrome = string\n              local o = n - 1\n\
    \              while o >= 0 do\n                postfix = string\n           \
    \     palindrome = string\n                local p = o\n                while\
    \ p >= 0 do\n                  postfix = string\n                  palindrome\
    \ = string\n                  local q = p\n                  while q >= 0 do\n\
    \                    postfix = string\n                    palindrome = string\n\
    \                    local r = q - 1\n                    while r >= 0 do\n  \
    \                    postfix = string\n                      palindrome = string\n\
    \                      local s = r - 1\n                      while s >= 0 do\n\
    \                        postfix = string\n                        palindrome\
    \ = string\n                        local t = s - 1\n                        while\
    \ t >= 0 do\n                          postfix = string\n                    \
    \      palindrome = string\n                          local u = t - 1\n      \
    \                    while u >= 0 do\n                            postfix = string\n\
    \                            palindrome = string\n                           \
    \ local v = u - 1\n                            while v >= 0 do\n             \
    \                 postfix = string\n                              palindrome =\
    \ string\n                              local w = v - 1\n                    \
    \          while w >= 0 do\n                                postfix = string\n\
    \                                palindrome = string\n                       \
    \         local x = w - 1\n                                while x >= 0 do\n \
    \                                 postfix = string\n                         \
    \         palindrome = string\n                                  local y = x -\
    \ 1\n                                  while y >= 0 do\n                     \
    \               postfix = string\n                                    palindrome\
    \ = string\n                                    local z = y - 1\n            \
    \                        while z >= 0 do\n                                   \
    \   postfix = string\n                                      palindrome = string\n\
    \                                      local a = z - 1\n                     \
    \                 while a >= 0 do\n                                        postfix\
    \ = string\n                                        p\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbif84njl.lua:90: ''='' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reversed_postfix = string\n  local longest_postfix_length = 0\n  while\
    \ true do\n    local postfix_length = #postfix\n    if postfix_length == 0 then\n\
    \      return reversed_postfix\n    end\n    local longest_postfix_length = math.max(longest_postfix_length,\
    \ postfix_length)\n    local postfix_reversed = string.sub(postfix, 1, postfix_length\
    \ - 1)\n    local postfix_reversed_length = #postfix_reversed\n    if postfix_reversed_length\
    \ == 0 then\n      return reversed_postfix\n    end\n    local postfix_reversed_reversed\
    \ = string.sub(postfix_reversed, 1, postfix_length - 1)\n    if postfix_reversed_reversed\
    \ ~= postfix_reversed then\n      postfix = string.sub(postfix, 1, postfix_length\
    \ - 1)\n      reversed_postfix = reversed_postfix .. postfix_reversed\n      break\n\
    \    end\n    postfix = string.sub(postfix, 1, postfix_length - 1)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx_hda9hl.lua:41:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpx_hda9hl.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_prefix_length = #string\n\
    \  local palindrome_suffix = string\n  local palindrome_prefix_reverse = string\n\
    \  local palindrome_suffix_reverse = string\n  while palindrome_length > 1 do\n\
    \    -- Find the longest postfix that is a palindrome.\n    palindrome_length\
    \ = palindrome_length - 1\n    palindrome_suffix = string.sub(palindrome_suffix,\
    \ 1, palindrome_length)\n    palindrome_prefix_reverse = string.sub(palindrome_prefix_reverse,\
    \ 1, palindrome_length)\n    palindrome_prefix_reverse = string.sub(palindrome_prefix_reverse,\
    \ 1, palindrome_prefix_length - 1)\n    palindrome_prefix_reverse = palindrome_prefix_reverse\
    \ .. palindrome_suffix\n    -- Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n    palindrome = palindrome\
    \ .. palindrome_prefix_reverse .. palindrome_suffix\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp69f86iti.lua:36:\
    \ expected: \"xyzyx\"\nactual: \"xyzxyxyxyxxx\"\nstack traceback:\n\t/tmp/tmp69f86iti.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local i = #string\n\
    \  while i do\n    local j = i - 1\n    while j >= 0 and string[j] == string[i]\
    \ do\n      j = j - 1\n    end\n    if j >= 0 then\n      postfix = string..string[j]\n\
    \      i = i - 1\n    else\n      break\n    end\n  end\n  -- Append to the end\
    \ of the string reverse of a string prefix that comes before the palindromic suffix.\n\
    \  postfix = string..string.reverse(string.sub(string, 1, i - 1))\n  return postfix\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzs9tlail.lua:38:\
    \ expected: \"xyx\"\nactual: \"xyxyx\"\nstack traceback:\n\t/tmp/tmpzs9tlail.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  local function find_longest_postfix(string,\
    \ postfix, longest)\n    local postfix_length = #postfix\n    local longest_postfix\
    \ = \"\"\n    local longest_postfix_length = 0\n    local longest_postfix_index\
    \ = 0\n    for i = 1, #string do\n      local char = string[i]\n      -- If char\
    \ is a letter, append it to the longest postfix.\n      if string.sub(char, 1,\
    \ 1) == \"a\" then\n        longest_postfix = string.sub(postfix, 1, postfix_length)\
    \ .. longest_postfix\n        longest_postfix_length = postfix_length\n      \
    \  longest_postfix_index = i\n      -- If char is a digit, append it to the longest\
    \ postfix.\n      elseif string.sub(char, 1, 1) == \"0\" then\n        longest_postfix\
    \ = string.sub(postfix, 1, postfix_length) .. longest_postfix\n        longest_postfix_length\
    \ = postfix_length\n        longest_postfix_index = i\n      -- If char is a punctuation\
    \ mark, append it to the longest postfix.\n      elseif string.sub(char, 1, 1)\
    \ == \"!\" then\n        longest_postfix = string.sub(postfix, 1, postfix_length)\
    \ .. longest_postfix\n        longest_postfix_length = postfix_length\n      \
    \  longest_postfix_index = i\n      -- If char is a space, append it to the longest\
    \ postfix.\n      elseif string.sub(char, 1, 1) == \" \" then\n        longest_postfix\
    \ = string.sub(postfix, 1, postfix_length) .. longest_postfix\n        longest_postfix_length\
    \ = postfix_length\n        longest_postfix_index = i\n      -- If char is a newline,\
    \ append it to the longest postfix.\n      elseif string.sub(char, 1, 1) == \"\
    \\n\" then\n        longest_postfix = string.sub(postfix, 1, postfix_length) ..\
    \ longest_postfix\n        longest_postfix_length = postfix_length\n        longest_postfix_index\
    \ = i\n      -- If char is a carriage return, append it to the longest postfix.\n\
    \      elseif string.sub(char, 1, 1) == \"\\r\" then\n        longest_postfix\
    \ = string.sub(postfix, 1, postfix_length) .. longest_postfix\n        longest_postfix_length\
    \ = postfix_length\n        longest_postfix_index = i\n      -- If char is a non-letter,\
    \ append it to the longest postfix.\n      else\n        longest_postfix = string.sub(postfix,\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp898ur0it.lua:53: '')'' expected (to close ''('' at line 52)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  while #postfix > 0 do\n    local char = postfix:sub(1,\
    \ #postfix)\n    reverse = reverse .. char\n    postfix = postfix:sub(2)\n  end\n\
    \  if reverse == string then\n    return string\n  end\n  local palindrome = string\n\
    \  local index = #string\n  while index > 0 do\n    local char = string:sub(1,\
    \ index)\n    if char == reverse then\n      palindrome = palindrome:sub(1, #palindrome)\n\
    \      index = index - 1\n    else\n      break\n    end\n  end\n  return palindrome\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpznmvyc0z.lua:41:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmpznmvyc0z.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  while true do\n    local\
    \ postfix = string\n    local reverse = string\n    for i = 1, #string do\n  \
    \    local char = string.sub(string,i,i)\n      if char == reverse then\n    \
    \    postfix = string.sub(postfix,1,#postfix)..char\n        reverse = string.sub(reverse,1,#reverse)..char\n\
    \      else\n        postfix = string.sub(postfix,1,#postfix)..char\n      end\n\
    \    end\n    if string.sub(postfix,1,#postfix) == reverse then\n      palindrome\
    \ = string.sub(palindrome,1,#palindrome)..postfix\n      break\n    end\n  end\n\
    \  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3lslvzm.lua:39:\
    \ expected: \"x\"\nactual: \"xxx\"\nstack traceback:\n\t/tmp/tmpu3lslvzm.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_len = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_postfix_len = #string\n  local palindrome_postfix_reverse = ''\n\
    \  local palindrome_postfix_reverse_len = #palindrome_postfix_reverse\n  while\
    \ palindrome_postfix_len > 0 do\n    local palindrome_postfix_reverse = palindrome_postfix_reverse\
    \ .. string[palindrome_postfix_len]\n    palindrome_postfix_len = palindrome_postfix_len\
    \ - 1 -- decrement the length\n    palindrome_postfix_reverse_len = palindrome_postfix_reverse_len\
    \ - 1\n  end\n  local palindrome_postfix_reverse = palindrome_postfix_reverse\
    \ .. string[palindrome_postfix_len]\n  while palindrome_postfix_len > 0 do\n \
    \   local palindrome_postfix_reverse = palindrome_postfix_reverse .. string[palindrome_postfix_len]\n\
    \    palindrome_postfix_len = palindrome_postfix_len - 1 -- decrement the length\n\
    \    palindrome_postfix_reverse_len = palindrome_postfix_reverse_len - 1\n  end\n\
    \  local palindrome_postfix_reverse = palindrome_postfix_reverse .. string[palindrome_postfix_len]\n\
    \  while palindrome_postfix_len > 0 do\n    local palindrome_postfix_reverse =\
    \ palindrome_postfix_reverse .. string[palindrome_postfix_len]\n    palindrome_postfix_len\
    \ = palindrome_postfix_len - 1 -- decrement the length\n    palindrome_postfix_reverse_len\
    \ = palindrome_postfix_reverse_len - 1\n  end\n  local palindrome_postfix_reverse\
    \ = palindrome_postfix_reverse .. string[palindrome_postfix_len]\n  while palindrome_postfix_len\
    \ > 0 do\n    local palindrome_postfix_reverse = palindrome_postfix_reverse ..\
    \ string[palindrome_postfix_len]\n    palindrome_postfix_len = palindrome_postfix_len\
    \ - 1 -- decrement the length\n    palindrome_postfix_reverse_len = palindrome_postfix_reverse_len\
    \ - 1\n  end\n  local palindrome_postfix_reverse = palindrome_postfix_reverse\
    \ .. string[palindrome_postfix_len]\n  while palindrome_postfix_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqazoyi0b.lua:43: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local reversed_string = string\n    local longest_postfix_length = 1\n  \
    \  local longest_postfix_index = 1\n    while true do\n        local postfix_length\
    \ = #palindrome\n        if postfix_length == 0 then\n            break\n    \
    \    end\n        local postfix_index = #palindrome - 1\n        local postfix_substring\
    \ = string\n        for i = 1, postfix_length do\n            postfix_substring\
    \ = postfix_substring..string[postfix_index-i]\n        end\n        if postfix_substring\
    \ == reversed_string then\n            longest_postfix_length = postfix_length\n\
    \            longest_postfix_index = postfix_index\n        end\n        postfix_index\
    \ = postfix_index - 1\n    end\n    palindrome = string\n    for i = 1, longest_postfix_length\
    \ do\n        palindrome = palindrome..string[longest_postfix_index+i]\n    end\n\
    \    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsxh0azub.lua:34:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpsxh0azub.lua:34:\
    \ in function 'candidate'\n\t/tmp/tmpsxh0azub.lua:42: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_start = #palindrome\n\
    \  local palindrome_end = #palindrome\n  while palindrome_length > 1 do\n    local\
    \ palindrome_length = palindrome_length / 2\n    local palindrome_start = palindrome_start\
    \ - palindrome_length\n    local palindrome_end = palindrome_end - palindrome_length\n\
    \    palindrome = string.sub(palindrome, 1, palindrome_start) .. string.sub(palindrome,\
    \ palindrome_start, palindrome_end) .. string.sub(palindrome, palindrome_end)\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750578
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ ''\n  local longest_postfix_length = 0\n  for i = 1, #string do\n    local postfix_length\
    \ = #string - i\n    if postfix_length >= longest_postfix_length then\n      reversed_string\
    \ = reversed_string .. string[#string - longest_postfix_length]\n      longest_postfix_length\
    \ = postfix_length\n    end\n  end\n  return reversed_string .. string[#string]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7xq1bwlj.lua:21:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp7xq1bwlj.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp7xq1bwlj.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local postfix_length = #string\n  local prefix_length\
    \ = #string\n  while postfix_length >= 1 do\n    local postfix_char = string.sub(postfix,\
    \ postfix_length-1, postfix_length)\n    local prefix_char = string.sub(prefix,\
    \ prefix_length-1, prefix_length)\n    if prefix_char == postfix_char then\n \
    \     postfix = string.sub(postfix, 1, postfix_length-1)\n      postfix_length\
    \ = postfix_length - 1\n      prefix_length = prefix_length - 1\n    else\n  \
    \    postfix = string.sub(postfix, 1, postfix_length-1)\n      postfix_length\
    \ = postfix_length - 1\n    end\n  end\n  postfix = string.sub(postfix, 1, postfix_length)\n\
    \  return palindrome .. reverse .. postfix\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6d53t74y.lua:29:\
    \ attempt to concatenate global 'reverse' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp6d53t74y.lua:29: in function 'candidate'\n\t/tmp/tmp6d53t74y.lua:35: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750572
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local reverse = ''\n  local longest = 0\n  while true do\n    longest = longest\
    \ + 1\n    local postfix_length = #postfix - 1\n    local reversed_length = #reverse\
    \ + 1\n    if postfix_length == 0 or reversed_length == 0 or postfix_length ==\
    \ reversed_length then\n      break\n    end\n    local postfix_substring = postfix.sub(1,\
    \ postfix_length)\n    local reversed_substring = reverse.sub(1, reversed_length)\n\
    \    if postfix_substring ~= reversed_substring then\n      break\n    end\n \
    \   postfix = postfix.sub(postfix_length + 1)\n    reverse = reverse.sub(reversed_length\
    \ + 1)\n  end\n  return postfix.. reverse\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdnotq0s1.lua:27:\
    \ bad argument #2 to 'sub' (number expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpdnotq0s1.lua:27: in function 'candidate'\n\t/tmp/tmpdnotq0s1.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750572
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local suffix = ''\n    local prefix_length = 0\n    local longest_postfix_length\
    \ = 0\n    while true do\n        local postfix = string\n        postfix = postfix..suffix\n\
    \        local postfix_length = #postfix\n        if postfix_length < longest_postfix_length\
    \ then\n            longest_postfix_length = postfix_length\n        end\n   \
    \     if postfix_length == longest_postfix_length then\n            local postfix_reverse\
    \ = string\n            postfix_reverse = postfix_reverse:reverse()\n        \
    \    if postfix_reverse == postfix then\n                local postfix_reverse\
    \ = string\n                postfix_reverse = postfix_reverse:reverse()\n    \
    \            if postfix_reverse == postfix then\n                    palindrome\
    \ = palindrome..postfix_reverse\n                    break\n                end\n\
    \            end\n        end\n        suffix = postfix..suffix\n        prefix_length\
    \ = #string\n        if prefix_length < longest_postfix_length then\n        \
    \    longest_postfix_length = prefix_length\n        end\n        if prefix_length\
    \ == longest_postfix_length then\n            local prefix_reverse = string\n\
    \            prefix_reverse = prefix_reverse:reverse()\n            if prefix_reverse\
    \ == string then\n                local prefix_reverse = string\n            \
    \    prefix_reverse = prefix_reverse:reverse()\n                if prefix_reverse\
    \ == string then\n                    palindrome = palindrome..prefix_reverse\n\
    \                    break\n                end\n            end\n        end\n\
    \    end\n    return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750578
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local i = #string\n  while\
    \ i do\n    local c = string.sub(palindrome, i, i)\n    if c == 'a' or c == 'e'\
    \ or c == 'i' or c == 'o' or c == 'u' then\n      postfix = string.sub(postfix,\
    \ 1, i - 1)\n      reverse = string.sub(reverse, 1, i - 1)\n    end\n    i = i\
    \ - 1\n  end\n  postfix = string.sub(postfix, 1, #palindrome)\n  reverse = string.sub(reverse,\
    \ 1, #palindrome)\n  postfix = reverse .. postfix\n  return string.format(\n \
    \   '%s%s',\n    palindrome,\n    postfix\n  )\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750578
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest_postfix = 1\n    while postfix ~= ''\
    \ do\n        local postfix_length = #postfix\n        if postfix_length >= longest_postfix\
    \ then\n            longest_postfix = postfix_length\n        end\n        local\
    \ postfix_reverse = reverse(postfix)\n        if postfix_reverse == postfix then\n\
    \            postfix = postfix_reverse\n        else\n            postfix = postfix\
    \ .. postfix_reverse\n        end\n    end\n    return postfix .. reverse\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp580mc6fp.lua:20:\
    \ attempt to call local 'reverse' (a string value)\nstack traceback:\n\t/tmp/tmp580mc6fp.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp580mc6fp.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750573
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local length =\
    \ 1\n  while string.sub(string, 1, length) == string.sub(string, 1, length - 1)\
    \ do\n    length = length + 1\n  end\n  -- Append to the end of the string reverse\
    \ of a string prefix that comes before the palindromic suffix.\n  postfix = string.sub(postfix,\
    \ 1, length - 1) .. string.sub(postfix, 1, length)\n  return string\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750578
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix = string.find(string, \"^(.-)$\"), \"\", \"\"\n  local longestPalindrome\
    \ = \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\
    \n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindro\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb6hlzv8j.lua:51: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_postfix = string\n  local\
    \ palindrome_prefix_length = #string\n  while palindrome_length > 1 do\n    local\
    \ palindrome_postfix_length = #palindrome_postfix\n    local palindrome_prefix_length\
    \ = #palindrome_prefix\n    local palindrome_prefix_postfix = palindrome_prefix:reverse()\n\
    \    local palindrome_prefix_postfix_length = #palindrome_prefix_postfix\n   \
    \ local palindrome_prefix_postfix_postfix = palindrome_prefix_postfix:reverse()\n\
    \    local palindrome_prefix_postfix_postfix_length = #palindrome_prefix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix:reverse()\n\
    \    local palindrome_prefix_postfix_postfix_postfix_length = #palindrome_prefix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix_postfix:reverse()\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_length = #palindrome_prefix_postfix_postfix_postfix_postfix\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix = palindrome_prefix_postfix_postfix_postfix_postfix:reverse()\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_length =\
    \ #palindrome_prefix_postfix_postfix_postfix_postfix_postfix\n    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\
    \ = palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix:reverse()\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix\n    local\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix =\
    \ palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix:reverse()\n\
    \    local palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix_length\
    \ = #palindrome_prefix_postfix_postfix_postfix_postfix_postfix_postfix_postfix\n\
    \    local palindro\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp71kb5wfl.lua:45: ''end'' expected (to close ''while'' at line
    16) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local palindrome = string\n  while true do\n    local reverse = reverse(string)\n\
    \    if reverse == string then\n      break\n    end\n    postfix = postfix ..\
    \ reverse\n    palindrome = palindrome .. reverse\n  end\n  return postfix ..\
    \ palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp__qgut1q.lua:15:\
    \ attempt to call global 'reverse' (a nil value)\nstack traceback:\n\t/tmp/tmp__qgut1q.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp__qgut1q.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = ''\n    local longest = 0\n    while postfix ~= '' do\n \
    \       longest = longest + 1\n        postfix = string.sub(postfix, 1, string.len(postfix)\
    \ - longest)\n        reverse = reverse .. string.sub(postfix, 1, string.len(postfix)\
    \ - longest)\n    end\n    return reverse .. postfix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp589jhpw.lua:27:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpp589jhpw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local suffix = ''\n  local reverse = ''\n  local length = 0\n  while true do\n\
    \    length = length + 1\n    local postfix_length = #postfix\n    local suffix_length\
    \ = #suffix\n    if postfix_length == suffix_length then\n      reverse = reverse\
    \ .. suffix\n      postfix = postfix .. reverse\n      break\n    end\n    local\
    \ postfix_start = #postfix - suffix_length + 1\n    local postfix_end = #postfix\n\
    \    local postfix_middle = postfix_start + postfix_length\n    local postfix_middle_reverse\
    \ = postfix_end - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - postfix_start + 1\n    if postfix_middle > postfix_middle_reverse\
    \ then\n      postfix = postfix .. suffix\n      break\n    end\n    local postfix_middle_reverse\
    \ = #postfix - \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz80mpakk.lua:74: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local suffix = ''\n    local longest_postfix = 1\n    local longest_suffix\
    \ = 0\n    local longest_suffix_length = 1\n    while longest_postfix > longest_suffix\
    \ do\n        postfix = string\n        suffix = string\n        longest_postfix\
    \ = 1\n        longest_suffix = 0\n        longest_suffix_length = 1\n       \
    \ for i = 1, #string do\n            local char = string.sub(string,i,i)\n   \
    \         postfix = string.sub(postfix,1,i-1) .. char .. string.sub(postfix,i+1,#postfix)\n\
    \            suffix = string.sub(suffix,1,i-1) .. char .. string.sub(suffix,i+1,#suffix)\n\
    \            local postfix_length = #postfix\n            local suffix_length\
    \ = #suffix\n            if postfix_length == suffix_length then\n           \
    \     if postfix_length < longest_postfix then\n                    longest_postfix\
    \ = postfix_length\n                end\n                if suffix_length < longest_suffix\
    \ then\n                    longest_suffix = suffix_length\n                end\n\
    \                if postfix_length < longest_suffix_length then\n            \
    \        longest_suffix_length = postfix_length\n                end\n       \
    \     else\n                if postfix_length < longest_postfix then\n       \
    \             longest_postfix = postfix_length\n                end\n        \
    \        if suffix_length < longest_suffix then\n                    longest_suffix\
    \ = suffix_length\n                end\n                if postfix_length < longest_suffix_length\
    \ then\n                    longest_suffix_length = postfix_length\n         \
    \       end\n            end\n        end\n    end\n    return string.sub(postfix,1,longest_postfix)\
    \ .. string.sub(suffix,1,longest_suffix)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750578
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local length = 0\n  while\
    \ true do\n    length = length + 1\n    postfix = string.sub(postfix, 1, length-1)\n\
    \    reverse = string.sub(reverse, 1, length-1)\n    if string.sub(postfix, 1,\
    \ length) == reverse then\n      palindrome = string.sub(palindrome, 1, length-1)\n\
    \      break\n    end\n  end\n  return palindrome\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj8_8q9iv.lua:32:\
    \ expected: \"x\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpj8_8q9iv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local prefix_length = 0\n  local suffix_length = 0\n  local longest_palindrome\
    \ = ''\n  local longest_palindrome_length = 0\n  local longest_palindrome_suffix\
    \ = ''\n  local longest_palindrome_suffix_length = 0\n  local longest_palindrome_prefix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix = ''\n  local longest_palindrome_prefix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix = ''\n  local longest_palindrome_prefix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix = ''\n  local longest_palindrome_prefix_suffix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix = ''\n  local\
    \ longest_palindrome_prefix_suffix_suffix_suffix_suffix_length = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix\
    \ = ''\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = ''\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = ''\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = ''\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = ''\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix\
    \ = ''\n  local longest_palindrome_prefix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_suffix_length\
    \ = 0\n  local longest_palindrome_prefix_suffix_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplnrxpif1.lua:52: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local postfix = string\n\
    \  local suffix = ''\n  local longest = 0\n  while true do\n    longest = longest\
    \ + 1\n    local postfix_reverse = string.gsub(postfix, \"^.\", string.rep(string.sub(postfix,\
    \ 1, longest), longest))\n    if string.sub(postfix_reverse, 1, longest) == postfix_reverse\
    \ then\n      postfix = postfix_reverse\n      break\n    end\n  end\n  postfix\
    \ = string.gsub(postfix, \"^.\", string.rep(string.sub(postfix, 1, longest), longest))\n\
    \  return string.sub(postfix, 1, longest) .. suffix .. string.rep(string.sub(postfix,\
    \ longest), longest)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfm1au3e.lua:31:\
    \ expected: \"x\"\nactual: \"xx\"\nstack traceback:\n\t/tmp/tmpmfm1au3e.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local longest = string.len(string)\n  local longestPrefix = string\n  local\
    \ longestSuffix = string\n  local longestPrefixReverse = string\n  local longestSuffixReverse\
    \ = string\n  local longestPrefixReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseLen = 0\n  local longestSuffixReverseLen =\
    \ 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\n  local longestSuffixReverseLen\
    \ = 0\n  local longestPrefixReverseReverseLen = 0\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4elhnx32.lua:84: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ of supplied string that is a palindrome.\n  -- Algorithm idea is simple:\n \
    \ -- - Find the longest postfix of supplied string that is a palindrome.\n  --\
    \ - Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  -- >>> make_palindrome('')\n  -- ''\n  -- >>> make_palindrome('cat')\n\
    \  -- 'catac'\n  -- >>> make_palindrome('cata')\n  -- 'catac'\n  local function\
    \ is_palindrome(string, start, end)\n    if start > end then\n      return false\n\
    \    end\n    local middle = start + (end - start) / 2\n    local middle_palindrome\
    \ = middle\n    middle_palindrome = middle_palindrome .. string[middle]\n    middle_palindrome\
    \ = middle_palindrome .. string[middle]\n    middle_palindrome = middle_palindrome\
    \ .. string[middle]\n    middle_palindrome = middle_palindrome .. string[middle]\n\
    \    middle_palindrome = middle_palindrome .. string[middle]\n    middle_palindrome\
    \ = middle_palindrome .. string[middle]\n    middle_palindrome = middle_palindrome\
    \ .. string[middle]\n    middle_palindrome = middle_palindrome .. string[middle]\n\
    \    middle_palindrome = middle_palindrome .. string[middle]\n    middle_palindrome\
    \ = middle_palindrome .. string[middle]\n    middle_palindrome = middle_palindrome\
    \ .. string[middle]\n    middle_palindrome = middle_palindrome .. string[middle]\n\
    \    middle_palindrome = middle_palindrome .. string[middle]\n    middle_palindrome\
    \ = middle_palindrome .. string[middle]\n    middle_palindrome = middle_palindrome\
    \ .. string[middle]\n    middle_palindrome = middle_palindrome .. string[middle]\n\
    \    middle_palindrome = middle_palindrome .. string[middle]\n    middle_palindrome\
    \ = middle_palindrome .. string[middle]\n    middle_palindrome = middle_palindrome\
    \ .. string[middle]\n    middle_palindrome = middle_p\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpezxfr1n8.lua:22: <name> or ''...'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local longest, longestPrefix,\
    \ longestSuffix = string.find(string, \"^(.-)$\"), \"\", \"\"\n  local longestPalindrome\
    \ = \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\
    \n  local longestPalindromeLength = 0\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix\
    \ = \"\", \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\"\
    , \"\"\n  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n\
    \  local longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local\
    \ longestPalindromePrefix, longestPalindromeSuffix = \"\", \"\"\n  local longestPalindromePrefix,\
    \ longestPalindromeSuffi\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpymjzxxhv.lua:51: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find the longest postfix\
    \ that is a palindrome.\n  local function find_longest_postfix(string, postfix,\
    \ longest)\n    local function is_palindrome(postfix, longest)\n      -- Return\
    \ true if postfix is a palindrome.\n      local function is_palindrome_helper(postfix,\
    \ longest)\n        -- Return true if postfix is a palindrome.\n        local\
    \ function is_palindrome_helper(postfix, longest)\n          -- Return true if\
    \ postfix is a palindrome.\n          local function is_palindrome_helper(postfix,\
    \ longest)\n            -- Return true if postfix is a palindrome.\n         \
    \   local function is_palindrome_helper(postfix, longest)\n              -- Return\
    \ true if postfix is a palindrome.\n              local function is_palindrome_helper(postfix,\
    \ longest)\n                -- Return true if postfix is a palindrome.\n     \
    \           local function is_palindrome_helper(postfix, longest)\n          \
    \        -- Return true if postfix is a palindrome.\n                  local function\
    \ is_palindrome_helper(postfix, longest)\n                    -- Return true if\
    \ postfix is a palindrome.\n                    local function is_palindrome_helper(postfix,\
    \ longest)\n                      -- Return true if postfix is a palindrome.\n\
    \                      local function is_palindrome_helper(postfix, longest)\n\
    \                        -- Return true if postfix is a palindrome.\n        \
    \                local function is_palindrome_helper(postfix, longest)\n     \
    \                     -- Return true if postfix is a palindrome.\n           \
    \               local function is_palindrome_helper(postfix, longest)\n      \
    \                      -- Return true if postfix is a palindrome.\n          \
    \                  local function is_palindrome_helper(postfix, longest)\n   \
    \                           -- Return true if postfix is a palindrome.\n     \
    \                         local function is_palindrome_helper(postfix, longest)\n\
    \                                -- Return true if postfix is a palindrome.\n\
    \                                local function is_palindrome_helper(postfix,\
    \ longest)\n                                  -- Return true if postfix is a palindrome.\n\
    \                                  local function is_palindrome_helper(postfix,\
    \ longest)\n                                    -- Return true if postfix is a\
    \ palindrome.\n                                    local function is_palindrome_helper(postfix,\
    \ longest)\n                                      -- Return true if postfix is\
    \ a palindrome.\n                                      local function is_palindrome_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkam9eepi.lua:49: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local reversed_string =\
    \ string\n  local longest_postfix_length = 0\n  local longest_postfix_index =\
    \ 0\n  for i = 1, #string do\n    local postfix_length = string.len(string.sub(string,i,i))\n\
    \    if postfix_length > longest_postfix_length then\n      longest_postfix_length\
    \ = postfix_length\n      longest_postfix_index = i\n    end\n  end\n  local longest_postfix\
    \ = string.sub(string,longest_postfix_index,#string)\n  local longest_postfix_reversed\
    \ = string.sub(reversed_string,1,longest_postfix_length)\n  local longest_postfix_reversed_with_prefix\
    \ = string.sub(longest_postfix_reversed,1,longest_postfix_length-1)\n  return\
    \ longest_postfix_reversed_with_prefix .. longest_postfix\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxu7t6mj.lua:33:\
    \ expected: \"xyzyx\"\nactual: \"xyz\"\nstack traceback:\n\t/tmp/tmphxu7t6mj.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local postfix = string\n  local reverse = string\n  local length = #string\n\
    \  while length > 0 do\n    local index = length - 1\n    while index >= 0 do\n\
    \      if string[index] == string[length - index] then\n        postfix = postfix\
    \ .. string[length - index]\n        reverse = reverse .. string[index]\n    \
    \    length = length - 1\n      else\n        index = index - 1\n      end\n \
    \   end\n    palindrome = palindrome .. postfix .. reverse\n    postfix = string\n\
    \    reverse = string\n    length = length - 1\n  end\n  return palindrome\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4zb_s7e4.lua:20:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp4zb_s7e4.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp4zb_s7e4.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750573
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest postfix\
    \ of string that is a palindrome.\n  local postfix = string\n  local longest_postfix\
    \ = 1\n  while true do\n    local postfix_length = #postfix\n    if postfix_length\
    \ == 0 then\n      break\n    end\n    local postfix_reverse = string.sub(postfix,\
    \ 1, postfix_length - 1)\n    if postfix_reverse ~= string.sub(postfix, postfix_length\
    \ - 1, postfix_length) then\n      postfix = postfix .. postfix_reverse\n    \
    \  longest_postfix = postfix_length\n    else\n      break\n    end\n  end\n \
    \ -- Append to the end of the string reverse of a string prefix that comes before\
    \ the palindromic suffix.\n  local palindrome = string\n  local prefix_length\
    \ = longest_postfix - 1\n  local prefix_reverse = string.sub(string, 1, prefix_length)\n\
    \  if prefix_reverse ~= string.sub(string, prefix_length, prefix_length) then\n\
    \    palindrome = palindrome .. prefix_reverse .. string.sub(string, prefix_length)\n\
    \  end\n  return palindrome\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750578
- exit_code: -1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local postfix = string\n\
    \    local reverse = string\n    local length = 1\n    while true do\n       \
    \ local postfix = string.sub(string, 1, length - 1)\n        local reverse = string.sub(reverse,\
    \ length + 1, #reverse)\n        if postfix ~= reverse then\n            return\
    \ string.reverse(postfix) .. reverse\n        end\n        length = length + 1\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = make_palindrome\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'),\
    \ 'x')\n    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750578
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n    local palindrome = string\n\
    \    local longest_postfix = string\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    \    local longest_postfix_index = 0\n    local longest_postfix_length = string\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = make_palindrome\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('x'), 'x')\n\
    \    lu.assertEquals(candidate('xyz'), 'xyzyx')\n    lu.assertEquals(candidate('xyx'),\
    \ 'xyx')\n    lu.assertEquals(candidate('jerry'), 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuov57gp_.lua:80: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  -- Find longest palindrome\
    \ that begins with string.\n  local longest = string\n  local longestLength =\
    \ 1\n  for i = 1, #string do\n    local palindrome = string\n    local palindromeLength\
    \ = 1\n    for j = 1, #string do\n      palindrome = palindrome .. string[j]\n\
    \      palindromeLength = palindromeLength + 1\n      if palindromeLength > longestLength\
    \ then\n        longest = palindrome\n        longestLength = palindromeLength\n\
    \      end\n    end\n  end\n  -- Append reverse of longest palindrome that begins\
    \ with string.\n  longest = longest .. string\n  longestLength = longestLength\
    \ + 1\n  -- Append reverse of longest palindrome that begins with string.\n  longest\
    \ = longest .. string\n  longestLength = longestLength + 1\n  -- Append reverse\
    \ of longest palindrome that begins with string.\n  longest = longest .. string\n\
    \  longestLength = longestLength + 1\n  -- Append reverse of longest palindrome\
    \ that begins with string.\n  longest = longest .. string\n  longestLength = longestLength\
    \ + 1\n  -- Append reverse of longest palindrome that begins with string.\n  longest\
    \ = longest .. string\n  longestLength = longestLength + 1\n  -- Append reverse\
    \ of longest palindrome that begins with string.\n  longest = longest .. string\n\
    \  longestLength = longestLength + 1\n  -- Append reverse of longest palindrome\
    \ that begins with string.\n  longest = longest .. string\n  longestLength = longestLength\
    \ + 1\n  -- Append reverse of longest palindrome that begins with string.\n  longest\
    \ = longest .. string\n  longestLength = longestLength + 1\n  -- Append reverse\
    \ of longest palindrome that begins with string.\n  longest = longest .. string\n\
    \  longestLength = longestLength + 1\n  -- Append reverse of longest palindrome\
    \ that begins with string.\n  longest = longest .. string\n  longestLength = longestLength\
    \ + 1\n  -- Append reverse of longest palindrome that begins with string.\n  longest\
    \ = longest .. string\n  longestLength = longestLength + 1\n  -- Append reverse\
    \ of longest palindrome that begins with string.\n  longest = longest .. string\n\
    \  longestLength = longestLength + 1\n  -- Append reverse of longest palindrome\
    \ that begins with string.\n  longest = longest \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = make_palindrome\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfnj9dvdg.lua:76: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750573
- exit_code: 1
  program: "-- Find the shortest palindrome that begins with a supplied string.\n\
    -- Algorithm idea is simple:\n-- - Find the longest postfix of supplied string\
    \ that is a palindrome.\n-- - Append to the end of the string reverse of a string\
    \ prefix that comes before the palindromic suffix.\n-- >>> make_palindrome('')\n\
    -- ''\n-- >>> make_palindrome('cat')\n-- 'catac'\n-- >>> make_palindrome('cata')\n\
    -- 'catac'\nlocal function make_palindrome(string)\n  local palindrome = string\n\
    \  local palindrome_length = #string\n  local palindrome_prefix_length = #string\
    \ - palindrome_length\n  local palindrome_suffix = string[palindrome_prefix_length]\n\
    \  local palindrome_prefix_reverse = string[palindrome_prefix_length]\n  local\
    \ palindrome_suffix_reverse = string[palindrome_prefix_length]\n  while palindrome_length\
    \ > 1 do\n    local palindrome_prefix_reverse = palindrome_prefix_reverse .. string[palindrome_prefix_length\
    \ - 1]\n    local palindrome_suffix_reverse = palindrome_suffix_reverse .. string[palindrome_length\
    \ - 1]\n    local palindrome_length = palindrome_length - 1\n    local palindrome\
    \ = palindrome .. string[palindrome_length]\n  end\n  return palindrome .. palindrome_prefix_reverse\
    \ .. palindrome_suffix_reverse\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = make_palindrome\n    lu.assertEquals(candidate(''), '')\n  \
    \  lu.assertEquals(candidate('x'), 'x')\n    lu.assertEquals(candidate('xyz'),\
    \ 'xyzyx')\n    lu.assertEquals(candidate('xyx'), 'xyx')\n    lu.assertEquals(candidate('jerry'),\
    \ 'jerryrrej')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpoy_rp8pu.lua:24:\
    \ attempt to concatenate local 'palindrome_prefix_reverse' (a nil value)\nstack\
    \ traceback:\n\t/tmp/tmpoy_rp8pu.lua:24: in function 'candidate'\n\t/tmp/tmpoy_rp8pu.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750573
