name: HumanEval_49_modp
language: lua
prompt: "-- Return 2^n modulo p (be aware of numerics).\n-- >>> modp(3, 5)\n-- 3\n\
  -- >>> modp(1101, 101)\n-- 2\n-- >>> modp(0, 101)\n-- 1\n-- >>> modp(3, 11)\n--\
  \ 8\n-- >>> modp(100, 101)\n-- 1\nlocal function modp(n, p)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = modp\n\
  \    lu.assertEquals(candidate(3, 5), 3)\n    lu.assertEquals(candidate(1101, 101),\
  \ 2)\n    lu.assertEquals(candidate(0, 101), 1)\n    lu.assertEquals(candidate(3,\
  \ 11), 8)\n    lu.assertEquals(candidate(100, 101), 1)\n    lu.assertEquals(candidate(30,\
  \ 5), 4)\n    lu.assertEquals(candidate(31, 5), 3)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n\
    \  else\n    return modp(n / p, p)\n  end\nend", "  if p == 0 then return 1 end\n\
    \  local q = modp(n / p, p)\n  if n % p == 0 then return q else return q + 1 end\n\
    end", "  if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n\
    \    return n % p\n  end\nend", "  if p == 0 then return 1 end\n  if p == 1 or\
    \ p == -1 then return n end\n  if p == -1 and n ~= 0 then return 1 end\n  if p\
    \ == 1 and n ~= 0 then return 0 end\n  if p == -1 and n ~= 0 then return -1 end\n\
    \  if p == 1 and n ~= 0 then return -2 end\n  if p == -1 and n ~= 0 then return\
    \ -2 end\n  if p == 1 and n ~= 0 then return -4 end\n  if p == -1 and n ~= 0 then\
    \ return -4 end\n  if p == 1 and n ~= 0 then return -8 end\n  if p == -1 and n\
    \ ~= 0 then return -8 end\n  if p == 1 and n ~= 0 then return -16 end\n  if p\
    \ == -1 and n ~= 0 then return -16 end\n  if p == 1 and n ~= 0 then return -32\
    \ end\n  if p == -1 and n ~= 0 then return -32 end\n  if p == 1 and n ~= 0 then\
    \ return -64 end\n  if p == -1 and n ~= 0 then return -64 end\n  if p == 1 and\
    \ n ~= 0 then return -128 end\n  if p == -1 and n ~= 0 then return -128 end\n\
    \  if p == 1 and n ~= 0 then return -256 end\n  if p == -1 and n ~= 0 then return\
    \ -256 end\n  if p == 1 and n ~= 0 then return -512 end\n  if p == -1 and n ~=\
    \ 0 then return -512 end\n  if p == 1 and n ~= 0 then return -1024 end\n  if p\
    \ == -1 and n ~= 0 then return -1024 end\n  if p == 1 and n ~= 0 then return -2048\
    \ end\n  if p == -1 and n ~= 0 then return -2048 end\n  if p == 1 and n ~= 0 then\
    \ return -4096 end\n  if p == -1 and n ~= 0 then return -4096 end\n  if p == 1\
    \ and n ~= 0 then return -8192 end\n  if p == -1 and n ~= 0 then return -8192\
    \ end\n  if p == 1 and n ~= 0 then return -16384 end\n  if p == -1 and n ~= 0\
    \ then return -16384 end\n  if p == 1 and n ~= 0 then return -32768 end\n  if\
    \ p == -1 and n ~= 0 then return -32768 end", "  local m = n % p\n  if m == 0\
    \ then\n    return p\n  else\n    return modp(m, p)\n  end\nend", "  local t =\
    \ n % p\n  if t == 0 then\n    return 1\n  elseif t < p then\n    return modp(t\
    \ - 1, p) + p\n  else\n    return modp(t - 1, p) + p\n  end\nend", "  if p ==\
    \ 0 then return 1 end\n  if p == 1 then return n end\n  if p == n then return\
    \ p end\n  if p == p then return 1 end\n  if p == p ^ n then return modp(n ^ p,\
    \ p) end\n  return modp(n / p, p)\nend", "  local t = 1\n  while t <= p do\n \
    \   if n >= t then\n      n = n - t\n    else\n      n = n + t\n    end\n    t\
    \ = t * 2\n  end\n  return n\nend", "  if p == 0 then\n    return 1\n  elseif\
    \ p == 1 then\n    return n\n  else\n    return n % p\n  end\nend", "  if p ==\
    \ 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n    return\
    \ n % p\n  end\nend", "  if p == 0 then\n    return 1\n  end\n  if p == 1 then\n\
    \    return n\n  end\n  if p == n then\n    return 0\n  end\n  local q = modp(n\
    \ / p, p)\n  if n % p == 0 then\n    return q * p + p\n  else\n    return q\n\
    \  end\nend", "  local t = math.abs(n)\n  if t <= p then\n    return n\n  elseif\
    \ t <= p / 2 then\n    return n % p\n  else\n    return modp(n % p, p)\n  end\n\
    end", "  if p == 0 then\n    return 1\n  end\n  if p == 1 then\n    return n\n\
    \  end\n  local r = n % p\n  if r == 0 then\n    return r\n  end\n  return modp(r,\
    \ p) * p\nend", "  if p == 0 then return 1 end\n  if p == 1 then return n end\n\
    \  if p == n then return 0 end\n  if p == p then return 1 end\n  if p == p ^ n\
    \ then return modp(n ^ p, p) end\n  return modp(n - (n % p), p)\nend", "  if p\
    \ == 0 then return 1 end\n  if p == 1 then return n end\n  if p == n then return\
    \ p end\n  if p == -1 then return -n end\n  local m = n % p\n  return modp(m,\
    \ p) * modp(n, p)\nend", "  local r = 1\n  while n > 0 do\n    r = r * p % n\n\
    \    n = n / 2\n  end\n  return r\nend", "  if p == 0 then return 1 end\n  local\
    \ q = math.floor(n/p)\n  local r = n % p\n  return modp(q, p) * p + r\nend", " \
    \ if p == 0 then\n    return 1\n  elseif p == 1 then\n    return n\n  else\n \
    \   return n % p\n  end\nend", "  local nn = math.floor(n/p)\n  if nn > 0 then\n\
    \    return modp(nn, p)\n  else\n    return p - nn * p\n  end\nend", "  if p ==\
    \ 0 then return 1 end\n  if p == 1 or p == -1 then return n end\n  local q = modp(n\
    \ / p, p)\n  if n % p == 0 then return q else return q + p end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
