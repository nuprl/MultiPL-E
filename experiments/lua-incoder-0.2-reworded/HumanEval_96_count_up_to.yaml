name: HumanEval_96_count_up_to
language: lua
prompt: "-- Implement a function that takes an non-negative integer and returns a\
  \ table of the first n\n-- integers that are prime numbers and less than n.\n--\
  \ for example:\n-- >>> count_up_to(5)\n-- {2, 3}\n-- >>> count_up_to(11)\n-- {2,\
  \ 3, 5, 7}\n-- >>> count_up_to(0)\n-- {}\n-- >>> count_up_to(20)\n-- {2, 3, 5, 7,\
  \ 11, 13, 17, 19}\n-- >>> count_up_to(1)\n-- {}\n-- >>> count_up_to(18)\n-- {2,\
  \ 3, 5, 7, 11, 13, 17}\nlocal function count_up_to(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = count_up_to\n\
  \    lu.assertEquals(candidate(5), {2, 3})\n    lu.assertEquals(candidate(6), {2,\
  \ 3, 5})\n    lu.assertEquals(candidate(7), {2, 3, 5})\n    lu.assertEquals(candidate(10),\
  \ {2, 3, 5, 7})\n    lu.assertEquals(candidate(0), {})\n    lu.assertEquals(candidate(22),\
  \ {2, 3, 5, 7, 11, 13, 17, 19})\n    lu.assertEquals(candidate(1), {})\n    lu.assertEquals(candidate(18),\
  \ {2, 3, 5, 7, 11, 13, 17})\n    lu.assertEquals(candidate(47), {2, 3, 5, 7, 11,\
  \ 13, 17, 19, 23, 29, 31, 37, 41, 43})\n    lu.assertEquals(candidate(101), {2,\
  \ 3, 5, 7, 11, 13, 17, 19, 23, 29, 31, 37, 41, 43, 47, 53, 59, 61, 67, 71, 73, 79,\
  \ 83, 89, 97})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n < 1 then return end\n  local primes = {}\n  for i = 2, n do\n\
    \    local prime = true\n    for j = 2, #primes do\n      if primes[j] and primes[j]\
    \ % i == 0 then\n        prime = false\n        break\n      end\n    end\n  \
    \  if prime then\n      table.insert(primes, i)\n    end\n  end\n  return primes\n\
    end", "  if n < 1 then return end\n  local primes = {}\n  local i = 1\n  while\
    \ i <= n do\n    local prime = true\n    for _, v in pairs(primes) do\n      if\
    \ i % v == 0 then\n        prime = false\n        break\n      end\n    end\n\
    \    if prime then\n      primes[i] = i\n    end\n    i = i + 1\n  end\n  return\
    \ primes\nend", "  if n < 1 then return end\n  local primes = {}\n  local i =\
    \ 1\n  while i <= n do\n    local prime = true\n    for _, p in pairs(primes)\
    \ do\n      if i % p == 0 then\n        prime = false\n        break\n      end\n\
    \    end\n    if prime then\n      primes[i] = i\n    end\n    i = i + 1\n  end\n\
    \  return primes\nend", "  if n < 1 then return end\n  local table = {}\n  for\
    \ i = 2, n do\n    if primes[i] then\n      table.insert(table, i)\n      if i\
    \ == n then\n        break\n      end\n    end\n  end\n  return table\nend", " \
    \ local table = {}\n  local i = 1\n  while i <= n do\n    if prime_number(i) then\n\
    \      table.insert(table, i)\n      i = i + 2\n    else\n      i = i + 1\n  \
    \  end\n  end\n  return table\nend", "  if n < 1 then return end\n  local primes\
    \ = {}\n  local i = 1\n  while i <= n do\n    local prime = true\n    for j =\
    \ 1, i do\n      if n % i == 0 then\n        prime = false\n        break\n  \
    \    end\n    end\n    if prime then\n      primes[i] = i\n      i = i + 1\n \
    \   end\n  end\n  return primes\nend", "  local table = {}\n  for i = 2, n do\n\
    \    local prime = true\n    for j = 2, i do\n      if i % j == 0 then\n     \
    \   prime = false\n        break\n      end\n    end\n    if prime then\n    \
    \  table.insert(table, i)\n    end\n  end\n  return table\nend", "  if n < 1 then\
    \ return end\n  local table = {}\n  local i = 1\n  while i <= n do\n    local\
    \ prime = true\n    for j = 2, i do\n      if i % j == 0 then\n        prime =\
    \ false\n        break\n      end\n    end\n    if prime then\n      table.insert(table,\
    \ i)\n    end\n    i = i + 1\n  end\n  return table\nend", "  if n < 1 then return\
    \ end\n  local primes = {}\n  local i = 1\n  while i <= n do\n    local prime\
    \ = true\n    for j = 2, #primes do\n      if primes[j] and primes[j] % i == 0\
    \ then\n        prime = false\n        break\n      end\n    end\n    if prime\
    \ then\n      primes[i] = i\n      i = i + 1\n    end\n  end\n  return primes\n\
    end", "  if n < 1 then return end\n  if n == 1 then return {n} end\n  local primes\
    \ = {}\n  for i = 2, n do\n    local prime = true\n    for j = 2, i do\n     \
    \ if i % j == 0 then\n        prime = false\n        break\n      end\n    end\n\
    \    if prime then\n      table.insert(primes, i)\n    end\n  end\n  return primes\n\
    end", "  local table = {}\n  local i = 1\n  while i <= n do\n    local prime =\
    \ true\n    for j = 2, i do\n      if i % j == 0 then\n        prime = false\n\
    \        break\n      end\n    end\n    if prime then\n      table.insert(table,\
    \ i)\n    end\n    i = i + 1\n  end\n  return table\nend", "  local primes = {}\n\
    \  local i = 1\n  while i <= n do\n    local prime = true\n    for _, prime in\
    \ ipairs(primes) do\n      if i % prime == 0 then\n        prime = false\n   \
    \     break\n      end\n    end\n    if prime then\n      primes[i] = true\n \
    \     i = i + 1\n    end\n  end\n  return primes\nend", "  if n < 1 then return\
    \ end\n  if n == 1 then return {} end\n  local primes = {}\n  for i = 2, n do\n\
    \    local prime = true\n    for j = 2, #primes do\n      if primes[j] and primes[j]\
    \ % i == 0 then\n        prime = false\n        break\n      end\n    end\n  \
    \  if prime then\n      table.insert(primes, i)\n    end\n  end\n  return primes\n\
    end", "  if n < 1 then return end\n  local primes = {}\n  local i = 1\n  while\
    \ i <= n do\n    local prime = true\n    for j = 2, i do\n      if i % j == 0\
    \ then\n        prime = false\n        break\n      end\n    end\n    if prime\
    \ then\n      primes[i] = i\n      i = i + 1\n    end\n  end\n  return primes\n\
    end", "  if n < 1 then return end\n  local primes = {}\n  local i = 1\n  while\
    \ i <= n do\n    local prime = true\n    for _, v in pairs(primes) do\n      if\
    \ i % v == 0 then\n        prime = false\n        break\n      end\n    end\n\
    \    if prime then\n      primes[i] = i\n    end\n    i = i + 1\n  end\n  return\
    \ primes\nend", "  local primes = {}\n  local i = 1\n  while i <= n do\n    local\
    \ prime = true\n    for _, v in pairs(primes) do\n      if i % v == 0 then\n \
    \       prime = false\n        break\n      end\n    end\n    if prime then\n\
    \      primes[i] = i\n    end\n    i = i + 1\n  end\n  return primes\nend", " \
    \ local table = {}\n  for i = 2, n do\n    local prime = true\n    for j = 2,\
    \ i do\n      if i % j == 0 then\n        prime = false\n        break\n     \
    \ end\n    end\n    if prime then\n      table.insert(table, i)\n    end\n  end\n\
    \  return table\nend", "  if n < 1 then return end\n  local primes = {}\n  local\
    \ i = 1\n  while i <= n do\n    local prime = true\n    for _, v in pairs(primes)\
    \ do\n      if i % v == 0 then\n        prime = false\n        break\n      end\n\
    \    end\n    if prime then\n      primes[i] = i\n    end\n    i = i + 1\n  end\n\
    \  return primes\nend", "  local primes = {}\n  local i = 1\n  while i <= n do\n\
    \    local prime = true\n    for _, v in pairs(primes) do\n      if i % v == 0\
    \ then\n        prime = false\n        break\n      end\n    end\n    if prime\
    \ then\n      primes[i] = i\n    end\n    i = i + 1\n  end\n  return primes\n\
    end", "  local table = {}\n  for i = 2, n do\n    local prime = true\n    for\
    \ j = 2, i do\n      if i % j == 0 then\n        prime = false\n        break\n\
    \      end\n    end\n    if prime then\n      table.insert(table, i)\n    end\n\
    \  end\n  return table\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
