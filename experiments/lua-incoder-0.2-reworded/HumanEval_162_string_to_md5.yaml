name: HumanEval_162_string_to_md5
language: lua
prompt: "-- Given a string 'text', return its md5 hash equivalent string.\n-- If 'text'\
  \ is an empty string, return None.\n-- >>> string_to_md5('Hello world')\n-- '3e25960a79dbc69b674cd4ec67a72c62'\n\
  local function string_to_md5(text)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_to_md5\n\
  \    lu.assertEquals(candidate('Hello world'), '3e25960a79dbc69b674cd4ec67a72c62')\n\
  \    lu.assertEquals(candidate(''), None)\n    lu.assertEquals(candidate('A B C'),\
  \ '0ef78513b0cb8cef12743f5aeb35f888')\n    lu.assertEquals(candidate('password'),\
  \ '5f4dcc3b5aa765d61d8327deb882cf99')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if text == nil then\n    return nil\n  end\n  local md5sum = ngx.md5(text)\n\
    \  return md5sum\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5\nend", "    local md5sum\n    local md5sum_hex\n\
    \    local md5sum_base64\n    local md5sum_base64_hex\n    local md5sum_base64_utf8\n\
    \    local md5sum_base64_utf8_hex\n    local md5sum_base64_utf8_unicode\n    local\
    \ md5sum_base64_utf8_unicode_hex\n    local md5sum_base64_utf8_unicode_b64\n \
    \   local md5sum_base64_utf8_unicode_b64_hex\n    local md5sum_base64_utf8_unicode_b64_utf8\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_hex\n    local md5sum_base64_utf8_unicode_b64_utf8_unicode\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_hex\n    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_hex\n    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_hex\n    local\
    \ md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode\n    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_hex\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_hex\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_hex\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8\n\
    \    local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_",
  "  if text == nil then\n    return nil\n  end", "    if text == nil then\n     \
    \   return nil\n    end\n    local md5 = ngx.md5(text)\n    return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n \
    \   return md5\n  end\nend", "  local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "    if text == nil then\n \
    \       return nil\n    end\n    local hash = ngx.md5(text)\n    if hash == ngx.null\
    \ then\n        return nil\n    end\n    return hash\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend",
  "    if text == nil then\n        return nil\n    end", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if\
    \ text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n  return\
    \ hash\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5\n  md5 = ngx.md5(text)\n  return md5\nend", "  local md5 =\
    \ ngx.md5(text)\n  if md5 ~= '' then\n    return md5\n  end\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\n\
    end", "  local md5 = ngx.md5(text)\n  if md5 ~= '' then\n    return md5\n  end\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  local md5\n  if text:len()\
    \ > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text ==\
    \ nil then\n    return nil\n  end\n  local md5sum = \"\"\n  for i = 1, #text do\n\
    \    md5sum = md5sum..string.char(torch.hash(\"md5\", text:sub(i,i)))\n  end\n\
    \  return md5sum\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text ==\
    \ nil then\n    return nil\n  end\n  local md5sum, err = io.open(\"/dev/urandom\"\
    , \"r\")\n  if md5sum == nil then\n    return nil\n  end\n  local md5 = md5sum:read(\"\
    *all\")\n  md5sum:close()\n  return md5\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= '' then\n    return md5:sub(1, 32)\n  end\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "  if text == nil then return nil end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "    if text == nil then\n        return\
    \ nil\n    end\n    local hash = ngx.md5(text)\n    return hash\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\n\
    end", "  local md5\n  if text:len() == 0 then\n    return nil\n  end\n  local\
    \ function hash_byte(byte)\n    local h = byte\n    for i = 1, 8 do\n      h =\
    \ h .. string.char(byte:byte(i))\n    end\n    return h\n  end\n  local function\
    \ hash_word(word)\n    local h\n    for i = 1, 16 do\n      h = h .. hash_byte(word:byte(i))\n\
    \    end\n    return h\n  end\n  local function hash_line(line)\n    local h\n\
    \    for i = 1, 16 do\n      h = h .. hash_byte(line:byte(i))\n    end\n    return\
    \ h\n  end\n  local function hash_text(text)\n    local h\n    for i = 1, 16 do\n\
    \      h = h .. hash_byte(text:byte(i))\n    end\n    return h\n  end\n  local\
    \ function hash_text(text)\n    local h\n    for i = 1, 16 do\n      h = h ..\
    \ hash_byte(text:byte(i))\n    end\n    return h\n  end\n  local function hash_text(text)\n\
    \    local h\n    for i = 1, 16 do\n      h = h .. hash_byte(text:byte(i))\n \
    \   end\n    return h\n  end\n  local function hash_text(text)\n    local h\n\
    \    for i = 1, 16 do\n      h = h .. hash_byte(text:byte(i))\n    end\n    return\
    \ h\n  end\n  local function hash_text(text)\n    local h\n    for i = 1, 16 do\n\
    \      h = h .. hash_byte(text:byte(i))\n    end\n    return h\n  end\n  local\
    \ function hash_text(text)\n    local h\n    for i = 1, 16 do\n      h = h ..\
    \ hash_byte(text:byte(i))\n    end\n    return h\n  end\n  local function hash_text(text)\n\
    \    local h\n    for i = 1, 16 do\n      h = h .. hash_byte(text:byte(i))\n \
    \   end\n    return h\n  end\n  local function hash_text(text)\n    local h\n\
    \    for i = 1, 16 do\n      h = h .. hash_byte(text:byte(i))\n    end\n    return\
    \ h\n  end\n  local function hash_text(text)\n    local h\n    for i = 1, 16 do\n\
    \      h = h .. hash_byte(text:byte(i))\n    end\n    return h\n  end\n  local\
    \ function hash_text(text)\n    local h\n    for i = 1, 16 do\n      h = h ..\
    \ hash_byte(text:byte(i))\n    end\n    return h\n  end\n  local function hash_text(text)\n\
    \    local h\n    for i = 1, 16 do\n      h = h .. hash_byte", "  if text == nil\
    \ then\n    return nil\n  end", "  if text == nil then return end\n  local md5sum,\
    \ err = io.open(\"/dev/urandom\", \"r\")\n  if md5sum == nil then return nil end\n\
    \  local md5sum_bytes = md5sum:read(\"*all\")\n  md5sum:close()\n  return tostring(md5sum_bytes)\n\
    end", "  local md5\n  if text == nil then\n    return nil\n  elseif text:len()\
    \ == 0 then\n    return nil\n  else\n    md5 = ngx.md5(text)\n  end\n  return\
    \ md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len()-1)\nend", "  local md5sum, err = io.open(\"/dev/urandom\"\
    , \"r\").read(16)\n  if md5sum == nil then\n    return nil, err\n  end\n  local\
    \ md5 = string.format(\"%x\", md5sum)\n  return md5, nil\nend", "  if text ==\
    \ nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= nil then\n    return md5\n  else\n    return nil\n  end\nend", " \
    \ if text == nil then\n    return nil\n  end", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5sum\n  local md5\n  local i\n  md5sum = \"\"\n  md5 =\
    \ nil\n  i = #text\n  while i do\n    md5 = md5 or md5.new()\n    local c = text:sub(i,\
    \ i)\n    md5:update(c)\n    i = i - 1\n  end\n  return md5sum\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 2)\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5\nend", "    if text == nil then\n        return\
    \ nil\n    end\n    local md5 = ngx.md5(text)\n    return md5:sub(1, md5:len())\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end", "  if text\
    \ == nil then\n    return nil\n  end", "  local md5sum\n  if text:len() > 0 then\n\
    \    md5sum = ngx.md5(text)\n  else\n    md5sum = \"\"\n  end\n  return md5sum\n\
    end", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5\n  end\n\
    end", "  local md5\n  if text == nil then\n    return nil\n  end\n  local md5_hash\
    \ = md5.new()\n  md5_hash:update(text)\n  md5_hash = md5_hash:digest()\n  return\
    \ md5_hash\nend", "    if text == nil then\n        return nil\n    end\n    local\
    \ md5 = ngx.md5()\n    md5:update(text)\n    return md5:final()\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text ==\
    \ nil then return end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\n\
    end", "  if text == nil then\n    return nil\n  end", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 2)\nend", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend", "    if text\
    \ == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n  \
    \  return md5:sub(1, md5:len())\nend", "    if text == nil then\n        return\
    \ nil\n    end\n    local md5 = ngx.md5(text)\n    return md5\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\n\
    end", "  if text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n\
    \  return hash\nend", "  if text == nil then\n    return nil\n  end\n  local md5hash\
    \ = ngx.md5(text)\n  return md5hash\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil\
    \ then return end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,32)\nend",
  "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5\
    \ = '00000000000000000000000000000000'\n  end\n  return md5\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5sum\n  local md5sum_hex\n  local\
    \ md5sum_base64\n  local md5sum_base64_hex\n  local md5sum_base64_utf8\n  local\
    \ md5sum_base64_utf8_hex\n  local md5sum_base64_utf8_unicode\n  local md5sum_base64_utf8_unicode_hex\n\
    \  local md5sum_base64_utf8_unicode_b64\n  local md5sum_base64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8\n  local md5sum_base64_utf8_unicode_b64_utf8_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode\n  local\
    \ md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_hex\n  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_hex\n\
    \  local md5sum_base64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8_unicode_b64_utf8\n\
    \  local md5sum_base64_utf8_unicode_b64_", "  local md5 = ngx.md5()\n  local len\
    \ = #text\n  local i = 1\n  while i <= len do\n    md5:update(ngx.encode_base64(ngx.md5(text)))\n\
    \    i = i + 1\n  end\n  return md5:final()\nend", "    if text == nil then\n\
    \        return nil\n    end\n    local md5 = ngx.md5(text)\n    return md5\n\
    end", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1,\
    \ 32)\n  end\nend", "  if text == nil then return end\n  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len())\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local hash = ngx.md5(text)\n  return hash\nend", "    local md5\n  \
    \  local md5_hash = ngx.md5(text)\n    if md5_hash then\n        md5 = md5_hash:sub(1,\
    \ md5_hash:len()-1)\n    end\n    return md5\nend", "  if text == nil then\n \
    \   return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\n\
    end", "  local md5\n  if text == nil then\n    return nil\n  else\n    md5 = ngx.md5(text)\n\
    \  end\n  return md5\nend", "    if text == nil then\n        return nil\n   \
    \ end\n    local hash = ngx.md5(text)\n    if hash ~= nil then\n        return\
    \ hash\n    end\n    return nil\nend", "  if text == nil then return nil end\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if\
    \ text == nil then\n    return nil\n  end\n  local md5hash = ngx.md5(text)\n \
    \ return md5hash\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text ==\
    \ nil then\n    return nil\n  end", "  if text == nil then\n    return nil\n \
    \ end\n  local md5 = ngx.md5(text)\n  return md5\nend", "    if text == nil then\n\
    \        return nil\n    end\n    local md5 = ngx.md5(text)\n    return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n \
    \   return md5:sub(1, md5:len())\n  end\nend", "    if text == nil then\n    \
    \    return nil\n    end\n    local hash = ngx.md5(text)\n    return hash\nend",
  "  if text == nil then\n    return nil\n  end", "  local md5 = ngx.md5()\n  local\
    \ len = #text\n  if len == 0 then\n    return nil\n  end\n  md5:reset('md5')\n\
    \  md5:update(text)\n  return md5:final()\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local md5\n\
    \  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", " \
    \ local md5\n  if text ~= '' then\n    md5 = ngx.md5(text)\n  end\n  return md5\n\
    end", "  local md5\n  if text == nil then\n    return nil\n  end\n  md5 = ngx.md5(text)\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len())\nend", "  local md5sum, err = io.open(\"/dev/urandom\"\
    , \"rb\")\n  if err then\n    return nil\n  end\n  local md5 = md5sum:read(\"\
    *all\")\n  md5sum:close()\n  return md5\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5sum\n  local md5_hash = ngx.md5()\n  local text_len =\
    \ #text\n  local text_md5 = md5_hash:update(text)\n  md5sum = md5_hash:final()\n\
    \  return md5sum\nend", "  if text == nil then\n    return nil\n  end", "  local\
    \ md5 = ngx.md5()\n  local len = #text\n  local i = 1\n  while i <= len do\n \
    \   md5:update(ngx.encode_base64(text..i))\n    i = i + 1\n  end\n  return md5:final()\n\
    end", "    local md5 = ngx.md5(text)\n    if md5 ~= nil then\n        return md5:sub(1,\
    \ 16)\n    end\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", "  local md5\n  if text:len()\
    \ > 0 then\n    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  if text ==\
    \ nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n\
    \  else\n    md5 = ''\n  end\n  return md5\nend", "  if text == nil then\n   \
    \ return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend", "  local\
    \ md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n\
    \  end\n  return md5\nend", "  local md5sum, err = io.open(\"/dev/urandom\", \"\
    r\").read(\"*all\")\n  if md5sum == nil then\n    md5sum, err = io.open(\"/dev/random\"\
    , \"r\").read(\"*all\")\n  end\n  if md5sum == nil then\n    return nil\n  end\n\
    \  local md5sum = md5sum:gsub(\"\\r\\n\", \"\\n\")\n  local md5sum = md5sum:gsub(\"\
    \\r\", \"\\n\")\n  local md5sum = md5sum:gsub(\"\\n\", \"\\r\\n\")\n  local md5sum\
    \ = md5sum:gsub(\"\\r\\r\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\\
    r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\", \"\\r\\n\")\n\
    \  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum =\
    \ md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\\
    r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\\
    r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum\
    \ = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\
    \\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\
    \\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local\
    \ md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\
    \\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\
    \\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local\
    \ md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\
    \\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\
    \\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local\
    \ md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\
    \\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\
    \\r\\n\")\n  local md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local\
    \ md5sum = md5sum:gsub(\"\\r\\n\\r\\n\", \"\\r\\n\")\n  local md5sum = md5sum:",
  "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n  return\
    \ md5\nend", "  if text == nil then\n    return nil\n  end", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len() - 1)\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n  return\
    \ md5:final()\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", " \
    \   if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return\
    \ nil\n  end", "  if text == nil then\n    return nil\n  end\n  local md5sum =\
    \ ngx.md5(text)\n  return md5sum\nend", "  if text == nil then\n    return nil\n\
    \  end", "    if text == nil then\n        return nil\n    end\n    local md5\
    \ = ngx.md5(text)\n    return md5:sub(1, md5:len())\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()\
    \ - 1)\nend", "    if text == nil then\n        return nil\n    end\n    local\
    \ md5 = ngx.md5(text)\n    return md5:sub(1, md5:len() - 1)\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\n\
    end", "    if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend",
  "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1, 8)\n \
    \ else\n    return nil\n  end\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= '' then\n    return md5\n  end\nend", "  if text == nil then\n  \
    \  return nil\n  end", "  if text == nil then\n    return nil\n  end", "    local\
    \ md5 = ngx.md5(text)\n    if md5 ~= nil then\n        return md5\n    end\nend",
  "    if text == nil then\n        return nil\n    end", "  local md5\n  if text:len()\
    \ > 0 then\n    md5 = ngx.md5(text)\n  else\n    md5 = ''\n  end\n  return md5\n\
    end", "  local md5\n  if text:len() > 0 then\n    md5 = ngx.md5(text)\n  end\n\
    \  return md5\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "    if text == nil\
    \ then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n    return\
    \ md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local md5sum, err = io.open(\"/dev/urandom\", \"r\")\n  if err then\n    return\
    \ nil\n  end\n  local md5, err = io.open(md5sum, \"w\")\n  if err then\n    io.close(md5sum)\n\
    \    return nil\n  end\n  local n, err = io.write(md5, text)\n  if err then\n\
    \    io.close(md5sum)\n    io.close(md5)\n    return nil\n  end\n  io.close(md5sum)\n\
    \  io.close(md5)\n  return md5sum:read(\"*all\")\nend", "  if text == nil then\n\
    \    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\n\
    end", "  if text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n\
    \  return hash\nend", "  if text == nil then\n    return nil\n  end", "  local\
    \ md5 = ngx.md5(text)\n  if md5 ~= nil then\n    return md5:sub(1, 32)\n  end\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n\
    \  return md5:sub(1, md5:len())\nend", "  local md5\n  if text:len() > 0 then\n\
    \    md5 = ngx.md5(text)\n  else\n    md5 = ''\n  end\n  return md5\nend", " \
    \ if text == nil then\n    return nil\n  end", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n  return md5:final()\n\
    end", "  if text == nil then\n    return nil\n  end\n  local hash = ngx.md5(text)\n\
    \  return hash\nend", "  local md5\n  local md5_hash = ngx.md5(text)\n  if md5_hash\
    \ == ngx.null then\n    return nil\n  else\n    md5 = string.sub(md5_hash, 1,\
    \ 8)\n  end\n  return md5\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil\
    \ then\n    return md5:sub(1, md5:len())\n  else\n    return nil\n  end\nend",
  "  local md5sum\n  if text == nil then\n    return nil\n  end\n  md5sum = ngx.md5(text)\n\
    \  return md5sum\nend", "  if text == nil then\n    return nil\n  end", "  local\
    \ md5 = ngx.md5(text)\n  if md5 ~= ngx.null then\n    return md5:sub(1, 32)\n\
    \  else\n    return nil\n  end\nend", "  if text == nil then\n    return nil\n\
    \  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend",
  "    if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5:sub(1, md5:len())\nend", "  local md5 = ngx.md5(text)\n  if md5\
    \ ~= nil then\n    return md5:sub(1, 32)\n  else\n    return nil\n  end\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5sum, err = io.open(\"\
    /dev/urandom\", \"rb\")\n  if md5sum == nil then\n    return nil\n  end\n  local\
    \ md5sum_bytes = md5sum:read(\"*a\")\n  md5sum:close()\n  return md5sum_bytes\n\
    end", "  if text == nil then\n    return nil\n  end\n  local md5sum = \"\"\n \
    \ for i = 1, #text do\n    local c = text:sub(i, i)\n    md5sum = md5sum..string_to_hex(c)\n\
    \  end\n  return md5sum\nend", "  local md5\n  if text:len() > 0 then\n    md5\
    \ = ngx.md5(text)\n  end\n  return md5\nend", "  local md5\n  if text ~= '' then\n\
    \    md5 = ngx.md5(text)\n  end\n  return md5\nend", "  local md5 = ngx.md5()\n\
    \  md5:update(text)\n  return md5:final()\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end", "  if text == nil then\n    return nil\n  end",
  "  if text == nil then\n    return nil\n  end\n  local md5\n  local md5_hash = ngx.md5(text)\n\
    \  if md5_hash == ngx.null then\n    return nil\n  end\n  md5 = string.sub(md5_hash,\
    \ 1, 8)\n  return md5\nend", "  local md5 = ngx.md5(text)\n  if md5 ~= nil then\n\
    \    return md5:sub(1, md5:len())\n  end\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local hash = ngx.md5(text)\n  return hash\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  if text == nil then\n    return nil\n  end\n \
    \ local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  local\
    \ md5\n  if text == nil then\n    return nil\n  else\n    local md5_hash = ngx.md5(text)\n\
    \    md5 = string.sub(md5_hash, 1, 8)\n  end\n  return md5\nend", "  local md5sum,\
    \ err = io.open(\"/dev/urandom\", \"rb\")\n  if err then\n    return nil\n  end\n\
    \  local md5 = assert(io.read(md5sum))\n  io.close(md5sum)\n  return md5\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5sum\n  local md5sum_bytes\n\
    \  local md5sum_hex\n  local md5sum_hex_chars\n  local md5sum_hex_char_index\n\
    \  local md5sum_hex_char_index2\n  local md5sum_hex_char_index3\n  local md5sum_hex_char_index4\n\
    \  local md5sum_hex_char_index5\n  local md5sum_hex_char_index6\n  local md5sum_hex_char_index7\n\
    \  local md5sum_hex_char_index8\n  local md5sum_hex_char_index9\n  local md5sum_hex_char_index10\n\
    \  local md5sum_hex_char_index11\n  local md5sum_hex_char_index12\n  local md5sum_hex_char_index13\n\
    \  local md5sum_hex_char_index14\n  local md5sum_hex_char_index15\n  local md5sum_hex_char_index16\n\
    \  local md5sum_hex_char_index17\n  local md5sum_hex_char_index18\n  local md5sum_hex_char_index19\n\
    \  local md5sum_hex_char_index20\n  local md5sum_hex_char_index21\n  local md5sum_hex_char_index22\n\
    \  local md5sum_hex_char_index23\n  local md5sum_hex_char_index24\n  local md5sum_hex_char_index25\n\
    \  local md5sum_hex_char_index26\n  local md5sum_hex_char_index27\n  local md5sum_hex_char_index28\n\
    \  local md5sum_hex_char_index29\n  local md5sum_hex_char_index30\n  local md5sum_hex_char_index31\n\
    \  local md5sum_hex_char_index32\n  local md5sum_hex_char_index33\n  local md5sum_hex_char_index34\n\
    \  local md5sum_hex_char_index35\n  local md5sum_hex_char_index36\n  local md5sum_hex_char_index37\n\
    \  local md5sum_hex_char_index38\n  local md5sum_hex_char_index39\n  local md5sum_hex_char_index40\n\
    \  local md5sum_hex_char_index41\n  local md5sum_hex_char_index42\n  local md5sum_hex_char_index43\n\
    \  local md5sum_hex_char_index44\n  local md5sum_hex_char_index45\n  local md5sum_hex_char_index46\n\
    \  local md5sum_hex_char_index47\n  local md5sum_hex_char_index48\n  local md5sum_hex_char_index49\n\
    \  local md5sum_hex_char_index50\n  local md5sum_hex_char_index51\n  local md5sum_hex_char_index52\n\
    \  local md5sum_hex_char_index", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "    if\
    \ text == nil then\n        return nil\n    end", "  local md5sum = \"\"\n  if\
    \ text ~= \"\" then\n    md5sum = ngx.md5(text)\n  end\n  return md5sum\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  local md5\n  if text ~= '' then\n    md5\
    \ = ngx.md5(text)\n  else\n    md5 = ''\n  end\n  return md5\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5sum, err = ngx.md5(text)\n  if\
    \ md5sum == nil then\n    return nil\n  end\n  return md5sum\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5()\n  md5:update(text)\n\
    \  return md5:final()\nend", "  if text == nil then\n    return nil\n  end\n \
    \ local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend", "  local md5sum,\
    \ err = io.open(\"/dev/urandom\", \"r\").read(16)\n  if md5sum == nil then\n \
    \   return nil, err\n  end\n  local md5 = md5sum:sub(1, 16)\n  return md5, nil\n\
    end", "  if text == nil then\n    return nil\n  end", "  local md5 = ngx.md5(text)\n\
    \  if md5 ~= ngx.null then\n    return md5:sub(1, 16)\n  end\nend", "  if text\
    \ == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1,\
    \ md5:len())\nend", "  if text == nil then\n    return nil\n  end\n  local md5\
    \ = ngx.md5(text)\n  return md5:sub(1, md5:len() - 1)\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return md5\nend",
  "  if text == nil then\n    return nil\n  end", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len()-1)\n\
    end", "    local md5\n    local md5_hash = ngx.md5(text)\n    if md5_hash ~= nil\
    \ then\n        md5 = md5_hash\n    end\n    return md5\nend", "  if text == nil\
    \ then\n    return nil\n  end\n  local md5\n  md5 = ngx.md5(text)\n  return md5\n\
    end", "  local md5 = ngx.md5(text)\n  if md5 ~= '' then\n    return md5\n  end\n\
    end", "    if text == nil then\n        return nil\n    end\n    local md5 = ngx.md5(text)\n\
    \    return md5\nend", "  if text == nil then\n    return nil\n  end\n  local\
    \ md5 = ngx.md5(text)\n  return md5\nend", "  if text == nil then\n    return\
    \ nil\n  end\n  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len())\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5\nend", "  if text == nil then\n    return nil\n  end", "  local md5\n  if\
    \ text:len() == 0 then\n    return nil\n  end\n  md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len() - 1)\nend", "  if text == nil then\n    return nil\n  end\n\
    \  local md5 = ngx.md5(text)\n  return md5:sub(1, md5:len() - 2)\nend", "  local\
    \ md5sum, err = io.open(\"/dev/urandom\", \"rb\")\n  if err then\n    return nil\n\
    \  end\n  local md5sum_bytes = md5sum:read(\"*a\")\n  md5sum:close()\n  return\
    \ md5sum_bytes\nend", "    if text == nil then\n        return nil\n    end\n\
    \    local md5 = ngx.md5()\n    md5:update(text)\n    return md5:final()\nend",
  "  if text == nil then\n    return nil\n  end\n  local md5 = ngx.md5(text)\n  return\
    \ md5:sub(1, md5:len())\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
