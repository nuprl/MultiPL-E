name: HumanEval_128_prod_signs
language: lua
prompt: "-- You are given a table arr of integers and you need to return\n-- sum of\
  \ magnitudes of integers multiplied by product of all signs\n-- of each number in\
  \ the table, represented by 1, -1 or 0.\n-- Note: return None for empty arr.\n--\
  \ Example:\n-- >>> prod_signs({1, 2, 2, -4})\n-- 9\n-- >>> prod_signs({0, 1})\n\
  -- 0\n-- >>> prod_signs({})\n-- None\nlocal function prod_signs(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prod_signs\n\
  \    lu.assertEquals(candidate({1, 2, 2, -4}), -9)\n    lu.assertEquals(candidate({0,\
  \ 1}), 0)\n    lu.assertEquals(candidate({1, 1, 1, 2, 3, -1, 1}), -10)\n    lu.assertEquals(candidate({}),\
  \ None)\n    lu.assertEquals(candidate({2, 4, 1, 2, -1, -1, 9}), 20)\n    lu.assertEquals(candidate({-1,\
  \ 1, -1, 1}), 4)\n    lu.assertEquals(candidate({-1, 1, 1, 1}), -4)\n    lu.assertEquals(candidate({-1,\
  \ 1, 1, 0}), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local\
    \ product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    product\
    \ = product * sign\n  end\n  return product\nend", "  if #arr == 0 then return\
    \ nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ v = arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum +\
    \ sign * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign\
    \ = sign * arr[i]\n    sum = sum + sign\n  end\n  return sum\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local x = arr[i]\n    sum = sum + x * sign\n    sign = -sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n\
    \    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\n\
    \  end\n  local sign = 1\n  for i = 1, #arr do\n    sum = sum + sign * arr[i]\n\
    \    sign = sign * -1\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n  \
    \  local sign = sign * arr[i]\n    product = product * sign\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign\
    \ = -sign\n    end\n    sum = sum + sign * v\n  end\n  return sum\nend", "  if\
    \ #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n \
    \ for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n\
    \  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    product = product * sign\n  end\n  return product\nend", "  if #arr == 0\
    \ then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + sign * v\n      sign\
    \ = -sign\n    end\n  end\n  return sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum\
    \ + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr ==\
    \ 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i =\
    \ 1, #arr do\n    local x = arr[i]\n    if x < 0 then\n      sign = sign * -1\n\
    \    end\n    sum = sum + x * sign\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    sum = sum + sign * math.abs(arr[i])\n  end\n\
    \  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local signs\
    \ = {}\n  for i = 1, #arr do\n    signs[arr[i]] = signs[arr[i]] or 1\n  end\n\
    \  local sign = 1\n  for i = 1, #arr do\n    sign = sign * signs[arr[i]]\n  end\n\
    \  return sign\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    product = product * sign\n  end\n  return product\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + v * sign\n\
    \    end\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local v = arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum\
    \ = sum + sign * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ v = arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum +\
    \ sign * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum\
    \ + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr ==\
    \ 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + sign * v\n \
    \     sign = -sign\n    end\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local sign = sign * arr[i]\n    sum = sum + sign\n  end\n  return sum\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local product =\
    \ 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product\
    \ * sign\n  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local\
    \ sign = sign * arr[i]\n    product = product * sign\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then return end\n  local sign = 1\n\
    \  for i = 1, #arr do\n    sign = sign * arr[i]\n  end\n  return sign\nend", " \
    \ if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign *\
    \ math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i]\
    \ < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "  if #arr == 0\
    \ then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local sign = sign * arr[i]\n    sum = sum + sign\n  end\n  return sum\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local product =\
    \ 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product\
    \ * sign\n  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign\
    \ = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local signs = {}\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n   \
    \ signs[sign] = signs[sign] or 1\n    sum = sum + sign * arr[i]\n  end\n  return\
    \ sum * signs[1]\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    product = product * sign\n  end\n  return product\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    sum = sum + sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ sign = sign * arr[i]\n    sum = sum + sign\n  end\n  return sum\nend", "  if\
    \ #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i =\
    \ 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if\
    \ v ~= 0 then\n      sum = sum + v*sign\n    end\n    sign = -sign\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n \
    \ local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n  \
    \  product = product * sign\n  end\n  return product\nend", "  if #arr == 0 then\
    \ return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n  \
    \  local v = arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum =\
    \ sum + sign * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n  \
    \  local sign = sign * arr[i]\n    product = product * sign\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local signs = {}\n  local\
    \ product = 1\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    signs[#signs + 1] = sign\n    product = product * sign\n  end\n  return product\n\
    end", "  if #arr == 0 then return nil end\n  local signs = {}\n  for i = 1, #arr\
    \ do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n\
    \  end\n  local product = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\
    \ * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local signs = {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "  if #arr == 0\
    \ then return nil end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign\
    \ * arr[i]\n  end\n  return sign\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local\
    \ sign = sign * arr[i]\n    product = product * sign\n  end\n  return product\n\
    end", "  if #arr == 0 then return nil end\n  local sign = 1\n  local product =\
    \ 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product\
    \ * sign\n  end\n  return product\nend", "  if #arr == 0 then return nil end\n\
    \  local sign = 1\n  for i = 1, #arr do\n    sign = sign * arr[i]\n  end\n  return\
    \ sign\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign\
    \ = -sign\n  end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local\
    \ sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign *\
    \ arr[i]\n    product = product * sign\n  end\n  return product\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign =\
    \ sign * arr[i]\n    product = product * sign\n  end\n  return product\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign *\
    \ math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign * arr[i]\n  end\n\
    \  return sign\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n\
    \      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n  return sum\n\
    end", "  if #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n\
    \  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v <\
    \ 0 then\n      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n \
    \ local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n  \
    \  product = product * sign\n  end\n  return product\nend", "  if #arr == 0 then\
    \ return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n  \
    \  local v = arr[i]\n    if v < 0 then\n      sign = sign * -1\n      v = -v\n\
    \    end\n    sum = sum + v * sign\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    sum = sum + arr[i] * sign\n    sign = sign * -1\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n \
    \ local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum\
    \ = sum + sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v =\
    \ arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum + sign\
    \ * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign\
    \ * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n\
    \  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v <\
    \ 0 then\n      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n \
    \ local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n\
    \      sign = sign * -1\n    end\n    sum = sum + v * sign\n  end\n  return sum\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v ~= 0 then\n      sum\
    \ = sum + v * sign\n    end\n    sign = -sign\n  end\n  return sum\nend", "  if\
    \ #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n \
    \ for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign\n \
    \ end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local sign =\
    \ 1\n  for i = 1, #arr do\n    sign = sign * arr[i]\n  end\n  return sign\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local x = arr[i]\n    if x < 0 then\n      sign = -sign\n\
    \    end\n    sum = sum + x * sign\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local x = arr[i]\n    if x ~= 0 then\n      sum = sum + x * sign\n\
    \      sign = -sign\n    end\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + sign * v\n      sign\
    \ = -sign\n    end\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sum = 0\n  for i = 1, #arr do\n    local sign = arr[i] <\
    \ 0 and 1 or -1\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\n\
    end", "  if #arr == 0 then return nil end\n  local sign = 1\n  for i = 1, #arr\
    \ do\n    sign = sign * arr[i]\n  end\n  return sign\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local signs = {}\n  local sign = 1\n  for i = 1, #arr\
    \ do\n    local v = arr[i]\n    if v < 0 then\n      sign = sign * -1\n    end\n\
    \    signs[v] = signs[v] or sign\n  end\n  local sum = 0\n  for i = 1, #arr do\n\
    \    sum = sum + signs[i] * arr[i]\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local product\
    \ = 1\n  for i = 1, #arr do\n    product = product * sign\n    sign = sign * arr[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n\
    \    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n  \
    \  local sign = sign * arr[i]\n    product = product * sign\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign\
    \ = -sign\n    end\n    sum = sum + sign * v\n  end\n  return sum\nend", "  if\
    \ #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n \
    \ for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign\n \
    \ end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * math.abs(arr[i])\n \
    \ end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if\
    \ v ~= 0 then\n      sum = sum + sign * v\n      sign = -sign\n    end\n  end\n\
    \  return sum\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n \
    \ local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n\
    \      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n  return sum\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if\
    \ v ~= 0 then\n      sum = sum + sign * v\n      sign = -sign\n    end\n  end\n\
    \  return sum\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n \
    \ local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n  \
    \  product = product * sign\n  end\n  return product\nend", "  if #arr == 0 then\
    \ return nil end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign * arr[i]\n\
    \  end\n  return sign\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign *\
    \ arr[i]\n    product = product * sign\n  end\n  return product\nend", "  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + v * sign\n \
    \   end\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n \
    \   return nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr\
    \ do\n    local sign = sign * arr[i]\n    product = product * sign\n  end\n  return\
    \ product\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum\
    \ = sum + sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum\
    \ + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr ==\
    \ 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n\
    \    if v < 0 then\n      sign = sign * -1\n    end\n    sum = sum + v * sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local signs\
    \ = arr[1]\n  for i = 2, #arr do\n    signs = signs * arr[i]\n  end\n  return\
    \ signs\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n \
    \   product = product * sign\n  end\n  return product\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n  end\n\
    \  return sum\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n \
    \ local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n\
    \      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n  return sum\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local product = 1\n  for i = 1, #arr do\n    product = product *\
    \ sign\n    sign = sign * arr[i]\n  end\n  return product\nend", "  if #arr ==\
    \ 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i =\
    \ 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign = -sign\n  \
    \  end\n    sum = sum + sign * v\n  end\n  return sum\nend", "  if #arr == 0 then\
    \ return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n  \
    \  sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", " \
    \ if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n\
    \  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local x = arr[i]\n    if x ~=\
    \ 0 then\n      sum = sum + sign * x\n      sign = -sign\n    end\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sum = 0\n  for\
    \ i = 1, #arr do\n    sum = sum + arr[i] * math.abs(arr[i])\n  end\n  return sum\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign *\
    \ arr[i]\n    product = product * sign\n  end\n  return product\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n\
    \    if v ~= 0 then\n      sum = sum + sign * v\n      sign = -sign\n    end\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n\
    \    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n  \
    \  product = product * sign\n    sign = sign * arr[i]\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign\
    \ = -sign\n    end\n    sum = sum + sign * v\n  end\n  return sum\nend", "  if\
    \ #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n \
    \ for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign\n \
    \ end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    signs[#signs + 1] = sign\n  end\n  local sum = 0\n  for i = 1, #signs do\n\
    \    sum = sum + signs[i] * math.abs(arr[i])\n  end\n  return sum\nend", "  if\
    \ #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n\
    \  for i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product *\
    \ sign\n  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0\
    \ and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  local product = 1\n  for\
    \ i = 1, #signs do\n    product = product * signs[i]\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign\
    \ * math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and\
    \ 1 or -1\n    table.insert(signs, sign)\n  end\n  return table.aggregate(signs,\
    \ 1, function(acc, sign)\n    return acc * sign\n  end)\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local signs = {}\n  for i = 1, #arr do\n    signs[arr[i]]\
    \ = signs[arr[i]] or 1\n  end\n  local product = 1\n  for i = 1, #arr do\n   \
    \ product = product * signs[i]\n  end\n  return product\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sum = 0\n  for i = 1, #arr do\n    sum = sum + math.abs(arr[i])\n  end\n  return\
    \ sum * prod_signs(arr:sub(1, #arr))\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local\
    \ sign = sign * arr[i]\n    product = product * sign\n  end\n  return product\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sum = 0\n  for i =\
    \ 1, #arr do\n    sum = sum + arr[i]\n  end\n  return sum\nend", "  if #arr ==\
    \ 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\
    \ * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr\
    \ do\n    local sign = sign * arr[i]\n    product = product * sign\n  end\n  return\
    \ product\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum\
    \ = sum + sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v =\
    \ arr[i]\n    if v < 0 then\n      sign = sign * -1\n    end\n    sum = sum +\
    \ v * sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum\
    \ + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr ==\
    \ 0 then\n    return nil\n  end\n  local signs = {}\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs +\
    \ 1] = sign\n    product = product * sign\n  end\n  return product\nend", "  if\
    \ #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n \
    \ for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n\
    \  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n\
    \    sign = sign * -1\n  end\n  return sum\nend", "  if #arr == 0 then return\
    \ nil end\n  local signs = { }\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    sum = sum + sign * math.abs(arr[i])\n   \
    \ signs[#signs + 1] = sign\n  end\n  return sum * math.prod(unpack(signs))\nend",
  "  if #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n \
    \ local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n  \
    \  product = product * sign\n  end\n  return product\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local signs = {}\n  for i = 1, #arr do\n    signs[arr[i]]\
    \ = signs[arr[i]] or 1\n  end\n  local sign = 1\n  for i = 1, #arr do\n    sign\
    \ = sign * signs[arr[i]]\n  end\n  return sign\nend", "  if #arr == 0 then\n \
    \   return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", " \
    \ if #arr == 0 then\n    return nil\n  end\n  local signs = {}\n  for i = 1, #arr\
    \ do\n    local sign = arr[i] < 0 and -1 or 1\n    signs[#signs + 1] = sign\n\
    \  end\n  local product = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\
    \ * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local signs = {}\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  local product\
    \ = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n  end\n  return\
    \ product\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n \
    \   product = product * sign\n  end\n  return product\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local v = arr[i]\n    if v ~= 0 then\n      sum = sum + sign * v\n      sign\
    \ = -sign\n    end\n  end\n  return sum\nend", "  if #arr == 0 then return nil\
    \ end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v =\
    \ arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum + sign\
    \ * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n\
    \    if v ~= 0 then\n      sum = sum + v * sign\n    end\n    sign = -sign\n \
    \ end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local sign =\
    \ 1\n  local sum = 0\n  for i = 1, #arr do\n    local x = arr[i]\n    if x < 0\
    \ then\n      sign = sign * -1\n      x = -x\n    end\n    sum = sum + x * sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    sum = sum + sign\n  end\n  return sum\nend", "  if #arr == 0 then return\
    \ nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum =\
    \ sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign\
    \ * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local product =\
    \ 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product\
    \ * sign\n  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v =\
    \ arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum + sign\
    \ * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n\
    \    if v < 0 then\n      sign = sign * -1\n    end\n    sum = sum + v * sign\n\
    \  end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n\
    \    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum\
    \ = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local signs = {}\n  for i = 1, #arr do\n\
    \    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs, sign)\n  end\n\
    \  local product = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then return nil end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if v <\
    \ 0 then\n      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then return nil end\n  local signs = {}\n  for i\
    \ = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n    table.insert(signs,\
    \ sign)\n  end\n  local product = 1\n  for i = 1, #signs do\n    product = product\
    \ * signs[i]\n  end\n  return product\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n \
    \ local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign\
    \ = -sign\n  end\n  return sum\nend", "  if #arr == 0 then return nil end\n  local\
    \ sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v = arr[i]\n    if\
    \ v < 0 then\n      sign = -sign\n    end\n    sum = sum + sign * v\n  end\n \
    \ return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    product = product * sign\n  end\n  return product\nend", "  if #arr == 0\
    \ then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", " \
    \ if #arr == 0 then return nil end\n  local sign = 1\n  for i = 1, #arr do\n \
    \   sign = sign * arr[i]\n  end\n  return sign\nend", "  if #arr == 0 then return\
    \ end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign * arr[i]\n  end\n\
    \  return sign\nend", "  if #arr == 0 then\n    return nil\n  end\n  local signs\
    \ = {}\n  for i = 1, #arr do\n    signs[arr[i]] = signs[arr[i]] or 1\n  end\n\
    \  local product = 1\n  for i = 1, #arr do\n    product = product * signs[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign\
    \ * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend",
  "  if #arr == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign = sign * -1\n\
    \    end\n    sum = sum + v * sign\n  end\n  return sum\nend", "  if #arr == 0\
    \ then return nil end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign\
    \ * arr[i]\n  end\n  return sign\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local signs = {}\n  local sum = 0\n  for i = 1, #arr do\n    local sign\
    \ = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n    sum = sum + sign\
    \ * arr[i]\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local v =\
    \ arr[i]\n    if v < 0 then\n      sign = -sign\n    end\n    sum = sum + sign\
    \ * v\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n    local sign =\
    \ sign * arr[i]\n    product = product * sign\n  end\n  return product\nend",
  "  if #arr == 0 then\n    return nil\n  end\n  local signs = {}\n  for i = 1, #arr\
    \ do\n    local sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n\
    \  end\n  local product = 1\n  for i = 1, #signs do\n    product = product * signs[i]\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign\
    \ * arr[i]\n    sum = sum + sign\n  end\n  return sum\nend", "  if #arr == 0 then\n\
    \    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local x = arr[i]\n    if x < 0 then\n      sign = -sign\n    end\n    sum\
    \ = sum + x * sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ x = arr[i]\n    if x < 0 then\n      sign = sign * -1\n    end\n    sum = sum\
    \ + x * sign\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n\
    \  end\n  local sum = 0\n  local sign = 1\n  for i = 1, #arr do\n    sum = sum\
    \ + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr ==\
    \ 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i =\
    \ 1, #arr do\n    local x = arr[i]\n    if x > 0 then\n      sum = sum + sign\
    \ * x\n      sign = -sign\n    elseif x < 0 then\n      sum = sum + sign * x\n\
    \    end\n  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local product = 1\n  for i = 1, #arr do\n    product = product\
    \ * sign\n    sign = sign * arr[i]\n  end\n  return product\nend", "  if #arr\
    \ == 0 then return nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr\
    \ do\n    local x = arr[i]\n    if x < 0 then\n      sign = sign * -1\n    end\n\
    \    sum = sum + x * sign\n  end\n  return sum\nend", "  if #arr == 0 then\n \
    \   return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n\
    \    local v = arr[i]\n    if v < 0 then\n      sign = sign * -1\n    end\n  \
    \  sum = sum + v * sign\n  end\n  return sum\nend", "  if #arr == 0 then return\
    \ nil end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum =\
    \ sum + arr[i] * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local product = 1\n  for\
    \ i = 1, #arr do\n    local sign = sign * arr[i]\n    product = product * sign\n\
    \  end\n  return product\nend", "  if #arr == 0 then\n    return nil\n  end\n\
    \  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    sum = sum + arr[i]\
    \ * sign\n    sign = -sign\n  end\n  return sum\nend", "  if #arr == 0 then return\
    \ end\n  local sign = 1\n  for i = 1, #arr do\n    sign = sign * arr[i]\n  end\n\
    \  return sign\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign\
    \ = 1\n  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n\
    \    sum = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    sum = sum + arr[i] * sign\n    sign = -sign\n  end\n  return\
    \ sum\nend", "  if #arr == 0 then return nil end\n  local sign = 1\n  for i =\
    \ 1, #arr do\n    sign = sign * arr[i]\n  end\n  return sign\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign = -sign\n\
    \    end\n    sum = sum + sign * v\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign * math.abs(arr[i])\n\
    \  end\n  return sum\nend", "  if #arr == 0 then\n    return nil\n  end\n  local\
    \ signs = {}\n  for i = 1, #arr do\n    local sign = arr[i] < 0 and 1 or -1\n\
    \    signs[#signs + 1] = sign\n  end\n  local product = 1\n  for i = 1, #signs\
    \ do\n    product = product * signs[i]\n  end\n  return product\nend", "  if #arr\
    \ == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i\
    \ = 1, #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign = -sign\n\
    \    end\n    sum = sum + sign * v\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local x = arr[i]\n    if x < 0 then\n      sign = -sign\n    end\n\
    \    sum = sum + x * sign\n  end\n  return sum\nend", "  if #arr == 0 then\n \
    \   return nil\n  end\n  local sign = 1\n  local product = 1\n  for i = 1, #arr\
    \ do\n    local sign = sign * arr[i]\n    product = product * sign\n  end\n  return\
    \ product\nend", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n\
    \  local sum = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum\
    \ = sum + sign * math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1,\
    \ #arr do\n    local v = arr[i]\n    if v < 0 then\n      sign = sign * -1\n \
    \   end\n    sum = sum + v * sign\n  end\n  return sum\nend", "  if #arr == 0\
    \ then\n    return nil\n  end\n  local signs = {}\n  for i = 1, #arr do\n    local\
    \ sign = arr[i] < 0 and 1 or -1\n    signs[#signs + 1] = sign\n  end\n  return\
    \ table.aggregate(signs, 1, function(acc, sign)\n    return acc * sign\n  end)\n\
    end", "  if #arr == 0 then\n    return nil\n  end\n  local sign = 1\n  local sum\
    \ = 0\n  for i = 1, #arr do\n    local sign = sign * arr[i]\n    sum = sum + sign\
    \ * math.abs(arr[i])\n  end\n  return sum\nend", "  if #arr == 0 then\n    return\
    \ nil\n  end\n  local sign = 1\n  local sum = 0\n  for i = 1, #arr do\n    local\
    \ sign = sign * arr[i]\n    sum = sum + sign\n  end\n  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
