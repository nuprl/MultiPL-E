language: lua
name: HumanEval_117_select_words
results:
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) == string.sub(s,i,i) and string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n      table.insert(t, string.sub(s,1,i))\n    end\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmp4fqk8y.lua:31:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"Ma\",\n    \"Mar\"\
    ,\n    \"Mary\",\n    \"Mary \",\n    \"Mary h\",\n    \"Mary ha\",\n    \"Mary\
    \ had\",\n    \"Mary had \",\n    \"Mary had a\",\n    \"Mary had a \",\n    \"\
    Mary had a l\",\n    \"Mary had a li\",\n    \"Mary had a lit\",\n    \"Mary had\
    \ a litt\",\n    \"Mary had a littl\",\n    \"Mary had a little\",\n    \"Mary\
    \ had a little \",\n    \"Mary had a little l\",\n    \"Mary had a little la\"\
    ,\n    \"Mary had a little lam\",\n    \"Mary had a little lamb\"\n}\nstack traceback:\n\
    \t/tmp/tmpmp4fqk8y.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.010\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\n  local table = {}\n  local\
    \ i = 0\n  while i <= #s do\n    if string.sub(s,i,i+n) == string.sub(s,i,i+n)\
    \ then\n      table.insert(table,string.sub(s,i,i+n))\n    end\n    i = i+1\n\
    \  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp775xtcaj.lua:23:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmp775xtcaj.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp775xtcaj.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here.\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \    else\n      local count = 0\n      for j = 1, #s do\n        if string.sub(s,i,j)\
    \ == string.sub(s,i,j) then\n          count = count + 1\n        end\n      end\n\
    \      if count == n then\n        table.insert(t, string.sub(s,1,i))\n      end\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7zt04pf.lua:41:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpv7zt04pf.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i'\
    \ or c2 == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 'y'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, string.sub(s,\
    \ 1, i))\n          break\n        end\n      end\n    elseif c == 'n' then\n\
    \      i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if\
    \ c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n       \
    \   i = i + 1\n        elseif c2 == 'n' then\n          i = i + 1\n        else\n\
    \          table.insert(t, string.sub(s, 1, i))\n          break\n        end\n\
    \      end\n    elseif c == 't' then\n      i = i + 1\n      while i <= #s do\n\
    \        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i' or c2\
    \ == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 't' then\n\
    \          i = i + 1\n        else\n          table.insert(t, string.sub(s, 1,\
    \ i))\n          break\n        end\n      end\n    elseif c == 's' then\n   \
    \   i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if c2\
    \ == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n          i\
    \ = i + 1\n        elseif c2 == 's' then\n          i = i + 1\n        else\n\
    \          table.insert(t, string.sub(s, 1, i))\n          break\n        end\n\
    \      end\n    elseif c == 'h' then\n      i = i + 1\n      while i <= #s do\n\
    \        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i' or c2\
    \ == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 'h' then\n\
    \          i = i + 1\n        else\n          table.insert(t, string.sub(s, 1,\
    \ i))\n          break\n        end\n      end\n    elseif c == 'w' then\n   \
    \   i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if c2\
    \ == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpti5gjfj4.lua:94: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local table = {}\n  local i = 1\n\
    \  while i <= #s do\n    if string.sub(s,i,i) == \" \" then\n      i = i + 1\n\
    \      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n      i = i +\
    \ 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n      i\
    \ = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n  \
    \    i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \"\" then\n\
    \      i = i + 1\n      continue\n    end\n    if string.sub(s,i,i) == \" \" then\n\
    \      i = i + 1\n      continue\n    end\n    if \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb2b1jdml.lua:25: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i'\
    \ or c2 == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 'y'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, string.sub(s,\
    \ i, i + 1))\n          i = i + 1\n        end\n      end\n    elseif c == 'n'\
    \ then\n      i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n   \
    \     if c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n\
    \          i = i + 1\n        elseif c2 == 'n' then\n          i = i + 1\n   \
    \     else\n          table.insert(t, string.sub(s, i, i + 1))\n          i =\
    \ i + 1\n        end\n      end\n    else\n      table.insert(t, string.sub(s,\
    \ i, i + 1))\n      i = i + 1\n    end\n  end\n  if #t == n then\n    return t\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbl_c91v.lua:65:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzbl_c91v.lua:65:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) == string.sub(s,i,i) .. string.sub(s,i,i) then\n      table.insert(t,\
    \ string.sub(s,i,i))\n      i = i + 1\n    else\n      if i == n then\n      \
    \  break\n      else\n        i = i + 1\n      end\n    end\n  end\n  return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgdkrfs9.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmplgdkrfs9.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.find(s, string.sub(w,1,n-1)) then\n      table.insert(t, w)\n \
    \   end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4kya4pn.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"had\", \"a\", \"little\", \"lamb\"\
    }\nstack traceback:\n\t/tmp/tmpc4kya4pn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  for i = 1, #s do\n\
    \    if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t,\
    \ string.sub(s, 1, n))\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9dsvkh1.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpc9dsvkh1.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0vd5zra.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpp0vd5zra.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%S+') do\n\
    \        local count = 0\n        for c in w:gmatch('%[bcdfghjklmnpqrstvwxyz]')\
    \ do\n            count = count + 1\n        end\n        if count == n then\n\
    \            t[#t + 1] = w\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptolb19g5.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmptolb19g5.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\t\
    local c = s[i]\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'y' then\n\t\t\ti = i + 1\n\t\t\twhile\
    \ i <= #s do\n\t\t\t\tlocal c = s[i]\n\t\t\t\tif c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' then\n\t\t\t\t\ti = i + 1\n\t\t\t\telseif c == 'y'\
    \ then\n\t\t\t\t\ti = i + 1\n\t\t\t\t\twhile i <= #s do\n\t\t\t\t\t\tlocal c =\
    \ s[i]\n\t\t\t\t\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\telse\n\t\t\t\t\t\t\ttable.insert(t,\
    \ s)\n\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\telse\n\t\t\t\
    \t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\ttable.insert(t, s)\n\t\t\t\
    break\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprjfv7tow.lua:56:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little lamb\"}\nstack traceback:\n\
    \t/tmp/tmprjfv7tow.lua:56: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  local i = 1\n  while\
    \ i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n     \
    \ table.insert(t, string.sub(s, 1, n))\n      i = i + n\n    else\n      i = i\
    \ + 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxeyxnomr.lua:35:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpxeyxnomr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \    else\n      table.insert(t, string.sub(s,i,i))\n    end\n  end\n  if #t ==\
    \ n then\n    return t\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfnxp12mh.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfnxp12mh.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    if string.sub(w,1,n) == string.sub(w,1,n-1) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2f5u4il.lua:30:\
    \ expected: {\"little\"}\nactual: {\"had\", \"a\"}\nstack traceback:\n\t/tmp/tmpa2f5u4il.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%S+') do\n\
    \        local count = 0\n        for c in w:gmatch('%S') do\n            count\
    \ = count + 1\n            if count == n then\n                table.insert(t,\
    \ w)\n            end\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq2854wqk.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"little\", \"lamb\"}\nstack traceback:\n\
    \t/tmp/tmpq2854wqk.lua:34: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 0\n\twhile i <= #s do\n\t\t\
    local c = s[i]\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'y' then\n\t\t\ti = i + 1\n\t\t\twhile\
    \ i <= #s do\n\t\t\t\tlocal c = s[i]\n\t\t\t\tif c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' then\n\t\t\t\t\ti = i + 1\n\t\t\t\telse\n\t\t\t\t\
    \ttable.insert(t, s)\n\t\t\t\t\tbreak\n\t\t\t\tend\n\t\t\tend\n\t\telse\n\t\t\t\
    table.insert(t, s)\n\t\t\tbreak\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdgf2_xsk.lua:46:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little lamb\"}\nstack traceback:\n\
    \t/tmp/tmpdgf2_xsk.lua:46: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n      i = i + n\n    end\n    i = i + 1\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprnf2acd7.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmprnf2acd7.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t,\
    \ string.sub(s, 1, i))\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd5jwtjl.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmptd5jwtjl.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) == \" \" then\n      table.insert(t, string.sub(s,1,i))\n\
    \    else\n      if string.sub(s,i,i) == \" \" then\n        table.insert(t, string.sub(s,1,i))\n\
    \      else\n        if string.sub(s,i,i) == \" \" then\n          table.insert(t,\
    \ string.sub(s,1,i))\n        else\n          if string.sub(s,i,i) == \" \" then\n\
    \            table.insert(t, string.sub(s,1,i))\n          else\n            if\
    \ string.sub(s,i,i) == \" \" then\n              table.insert(t, string.sub(s,1,i))\n\
    \            else\n              if string.sub(s,i,i) == \" \" then\n        \
    \        table.insert(t, string.sub(s,1,i))\n              else\n            \
    \    if string.sub(s,i,i) == \" \" then\n                  table.insert(t, string.sub(s,1,i))\n\
    \                else\n                  if string.sub(s,i,i) == \" \" then\n\
    \                    table.insert(t, string.sub(s,1,i))\n                  else\n\
    \                    if string.sub(s,i,i) == \" \" then\n                    \
    \  table.insert(t, string.sub(s,1,i))\n                    else\n            \
    \          if string.sub(s,i,i) == \" \" then\n                        table.insert(t,\
    \ string.sub(s,1,i))\n                      else\n                        if string.sub(s,i,i)\
    \ == \" \" then\n                          table.insert(t, string.sub(s,1,i))\n\
    \                        else\n                          if string.sub(s,i,i)\
    \ == \" \" then\n                            table.insert(t, string.sub(s,1,i))\n\
    \                          else\n                            if string.sub(s,i,i)\
    \ == \" \" then\n                              table.insert(t, string.sub(s,1,i))\n\
    \                            else\n                              if string.sub(s,i,i)\
    \ == \" \" then\n                                table.insert(t, string.sub(s,1,i))\n\
    \                              else\n                                if string.sub(s,i,i)\
    \ == \" \" then\n                                  table.insert(t, string.sub(s,1,i))\n\
    \                                else\n                                  if string.sub(s,i,i)\
    \ == \" \" then\n                                    table.insert(t, string.sub(s,1,i))\n\
    \                                  else\n                                    if\
    \ string.sub(s,i,i) == \" \" then\n                                      table.insert(t,\
    \ string.sub(s,1,i))\n                                    else\n             \
    \                         if string.sub(s,i,i) == \" \" then\n               \
    \                         table.insert(t, string.sub(s,1,i))\n               \
    \                       else\n                                        if string.sub(s,i,i)\
    \ == \" \" then\n                                          table.insert(t, string.sub(s,1,i))\n\
    \                                        else\n                              \
    \            if string.sub(s,i,i) == \" \" then\n                            \
    \                table.insert(t, string.sub(s,1,i))\n                        \
    \                  else\n                                            if string.sub(s,i,\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkumd7g3p.lua:82: '')'' expected (to close ''('' at line 81)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.find(s, string.sub(w,1,n-1)) then\n      table.insert(t, w)\n \
    \   end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4kya4pn.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"had\", \"a\", \"little\", \"lamb\"\
    }\nstack traceback:\n\t/tmp/tmpc4kya4pn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  local i = 0\n\
    \  while i <= #s do\n    if string.sub(s,i,i) == string.sub(s,i,i) .. string.sub(s,i,i)\
    \ then\n      i = i + 1\n    else\n      table.insert(t,string.sub(s,i,i))\n \
    \     i = i + 1\n    end\n  end\n  if #t == n then\n    return t\n  else\n   \
    \ return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp99ahw5tp.lua:39:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp99ahw5tp.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        if string.sub(w,1,n) == string.sub(w,n+1,n+1) then\n            t[#t+1]\
    \ = w\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp47tu5goh.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp47tu5goh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 0\n\twhile i <= #s do\n\t\t\
    local c = s[i]\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'y' then\n\t\t\ti = i + 1\n\t\t\twhile\
    \ i <= #s and s[i] ~= 'y' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 's'\
    \ then\n\t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i] ~= 's' do\n\t\t\t\ti = i\
    \ + 1\n\t\t\tend\n\t\telseif c == 't' then\n\t\t\ti = i + 1\n\t\t\twhile i <=\
    \ #s and s[i] ~= 't' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'h' then\n\
    \t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i] ~= 'h' do\n\t\t\t\ti = i + 1\n\t\
    \t\tend\n\t\telseif c == 'l' then\n\t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i]\
    \ ~= 'l' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'w' then\n\t\t\ti =\
    \ i + 1\n\t\t\twhile i <= #s and s[i] ~= 'w' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\
    \t\telseif c == 'd' then\n\t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i] ~= 'd'\
    \ do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'n' then\n\t\t\ti = i + 1\n\
    \t\t\twhile i <= #s and s[i] ~= 'n' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif\
    \ c == 'a' then\n\t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i] ~= 'a' do\n\t\t\
    \t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'm' then\n\t\t\ti = i + 1\n\t\t\twhile\
    \ i <= #s and s[i] ~= 'm' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'p'\
    \ then\n\t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i] ~= 'p' do\n\t\t\t\ti = i\
    \ + 1\n\t\t\tend\n\t\telseif c == 'l' then\n\t\t\ti = i + 1\n\t\t\twhile i <=\
    \ #s and s[i] ~= 'l' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'e' then\n\
    \t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i] ~= 'e' do\n\t\t\t\ti = i + 1\n\t\
    \t\tend\n\t\telseif c == 'r' then\n\t\t\ti = i + 1\n\t\t\twhile i <= #s and s[i]\
    \ ~= 'r' do\n\t\t\t\ti = i + 1\n\t\t\tend\n\t\telseif c == 'c' then\n\t\t\ti =\
    \ i + 1\n\t\t\twhile i <= #s and \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpykafa23f.lua:97: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tfor w in string.gmatch(s, '%w+') do\n\t\
    \tif string.find(s, string.sub(w,1,n), 1) then\n\t\t\ttable.insert(t, w)\n\t\t\
    end\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp222zu67m.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"had\", \"a\", \"little\", \"lamb\"\
    }\nstack traceback:\n\t/tmp/tmp222zu67m.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    local i = 0\n    while i <= #s do\n\
    \        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' then\n            i = i + 1\n        elseif c == 'y' then\n    \
    \        i = i + 1\n        elseif c == 's' then\n            i = i + 1\n    \
    \    elseif c == 'h' then\n            i = i + 1\n        elseif c == 'l' then\n\
    \            i = i + 1\n        elseif c == 'd' then\n            i = i + 1\n\
    \        elseif c == 't' then\n            i = i + 1\n        elseif c == 'n'\
    \ then\n            i = i + 1\n        elseif c == 'g' then\n            i = i\
    \ + 1\n        elseif c == 'f' then\n            i = i + 1\n        elseif c ==\
    \ 'p' then\n            i = i + 1\n        elseif c == 'v' then\n            i\
    \ = i + 1\n        elseif c == 'b' then\n            i = i + 1\n        elseif\
    \ c == 'r' then\n            i = i + 1\n        elseif c == 'q' then\n       \
    \     i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n       \
    \ elseif c == 'c' then\n            i = i + 1\n        elseif c == 'm' then\n\
    \            i = i + 1\n        elseif c == 'k' then\n            i = i + 1\n\
    \        elseif c == 'j' then\n            i = i + 1\n        elseif c == 'q'\
    \ then\n            i = i + 1\n        elseif c == 'p' then\n            i = i\
    \ + 1\n        elseif c == 'z' then\n            i = i + 1\n        elseif c ==\
    \ 'y' then\n            i = i + 1\n        elseif c == 'x' then\n            i\
    \ = i + 1\n        elseif c == 'w' then\n            i = i + 1\n        elseif\
    \ c == 'v' then\n            i = i + 1\n        elseif c == 'u' then\n       \
    \     i = i + 1\n        elseif c == 't' then\n            i = i + 1\n       \
    \ elseif c == 'r' then\n            i = i + 1\n        elseif c == 'q' then\n\
    \            i = i + 1\n        elseif c == 'p' then\n            i = i + 1\n\
    \        elseif c == 'z' then\n            i = i + 1\n        elseif c == 'y'\
    \ then\n            i = i + 1\n        elseif c == 'x' then\n            i = i\
    \ + 1\n        elseif c == 'w' then\n            i = i + 1\n        elseif c ==\
    \ 'v' then\n            i = i + 1\n        elseif c == 'u' then\n            i\
    \ = i + 1\n        elseif c == 't' then\n            i = i + 1\n        elseif\
    \ c == 'r' then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1wv4c4ee.lua:102: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\t\
    local c = s[i]\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'y' then\n\t\t\ti = i + 1\n\t\telseif\
    \ c == 's' then\n\t\t\ti = i + 1\n\t\telseif c == 'h' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'l' then\n\t\t\ti = i + 1\n\t\telseif c == 'd' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 'n' then\n\t\t\ti = i + 1\n\t\telseif c == 'w' then\n\t\
    \t\ti = i + 1\n\t\telseif c == 'r' then\n\t\t\ti = i + 1\n\t\telseif c == 't'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'g' then\n\t\t\ti = i + 1\n\t\telseif\
    \ c == 'b' then\n\t\t\ti = i + 1\n\t\telseif c == 'v' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'm' then\n\t\t\ti = i + 1\n\t\telseif c == 'k' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 'j' then\n\t\t\ti = i + 1\n\t\telseif c == 'q' then\n\t\
    \t\ti = i + 1\n\t\telseif c == 'p' then\n\t\t\ti = i + 1\n\t\telseif c == 'o'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'f' then\n\t\t\ti = i + 1\n\t\telseif\
    \ c == 'a' then\n\t\t\ti = i + 1\n\t\telseif c == 'z' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'c' then\n\t\t\ti = i + 1\n\t\telseif c == 'v' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 'b' then\n\t\t\ti = i + 1\n\t\telseif c == 'n' then\n\t\
    \t\ti = i + 1\n\t\telseif c == 'm' then\n\t\t\ti = i + 1\n\t\telseif c == 's'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'h' then\n\t\t\ti = i + 1\n\t\telseif\
    \ c == 'r' then\n\t\t\ti = i + 1\n\t\telseif c == 't' then\n\t\t\ti = i + 1\n\t\
    \telseif c == 'g' then\n\t\t\ti = i + 1\n\t\telseif c == 'b' then\n\t\t\ti = i\
    \ + 1\n\t\telseif c == 'v' then\n\t\t\ti = i + 1\n\t\telseif c == 'm' then\n\t\
    \t\ti = i + 1\n\t\telseif c == 'k' then\n\t\t\ti = i + 1\n\t\telseif c == 'j'\
    \ then\n\t\t\t\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxqbcaa8_.lua:109: ''end'' expected (to close ''if'' at line
    22) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqkmklym.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpaqkmklym.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        local count = 0\n        for c in string.gsub(w, '[^' .. string.letters\
    \ .. ']') do\n            count = count + 1\n        end\n        if count ==\
    \ n then\n            t[#t + 1] = w\n        end\n    end\n    return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9u3lrpxp.lua:21:\
    \ attempt to concatenate field 'letters' (a nil value)\nstack traceback:\n\t/tmp/tmp9u3lrpxp.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmp9u3lrpxp.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\t\
    if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n\t\t\ttable.insert(t, string.sub(s,\
    \ 1, n))\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33ksk1zy.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp33ksk1zy.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.sub(w,1,n) == string.sub(s, 1, n) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zs47t0x.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmp6zs47t0x.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    local\
    \ c = string.sub(s,i,i)\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or\
    \ c == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n\
    \      while i <= #s and string.sub(s,i,i) ~= 'a' do\n        i = i + 1\n    \
    \  end\n    elseif c == 's' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i)\
    \ ~= 'e' do\n        i = i + 1\n      end\n    elseif c == 'h' then\n      i =\
    \ i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'i' do\n        i = i +\
    \ 1\n      end\n    elseif c == 'l' then\n      i = i + 1\n      while i <= #s\
    \ and string.sub(s,i,i) ~= 'o' do\n        i = i + 1\n      end\n    elseif c\
    \ == 'w' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'u'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'c' then\n      i = i + 1\n\
    \      while i <= #s and string.sub(s,i,i) ~= 'y' do\n        i = i + 1\n    \
    \  end\n    elseif c == 'm' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i)\
    \ ~= 's' do\n        i = i + 1\n      end\n    elseif c == 't' then\n      i =\
    \ i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'h' do\n        i = i +\
    \ 1\n      end\n    elseif c == 'r' then\n      i = i + 1\n      while i <= #s\
    \ and string.sub(s,i,i) ~= 'l' do\n        i = i + 1\n      end\n    elseif c\
    \ == 'f' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i) ~= 'w'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'b' then\n      i = i + 1\n\
    \      while i <= #s and string.sub(s,i,i) ~= 'c' do\n        i = i + 1\n    \
    \  end\n    elseif c == 'd' then\n      i = i + 1\n      while i <= #s and string.sub(s,i,i)\
    \ ~= 'm' do\n        i = i + 1\n      end\n    elseif c == 'g' then\n      i =\
    \ i + 1\n      while i <= #s and string.sub(s,i,i) ~= 't' do\n        i = i +\
    \ 1\n      end\n    elseif c == 'p' then\n      i = i + 1\n      while i <= #s\
    \ and string.sub(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4gcdbiyh.lua:92: '')'' expected (to close ''('' at line 91)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp0vd5zra.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpp0vd5zra.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        table.insert(t, w)\n    end\n    local count = 0\n    for w in t do\n\
    \        if string.find(s, w, 1, n) then\n            count = count + 1\n    \
    \    end\n    end\n    if count == n then\n        return t\n    end\n    return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgl9hhutu.lua:23:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpgl9hhutu.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpgl9hhutu.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 'a', i-1) then\n      table.insert(t,\
    \ string.sub(s, 'a', i))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7qzzby4d.lua:21:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmp7qzzby4d.lua:21: in function 'candidate'\n\t/tmp/tmp7qzzby4d.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        if string.find(w, string.letters(n)) then\n            t[#t + 1] = w\n\
    \        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebz_a6lh.lua:20:\
    \ attempt to call field 'letters' (a nil value)\nstack traceback:\n\t/tmp/tmpebz_a6lh.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpebz_a6lh.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == '' then\n    return {}\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyh0uig6o.lua:35: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,1,n) then\n      table.insert(t, string.sub(s,1,n))\n\
    \    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsix2i6ij.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpsix2i6ij.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif c == 's' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n        i = i + 1\n\
    \      end\n    elseif c == 't' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'l' then\n      i = i + 1\n      while i <= #s and s[i]\
    \ ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'd' then\n      i =\
    \ i + 1\n      while i <= #s and s[i] ~= 'd' do\n        i = i + 1\n      end\n\
    \    elseif c == 'w' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'w'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'n' then\n      i = i + 1\n\
    \      while i <= #s and s[i] ~= 'n' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'r' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'r' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'a' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'a' do\n        i = i + 1\n      end\n    elseif c == 'm'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'm' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'p' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'p' do\n        i = i + 1\n      end\n    elseif c == 'l' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'l' do\n        i = i + 1\n\
    \      end\n    elseif c == 'e' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'e' do\n        i = i + 1\n      end\n    elseif c == 'c' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'c' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'h' then\n      i = i + 1\n      while i <= #\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjucx6uia.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) ~= ' ' then\n      if string.sub(s,i,i) ~= 'a' and string.sub(s,i,i)\
    \ ~= 'e' and string.sub(s,i,i) ~= 'i' and string.sub(s,i,i) ~= 'o' and string.sub(s,i,i)\
    \ ~= 'u' then\n        table.insert(t, string.sub(s,i,i))\n      end\n    end\n\
    \    i = i + 1\n  end\n  if #t == n then\n    return t\n  else\n    return {}\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppc4dide3.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppc4dide3.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == \" \" then\n      table.insert(t, string.sub(s,1,i))\n\
    \    else\n      if string.sub(s,i,i) == \" \" then\n        table.insert(t, string.sub(s,1,i))\n\
    \      else\n        local count = 0\n        for j = 1, #s do\n          if string.sub(s,i,i)\
    \ == string.sub(s,j,j) then\n            count = count + 1\n          end\n  \
    \      end\n        if count == n then\n          table.insert(t, string.sub(s,1,i))\n\
    \        end\n      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1oc7tsba.lua:45:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Ma\",\n    \"Mary \",\n    \"Mary\
    \ ha\",\n    \"Mary had \",\n    \"Mary had a\",\n    \"Mary had a \",\n    \"\
    Mary had a little \",\n    \"Mary had a little la\"\n}\nstack traceback:\n\t/tmp/tmp1oc7tsba.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    table.insert(t, w)\n  end\n  table.sort(t)\n  local count = 0\n  for _, w\
    \ in ipairs(t) do\n    if string.sub(w,1,n) == string.sub(w,n+1,n) then\n    \
    \  count = count + 1\n    end\n  end\n  if count == n then\n    return t\n  else\n\
    \    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3stnp0jz.lua:39:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3stnp0jz.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c ~= ' ' and c ~= '-' and c ~= '!' and c ~= '?' and c ~= '!'\
    \ and c ~= '?' then\n      table.insert(t, c)\n    end\n    i = i + 1\n  end\n\
    \  if #t == n then\n    return t\n  end\n  return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7euc3jxn.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp7euc3jxn.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        if string.find(w, string.char(97,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255}\n\
    \            then\n                table.insert(t, w)\n            end\n     \
    \   end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6alcfka0.lua:20: '')'' expected near ''}''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    if #t < n then\n\
    \        return {}\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdq44kkx9.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"a\", \"had\", \"lamb\", \"little\"\
    }\nstack traceback:\n\t/tmp/tmpdq44kkx9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == \"\" then\n      break\n    end\n    t[#t+1] = string.sub(s,i,i+n)\n\
    \    i = i + n\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpekrd3f8m.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpekrd3f8m.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    table.insert(t, w)\n  end\n  if #t < n then\n    return {}\n  else\n    return\
    \ t\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyjl43qsf.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"had\", \"a\", \"little\", \"lamb\"\
    }\nstack traceback:\n\t/tmp/tmpyjl43qsf.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    if string.find(w, string.letters(n)) then\n      table.insert(t, w)\n   \
    \ end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdke744r6.lua:20:\
    \ attempt to call field 'letters' (a nil value)\nstack traceback:\n\t/tmp/tmpdke744r6.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpdke744r6.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) == \" \" then\n      table.insert(t, string.sub(s,1,i))\n\
    \      table.insert(t, string.sub(s,i+1,#s))\n    else\n      table.insert(t,\
    \ string.sub(s,i,i))\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4nevoln.lua:34:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"a\",\n    \"r\",\n\
    \    \"y\",\n    \"Mary \",\n    \"had a little lamb\",\n    \"h\",\n    \"a\"\
    ,\n    \"d\",\n    \"Mary had \",\n    \"a little lamb\",\n    \"a\",\n    \"\
    Mary had a \",\n    \"little lamb\",\n    \"l\",\n    \"i\",\n    \"t\",\n   \
    \ \"t\",\n    \"l\",\n    \"e\",\n    \"Mary had a little \",\n    \"lamb\",\n\
    \    \"l\",\n    \"a\",\n    \"m\",\n    \"b\"\n}\nstack traceback:\n\t/tmp/tmpp4nevoln.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  local i = 0\n\
    \  while i <= #s do\n    if string.sub(s,i,i+n) == \"\" then\n      table.insert(t,\
    \ string.sub(s,i,i+n))\n    end\n    i = i+1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb20aua3.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpsb20aua3.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    else\n      if #t < n then\n        t[#t+1] = s[i]\n   \
    \   else\n        return t\n      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750533
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  local count = 0\n\
    \  for i = 1, #s do\n    if string.sub(s,i,i) == ' ' then\n      count = count\
    \ + 1\n      if count == n then\n        t[#t+1] = string.sub(s,1,i)\n      end\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswolluew.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little \"}\nstack traceback:\n\
    \t/tmp/tmpswolluew.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \      table.insert(t, string.sub(s,i+1,#s))\n    else\n      table.insert(t,\
    \ string.sub(s,i,i))\n    end\n  end\n  if #t == n then\n    return t\n  else\n\
    \    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8wyzoic4.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8wyzoic4.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s,1,n) then\n      table.insert(t, string.sub(s,i+1,i+n))\n\
    \    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8v3n819p.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmp8v3n819p.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 0\n\twhile i <= #s do\n\t\t\
    if string.sub(s, i, i+n) == string.sub(s, 'a', i-1) then\n\t\t\ttable.insert(t,\
    \ string.sub(s, 'a', i))\n\t\tend\n\t\ti = i + 1\n\tend\n\treturn t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymcowmm7.lua:21:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpymcowmm7.lua:21: in function 'candidate'\n\t/tmp/tmpymcowmm7.lua:32: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i'\
    \ or c2 == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 'y'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, string.sub(s,\
    \ 1, i))\n          i = i + 1\n        end\n      end\n    elseif c == 'n' then\n\
    \      i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if\
    \ c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n       \
    \   i = i + 1\n        elseif c2 == 'n' then\n          i = i + 1\n        else\n\
    \          table.insert(t, string.sub(s, 1, i))\n          i = i + 1\n       \
    \ end\n      end\n    elseif c == 's' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i'\
    \ or c2 == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 's'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, string.sub(s,\
    \ 1, i))\n          i = i + 1\n        end\n      end\n    elseif c == 't' then\n\
    \      i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if\
    \ c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n       \
    \   i = i + 1\n        elseif c2 == 't' then\n          i = i + 1\n        else\n\
    \          table.insert(t, string.sub(s, 1, i))\n          i = i + 1\n       \
    \ end\n      end\n    elseif c == 'h' or c == 'e' or c == 'l' or c == 'l' or c\
    \ == 'o' or c == 'w' then\n      i = i + 1\n    elseif c == 'r' then\n      i\
    \ = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if c2 == 'a'\
    \ or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n          i = i +\
    \ 1\n        elseif c2 == 'r' then\n          i = i + 1\n        else\n      \
    \    table.insert(t, string.sub(s, 1, i))\n          i = i + 1\n        end\n\
    \      end\n    elseif c == 'd' then\n      \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwk_no4yf.lua:106: ''end'' expected (to close ''if'' at line
    22) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl0ayfp0.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl0ayfp0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif c == 's' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 's' do\n        i = i + 1\n \
    \     end\n    elseif c == 't' then\n      i = i + 1\n      while i < #s and s[i]\
    \ ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h' then\n      i =\
    \ i + 1\n      while i < #s and s[i] ~= 'h' do\n        i = i + 1\n      end\n\
    \    elseif c == 'l' then\n      i = i + 1\n      while i < #s and s[i] ~= 'l'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'd' then\n      i = i + 1\n\
    \      while i < #s and s[i] ~= 'd' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'n' then\n      i = i + 1\n      while i < #s and s[i] ~= 'n' do\n    \
    \    i = i + 1\n      end\n    elseif c == 'w' then\n      i = i + 1\n      while\
    \ i < #s and s[i] ~= 'w' do\n        i = i + 1\n      end\n    elseif c == 'r'\
    \ then\n      i = i + 1\n      while i < #s and s[i] ~= 'r' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'a' then\n      i = i + 1\n      while i < #s\
    \ and s[i] ~= 'a' do\n        i = i + 1\n      end\n    elseif c == 'm' then\n\
    \      i = i + 1\n      while i < #s and s[i] ~= 'm' do\n        i = i + 1\n \
    \     end\n    elseif c == 'p' then\n      i = i + 1\n      while i < #s and s[i]\
    \ ~= 'p' do\n        i = i + 1\n      end\n    elseif c == 'f' then\n      i =\
    \ i + 1\n      while i < #s and s[i] ~= 'f' do\n        i = i + 1\n      end\n\
    \    elseif c == 'v' then\n      i = i + 1\n      while i < #s and s[i] ~= 'v'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'b' then\n      i = i + 1\n\
    \      while i < #s and s[i] ~= 'b' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'c' then\n      i = i + 1\n      while i < #\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmdyym0ps.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  local i\
    \ = 1\n  while i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s, 1, n)\
    \ then\n      table.insert(t, string.sub(s, 1, n))\n    end\n    i = i + 1\n \
    \ end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2jdvg384.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp2jdvg384.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n      i = i + 1\n    end\n    i = i + 1\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw_nh_j1h.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpw_nh_j1h.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        if string.find(w, string.char(97,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255}\n\
    \            and string.len(w) == n then\n            t[#t+1] = w\n        end\n\
    \    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4gi277ru.lua:20: '')'' expected near ''}''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    table.insert(t, w)\n  end\n  table.sort(t)\n  if #t > n then\n    local i\
    \ = #t\n    while i ~= n do\n      table.remove(t, i)\n      i = #t\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3jhqi2sw.lua:36:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"a\", \"had\", \"lamb\"}\nstack\
    \ traceback:\n\t/tmp/tmp3jhqi2sw.lua:36: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl0ayfp0.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl0ayfp0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    table.insert(t, w)\n  end\n  table.sort(t)\n  local count = 0\n  for _, w\
    \ in ipairs(t) do\n    if string.sub(w, 1, n) == string.sub(w, n + 1, n) then\n\
    \      count = count + 1\n    end\n  end\n  if count == n then\n    return t\n\
    \  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaa5cj6h5.lua:39:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpaa5cj6h5.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 0\n\twhile i <= #s do\n\t\t\
    if string.sub(s,i,i+n) == \"\" then\n\t\t\tbreak\n\t\telse\n\t\t\tt[#t+1] = string.sub(s,i,i+n)\n\
    \t\tend\n\t\ti = i + 1\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpodlze866.lua:34:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary\",\n    \"Mary \",\n    \"\
    ary h\",\n    \"ry ha\",\n    \"y had\",\n    \" had \",\n    \"had a\",\n   \
    \ \"ad a \",\n    \"d a l\",\n    \" a li\",\n    \"a lit\",\n    \" litt\",\n\
    \    \"littl\",\n    \"ittle\",\n    \"ttle \",\n    \"tle l\",\n    \"le la\"\
    ,\n    \"e lam\",\n    \" lamb\",\n    \"lamb\",\n    \"amb\",\n    \"mb\",\n\
    \    \"b\"\n}\nstack traceback:\n\t/tmp/tmpodlze866.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s,i,i+n) == \"\" then\n      table.insert(t, string.sub(s,1,i))\n\
    \      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_uswnrq.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp4_uswnrq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \    else\n      table.insert(t, string.sub(s,i,i))\n    end\n  end\n  table.sort(t)\n\
    \  if #t == n then\n    return t\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb5h2wuov.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpb5h2wuov.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n      i = i + n\n    else\n      i = i + 1\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm97zggnr.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpm97zggnr.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif c == 's' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n        i = i + 1\n\
    \      end\n    elseif c == 't' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'l' then\n      i = i + 1\n      while i <= #s and s[i]\
    \ ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'w' then\n      i =\
    \ i + 1\n      while i <= #s and s[i] ~= 'w' do\n        i = i + 1\n      end\n\
    \    elseif c == 'd' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'd'\
    \ do\n        i = i + 1\n      end\n    elseif c == 'n' then\n      i = i + 1\n\
    \      while i <= #s and s[i] ~= 'n' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'r' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'r' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'm' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'm' do\n        i = i + 1\n      end\n    elseif c == 'a'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'a' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'e' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'e' do\n        i = i + 1\n      end\n    elseif c == 'i' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'i' do\n        i = i + 1\n\
    \      end\n    elseif c == 'o' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'o' do\n        i = i + 1\n      end\n    elseif c == 'u' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'u' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'y' then\n      i = i + 1\n      while i <= \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfjvaiuh9.lua:102: ''do'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    local count = 0\n\
    \    for _, w in ipairs(t) do\n        if string.sub(s, 1, n) == w then\n    \
    \        count = count + 1\n        end\n    end\n    if count == n then\n   \
    \     return t\n    end\n    return {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo55p9dfz.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpo55p9dfz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.find(w, string.letters) then\n      table.insert(t, w)\n    end\n\
    \  end\n  if #t > n then\n    return {}\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyq9bymk3.lua:20:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpyq9bymk3.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpyq9bymk3.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c ~= ' ' and c ~= '-' and c ~= '!' and c ~= '?' and c ~= '!'\
    \ and c ~= '?' then\n      table.insert(t, c)\n    end\n    i = i + 1\n  end\n\
    \  if #t == n then\n    return t\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkiodd4pz.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpkiodd4pz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.find(s, w .. '$', n) then\n      table.insert(t, w)\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0mwwmint.lua:30:\
    \ expected: {\"little\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmp0mwwmint.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    local i = 1\n    while i <= #s do\n\
    \        local c = s[i]\n        if c ~= ' ' and c ~= '-' and c ~= '!' and c ~=\
    \ '?' and c ~= '(' and c ~= ')' and c ~= '[' and c ~= ']' and c ~= '{' and c ~=\
    \ '}' and c ~= '$' and c ~= '@' and c ~= '!' and c ~= '?' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~=\
    \ '-' and c ~= '-' and c ~= '-' and c ~= '-' and c ~= '-' and \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdw7rgfvs.lua:23: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'n' then\n      if i == #s then\n        break\n\
    \      else\n        i = i + 1\n      end\n    else\n      i = i + 1\n    end\n\
    \    if i == n then\n      table.insert(t, s)\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1_ehf417.lua:43:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little lamb\"}\nstack traceback:\n\
    \t/tmp/tmp1_ehf417.lua:43: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    if n == 1 then\n\
    \        return t\n    end\n    local n = 1\n    local m = #t\n    while n <=\
    \ m do\n        local i = 1\n        while i <= n do\n            if t[i] == t[n]\
    \ then\n                n = n + 1\n            else\n                break\n \
    \           end\n            i = i + 1\n        end\n        if n == m then\n\
    \            return t\n        end\n    end\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750533
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here\n\tlocal t = {}\n\tfor i = 1,\
    \ #s do\n\t\tif string.sub(s,i,i) == \" \" then\n\t\t\ttable.insert(t, string.sub(s,1,i))\n\
    \t\telse\n\t\t\ttable.insert(t, string.sub(s,i,i))\n\t\tend\n\tend\n\tif #t ==\
    \ n then\n\t\treturn t\n\telse\n\t\treturn {}\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy82tmmf2.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpy82tmmf2.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \      i = i + n\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpddc2xv69.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \" had \", \"a lit\", \"tle l\",\
    \ \"amb\"}\nstack traceback:\n\t/tmp/tmpddc2xv69.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tfor w in string.gmatch(s, '%a') do\n\t\
    \tif string.find(w, string.char(97,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255})\n\
    \t\t\tthen\n\t\t\t\ttable.insert(t, w)\n\t\t\tend\n\tend\n\treturn t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgmwk1k8y.lua:20: '')'' expected near ''}''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then\n    return {}\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw2xos4mv.lua:35: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c ~= ' ' and c ~= '-' and c ~= '!' and c ~= '?' and c ~= '!'\
    \ and c ~= '?' then\n      if #t < n then\n        t[#t+1] = s[i]\n      else\n\
    \        break\n      end\n    end\n    i = i + 1\n  end\n  return t\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mt88nb3.lua:37:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp8mt88nb3.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \      i = i + n\n    else\n      i = i + 1\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wwcgj1y.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp4wwcgj1y.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      table.insert(t, string.sub(s,1,i))\n\
    \      table.insert(t, string.sub(s,i+1,i+1))\n    else\n      table.insert(t,\
    \ string.sub(s,i,i))\n    end\n  end\n  if #t == n then\n    return t\n  else\n\
    \    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdfrlfx5j.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpdfrlfx5j.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    local count = 0\n    for c in w do\n      if string.sub(c, 1, 1) == string.sub(c,\
    \ 1, 1) then\n        count = count + 1\n      end\n    end\n    if count == n\
    \ then\n      table.insert(t, w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw2grv46h.lua:21:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpw2grv46h.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpw2grv46h.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    local count = 0\n\
    \    for _, w in ipairs(t) do\n        if string.find(w, string.sub(s, 1, n))\
    \ then\n            count = count + 1\n        end\n    end\n    if count == n\
    \ then\n        return t\n    end\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu6jzu1uv.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpu6jzu1uv.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.find(s, w .. '$', 1, n) then\n      table.insert(t, w)\n    end\n\
    \  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzuab281n.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzuab281n.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    if string.sub(w,1,n) == string.sub(w,1,n-1) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2f5u4il.lua:30:\
    \ expected: {\"little\"}\nactual: {\"had\", \"a\"}\nstack traceback:\n\t/tmp/tmpa2f5u4il.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) ~= ' ' then\n      table.insert(t, string.sub(s,i,i))\n  \
    \  end\n    i = i + 1\n  end\n  if #t == n then\n    return t\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpohj261_c.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpohj261_c.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    if string.sub(w,1,n) == string.sub(w,1,n-1) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa2f5u4il.lua:30:\
    \ expected: {\"little\"}\nactual: {\"had\", \"a\"}\nstack traceback:\n\t/tmp/tmpa2f5u4il.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.find(s, string.sub(w,1,n), n) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5td1oix.lua:30:\
    \ expected: {\"little\"}\nactual: {\"had\", \"a\", \"little\", \"lamb\"}\nstack\
    \ traceback:\n\t/tmp/tmpm5td1oix.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \    end\n  end\n  if #t == n then\n    return t\n  end\n  return {}\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc7tzlocy.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpc7tzlocy.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'y' do\n        i = i + 1\n      end\n    elseif c == 's' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 's' do\n        i = i + 1\n\
    \      end\n    elseif c == 't' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 't' do\n        i = i + 1\n      end\n    elseif c == 'h' then\n   \
    \   i = i + 1\n      while i <= #s and s[i] ~= 'h' do\n        i = i + 1\n   \
    \   end\n    elseif c == 'l' then\n      i = i + 1\n      while i <= #s and s[i]\
    \ ~= 'l' do\n        i = i + 1\n      end\n    elseif c == 'l' or c == 'o' or\
    \ c == 'u' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'l' or s[i]\
    \ ~= 'o' or s[i] ~= 'u' do\n        i = i + 1\n      end\n    elseif c == 'w'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'w' do\n        i = i\
    \ + 1\n      end\n    elseif c == 'd' then\n      i = i + 1\n      while i <=\
    \ #s and s[i] ~= 'd' do\n        i = i + 1\n      end\n    elseif c == 'p' then\n\
    \      i = i + 1\n      while i <= #s and s[i] ~= 'p' do\n        i = i + 1\n\
    \      end\n    elseif c == 'n' then\n      i = i + 1\n      while i <= #s and\
    \ s[i] ~= 'n' do\n        i = i + 1\n      end\n    elseif c == 'g' or c == 'b'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~= 'g' or s[i] ~= 'b' do\n\
    \        i = i + 1\n      end\n    elseif c == 'f' then\n      i = i + 1\n   \
    \   while i <= #s and s[i] ~= 'f' do\n        i = i + 1\n      end\n    elseif\
    \ c == 'v' then\n      i = i + 1\n      while i <= #s and s[i] ~= 'v' do\n   \
    \     i = i + 1\n      end\n    elseif c == 'm' then\n      i = i + 1\n      while\
    \ i <= #s and s[i] ~= 'm' do\n        i = i + 1\n      end\n    elseif c == 'c'\
    \ then\n      i = i + 1\n      while i <= #s and s[i] ~\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr1pc4b1x.lua:96: ''do'' expected near ''~''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here\n\tlocal t = {}\n\tfor i = 1,\
    \ #s do\n\t\tif string.sub(s,i,i) == ' ' then\n\t\t\ttable.insert(t, string.sub(s,1,i))\n\
    \t\telse\n\t\t\tlocal count = 0\n\t\t\tfor j = 1, #s do\n\t\t\t\tif string.sub(s,i,j)\
    \ == string.sub(s,i,j) then\n\t\t\t\t\tcount = count + 1\n\t\t\t\tend\n\t\t\t\
    end\n\t\t\tif count == n then\n\t\t\t\ttable.insert(t, string.sub(s,1,i))\n\t\t\
    \tend\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcdvii8ik.lua:41:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpcdvii8ik.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.find(s, w) == n then\n      table.insert(t, w)\n    end\n  end\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx829cm0d.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpx829cm0d.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    if string.sub(w,1,n) == string.sub(s, 1, n) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7sengpi.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpa7sengpi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) ~= ' ' then\n      table.insert(t, string.sub(s,i,i))\n  \
    \  end\n    i = i + 1\n  end\n  if #t == n then\n    return t\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfl99fwh.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvfl99fwh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%S+') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    local i = 0\n   \
    \ local j = 1\n    while i <= #t do\n        if t[i] == nil then\n           \
    \ i = i + 1\n        elseif t[i] == t[j] then\n            j = j + 1\n       \
    \ else\n            i = i + 1\n            j = j + 1\n            if j > #t then\n\
    \                table.insert(t, t[i])\n            end\n        end\n    end\n\
    \    if n == 1 then\n        return t[1]\n    else\n        return t\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750533
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tfor w in string.gmatch(s, '%S+') do\n\t\
    \tif #w == n then\n\t\t\ttable.insert(t, w)\n\t\tend\n\tend\n\treturn t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp93sfbue_.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmp93sfbue_.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or\
    \ c == 'o' or c == 'u' then\n          i = i + 1\n        elseif c == 'y' then\n\
    \          i = i + 1\n        else\n          table.insert(t, s)\n          break\n\
    \        end\n      end\n    else\n      table.insert(t, s)\n      break\n   \
    \ end\n  end\n  if #t == n then\n    return t\n  else\n    return {}\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4w9zetfu.lua:52:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp4w9zetfu.lua:52:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \      i = i + n\n    else\n      i = i + 1\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbv5ib54a.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpbv5ib54a.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  local i = 1\n  while\
    \ i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n     \
    \ table.insert(t, string.sub(s, 1, n))\n      i = i + n\n    else\n      i = i\
    \ + 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxeyxnomr.lua:35:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpxeyxnomr.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        if string.find(s, w .. '$', n) then\n            t[#t + 1] = w\n    \
    \    end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxhdjhoi.lua:30:\
    \ expected: {\"little\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpzxhdjhoi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    table.insert(t, w)\n  end\n  table.sort(t)\n  local count = 0\n  for i =\
    \ 1, #t do\n    if t[i] == n then\n      count = count + 1\n    end\n  end\n \
    \ if count == #t then\n    return t\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp63zz6cri.lua:39:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp63zz6cri.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == string.sub(s,i,i) and string.sub(s,i,i)\
    \ ~= \" \" then\n      table.insert(t, string.sub(s,i,i))\n    end\n  end\n  if\
    \ #t == n then\n    return t\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0yeh6bjb.lua:35:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp0yeh6bjb.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == '' then return {} end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphua_pvz9.lua:33: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'n' then\n      if #t >= n then\n        break\n\
    \      end\n      i = i + 1\n    elseif c == 's' then\n      if #t >= n then\n\
    \        break\n      end\n      i = i + 1\n    elseif c == 't' then\n      if\
    \ #t >= n then\n        break\n      end\n      i = i + 1\n    elseif c == 'h'\
    \ then\n      if #t >= n then\n        break\n      end\n      i = i + 1\n   \
    \ elseif c == 'l' then\n      if #t >= n then\n        break\n      end\n    \
    \  i = i + 1\n    elseif c == 'w' then\n      if #t >= n then\n        break\n\
    \      end\n      i = i + 1\n    elseif c == 'd' then\n      if #t >= n then\n\
    \        break\n      end\n      i = i + 1\n    elseif c == 'p' then\n      if\
    \ #t >= n then\n        break\n      end\n      i = i + 1\n    elseif c == 'y'\
    \ then\n      if #t >= n then\n        break\n      end\n      i = i + 1\n   \
    \ elseif c == 'r' then\n      if #t >= n then\n        break\n      end\n    \
    \  i = i + 1\n    elseif c == 'v' then\n      if #t >= n then\n        break\n\
    \      end\n      i = i + 1\n    elseif c == 'z' then\n      if #t >= n then\n\
    \        break\n      end\n      i = i + 1\n    elseif c == 'e' then\n      if\
    \ #t >= n then\n        break\n      end\n      i = i + 1\n    elseif c == 'a'\
    \ then\n      if #t >= n then\n        break\n      end\n      i = i + 1\n   \
    \ elseif c == 'm' then\n      if #t >= n then\n        break\n      end\n    \
    \  i = i + 1\n    elseif c == 'n' then\n      if #t >= n then\n        break\n\
    \      end\n      i = i + 1\n    elseif c == 'g' then\n      if #t >= n then\n\
    \        break\n      end\n      i = i + 1\n    elseif c == 'f' then\n      if\
    \ #t >= n then\n        break\n      end\n      i = i + 1\n    elseif c == 'l'\
    \ then\n      if #t >= n then\n        break\n      end\n      i = i + 1\n   \
    \ elseif c == 's' then\n      if #\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwid2kdo6.lua:121: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \      table.insert(t, string.sub(s,i+1,#s))\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprzailbfn.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary \",\n    \"had a little lamb\"\
    ,\n    \"Mary had \",\n    \"a little lamb\",\n    \"Mary had a \",\n    \"little\
    \ lamb\",\n    \"Mary had a little \",\n    \"lamb\"\n}\nstack traceback:\n\t\
    /tmp/tmprzailbfn.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.sub(w,1,n) == string.sub(w,n+1,n+1) then\n      table.insert(t,\
    \ w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkk8yabj.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppkk8yabj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) == string.sub(s,i,i) and string.sub(s,i,i) == string.sub(s,i,i)\
    \ then\n      table.insert(t, string.sub(s,i,i))\n      i = i + 1\n    else\n\
    \      i = i + 1\n    end\n  end\n  if #t == n then\n    return t\n  else\n  \
    \  return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplnwnkivj.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmplnwnkivj.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.find(w, string.char(97,122,123,125,126,127,128,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255})\n\
    \      then\n      table.insert(t, w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy6p1jwfx.lua:20: '')'' expected near ''}''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n      table.insert(t,\
    \ string.sub(s,i+1,i+n))\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuhxunwsc.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpuhxunwsc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s,i,i+n) == \"\" then\n      table.insert(t, string.sub(s,1,i))\n\
    \      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4_uswnrq.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp4_uswnrq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    if string.sub(w,1,n) == string.sub(s, 1, n) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7sengpi.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpa7sengpi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  local count\
    \ = 0\n  for i = 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      count\
    \ = count + 1\n      if count == n then\n        t[#t+1] = string.sub(s,1,i)\n\
    \      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzcio0jbo.lua:35:\
    \ expected: {\"little\"}\nactual: {\"Mary had a little \"}\nstack traceback:\n\
    \t/tmp/tmpzcio0jbo.lua:35: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Write your code here.\n\t-- If s is empty then return\
    \ an empty table.\n\t-- If n is less than or equal to 0 then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than the number of consonants in s then return an empty table.\n\
    \t-- If n is greater than \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6i54ur_d.lua:63: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.sub(w,1,n) == string.sub(w,n+1,n) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3bysyzqb.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3bysyzqb.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl0ayfp0.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl0ayfp0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    local i = 0\n    while i < #s do\n\
    \        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' then\n            i = i + 1\n        elseif c == 'y' then\n    \
    \        i = i + 1\n        elseif c == 's' then\n            i = i + 1\n    \
    \    elseif c == 'h' then\n            i = i + 1\n        elseif c == 'l' then\n\
    \            i = i + 1\n        elseif c == 'd' then\n            i = i + 1\n\
    \        elseif c == 'n' then\n            i = i + 1\n        elseif c == 'w'\
    \ then\n            i = i + 1\n        elseif c == 't' then\n            i = i\
    \ + 1\n        elseif c == 'r' then\n            i = i + 1\n        elseif c ==\
    \ 'p' then\n            i = i + 1\n        elseif c == 'f' then\n            i\
    \ = i + 1\n        elseif c == 'v' then\n            i = i + 1\n        elseif\
    \ c == 'b' then\n            i = i + 1\n        elseif c == 'c' then\n       \
    \     i = i + 1\n        elseif c == 'm' then\n            i = i + 1\n       \
    \ elseif c == 'y' then\n            i = i + 1\n        elseif c == 'k' then\n\
    \            i = i + 1\n        elseif c == 'g' then\n            i = i + 1\n\
    \        elseif c == 'j' then\n            i = i + 1\n        elseif c == 'q'\
    \ then\n            i = i + 1\n        elseif c == 'z' then\n            i = i\
    \ + 1\n        elseif c == 'x' then\n            i = i + 1\n        elseif c ==\
    \ 'q' then\n            i = i + 1\n        elseif c == 'z' then\n            i\
    \ = i + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif\
    \ c == 'z' then\n            i = i + 1\n        elseif c == 'q' then\n       \
    \     i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n       \
    \ elseif c == 'q' then\n            i = i + 1\n        elseif c == 'z' then\n\
    \            i = i + 1\n        elseif c == 'q' then\n            i = i + 1\n\
    \        elseif c == 'z' then\n            i = i + 1\n        elseif c == 'q'\
    \ then\n            i = i + 1\n        elseif c == 'z' then\n            i = i\
    \ + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif c ==\
    \ 'z' then\n            i = i + 1\n        elseif c == 'q' then\n            i\
    \ = i + 1\n        elseif c == 'z' then\n            i = i + 1\n        elseif\
    \ c == 'q' then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppt370vu_.lua:102: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.find(w, string.char(97,102,114,115,116,117,118,119,121,123,125,127,129,131,133,135,137,139,141,143,145,147,149,151,153,155,157,159,161,163,165,167,169,171,173,175,177,179,181,183,185,187,189,191,193,195,197,199,201,203,205,207,209,211,213,215,217,219,221,223,225,227,229,231,233,235,237,239,241,243,245,247,249,251,253,255))\
    \ then\n      table.insert(t, w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x01fn2s.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp3x01fn2s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    else\n      if #t >= n then\n        break\n      end\n\
    \      table.insert(t, s)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnr4pt94q.lua:37:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"Mary had a little lamb\",\n   \
    \ \"Mary had a little lamb\",\n    \"Mary had a little lamb\",\n    \"Mary had\
    \ a little lamb\"\n}\nstack traceback:\n\t/tmp/tmpnr4pt94q.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local table = {}\n  local index = 1\n  while index <=\
    \ #s do\n    local word = string.sub(s, index, index+n)\n    index = index+n\n\
    \    if string.find(word, string.letters) then\n      table.insert(table, word)\n\
    \    end\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwwwk0oil.lua:23:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpwwwk0oil.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpwwwk0oil.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == \"\" then\n      break\n    end\n    t[#t + 1] = string.sub(s,i,i+n)\n\
    \    i = i + n\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw4nwrh5a.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpw4nwrh5a.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        if string.find(w, string.char(97,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,246,247,248,249,250,251,252,253,254,255}\n\
    \            and string.len(w) == n then\n            table.insert(t, w)\n   \
    \     end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvoqh8mmo.lua:20: '')'' expected near ''}''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl0ayfp0.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl0ayfp0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%S+') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    local i = 0\n   \
    \ while i < n and t[i] ~= '' do\n        i = i + 1\n    end\n    if i == n then\n\
    \        return {}\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjrs7bxxp.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpjrs7bxxp.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \      i = i + n\n    else\n      i = i + 1\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wwcgj1y.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp4wwcgj1y.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) ~= ' ' then\n      if string.sub(s,i,i) == string.sub(s,i,i-1)\
    \ then\n        table.insert(t, string.sub(s,i,i))\n      else\n        if #t\
    \ == n then\n          break\n        else\n          table.insert(t, string.sub(s,i,i))\n\
    \        end\n      end\n    end\n    i = i + 1\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka2knvfm.lua:40:\
    \ expected: {\"little\"}\nactual: {\"M\", \"a\", \"r\", \"y\"}\nstack traceback:\n\
    \t/tmp/tmpka2knvfm.lua:40: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then return end\n  \n  --\
    \ Base case\n  if n == 0 then return {}\n  \n  -- Base case\n  if n == 1 then\
    \ return {s}\n  \n  -- Recursive case\n  local t = {}\n  for w in select_words(s,\
    \ n - 1) do\n    if string.find(s, w, 1, true) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1_aukdls.lua:25: ''end'' expected (to close ''if'' at line
    22) near ''if''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    table.insert(t, w)\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_h0dpn49.lua:29:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"a\", \"had\", \"lamb\", \"little\"\
    }\nstack traceback:\n\t/tmp/tmp_h0dpn49.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\t-- Your code here\n\tlocal t = {}\n\tfor i = 1, #s do\n\
    \t\tif string.sub(s,i,i) == ' ' then\n\t\t\ttable.insert(t, string.sub(s,1,i))\n\
    \t\telse\n\t\t\tlocal consonants = string.sub(s,i,i)\n\t\t\tif consonants == consonants\
    \ then\n\t\t\t\ttable.insert(t, string.sub(s,1,i))\n\t\t\tend\n\t\tend\n\tend\n\
    \tif #t == n then\n\t\treturn t\n\telse\n\t\treturn {}\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedjngw5g.lua:40:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpedjngw5g.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    if string.find(s, string.sub(w,1,n), 1) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpebzo714b.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"had\", \"a\", \"little\", \"lamb\"\
    }\nstack traceback:\n\t/tmp/tmpebzo714b.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local table = {}\n  local i = 1\n  while i <= #s do\n\
    \    local c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c\
    \ == 'u' then\n      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n  \
    \    while i <= #s do\n        c = s[i]\n        if c == 'a' or c == 'e' or c\
    \ == 'i' or c == 'o' or c == 'u' then\n          i = i + 1\n        else\n   \
    \       table.insert(table, s)\n          break\n        end\n      end\n    else\n\
    \      table.insert(table, s)\n    end\n  end\n  return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxt2nt9cg.lua:36:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpxt2nt9cg.lua:36:\
    \ in function 'candidate'\n\t/tmp/tmpxt2nt9cg.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        if string.find(w, string.char(string.len(w) - n)) ~= nil then\n     \
    \       t[#t + 1] = w\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpu6fwju7z.lua:20:\
    \ bad argument #1 to 'char' (invalid value)\nstack traceback:\n\t/tmp/tmpu6fwju7z.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpu6fwju7z.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \      i = i+n\n    else\n      i = i+1\n    end\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptbzz950r.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmptbzz950r.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'n' then\n      if n >= #s then\n        break\n\
    \      else\n        t[#t + 1] = s[i + 1]\n        i = i + 2\n      end\n    else\n\
    \      i = i + 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcvxcz8t4.lua:41:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpcvxcz8t4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    local count = 0\n    for c in string.gmatch(w, '[%w\\s]') do\n      count\
    \ = count + 1\n      if c == n then\n        break\n      end\n    end\n    if\
    \ count == n then\n      table.insert(t, w)\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg_550kyj.lua:37:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"lamb\"}\nstack traceback:\n\t/tmp/tmpg_550kyj.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        if string.find(w, string.letters) then\n            table.insert(t, w)\n\
    \        end\n    end\n    if #t == 0 then\n        return {}\n    end\n    if\
    \ n == 1 then\n        return t\n    end\n    local count = 0\n    for _, w in\
    \ ipairs(t) do\n        if string.find(w, string.letters) then\n            count\
    \ = count + 1\n            if count == n then\n                return {w}\n  \
    \          end\n        end\n    end\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc06ii8y3.lua:20:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpc06ii8y3.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpc06ii8y3.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqkmklym.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmpaqkmklym.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl1it8r45.lua:33: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  local i\
    \ = 0\n  while i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s, 1, n)\
    \ then\n      table.insert(t, string.sub(s, 1, n))\n    end\n    i = i + 1\n \
    \ end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgjco9u8k.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpgjco9u8k.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == \" \" then\n      table.insert(t, string.sub(s,1,i))\n\
    \    else\n      if string.sub(s,i,i) == \" \" then\n        table.insert(t, string.sub(s,1,i))\n\
    \      else\n        if string.sub(s,i,i) == \" \" then\n          table.insert(t,\
    \ string.sub(s,1,i))\n        else\n          if string.sub(s,i,i) == \" \" then\n\
    \            table.insert(t, string.sub(s,1,i))\n          else\n            if\
    \ string.sub(s,i,i) == \" \" then\n              table.insert(t, string.sub(s,1,i))\n\
    \            else\n              if string.sub(s,i,i) == \" \" then\n        \
    \        table.insert(t, string.sub(s,1,i))\n              else\n            \
    \    if string.sub(s,i,i) == \" \" then\n                  table.insert(t, string.sub(s,1,i))\n\
    \                else\n                  if string.sub(s,i,i) == \" \" then\n\
    \                    table.insert(t, string.sub(s,1,i))\n                  else\n\
    \                    if string.sub(s,i,i) == \" \" then\n                    \
    \  table.insert(t, string.sub(s,1,i))\n                    else\n            \
    \          if string.sub(s,i,i) == \" \" then\n                        table.insert(t,\
    \ string.sub(s,1,i))\n                      else\n                        if string.sub(s,i,i)\
    \ == \" \" then\n                          table.insert(t, string.sub(s,1,i))\n\
    \                        else\n                          if string.sub(s,i,i)\
    \ == \" \" then\n                            table.insert(t, string.sub(s,1,i))\n\
    \                          else\n                            if string.sub(s,i,i)\
    \ == \" \" then\n                              table.insert(t, string.sub(s,1,i))\n\
    \                            else\n                              if string.sub(s,i,i)\
    \ == \" \" then\n                                table.insert(t, string.sub(s,1,i))\n\
    \                              else\n                                if string.sub(s,i,i)\
    \ == \" \" then\n                                  table.insert(t, string.sub(s,1,i))\n\
    \                                else\n                                  if string.sub(s,i,i)\
    \ == \" \" then\n                                    table.insert(t, string.sub(s,1,i))\n\
    \                                  else\n                                    if\
    \ string.sub(s,i,i) == \" \" then\n                                      table.insert(t,\
    \ string.sub(s,1,i))\n                                    else\n             \
    \                         if string.sub(s,i,i) == \" \" then\n               \
    \                         table.insert(t, string.sub(s,1,i))\n               \
    \                       else\n                                        if string.sub(s,i,i)\
    \ == \" \" then\n                                          table.insert(t, string.sub(s,1,i))\n\
    \                                        else\n                              \
    \            if string.sub(s,i,i) == \" \" then\n                            \
    \                table.insert(t, string.sub(s,1,i))\n                        \
    \                  else\n                                            if string.sub(s,\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp65n3bwb6.lua:82: '')'' expected (to close ''('' at line 81)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.find(string.gsub(w, '[aeiou]', ''), string.sub(s, 1, n)) then\n\
    \      table.insert(t, w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_w4t24x7.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp_w4t24x7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb43wv10.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphb43wv10.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl1it8r45.lua:33: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl0ayfp0.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl0ayfp0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \    else\n      if string.sub(s,i,i) == string.sub(s,i,i-1) then\n        table.insert(t,\
    \ string.sub(s,1,i))\n      end\n    end\n  end\n  if #t == n then\n    return\
    \ t\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_1v4g1c.lua:39:\
    \ expected: {\"little\"}\nactual: {\"Mary \", \"Mary had \", \"Mary had a \",\
    \ \"Mary had a little \"}\nstack traceback:\n\t/tmp/tmpz_1v4g1c.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local table = {}\n  local index = 1\n  while true do\n\
    \    if index == n then\n      break\n    end\n    if string.sub(s,index,index+1)\
    \ ~= ' ' then\n      index = index + 1\n      continue\n    end\n    index = index\
    \ + 1\n    table.insert(table,string.sub(s,1,index))\n  end\n  return table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9twz7sos.lua:27: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    local count = 0\n    for c in w do\n      if string.sub(c, 1, 1) == string.sub(c,\
    \ 1, 1) then\n        count = count + 1\n      end\n    end\n    if count == n\
    \ then\n      table.insert(t, w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj9x5u42b.lua:21:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpj9x5u42b.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpj9x5u42b.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local t = {}\n  for i = 1,\
    \ #s do\n    if string.sub(s, i, i+n) == string.sub(s, '^', i) then\n      table.insert(t,\
    \ string.sub(s, '^', i))\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvwoak5hb.lua:21:\
    \ bad argument #2 to 'sub' (number expected, got string)\nstack traceback:\n\t\
    /tmp/tmpvwoak5hb.lua:21: in function 'candidate'\n\t/tmp/tmpvwoak5hb.lua:31: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb43wv10.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphb43wv10.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local table = {}\n  local count\
    \ = 0\n  for i = 1, #s do\n    if string.sub(s,i,i)==\" \" then\n      count =\
    \ count + 1\n    elseif string.sub(s,i,i)==\" \" and count==n then\n      table.insert(table)\n\
    \      count = 0\n    elseif string.sub(s,i,i)==\" \" and count>n then\n     \
    \ table.insert(table)\n      count = 0\n    elseif string.sub(s,i,i)==\" \" and\
    \ count<n then\n      count = count + 1\n    end\n  end\n  return table\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv40e99tc.lua:40:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpv40e99tc.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    local count = 0\n\
    \    for _, w in ipairs(t) do\n        if string.find(w, string.sub(s, 1, n))\
    \ then\n            count = count + 1\n        end\n    end\n    if count == n\
    \ then\n        return t\n    end\n    return {}\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bxi452d.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9bxi452d.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then\n    return {}\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw2xos4mv.lua:35: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        if string.sub(w,1,n) == string.sub(w,1,n-1) then\n            t[#t+1]\
    \ = w\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwxj4l0z.lua:30:\
    \ expected: {\"little\"}\nactual: {\"had\", \"a\"}\nstack traceback:\n\t/tmp/tmpuwxj4l0z.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \      i = i + n\n    else\n      i = i + 1\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wwcgj1y.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp4wwcgj1y.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.sub(w,1,n) == string.sub(s, 1, n) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zs47t0x.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmp6zs47t0x.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.sub(w,1,n) == string.sub(w,1,n-1) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdqemxsix.lua:30:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"a\",\n    \"r\",\n\
    \    \"y\",\n    \"h\",\n    \"a\",\n    \"d\",\n    \"a\",\n    \"l\",\n    \"\
    i\",\n    \"t\",\n    \"t\",\n    \"l\",\n    \"e\",\n    \"l\",\n    \"a\",\n\
    \    \"m\",\n    \"b\"\n}\nstack traceback:\n\t/tmp/tmpdqemxsix.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == \"\" then\n      break\n    end\n    t[#t+1] = string.sub(s,i,i+n)\n\
    \    i = i+n\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpegq7sdnt.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmpegq7sdnt.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    if n ~= #t then\n\
    \        table.insert(t, nil)\n    end\n    return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn8xweidf.lua:32:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"a\",\n    \"a\",\n\
    \    \"a\",\n    \"a\",\n    \"b\",\n    \"d\",\n    \"e\",\n    \"h\",\n    \"\
    i\",\n    \"l\",\n    \"l\",\n    \"l\",\n    \"m\",\n    \"r\",\n    \"t\",\n\
    \    \"t\",\n    \"y\"\n}\nstack traceback:\n\t/tmp/tmpn8xweidf.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,1,n) then\n      table.insert(t, string.sub(s,1,n))\n\
    \    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsix2i6ij.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpsix2i6ij.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or\
    \ c == 'o' or c == 'u' then\n          i = i + 1\n        elseif c == 'y' then\n\
    \          i = i + 1\n        else\n          table.insert(t, s)\n          break\n\
    \        end\n      end\n    elseif c == 'n' then\n      i = i + 1\n      while\
    \ i <= #s do\n        local c = s[i]\n        if c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' then\n          i = i + 1\n        elseif c == 'n'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, s)\n    \
    \      break\n        end\n      end\n    elseif c == 's' then\n      i = i +\
    \ 1\n      while i <= #s do\n        local c = s[i]\n        if c == 'a' or c\
    \ == 'e' or c == 'i' or c == 'o' or c == 'u' then\n          i = i + 1\n     \
    \   elseif c == 's' then\n          i = i + 1\n        else\n          table.insert(t,\
    \ s)\n          break\n        end\n      end\n    elseif c == 't' then\n    \
    \  i = i + 1\n      while i <= #s do\n        local c = s[i]\n        if c ==\
    \ 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n          i = i +\
    \ 1\n        elseif c == 't' then\n          i = i + 1\n        else\n       \
    \   table.insert(t, s)\n          break\n        end\n      end\n    elseif c\
    \ == 'w' then\n      i = i + 1\n      while i <= #s do\n        local c = s[i]\n\
    \        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n  \
    \        i = i + 1\n        elseif c == 'w' then\n          i = i + 1\n      \
    \  else\n          table.insert(t, s)\n          break\n        end\n      end\n\
    \    elseif c == 'h' then\n      i = i + 1\n      while i <= #s do\n        local\
    \ c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n          i = i + 1\n        elseif c == 'h' then\n          i = i + 1\n\
    \        else\n          table.insert(t, s)\n\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf60_91pn.lua:113: ''end'' expected (to close ''if'' at line
    93) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s,i,i+n) == string.sub(s,i,i+n) then\n      table.insert(t, string.sub(s,i,i+n))\n\
    \      i = i + n\n    else\n      i = i + 1\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wwcgj1y.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"y had\", \"d a l\", \"littl\",\
    \ \"le la\", \"amb\"}\nstack traceback:\n\t/tmp/tmp4wwcgj1y.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tfor w in string.gmatch(s, '%a') do\n\t\
    \tif string.find(w, string.letters) then\n\t\t\ttable.insert(t, w)\n\t\tend\n\t\
    end\n\tif #t > n then\n\t\tt = t[#t]\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpadn9zu_0.lua:20:\
    \ bad argument #2 to 'find' (string expected, got nil)\nstack traceback:\n\t/tmp/tmpadn9zu_0.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpadn9zu_0.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    local count = 0\n\
    \    for _, w in ipairs(t) do\n        if string.sub(s, 1, n) == w then\n    \
    \        count = count + 1\n        end\n    end\n    if count == n then\n   \
    \     return t\n    end\n    return {}\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo55p9dfz.lua:38:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpo55p9dfz.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) == ' ' then\n      i = i + 1\n      t[#t+1] = string.sub(s,i,i)\n\
    \    else\n      if string.sub(s,i,i) == string.sub(s, i+1, i+n) then\n      \
    \  i = i + n\n      else\n        i = i + 1\n      end\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5cc7r7v8.lua:38:\
    \ expected: {\"little\"}\nactual: {\"h\", \"a\", \"l\", \"l\"}\nstack traceback:\n\
    \t/tmp/tmp5cc7r7v8.lua:38: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    local i = 0\n    while i <= #s do\n\
    \        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' then\n            i = i + 1\n        elseif c == 'y' then\n    \
    \        i = i + 1\n        elseif c == 's' then\n            i = i + 1\n    \
    \    elseif c == 'h' then\n            i = i + 1\n        elseif c == 'r' then\n\
    \            i = i + 1\n        elseif c == 'l' then\n            i = i + 1\n\
    \        elseif c == 'd' then\n            i = i + 1\n        elseif c == 'n'\
    \ then\n            i = i + 1\n        elseif c == 'w' then\n            i = i\
    \ + 1\n        elseif c == 't' then\n            i = i + 1\n        elseif c ==\
    \ 'b' then\n            i = i + 1\n        elseif c == 'f' then\n            i\
    \ = i + 1\n        elseif c == 'v' then\n            i = i + 1\n        elseif\
    \ c == 'm' then\n            i = i + 1\n        elseif c == 'p' then\n       \
    \     i = i + 1\n        elseif c == 'y' then\n            i = i + 1\n       \
    \ elseif c == 'k' then\n            i = i + 1\n        elseif c == 'j' then\n\
    \            i = i + 1\n        elseif c == 'q' then\n            i = i + 1\n\
    \        elseif c == 'z' then\n            i = i + 1\n        elseif c == 'x'\
    \ then\n            i = i + 1\n        elseif c == 'q' then\n            i = i\
    \ + 1\n        elseif c == 'z' then\n            i = i + 1\n        elseif c ==\
    \ 'q' then\n            i = i + 1\n        elseif c == 'z' then\n            i\
    \ = i + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif\
    \ c == 'z' then\n            i = i + 1\n        elseif c == 'q' then\n       \
    \     i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n       \
    \ elseif c == 'q' then\n            i = i + 1\n        elseif c == 'z' then\n\
    \            i = i + 1\n        elseif c == 'q' then\n            i = i + 1\n\
    \        elseif c == 'z' then\n            i = i + 1\n        elseif c == 'q'\
    \ then\n            i = i + 1\n        elseif c == 'z' then\n            i = i\
    \ + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif c ==\
    \ 'z' then\n            i = i + 1\n        elseif c == 'q' then\n            i\
    \ = i + 1\n        elseif c == 'z' then\n            i = i + 1\n        elseif\
    \ c == 'q' then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbhy8r_hs.lua:102: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tfor w in string.gmatch(s, '%w+') do\n\t\
    \tif string.find(string.gsub(w, '[aeiou]', ''), string.sub(s, 1, n)) then\n\t\t\
    \ttable.insert(t, w)\n\t\tend\n\tend\n\treturn t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9b8oyqwh.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9b8oyqwh.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        if string.find(s, w .. '$', n) then\n            t[#t + 1] = w\n    \
    \    end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzxhdjhoi.lua:30:\
    \ expected: {\"little\"}\nactual: {\"lamb\"}\nstack traceback:\n\t/tmp/tmpzxhdjhoi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local table = {}\n  if s ==\
    \ nil then\n    return table\n  end\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local consonants = {'b', 'c', 'd', 'f', 'g', 'h', 'j', 'k', 'l', 'm', 'n',\
    \ 'p', 'q', 'r', 's', 't', 'v', 'w', 'x', 'y', 'z'}\n  local i = 0\n  while i\
    \ <= #s do\n    if vowels:contains(string.sub(s,i,i)) then\n      table.insert(table,\
    \ string.sub(s,i,i))\n      i = i + 1\n    elseif consonants:contains(string.sub(s,i,i))\
    \ then\n      i = i + 1\n    else\n      i = i + 1\n    end\n  end\n  if #table\
    \ == n then\n    return table\n  else\n    return {}\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpiv58x14q.lua:27:\
    \ attempt to call method 'contains' (a nil value)\nstack traceback:\n\t/tmp/tmpiv58x14q.lua:27:\
    \ in function 'candidate'\n\t/tmp/tmpiv58x14q.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t,\
    \ string.sub(s, 1, i))\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptd5jwtjl.lua:31:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmptd5jwtjl.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl0ayfp0.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl0ayfp0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    local i = 0\n    while i < #s do\n\
    \        if string.sub(s, i, i+n) == string.sub(s, 1, n) then\n            table.insert(t,\
    \ string.sub(s, 1, n))\n        end\n        i = i + 1\n    end\n    return t\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpin4_g26f.lua:32:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpin4_g26f.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) ~= ' ' then\n      table.insert(t, string.sub(s,i,i))\n  \
    \  end\n    i = i + 1\n  end\n  if #t == n then\n    return t\n  else\n    return\
    \ {}\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvfl99fwh.lua:36:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpvfl99fwh.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\n  local t = {}\n  for i =\
    \ 1, #s do\n    if string.sub(s,i,i) == ' ' then\n      table.insert(t, string.sub(s,1,i))\n\
    \      table.insert(t, string.sub(s,i+1,#s))\n    else\n      table.insert(t,\
    \ string.sub(s,i,i))\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfze2agu.lua:34:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \"M\",\n    \"a\",\n    \"r\",\n\
    \    \"y\",\n    \"Mary \",\n    \"had a little lamb\",\n    \"h\",\n    \"a\"\
    ,\n    \"d\",\n    \"Mary had \",\n    \"a little lamb\",\n    \"a\",\n    \"\
    Mary had a \",\n    \"little lamb\",\n    \"l\",\n    \"i\",\n    \"t\",\n   \
    \ \"t\",\n    \"l\",\n    \"e\",\n    \"Mary had a little \",\n    \"lamb\",\n\
    \    \"l\",\n    \"a\",\n    \"m\",\n    \"b\"\n}\nstack traceback:\n\t/tmp/tmprfze2agu.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    local i = 0\n    while i <= #s do\n\
    \        local c = s[i]\n        if c == 'a' or c == 'e' or c == 'i' or c == 'o'\
    \ or c == 'u' then\n            i = i + 1\n        elseif c == 'y' then\n    \
    \        i = i + 1\n        elseif c == 's' then\n            i = i + 1\n    \
    \    elseif c == 'h' then\n            i = i + 1\n        elseif c == 'l' then\n\
    \            i = i + 1\n        elseif c == 'd' then\n            i = i + 1\n\
    \        elseif c == 'n' then\n            i = i + 1\n        elseif c == 'w'\
    \ then\n            i = i + 1\n        elseif c == 'r' then\n            i = i\
    \ + 1\n        elseif c == 't' then\n            i = i + 1\n        elseif c ==\
    \ 'f' then\n            i = i + 1\n        elseif c == 'g' then\n            i\
    \ = i + 1\n        elseif c == 'p' then\n            i = i + 1\n        elseif\
    \ c == 'v' then\n            i = i + 1\n        elseif c == 'b' then\n       \
    \     i = i + 1\n        elseif c == 'z' then\n            i = i + 1\n       \
    \ elseif c == 'x' then\n            i = i + 1\n        elseif c == 'q' then\n\
    \            i = i + 1\n        elseif c == 'j' then\n            i = i + 1\n\
    \        elseif c == 'k' then\n            i = i + 1\n        elseif c == 'm'\
    \ then\n            i = i + 1\n        elseif c == 'c' then\n            i = i\
    \ + 1\n        elseif c == 'v' then\n            i = i + 1\n        elseif c ==\
    \ 'b' then\n            i = i + 1\n        elseif c == 'z' then\n            i\
    \ = i + 1\n        elseif c == 'x' then\n            i = i + 1\n        elseif\
    \ c == 'q' then\n            i = i + 1\n        elseif c == 'j' then\n       \
    \     i = i + 1\n        elseif c == 'k' then\n            i = i + 1\n       \
    \ elseif c == 'm' then\n            i = i + 1\n        elseif c == 'c' then\n\
    \            i = i + 1\n        elseif c == 'v' then\n            i = i + 1\n\
    \        elseif c == 'b' then\n            i = i + 1\n        elseif c == 'z'\
    \ then\n            i = i + 1\n        elseif c == 'x' then\n            i = i\
    \ + 1\n        elseif c == 'q' then\n            i = i + 1\n        elseif c ==\
    \ 'j' then\n            i = i + 1\n        elseif c == 'k' then\n            i\
    \ = i + 1\n        elseif c == 'm' then\n            i = i + 1\n        elseif\
    \ c == 'c' then\n            i = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppku40jr3.lua:102: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your solution here\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphb43wv10.lua:24:\
    \ expected: {\"little\"}\nactual: nil\nstack traceback:\n\t/tmp/tmphb43wv10.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.sub(w,1,n) == string.sub(s, 1, n) then\n      table.insert(t, w)\n\
    \    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6zs47t0x.lua:30:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmp6zs47t0x.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Your code here\n  local t = {}\n  local i = 0\n  while\
    \ i <= #s do\n    if string.sub(s, i, i+n) == string.sub(s,1,n) then\n      table.insert(t,\
    \ string.sub(s,i+1,i+n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptw4_ev08.lua:33:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmptw4_ev08.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local table = {}\n  local i = 1\n  while i <= #s do\n\
    \    local word = string.sub(s,i,i)\n    local count = 0\n    for j = 1, #word\
    \ do\n      if word[j] ~= 'a' and word[j] ~= 'e' and word[j] ~= 'i' and word[j]\
    \ ~= 'o' and word[j] ~= 'u' then\n        count = count + 1\n      end\n    end\n\
    \    if count == n then\n      table.insert(table, word)\n    end\n    i = i +\
    \ 1\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps_ouyhmk.lua:39:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmps_ouyhmk.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\t\n\t-- Base case\n\tif s == \"\" then\n\
    \t\treturn t\n\tend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = select_words\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3),\
    \ {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n\
    \    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzb40e8_n.lua:37: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%w+') do\n\
    \    if string.sub(s, 1, string.len(w))==w then\n      if #t==n then\n       \
    \ return t\n      else\n        t[#t+1] = w\n      end\n    end\n  end\n  return\
    \ t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpemvpwqi0.lua:34:\
    \ expected: {\"little\"}\nactual: {\"Mary\"}\nstack traceback:\n\t/tmp/tmpemvpwqi0.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    local\
    \ c = s[i]\n    local j = i - 1\n    while j >=0 and s[j] == c do\n      j = j\
    \ - 1\n    end\n    if j == i then\n      t[#t + 1] = s[i]\n      i = i + 1\n\
    \    end\n    i = j + 1\n  end\n  if #t == n then\n    return t\n  end\n  return\
    \ {}\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = select_words\n    lu.assertEquals(candidate('Mary had a little lamb', 4),\
    \ {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary',\
    \ 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750533
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%S+') do\n\
    \    table.insert(t, w)\n  end\n  table.sort(t)\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg6w6elq.lua:29:\
    \ expected: {\"little\"}\nactual: {\"Mary\", \"a\", \"had\", \"lamb\", \"little\"\
    }\nstack traceback:\n\t/tmp/tmpyg6w6elq.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i < #s do\n    if\
    \ string.sub(s,i,i+1) == ' ' then\n      i = i + 1\n      t[#t+1] = string.sub(s,i,i)\n\
    \    elseif string.sub(s,i,i+1) ~= '' then\n      i = i + 1\n    end\n    if i\
    \ == #s then\n      if #t >= n then\n        return t\n      else\n        return\
    \ {}\n      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwf997s80.lua:41:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpwf997s80.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == n then\n      table.insert(t, string.sub(s, 1, i))\n\
    \      i = i + n\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmlvdhrau.lua:33:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpmlvdhrau.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 1\n  while i <= #s do\n    if\
    \ string.sub(s, i, i+n) == string.sub(s, 1, n) then\n      table.insert(t, string.sub(s,\
    \ 1, n))\n    end\n    i = i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzl0ayfp0.lua:32:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpzl0ayfp0.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   local c = string.sub(w,1,1)\n    if c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' then\n      table.insert(t, w)\n    end\n  end\n  if #t >\
    \ n then\n    return {}\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn0hm6sbj.lua:34:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpn0hm6sbj.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'n' then\n      if n <= #s then\n        table.insert(t,\
    \ string.sub(s, 1, i))\n      else\n        break\n      end\n      i = i + 1\n\
    \    elseif c == 's' then\n      if n <= #s then\n        table.insert(t, string.sub(s,\
    \ 1, i))\n      else\n        break\n      end\n      i = i + 1\n    elseif c\
    \ == 't' then\n      if n <= #s then\n        table.insert(t, string.sub(s, 1,\
    \ i))\n      else\n        break\n      end\n      i = i + 1\n    elseif c ==\
    \ 'w' then\n      if n <= #s then\n        table.insert(t, string.sub(s, 1, i))\n\
    \      else\n        break\n      end\n      i = i + 1\n    elseif c == 'h' then\n\
    \      if n <= #s then\n        table.insert(t, string.sub(s, 1, i))\n      else\n\
    \        break\n      end\n      i = i + 1\n    elseif c == 'l' then\n      if\
    \ n <= #s then\n        table.insert(t, string.sub(s, 1, i))\n      else\n   \
    \     break\n      end\n      i = i + 1\n    elseif c == 'd' then\n      if n\
    \ <= #s then\n        table.insert(t, string.sub(s, 1, i))\n      else\n     \
    \   break\n      end\n      i = i + 1\n    elseif c == 'p' then\n      if n <=\
    \ #s then\n        table.insert(t, string.sub(s, 1, i))\n      else\n        break\n\
    \      end\n      i = i + 1\n    elseif c == 'y' then\n      if n <= #s then\n\
    \        table.insert(t, string.sub(s, 1, i))\n      else\n        break\n   \
    \   end\n      i = i + 1\n    elseif c == 'g' then\n      if n <= #s then\n  \
    \      table.insert(t, string.sub(s, 1, i))\n      else\n        break\n     \
    \ end\n      i = i + 1\n    elseif c == 'b' then\n      if n <= #s then\n    \
    \    table.insert(t, string.sub(s, 1, i))\n      else\n        break\n      end\n\
    \      i = i + 1\n    elseif c == 'm' then\n      if n <= #s then\n        table.insert(t,\
    \ string.sub(s, 1, i))\n      else\n        break\n      end\n      i = i + 1\n\
    \    elseif c == 'v' then\n      if n <= #s then\n        table.insert(t, string.sub(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxtsigfb4.lua:111: '')'' expected (to close ''('' at line 110)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        if string.sub(w,1,n) == string.sub(w,1,n-1) then\n            t[#t +\
    \ 1] = w\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhe7q1kj.lua:30:\
    \ expected: {\"little\"}\nactual: {\"had\", \"a\"}\nstack traceback:\n\t/tmp/tmpyhe7q1kj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        table.insert(t, w)\n    end\n    table.sort(t)\n    local count = 0\n\
    \    for _, w in ipairs(t) do\n        if string.sub(w,1,n) == string.sub(w,n+1,n)\
    \ then\n            count = count + 1\n        end\n    end\n    if count == 0\
    \ then\n        return {}\n    else\n        return t\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9tdkwnwm.lua:39:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmp9tdkwnwm.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.find(string.gsub(w, '[^aeiou]', ''), '^' .. n .. '$') then\n   \
    \   table.insert(t, w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpule9f7wi.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpule9f7wi.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  for w in string.gmatch(s, '%a') do\n \
    \   if string.sub(w,1,n) == string.sub(w,n+1,n+1) then\n      table.insert(t,\
    \ w)\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppkk8yabj.lua:30:\
    \ expected: {\"little\"}\nactual: {}\nstack traceback:\n\t/tmp/tmppkk8yabj.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%a') do\n\
    \        local count = 0\n        for c in w do\n            if string.sub(s,\
    \ 1, 1) == c then\n                count = count + 1\n            end\n      \
    \  end\n        if count == n then\n            t[#t + 1] = w\n        end\n \
    \   end\n    return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo9v9208v.lua:21:\
    \ attempt to call a string value\nstack traceback:\n\t/tmp/tmpo9v9208v.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpo9v9208v.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    if\
    \ string.sub(s,i,i) ~= ' ' then\n      local c = string.sub(s,i,i)\n      if string.find(c,\
    \ \"aeiouAEIOU\") then\n        table.insert(t, c)\n      end\n    end\n    i\
    \ = i + 1\n  end\n  if #t < n then\n    local k = n - #t\n    for i = k + 1, #s\
    \ do\n      table.insert(t, string.sub(s,i,i))\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = select_words\n\
    \    lu.assertEquals(candidate('Mary had a little lamb', 4), {'little'})\n   \
    \ lu.assertEquals(candidate('Mary had a little lamb', 3), {'Mary', 'lamb'})\n\
    \    lu.assertEquals(candidate('simple white space', 2), {})\n    lu.assertEquals(candidate('Hello\
    \ world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n\
    \    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a b\
    \ c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwlnurjn9.lua:41:\
    \ expected: \n{\"little\"}\nactual: \n{\n    \" \",\n    \"h\",\n    \"a\",\n\
    \    \"d\",\n    \" \",\n    \"a\",\n    \" \",\n    \"l\",\n    \"i\",\n    \"\
    t\",\n    \"t\",\n    \"l\",\n    \"e\",\n    \" \",\n    \"l\",\n    \"a\",\n\
    \    \"m\",\n    \"b\"\n}\nstack traceback:\n\t/tmp/tmpwlnurjn9.lua:41: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750528
- exit_code: -1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'n' then\n      if i >= n then\n        break\n\
    \      end\n      i = i + 1\n    elseif c == 's' then\n      if i >= n then\n\
    \        break\n      end\n      i = i + 1\n    elseif c == 't' then\n      if\
    \ i >= n then\n        break\n      end\n      i = i + 1\n    elseif c == 'w'\
    \ then\n      if i >= n then\n        break\n      end\n      i = i + 1\n    elseif\
    \ c == 'y' then\n      if i >= n then\n        break\n      end\n      i = i +\
    \ 1\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750533
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n\tlocal t = {}\n\tlocal i = 1\n\twhile i <= #s do\n\t\t\
    local c = s[i]\n\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\ti = i + 1\n\t\telseif c == 'y' then\n\t\t\ti = i + 1\n\t\t\twhile\
    \ i <= #s do\n\t\t\t\tlocal c = s[i]\n\t\t\t\tif c == 'a' or c == 'e' or c ==\
    \ 'i' or c == 'o' or c == 'u' then\n\t\t\t\t\ti = i + 1\n\t\t\t\telseif c == 'y'\
    \ then\n\t\t\t\t\ti = i + 1\n\t\t\t\t\twhile i <= #s do\n\t\t\t\t\t\tlocal c =\
    \ s[i]\n\t\t\t\t\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\telseif c == 'y' then\n\t\t\t\t\t\t\
    \ti = i + 1\n\t\t\t\t\t\t\twhile i <= #s do\n\t\t\t\t\t\t\t\tlocal c = s[i]\n\t\
    \t\t\t\t\t\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \t\t\t\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\t\t\telse\n\t\t\t\t\t\t\t\t\ttable.insert(t,\
    \ s)\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tend\n\t\t\t\t\t\t\tend\n\t\t\t\t\
    \t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\telseif c == 'n' then\n\t\t\
    \ti = i + 1\n\t\t\twhile i <= #s do\n\t\t\t\tlocal c = s[i]\n\t\t\t\tif c == 'a'\
    \ or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\t\t\t\t\ti = i + 1\n\t\
    \t\t\telseif c == 'n' then\n\t\t\t\t\ti = i + 1\n\t\t\t\t\twhile i <= #s do\n\t\
    \t\t\t\t\tlocal c = s[i]\n\t\t\t\t\t\tif c == 'a' or c == 'e' or c == 'i' or c\
    \ == 'o' or c == 'u' then\n\t\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\telseif c == 'n'\
    \ then\n\t\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\t\twhile i <= #s do\n\t\t\t\t\t\t\t\
    \tlocal c = s[i]\n\t\t\t\t\t\t\t\tif c == 'a' or c == 'e' or c == 'i' or c ==\
    \ 'o' or c == 'u' then\n\t\t\t\t\t\t\t\t\ti = i + 1\n\t\t\t\t\t\t\t\telse\n\t\t\
    \t\t\t\t\t\t\ttable.insert(t, s)\n\t\t\t\t\t\t\t\t\tbreak\n\t\t\t\t\t\t\t\tend\n\
    \t\t\t\t\t\t\tend\n\t\t\t\t\t\tend\n\t\t\t\t\tend\n\t\t\t\tend\n\t\t\tend\n\t\t\
    elseif c == 's' then\n\t\t\ti = i + 1\n\t\t\twhile i <= #s do\n\t\t\t\tlocal c\
    \ = s[i]\n\t\t\t\tif c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u'\
    \ then\n\t\t\t\t\ti = i + 1\n\t\t\t\telseif c == 's' then\n\t\t\t\t\ti = i + 1\n\
    \t\t\t\t\twhile i <= #s do\n\t\t\t\t\t\tlocal c = s[i]\n\t\t\t\t\t\tif c == 'a'\
    \ or c == 'e' or c == '\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnn40yxdl.lua:88: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  local t = {}\n  local i = 0\n  while i <= #s do\n    local\
    \ c = s[i]\n    if c == 'a' or c == 'e' or c == 'i' or c == 'o' or c == 'u' then\n\
    \      i = i + 1\n    elseif c == 'y' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i'\
    \ or c2 == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 'y'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, string.sub(s,\
    \ 1, i))\n          i = i + 1\n        end\n      end\n    elseif c == 's' then\n\
    \      i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if\
    \ c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n       \
    \   i = i + 1\n        elseif c2 == 's' then\n          i = i + 1\n        else\n\
    \          table.insert(t, string.sub(s, 1, i))\n          i = i + 1\n       \
    \ end\n      end\n    elseif c == 'n' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i'\
    \ or c2 == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 'n'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, string.sub(s,\
    \ 1, i))\n          i = i + 1\n        end\n      end\n    elseif c == 't' then\n\
    \      i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if\
    \ c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o' or c2 == 'u' then\n       \
    \   i = i + 1\n        elseif c2 == 't' then\n          i = i + 1\n        else\n\
    \          table.insert(t, string.sub(s, 1, i))\n          i = i + 1\n       \
    \ end\n      end\n    elseif c == 'h' then\n      i = i + 1\n      while i <=\
    \ #s do\n        local c2 = s[i]\n        if c2 == 'a' or c2 == 'e' or c2 == 'i'\
    \ or c2 == 'o' or c2 == 'u' then\n          i = i + 1\n        elseif c2 == 'h'\
    \ then\n          i = i + 1\n        else\n          table.insert(t, string.sub(s,\
    \ 1, i))\n          i = i + 1\n        end\n      end\n    elseif c == 'w' then\n\
    \      i = i + 1\n      while i <= #s do\n        local c2 = s[i]\n        if\
    \ c2 == 'a' or c2 == 'e' or c2 == 'i' or c2 == 'o\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmtjh3dvs.lua:93: unfinished string near ''''o''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n    local t = {}\n    for w in string.gmatch(s, '%w+') do\n\
    \        if string.sub(w,1,n) == string.sub(w,1,n-1) then\n            t[#t+1]\
    \ = w\n        end\n    end\n    return t\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuwxj4l0z.lua:30:\
    \ expected: {\"little\"}\nactual: {\"had\", \"a\"}\nstack traceback:\n\t/tmp/tmpuwxj4l0z.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Base case\n  if s == nil then return end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = select_words\n    lu.assertEquals(candidate('Mary\
    \ had a little lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had\
    \ a little lamb', 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple\
    \ white space', 2), {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n\
    \    lu.assertEquals(candidate('Uncle sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('',\
    \ 4), {})\n    lu.assertEquals(candidate('a b c d e f', 1), {'b', 'c', 'd', 'f'})\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl1it8r45.lua:33: ''end'' expected (to close ''function'' at
    line 17) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750528
- exit_code: 1
  program: "-- Given a string s and a natural number n, you have been tasked to implement\
    \ \n-- a function that returns a table of all words from string s that contain\
    \ exactly \n-- n consonants, in order these words appear in the string s.\n--\
    \ If the string s is empty then the function should return an empty table.\n--\
    \ Note: you may assume the input string contains only letters and spaces.\n--\
    \ Examples:\n-- >>> select_words('Mary had a little lamb', 4)\n-- {'little'}\n\
    -- >>> select_words('Mary had a little lamb', 3)\n-- {'Mary', 'lamb'}\n-- >>>\
    \ select_words('simple white space', 2)\n-- {}\n-- >>> select_words('Hello world',\
    \ 4)\n-- {'world'}\n-- >>> select_words('Uncle sam', 3)\n-- {'Uncle'}\nlocal function\
    \ select_words(s, n)\n  -- Write your code here\n  local table = {}\n  if s ==\
    \ \"\" then\n    return table\n  end\n  local count = 0\n  for i = 1, #s do\n\
    \    if string.sub(s,i,i) == \" \" then\n      count = count + 1\n      if count\
    \ == n then\n        table.insert(table, string.sub(s,1,i))\n      end\n    end\n\
    \  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = select_words\n    lu.assertEquals(candidate('Mary had a little\
    \ lamb', 4), {'little'})\n    lu.assertEquals(candidate('Mary had a little lamb',\
    \ 3), {'Mary', 'lamb'})\n    lu.assertEquals(candidate('simple white space', 2),\
    \ {})\n    lu.assertEquals(candidate('Hello world', 4), {'world'})\n    lu.assertEquals(candidate('Uncle\
    \ sam', 3), {'Uncle'})\n    lu.assertEquals(candidate('', 4), {})\n    lu.assertEquals(candidate('a\
    \ b c d e f', 1), {'b', 'c', 'd', 'f'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe1_ej9ql.lua:28:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpe1_ej9ql.lua:28:\
    \ in function 'candidate'\n\t/tmp/tmpe1_ej9ql.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750528
