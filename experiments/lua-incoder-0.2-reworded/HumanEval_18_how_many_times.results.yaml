language: lua
name: HumanEval_18_how_many_times
results:
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #substring) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8hxlbu5g.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8hxlbu5g.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tif string.sub(string, pos, pos) == substring\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\tpos = pos + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6iea2m4.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpn6iea2m4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe78ilw5u.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpe78ilw5u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor _,\
    \ c in string.gmatch(string, \"%S+\") do\n\t\tif c == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9ru91e_.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpc9ru91e_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #substring) == substring then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rw8pywd.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6rw8pywd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, i, #substring) == substring then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpywj1mn.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdpywj1mn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gfind(string, \"^\" .. substring .. \"$\") do\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyw7u_dk.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpwyw7u_dk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xp8frvj.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6xp8frvj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then\n  \
    \  return 0\n  end\n  if substring == nil then\n    return 1\n  end\n  local count\
    \ = 0\n  for i = 1, #string do\n    if string.sub(i, #string) == substring then\n\
    \      count = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkbi2r2u.lua:28:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpbkbi2r2u.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- If the substring is not\
    \ found, return 0.\n\tif string.find(substring) == nil then\n\t\treturn 0\n\t\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4546mqg8.lua:23: ''end'' expected (to close ''function'' at
    line 8) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%S\") do\n        if c == substring then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxx85a0s.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpvxx85a0s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gfind(string, \"[^\" .. substring .. \"]\") do\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwpo8vo_f.lua:20:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpwpo8vo_f.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string + 1) ~= substring then\n\
    \            count = count + 1\n        else\n            count = count + #string.sub(i,\
    \ #string + 1)\n        end\n    end\n    return count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsjf307bj.lua:24:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmpsjf307bj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #substring) == substring then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rw8pywd.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6rw8pywd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%a\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydfkks4h.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpydfkks4h.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfynxvfj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpcfynxvfj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"[^\" .. substring .. \"]+\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdptwfjl3.lua:20:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpdptwfjl3.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%S\") do\n        if string.sub(c, 1, string.len(substring))==substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp43r_r0we.lua:23:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp43r_r0we.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%S\") do\n        if c == substring then\n    \
    \        count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplapwbb1c.lua:23:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmplapwbb1c.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor _,\
    \ c in string.gmatch(string, \"%S+\") do\n\t\tif c == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9ru91e_.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpc9ru91e_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tcount = count + 1\n\t\tpos = string.find(substring,\
    \ string, pos)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8v6uq5y.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpz8v6uq5y.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpz8v6uq5y.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gfind(string, \"^\" .. substring .. \"$\") do\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyw7u_dk.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpwyw7u_dk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfynxvfj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpcfynxvfj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe78ilw5u.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpe78ilw5u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfynxvfj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpcfynxvfj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tif string.sub(string, pos, pos) == substring\
    \ then\n\t\t\tcount = count + 1\n\t\tend\n\t\tpos = pos + 1\n\tend\n\treturn count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6iea2m4.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpn6iea2m4.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xp8frvj.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6xp8frvj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xp8frvj.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6xp8frvj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ c in string.gmatch(string, \"%a\") do\n        if string.find(substring, c)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnaamdi8w.lua:23:\
    \ expected: 4, actual: 9\nstack traceback:\n\t/tmp/tmpnaamdi8w.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string + 1) ~= substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7avj7cw3.lua:22:\
    \ expected: 4, actual: 7\nstack traceback:\n\t/tmp/tmp7avj7cw3.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%S\") do\n        if c == substring then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvxx85a0s.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpvxx85a0s.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tcount = count + 1\n\t\tpos = string.find(substring,\
    \ string, pos)\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz8v6uq5y.lua:11:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpz8v6uq5y.lua:11:\
    \ in function 'candidate'\n\t/tmp/tmpz8v6uq5y.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"[^\" .. substring .. \"]\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz0yk7g1t.lua:20:\
    \ expected: 4, actual: 3\nstack traceback:\n\t/tmp/tmpz0yk7g1t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\t-- If the substring is not\
    \ found, return 0\n\tif not string or not substring then return 0 end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdmr4bdgy.lua:21: ''end'' expected (to close ''function'' at
    line 8) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%S+\") do\n        if c == substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56z2lhzi.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp56z2lhzi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor _,\
    \ c in string.gmatch(string, \"%S+\") do\n\t\tif c == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9ru91e_.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpc9ru91e_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #string) == substring then\n      count = count + 1\n  \
    \  end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xp8frvj.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6xp8frvj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil or substring\
    \ == nil then\n    return 0\n  end\n  local count = 0\n  for i = 1, #string do\n\
    \    if string.sub(i, #substring) == substring then\n      count = count + 1\n\
    \    end\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rw8pywd.lua:25:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp6rw8pywd.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gfind(string, \"^\" .. substring .. \"$\") do\n        count\
    \ = count + 1\n    end\n    return count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwyw7u_dk.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpwyw7u_dk.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcfynxvfj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpcfynxvfj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tlocal pos\
    \ = 1\n\twhile pos <= #string do\n\t\tcount = count + string.find(substring, string,\
    \ pos) ~= nil\n\t\tpos = pos + 1\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0cnplktc.lua:12:\
    \ attempt to perform arithmetic on a nil value\nstack traceback:\n\t/tmp/tmp0cnplktc.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmp0cnplktc.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%a\") do\n        if c == substring then\n \
    \           count = count + 1\n        end\n    end\n    return count\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcbfx5zlx.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpcbfx5zlx.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, #string) == substring then\n\t\t\tcount\
    \ = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bd7levj.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp9bd7levj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  if string == nil then return\
    \ 0 end\n  if substring == nil then return 0 end\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdetieink.lua:24:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdetieink.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n\tlocal count = 0\n\tfor i =\
    \ 1, #string do\n\t\tif string.sub(i, i, #substring) == substring then\n\t\t\t\
    count = count + 1\n\t\tend\n\tend\n\treturn count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdpywj1mn.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpdpywj1mn.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gmatch(string, \"%S+\") do\n    if c == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe78ilw5u.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpe78ilw5u.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string - #substring) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsnjrlvb.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpqsnjrlvb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string - #substring) == substring\
    \ then\n            count = count + 1\n        end\n    end\n    return count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsnjrlvb.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpqsnjrlvb.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for _,\
    \ c in string.gfind(string, \"^\" .. substring .. \"$\") do\n    count = count\
    \ + 1\n  end\n  return count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = how_many_times\n    lu.assertEquals(candidate('', 'x'), 0)\n\
    \    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi8f5sbow.lua:20:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpi8f5sbow.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n  local count = 0\n  for i =\
    \ 1, #string do\n    if string.sub(i, #string) == substring then\n      count\
    \ = count + 1\n    end\n  end\n  return count\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = how_many_times\n    lu.assertEquals(candidate('',\
    \ 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx', 'x'), 4)\n    lu.assertEquals(candidate('cacacacac',\
    \ 'cac'), 4)\n    lu.assertEquals(candidate('john doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8vshzv46.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp8vshzv46.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ _, c in string.gmatch(string, \"%S+\") do\n        if c == substring then\n\
    \            count = count + 1\n        end\n    end\n    return count\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp56z2lhzi.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmp56z2lhzi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
- exit_code: 1
  program: "-- Find how many times a given substring can be found in the original\
    \ string. Count overlaping cases.\n-- >>> how_many_times('', 'a')\n-- 0\n-- >>>\
    \ how_many_times('aaa', 'a')\n-- 3\n-- >>> how_many_times('aaaa', 'aa')\n-- 3\n\
    local function how_many_times(string, substring)\n    local count = 0\n    for\
    \ i = 1, #string do\n        if string.sub(i, #string) == substring then\n   \
    \         count = count + 1\n        end\n    end\n    return count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = how_many_times\n\
    \    lu.assertEquals(candidate('', 'x'), 0)\n    lu.assertEquals(candidate('xyxyxyx',\
    \ 'x'), 4)\n    lu.assertEquals(candidate('cacacacac', 'cac'), 4)\n    lu.assertEquals(candidate('john\
    \ doe', 'john'), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeh5rz0em.lua:22:\
    \ expected: 4, actual: 0\nstack traceback:\n\t/tmp/tmpeh5rz0em.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750368
