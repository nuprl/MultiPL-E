name: HumanEval_90_next_smallest
language: lua
prompt: "-- You are given a table of integers.\n-- Write a function next_smallest()\
  \ that returns the 2nd smallest element of the table.\n-- Return None if there is\
  \ no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
  \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
  \ 1})\n-- None\nlocal function next_smallest(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
  \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest = nil\n  for i = 1, #lst do\n    if smallest == nil\
    \ then\n      smallest = lst[i]\n    elseif lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest ==\
    \ nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  if next(lst) == nil then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local index = 2\n  while index < #lst do\n    if lst[index] < smallest then\n\
    \      smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return\
    \ smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n    elseif v < smallest then\n      smallest = v\n    end\n\
    \  end\n  return smallest\nend", "  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  local i = 2\n  while i < #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local index = 2\n  while index < #lst do\n    if lst[index] < smallest then\n\
    \      smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if\
    \ smallest == nil then\n      smallest = v\n    elseif v < smallest then\n   \
    \   smallest = v\n    end\n  end\n  return smallest\nend", "  local smallest =\
    \ nil\n  for _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest\
    \ = v\n    elseif v < smallest then\n      smallest = v\n    end\n  end\n  return\
    \ smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local smallest\
    \ = lst[1]\n  local i = 2\n  while i < #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend",
  "  local smallest = nil\n  for i = 2, #lst do\n    if lst[i] < smallest then\n \
    \     smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest = v\n      smallest_idx = i\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest, smallest_idx\n  end\n  return nil, nil\nend",
  "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i\
    \ = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \  end\n  return smallest\nend", "  if next(lst) == nil then return nil end\n\
    \  local smallest = lst[1]\n  local rest = lst[2:]\n  for i = 2, #lst do\n   \
    \ if rest[i] < smallest then\n      smallest = rest[i]\n    end\n  end\n  return\
    \ smallest\nend", "  local smallest, smallest_idx = nil, 0\n  for i = 1, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n      smallest_idx\
    \ = i\n    end\n  end\n  if smallest == nil then\n    return nil\n  end\n  local\
    \ next_idx = smallest_idx + 1\n  if next_idx > #lst then\n    return nil\n  end\n\
    \  return lst[next_idx]\nend", "  if next(lst) == nil then return nil end\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n   \
    \   smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if #lst ==\
    \ 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local i = 1\n  while\
    \ i < #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \    i = i + 1\n  end\n  return smallest\nend", "  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  for _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n \
    \     smallest = v\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest = v\n      smallest_idx = idx\n\
    \    end\n  end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n\
    \  return nil\nend", "  if #lst == 0 then\n    return nil\n  end\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n  \
    \  return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst)\
    \ do\n    if smallest == nil or v < smallest then\n      smallest = v\n      smallest_idx\
    \ = i\n    end\n  end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n\
    \  end\n  return nil\nend", "  if next(lst) == nil then\n    return nil\n  end\n\
    \  local smallest = lst[1]\n  local rest = lst[2:]\n  for i = 2, #lst do\n   \
    \ if rest[i] < smallest then\n      smallest = rest[i]\n    end\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if\
    \ smallest == nil or v < smallest then\n      smallest = v\n    end\n  end\n \
    \ return smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n   \
    \   smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest = v\n      smallest_idx = idx\n\
    \    end\n  end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n\
    \  return nil\nend", "  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  local smallest_idx = nil\n  for i = 1, #lst do\n\
    \    if smallest_idx then\n      if lst[i] < smallest[smallest_idx] then\n   \
    \     smallest = lst\n        smallest_idx = i\n      end\n    else\n      smallest\
    \ = lst\n      smallest_idx = i\n    end\n  end\n  return smallest[smallest_idx]\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local i = 2\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local index =\
    \ 1\n  while index < #lst do\n    if lst[index] < smallest then\n      smallest\
    \ = lst[index]\n    end\n    index = index + 1\n  end\n  return smallest\nend",
  "  local smallest = nil\n  for i = 2, #lst do\n    if lst[i] < smallest then\n \
    \     smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if #lst ==\
    \ 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  local smallest = nil\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  local smallest_idx = nil\n  for idx, v in ipairs(lst)\
    \ do\n    if smallest == nil or v < smallest then\n      smallest = v\n      smallest_idx\
    \ = idx\n    end\n  end\n  return smallest_idx\nend", "  local smallest = nil\n\
    \  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest ==\
    \ nil or v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n\
    \  end\n  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx]\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local index = 1\n  while index < #lst do\n    if lst[index] < smallest then\n\
    \      smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return\
    \ smallest\nend", "  if lst == nil then\n    return nil\n  end\n  local smallest\
    \ = lst[1]\n  local rest = lst[2:]\n  for i = 2, #lst do\n    if rest[i] < smallest\
    \ then\n      smallest = rest[i]\n    end\n  end\n  return smallest\nend", " \
    \ local smallest, smallest_idx = nil, -1\n  for i, v in ipairs(lst) do\n    if\
    \ smallest == nil or v < smallest then\n      smallest, smallest_idx = v, i\n\
    \    end\n  end\n  if smallest ~= nil then\n    return smallest, smallest_idx\n\
    \  end\n  return nil\nend", "  local smallest = nil\n  local smallest_idx = nil\n\
    \  for i, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n \
    \     smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil\
    \ then\n    return lst[smallest_idx]\n  end\n  return nil\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest = v\n      smallest_idx = idx\n\
    \    end\n  end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for _, v\
    \ in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  if next(lst) == nil then return nil end\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  local smallest_idx = nil\n  for idx, v in ipairs(lst) do\n\
    \    if smallest == nil then\n      smallest = v\n      smallest_idx = idx\n \
    \   elseif v < smallest then\n      smallest = v\n      smallest_idx = idx\n \
    \   end\n  end\n  if smallest ~= nil then\n    return smallest_idx\n  end\n  return\
    \ nil\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest = v\n    else\n      if v < smallest then\n    \
    \    smallest = v\n      end\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n \
    \   if smallest == nil or v < smallest then\n      smallest = v\n      smallest_idx\
    \ = i\n    end\n  end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n\
    \  end\n  return nil\nend", "  local smallest = nil\n  local smallest_idx = nil\n\
    \  for idx, value in ipairs(lst) do\n    if smallest == nil or value < smallest\
    \ then\n      smallest = value\n      smallest_idx = idx\n    end\n  end\n  if\
    \ smallest_idx ~= nil then\n    return lst[smallest_idx]\n  else\n    return nil\n\
    \  end\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  local smallest_idx = nil\n  for i = 1, #lst do\n\
    \    if smallest == nil then\n      smallest = lst[i]\n      smallest_idx = i\n\
    \    else\n      if lst[i] < smallest then\n        smallest = lst[i]\n      \
    \  smallest_idx = i\n      end\n    end\n  end\n  if smallest == nil then\n  \
    \  return nil\n  end\n  return smallest\nend", "  if #lst == 0 then return nil\
    \ end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if\
    \ #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local i\
    \ = 2\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    i = i + 1\n  end\n  return smallest\nend", "  if lst[1] == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  local rest = lst[2:]\n  local\
    \ new_smallest = rest[1]\n  if new_smallest < smallest then\n    return new_smallest\n\
    \  end\n  return next_smallest(rest)\nend", "  local smallest = nil\n  local smallest_idx\
    \ = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or v < smallest\
    \ then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return lst[smallest_idx]\n  end\nend", "  local smallest =\
    \ nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest = v\n      smallest_idx = i\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest, smallest_idx\n  end\n  return nil, nil\nend",
  "  local smallest, smallest_idx = nil, 1\n  for i = 1, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx +\
    \ 1]\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local i = 2\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend", "  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  for i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n    \
    \  smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if lst[1] ==\
    \ nil then\n    return nil\n  end\n  local smallest = lst[1]\n  local rest = lst[2:]\n\
    \  for i = 2, #lst do\n    if rest[i] < smallest then\n      smallest = rest[i]\n\
    \    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for _, v\
    \ in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend", "  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local i = 1\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then return nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  for _, value in ipairs(lst) do\n\
    \    if smallest == nil or value < smallest then\n      smallest = value\n   \
    \ end\n  end\n  return smallest\nend", "  if lst[1] == nil then return nil end\n\
    \  local smallest = lst[1]\n  lst[1] = lst[2]\n  lst[2] = smallest\n  return smallest\n\
    end", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest ==\
    \ nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst do\n\
    \    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n   \
    \ index = index + 1\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest ==\
    \ nil then\n      smallest = v\n      smallest_idx = i\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest, smallest_idx\n  end\n  return nil\nend", " \
    \ local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\nend",
  "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\nend",
  "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n    elseif v < smallest then\n      smallest = v\n    end\n\
    \  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n\
    \  local smallest = lst[1]\n  local i = 1\n  while i < #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    i = i + 1\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  local smallest_idx = nil\n  for idx,\
    \ value in ipairs(lst) do\n    if smallest == nil or value < smallest then\n \
    \     smallest = value\n      smallest_idx = idx\n    end\n  end\n  if smallest\
    \ == nil then\n    return nil\n  end\n  return lst[smallest_idx]\nend", "  local\
    \ smallest = nil\n  for i = 1, #lst do\n    if smallest == nil or lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if\
    \ #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local index\
    \ = 2\n  while index < #lst do\n    if lst[index] < smallest then\n      smallest\
    \ = lst[index]\n    end\n    index = index + 1\n  end\n  return smallest\nend",
  "  local smallest = nil\n  local smallest_idx = nil\n  for idx, v in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest = v\n      smallest_idx = idx\n\
    \    elseif v < smallest then\n      smallest = v\n      smallest_idx = idx\n\
    \    end\n  end\n  if smallest ~= nil then\n    return smallest_idx\n  end\n \
    \ return nil\nend", "  local smallest = nil\n  local smallest_idx = nil\n  for\
    \ idx, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n    \
    \  smallest = v\n      smallest_idx = idx\n    end\n  end\n  return smallest_idx\n\
    end", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest ==\
    \ nil then\n      smallest = v\n    elseif v < smallest then\n      smallest =\
    \ v\n    end\n  end\n  return smallest\nend", "  if #lst == 0 then return nil\
    \ end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n    elseif v < smallest then\n      smallest = v\n    end\n\
    \  end\n  return smallest\nend", "  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  local smallest = nil\n  for i = 1, #lst do\n    if\
    \ smallest == nil or lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \  end\n  return smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest = v\n    elseif v < smallest\
    \ then\n      smallest = v\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for i = 1, #lst do\n    if smallest == nil or lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or v <\
    \ smallest then\n      smallest = v\n    end\n  end\n  return smallest\nend",
  "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local\
    \ i = 2\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend", "  if #lst ==\
    \ 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local index = 1\n\
    \  while index < #lst do\n    if lst[index] < smallest then\n      smallest =\
    \ lst[index]\n    end\n    index = index + 1\n  end\n  return smallest\nend",
  "  if #lst == 0 then return nil end\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  local smallest = nil\n  for i = 1, #lst do\n    if\
    \ smallest == nil then\n      smallest = lst[i]\n    elseif lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if\
    \ #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local i\
    \ = 2\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    i = i + 1\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  local smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest ==\
    \ nil then\n      smallest = v\n      smallest_idx = idx\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = idx\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest_idx\n  end\n  return nil\nend", "  if next(lst)\
    \ == nil then return nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ smallest\nend", "  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or v <\
    \ smallest then\n      smallest = v\n    end\n  end\n  return smallest\nend",
  "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local\
    \ index = 2\n  while index < #lst do\n    if lst[index] < smallest then\n    \
    \  smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest ==\
    \ nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest ==\
    \ nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local index = 2\n  while index < #lst do\n    if lst[index] < smallest then\n\
    \      smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  local smallest_idx = nil\n  for i,\
    \ v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n      smallest_idx = i\n    end\n  end\n  return smallest_idx\nend", " \
    \ if #lst == 0 then return nil end\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  if #lst == 0 then return nil end\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  for _, value in ipairs(lst) do\n    if smallest == nil or value < smallest\
    \ then\n      smallest = value\n    end\n  end\n  return smallest\nend", "  if\
    \ lst:len() == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local\
    \ rest = lst:sub(2)\n  for i = 2, lst:len() do\n    if rest[i] < smallest then\n\
    \      smallest = rest[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or v < smallest\
    \ then\n      smallest = v\n    end\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  if #lst == 0 then return nil end\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest ==\
    \ nil then\n      smallest = v\n      smallest_idx = i\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest_idx\n  end\nend", "  local smallest = nil\n\
    \  for _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n \
    \     smallest = v\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  for _, value in ipairs(lst) do\n    if smallest == nil or value < smallest\
    \ then\n      smallest = value\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n    elseif v < smallest then\n      smallest = v\n    end\n\
    \  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for _, value\
    \ in ipairs(lst) do\n    if smallest == nil then\n      smallest = value\n   \
    \ elseif value < smallest then\n      smallest = value\n    end\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  local smallest_idx = nil\n  for i,\
    \ v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil then\n   \
    \ return lst[smallest_idx]\n  end\nend", "  local smallest = nil\n  for _, v in\
    \ ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n    elseif\
    \ v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\nend",
  "  local smallest = nil\n  for i = 1, #lst do\n    if smallest == nil or lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  if lst[1] == nil then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local i = 2\n  while i < #lst and lst[i] < smallest do\n    smallest = lst[i]\n\
    \    i = i + 1\n  end\n  if i == #lst then\n    return smallest\n  end\n  return\
    \ nil\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  for i = 1, #lst do\n    if smallest == nil then\n\
    \      smallest = lst[i]\n    else\n      if lst[i] < smallest then\n        smallest\
    \ = lst[i]\n      end\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n      smallest\
    \ = v\n    elseif v < smallest then\n      smallest = v\n    end\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if\
    \ smallest == nil or v < smallest then\n      smallest = v\n    end\n  end\n \
    \ return smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n\
    \    if smallest == nil or v < smallest then\n      smallest = v\n    end\n  end\n\
    \  return smallest\nend", "  if lst == nil then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n   \
    \   smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if lst[1] ==\
    \ nil then return nil end\n  local smallest = lst[1]\n  local i = 2\n  while i\
    \ < #lst and lst[i] < smallest do\n    smallest = lst[i]\n    i = i + 1\n  end\n\
    \  if i == #lst then return nil end\n  return smallest\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest = v\n      smallest_idx = i\n  \
    \  end\n  end\n  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx]\n\
    end", "  local smallest = nil\n  local smallest_idx = nil\n  for idx, value in\
    \ ipairs(lst) do\n    if smallest == nil then\n      smallest = value\n      smallest_idx\
    \ = idx\n    elseif value < smallest then\n      smallest = value\n      smallest_idx\
    \ = idx\n    end\n  end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n\
    \  end\n  return nil\nend", "  if #lst == 0 then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  local i = 1\n  while i < #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local index = 2\n  while index < #lst do\n    if lst[index] < smallest then\n\
    \      smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  local smallest_idx = nil\n  for i,\
    \ v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n      smallest_idx = i\n    end\n  end\n  if smallest == nil then\n   \
    \ return nil\n  end\n  return lst[smallest_idx + 1]\nend", "  local smallest =\
    \ nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n\
    \      smallest = v\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest = v\n      smallest_idx = idx\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = idx\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest, smallest_idx\n  end\n  return nil, nil\nend",
  "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local\
    \ index = 2\n  while index <= #lst do\n    local current = lst[index]\n    if\
    \ current < smallest then\n      smallest = current\n    end\n    index = index\
    \ + 1\n  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst do\n\
    \    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n   \
    \ index = index + 1\n  end\n  return smallest\nend", "  if #lst == 0 then\n  \
    \  return nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i =\
    \ i + 1\n  end\n  return smallest\nend", "  if lst == nil then return nil end\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  for i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n\
    \    else\n      if lst[i] < smallest then\n        smallest = lst[i]\n      end\n\
    \    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for _, v\
    \ in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, value in ipairs(lst) do\n    if smallest == nil\
    \ or value < smallest then\n      smallest = value\n      smallest_idx = idx\n\
    \    end\n  end\n  return smallest_idx\nend", "  local smallest = nil\n  for i\
    \ = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \  end\n  return smallest\nend", "  local smallest, smallest_idx = nil, 0\n  for\
    \ i, v in ipairs(lst) do\n    if smallest == nil then\n      smallest, smallest_idx\
    \ = v, i\n    elseif v < smallest then\n      smallest, smallest_idx = v, i\n\
    \    end\n  end\n  return smallest_idx\nend", "  local smallest = nil\n  for _,\
    \ v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n    elseif\
    \ v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\nend",
  "  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if lst:len()\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, lst:len()\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  if lst[1] == nil then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  local index = 2\n  while index < #lst and lst[index] <\
    \ smallest do\n    smallest = lst[index]\n    index = index + 1\n  end\n  if smallest\
    \ == lst[index] then\n    return nil\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local index =\
    \ 2\n  while index < #lst do\n    if lst[index] < smallest then\n      smallest\
    \ = lst[index]\n    end\n    index = index + 1\n  end\n  return smallest\nend",
  "  local smallest = nil\n  local smallest_idx = nil\n  for i = 1, #lst do\n    if\
    \ smallest == nil or lst[i] < smallest then\n      smallest = lst[i]\n      smallest_idx\
    \ = i\n    end\n  end\n  return smallest_idx\nend", "  local smallest = nil\n\
    \  local smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest ==\
    \ nil or v < smallest then\n      smallest = v\n      smallest_idx = idx\n   \
    \ end\n  end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n\
    \  return nil\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n \
    \   if smallest == nil or v < smallest then\n      smallest = v\n    end\n  end\n\
    \  return smallest\nend", "  local smallest = nil\n  for i = 1, #lst do\n    if\
    \ smallest == nil then\n      smallest = lst[i]\n    else\n      if lst[i] < smallest\
    \ then\n        smallest = lst[i]\n      end\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if\
    \ #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \  end\n  return smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst)\
    \ do\n    if smallest == nil or v < smallest then\n      smallest = v\n    end\n\
    \  end\n  return smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest = v\n    elseif v < smallest\
    \ then\n      smallest = v\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for i = 1, #lst do\n    if smallest == nil or lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest, smallest_idx = nil, 1\n  for i, v in ipairs(lst) do\n    if smallest\
    \ == nil or v < smallest then\n      smallest, smallest_idx = v, i\n    end\n\
    \  end\n  return smallest_idx\nend", "  if #lst == 0 then\n    return nil\n  end\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  if next(lst)\
    \ == nil then\n    return nil\n  end\n  local smallest = lst[1]\n  for i = 2,\
    \ #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n \
    \ end\n  return smallest\nend", "  local smallest = nil\n  for _, value in ipairs(lst)\
    \ do\n    if smallest == nil or value < smallest then\n      smallest = value\n\
    \    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for i = 1,\
    \ #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n \
    \ local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil\
    \ or v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n\
    \  end\n  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx\
    \ + 1]\nend", "  if lst == nil then return nil end\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for i = 1,\
    \ #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    else\n  \
    \    if lst[i] < smallest then\n        smallest = lst[i]\n      end\n    end\n\
    \  end\n  return smallest\nend", "  local smallest = nil\n  local smallest_idx\
    \ = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil then\n      smallest\
    \ = v\n      smallest_idx = idx\n    elseif v < smallest then\n      smallest\
    \ = v\n      smallest_idx = idx\n    end\n  end\n  if smallest ~= nil then\n \
    \   return smallest_idx, smallest\n  end\nend", "  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst do\n\
    \    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n   \
    \ index = index + 1\n  end\n  return smallest\nend", "  if #lst == 0 then\n  \
    \  return nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst\
    \ do\n    local candidate = lst[i]\n    if candidate < smallest then\n      smallest\
    \ = candidate\n    end\n    i = i + 1\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n   \
    \   smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest = v\n      smallest_idx = i\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest_idx\n  else\n    return nil\n  end\nend", " \
    \ if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local\
    \ i = 1\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or v < smallest\
    \ then\n      smallest = v\n    end\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local index =\
    \ 2\n  while index < #lst do\n    if lst[index] < smallest then\n      smallest\
    \ = lst[index]\n    end\n    index = index + 1\n  end\n  return smallest\nend",
  "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\nend",
  "  local smallest = nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n\
    \    if smallest == nil then\n      smallest = v\n      smallest_idx = i\n   \
    \ elseif v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n\
    \  end\n  if smallest == nil then\n    return nil\n  end\n  local next_idx = smallest_idx\
    \ + 1\n  if next_idx > #lst then\n    return nil\n  end\n  return lst[next_idx]\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local i = 2\n  while i < #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  local rest =\
    \ lst[2:]\n  for i = 2, #lst do\n    if rest[i] < smallest then\n      smallest\
    \ = rest[i]\n    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n \
    \   return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  if lst == nil then return nil end\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil or v < smallest\
    \ then\n      smallest = v\n    end\n  end\n  return smallest\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n\
    \    if smallest == nil or v < smallest then\n      smallest = v\n    end\n  end\n\
    \  return smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  local i = 1\n  while i < #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  local smallest = nil\n  for _, v\
    \ in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend", "  local smallest, second = lst[1],\
    \ lst[2]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest,\
    \ second = lst[i], smallest\n    end\n  end\n  return second\nend", "  if #lst\
    \ == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  local smallest = nil\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
