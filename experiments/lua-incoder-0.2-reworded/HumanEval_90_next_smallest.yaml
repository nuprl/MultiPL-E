name: HumanEval_90_next_smallest
language: lua
prompt: "-- You are given a table of integers.\n-- Write a function next_smallest()\
  \ that returns the 2nd smallest element of the table.\n-- Return None if there is\
  \ no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
  \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
  \ 1})\n-- None\nlocal function next_smallest(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
  \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
  \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local smallest = nil\n  for i = 1, #lst do\n    if smallest == nil\
    \ then\n      smallest = lst[i]\n    elseif lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest ==\
    \ nil or v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end", "  if next(lst) == nil then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local index = 2\n  while index < #lst do\n    if lst[index] < smallest then\n\
    \      smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return\
    \ smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest = nil\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend", "  if #lst == 0 then\n    return nil\n\
    \  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local\
    \ smallest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n    elseif v < smallest then\n      smallest = v\n    end\n\
    \  end\n  return smallest\nend", "  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local\
    \ smallest = lst[1]\n  local i = 2\n  while i < #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\n\
    end", "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n\
    \  local index = 2\n  while index < #lst do\n    if lst[index] < smallest then\n\
    \      smallest = lst[index]\n    end\n    index = index + 1\n  end\n  return\
    \ smallest\nend", "  local smallest = nil\n  for _, v in ipairs(lst) do\n    if\
    \ smallest == nil then\n      smallest = v\n    elseif v < smallest then\n   \
    \   smallest = v\n    end\n  end\n  return smallest\nend", "  local smallest =\
    \ nil\n  for _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest\
    \ = v\n    elseif v < smallest then\n      smallest = v\n    end\n  end\n  return\
    \ smallest\nend", "  if #lst == 0 then\n    return nil\n  end\n  local smallest\
    \ = lst[1]\n  local i = 2\n  while i < #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    i = i + 1\n  end\n  return smallest\nend",
  "  local smallest = nil\n  for i = 2, #lst do\n    if lst[i] < smallest then\n \
    \     smallest = lst[i]\n    end\n  end\n  return smallest\nend", "  local smallest\
    \ = nil\n  local smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest = v\n      smallest_idx = i\n    elseif v < smallest\
    \ then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest\
    \ ~= nil then\n    return smallest, smallest_idx\n  end\n  return nil, nil\nend",
  "  if #lst == 0 then\n    return nil\n  end\n  local smallest = lst[1]\n  for i\
    \ = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \  end\n  return smallest\nend", "  if next(lst) == nil then return nil end\n\
    \  local smallest = lst[1]\n  local rest = lst[2:]\n  for i = 2, #lst do\n   \
    \ if rest[i] < smallest then\n      smallest = rest[i]\n    end\n  end\n  return\
    \ smallest\nend", "  local smallest, smallest_idx = nil, 0\n  for i = 1, #lst\
    \ do\n    if lst[i] < smallest then\n      smallest = lst[i]\n      smallest_idx\
    \ = i\n    end\n  end\n  if smallest == nil then\n    return nil\n  end\n  local\
    \ next_idx = smallest_idx + 1\n  if next_idx > #lst then\n    return nil\n  end\n\
    \  return lst[next_idx]\nend", "  if next(lst) == nil then return nil end\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n   \
    \   smallest = lst[i]\n    end\n  end\n  return smallest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
