language: lua
name: HumanEval_122_add_elements
results:
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\n  -- If k is greater than or equal to length of arr, then return\
    \ 0\n  if k >= #arr then\n    return 0\n  end\n  -- If k is less than or equal\
    \ to 1, then return 0\n  if k < 1 then\n    return 0\n  end\n  -- Initialize sum\
    \ to 0\n  local sum = 0\n  -- Initialize a variable to store the first k elements\
    \ of arr\n  local first_k = arr[1]\n  -- Initialize a variable to store the current\
    \ element of arr\n  local current_element = arr[1]\n  -- Initialize a variable\
    \ to store the current element of arr\n  local current_element_digit = 0\n  --\
    \ Initialize a variable to store the current element of arr\n  local current_element_digit_sum\
    \ = 0\n  -- Initialize a variable to store the current element of arr\n  local\
    \ current_element_digit_product = 1\n  -- Initialize a variable to store the current\
    \ element of arr\n  local current_element_digit_sum_square = 0\n  -- Initialize\
    \ a variable to store the current element of arr\n  local current_element_digit_product\
    \ = 1\n  -- Initialize a variable to store the current element of arr\n  local\
    \ current_element_digit_sum_square = 0\n  -- Initialize a variable to store the\
    \ current element of arr\n  local current_element_digit_product = 1\n  -- Initialize\
    \ a variable to store the current element of arr\n  local current_element_digit_sum_square\
    \ = 0\n  -- Initialize a variable to store the current element of arr\n  local\
    \ current_element_digit_product = 1\n  -- Initialize a variable to store the current\
    \ element of arr\n  local current_element_digit_sum_square = 0\n  -- Initialize\
    \ a variable to store the current element of arr\n  local current_element_digit_product\
    \ = 1\n  -- Initialize a variable to store the current element of arr\n  local\
    \ current_element_digit_sum_square = 0\n  -- Initialize a variable to store the\
    \ current element of arr\n  local current_element_digit_product = 1\n  -- Initialize\
    \ a variable to store the current element of arr\n  local current_element_digit_sum_square\
    \ = 0\n  -- Initialize a variable to store the current element of arr\n  local\
    \ current_element_digit_product = 1\n  -- Initialize a variable to store the current\
    \ element of arr\n  local current_element_digit_sum_square = 0\n  -- Initialize\
    \ a variable to store the current element of arr\n  local current_element_digit_product\
    \ = 1\n  -- Initialize a variable to store the current element of arr\n  local\
    \ current_element_digit_sum_square = 0\n  -- Initialize a variable to store the\
    \ current element of arr\n  local current_element_digit_product = 1\n  -- Initialize\
    \ a variable to store the current element \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpep6h1xuk.lua:78: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\n  -- Find the first element with two digits from the first k\
    \ elements\n  local first_two_digits = arr[1]\n  for i = 2, k do\n    if arr[i]\
    \ > first_two_digits then\n      first_two_digits = arr[i]\n    end\n  end\n \
    \ -- Add the first k elements with at most two digits from the first k elements\n\
    \  return first_two_digits + add_elements(arr[k+1], k-1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2yyfnlw2.lua:15:\
    \ attempt to index local 'arr' (a number value)\nstack traceback:\n\t/tmp/tmp2yyfnlw2.lua:15:\
    \ in function 'add_elements'\n\t/tmp/tmp2yyfnlw2.lua:22: in function 'candidate'\n\
    \t/tmp/tmp2yyfnlw2.lua:28: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\n  -- If k is greater than the length of the array, return the\
    \ sum of the first k elements\n  if k > #arr then\n    return add_elements(arr,\
    \ 1, k - 1)\n  end\n  -- If k is less than or equal to the length of the array,\
    \ return the sum of the first k elements\n  if k <= #arr then\n    return add_elements(arr,\
    \ k - 1) + add_elements(arr, k - 1, k)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpofrfhwvu.lua:27:\
    \ expected: -4, actual: 4\nstack traceback:\n\t/tmp/tmpofrfhwvu.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\n  -- If k is greater than or equal to length of arr\n  if k >\
    \ #arr then\n    return 0\n  end\n  -- If k is less than or equal to 1, then return\
    \ 0\n  if k < 1 then\n    return 0\n  end\n  -- Initialize sum\n  local sum =\
    \ 0\n  -- Initialize a variable for storing current digit\n  local digit = 0\n\
    \  -- Iterate over all elements from 1 to k\n  for i = 1, k do\n    -- Get the\
    \ current digit\n    digit = arr[i]\n    -- Add the current digit to sum\n   \
    \ sum = sum + digit\n    -- If the current digit is the last digit, then break\n\
    \    if digit == arr[i] then\n      break\n    end\n  end\n  return sum\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijooqut7.lua:43:\
    \ expected: -4, actual: 1\nstack traceback:\n\t/tmp/tmpijooqut7.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\n  -- Add elements with at most two digits from the first k elements\n\
    \  local sum = 0\n  for i = 1, k do\n    sum = sum + arr[i]\n  end\n  return sum\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = add_elements\n\
    \    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n\
    \    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21,\
    \ 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa4vu75pr.lua:26:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpa4vu75pr.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  -- Base case\n  if k == 1 then\n    return\
    \ arr[1]\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = add_elements\n    lu.assertEquals(candidate({1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99}, 3), -4)\n    lu.assertEquals(candidate({111, 121, 3, 4000, 5, 6}, 2), 0)\n\
    \    lu.assertEquals(candidate({11, 21, 3, 90, 5, 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1),\
    \ 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp50h5t6tx.lua:25: ''end'' expected (to close ''function'' at
    line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n    local sum = 0\n    for i = 1, k do\n\
    \        sum = sum + arr[i]\n    end\n    return sum\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpof4n18tu.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpof4n18tu.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
- exit_code: 1
  program: "-- Given a non-empty table of integers arr and an integer k, return\n\
    -- the sum of the elements with at most two digits from the first k elements of\
    \ arr.\n-- Example:\n-- >>> add_elements({111, 21, 3, 4000, 5, 6, 7, 8, 9}, 4)\n\
    -- 24\n-- Constraints:\n-- 1. 1 <= len(arr) <= 100\n-- 2. 1 <= k <= len(arr)\n\
    local function add_elements(arr, k)\n  local sum = 0\n  for i = 1, k do\n    sum\
    \ = sum + arr[i]\n  end\n  return sum\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = add_elements\n    lu.assertEquals(candidate({1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99}, 3), -4)\n    lu.assertEquals(candidate({111,\
    \ 121, 3, 4000, 5, 6}, 2), 0)\n    lu.assertEquals(candidate({11, 21, 3, 90, 5,\
    \ 6, 7, 8, 9}, 4), 125)\n    lu.assertEquals(candidate({111, 21, 3, 4000, 5, 6,\
    \ 7, 8, 9}, 4), 24)\n    lu.assertEquals(candidate({1}, 1), 1)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp7yptj9m.lua:21:\
    \ expected: 0, actual: 232\nstack traceback:\n\t/tmp/tmpp7yptj9m.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750280
