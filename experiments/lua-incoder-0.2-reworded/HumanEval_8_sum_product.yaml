name: HumanEval_8_sum_product
language: lua
prompt: "-- For a given table of integers, return a table consisting of a sum and\
  \ a product of all the integers in a table.\n-- Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n-- >>> sum_product({})\n-- {0, 1}\n-- >>>\
  \ sum_product({1, 2, 3, 4})\n-- {10, 24}\nlocal function sum_product(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sum_product\n\
  \    lu.assertEquals(candidate({}), {0, 1})\n    lu.assertEquals(candidate({1, 1,\
  \ 1}), {3, 1})\n    lu.assertEquals(candidate({100, 0}), {100, 0})\n    lu.assertEquals(candidate({3,\
  \ 5, 7}), {15, 105})\n    lu.assertEquals(candidate({10}), {10, 10})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum, product = 1, 1\n  for _, value in pairs(numbers) do\n\
    \    sum = sum + value\n    product = product * value\n  end\n  return sum, product\n\
    end", "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum, product = numbers.sum, numbers.product\n  if sum\
    \ == nil then\n    sum = 0\n  end\n  if product == nil then\n    product = 1\n\
    \  end\n  for _, value in pairs(numbers) do\n    sum = sum + value\n    product\
    \ = product * value\n  end\n  return sum, product\nend", "  local sum = 0\n  local\
    \ product = 1\n  for _, v in pairs(numbers) do\n    sum = sum + v\n    product\
    \ = product * v\n  end\n  return sum, product\nend", "    local sum = 0\n    local\
    \ product = 1\n    for _, value in pairs(numbers) do\n        sum = sum + value\n\
    \        product = product * value\n    end\n    return sum, product\nend", " \
    \ local sum, product = 1, 1\n  for _, value in pairs(numbers) do\n    sum = sum\
    \ + value\n    product = product * value\n  end\n  return sum, product\nend",
  "  local sum = 0\n  local product = 1\n  for _, v in pairs(numbers) do\n    sum\
    \ = sum + v\n    product = product * v\n  end\n  return sum, product\nend", " \
    \ local sum, product = 1, 1\n  for _, value in pairs(numbers) do\n    sum = sum\
    \ + value\n    product = product * value\n  end\n  return sum, product\nend",
  "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers) do\n   \
    \ sum = sum + value\n    product = product * value\n  end\n  return sum, product\n\
    end", "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum, product = 1, 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return {sum,\
    \ product}\nend", "  local sum, product = 1, 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum, product = 1, 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  local sum = 0\n  local product = 1\n  for _, value in pairs(numbers)\
    \ do\n    sum = sum + value\n    product = product * value\n  end\n  return sum,\
    \ product\nend", "  if #numbers == 0 then\n    return {0, 1}\n  end", "  local\
    \ sum = 0\n  local product = 1\n  for _, value in pairs(numbers) do\n    sum =\
    \ sum + value\n    product = product * value\n  end\n  return sum, product\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
