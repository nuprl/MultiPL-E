name: HumanEval_11_string_xor
language: lua
prompt: "-- Input are two strings a and b consisting only of 1s and 0s.\n-- Perform\
  \ binary XOR on these inputs and return result also as a string.\n-- >>> string_xor('010',\
  \ '110')\n-- '100'\nlocal function string_xor(a, b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = string_xor\n\
  \    lu.assertEquals(candidate('111000', '101010'), '010010')\n    lu.assertEquals(candidate('1',\
  \ '1'), '0')\n    lu.assertEquals(candidate('0101', '0000'), '0101')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = ''\n    for i = 1, #a do\n        local c = a[i]\n\
    \        result = (result and c) or b ^ c\n    end\n    return result\nend", " \
    \   local result = \"\"\n    for i = 1, #a do\n        local c = a[i] ^ b[i]\n\
    \        if c > 1 then\n            c = tostring(c):byte(1, -1)\n        end\n\
    \        result = result .. c\n    end\n    return result\nend", "  local result\
    \ = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n \
    \     result = result .. \"1\"\n    else\n      result = result .. \"0\"\n   \
    \ end\n  end\n  return result\nend", "  local result = ''\n  for i = 1, #a do\n\
    \    local c = string.byte(a, i)\n    local d = string.byte(b, i)\n    local carry\
    \ = c ^ d\n    local newcarry = carry ~= 0 and carry or 1\n    local newchar =\
    \ string.char(newcarry)\n    result = result .. newchar\n  end\n  return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n\
    \    if c > 0 then\n      result = result .. \"1\"\n    else\n      result = result\
    \ .. \"0\"\n    end\n  end\n  return result\nend", "  local binA = '0000000000000000000000000000000000000000000000000000000000000001'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000000000010'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000000000011'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000000000100'\n\
    \  local binE = '00000000000000000000000000000000000000000000000000000000000000101'\n\
    \  local binF = '00000000000000000000000000000000000000000000000000000000000000110'\n\
    \  local binG = '00000000000000000000000000000000000000000000000000000000000001000'\n\
    \  local binH = '00000000000000000000000000000000000000000000000000000000000001010'\n\
    \  local binI = '00000000000000000000000000000000000000000000000000000000000001101'\n\
    \  local binJ = '00000000000000000000000000000000000000000000000000000000000001110'\n\
    \  local binK = '00000000000000000000000000000000000000000000000000000000000010010'\n\
    \  local binL = '00000000000000000000000000000000000000000000000000000000000010011'\n\
    \  local binM = '00000000000000000000000000000000000000000000000000000000000010100'\n\
    \  local binN = '00000000000000000000000000000000000000000000000000000000000010110'\n\
    \  local binO = '00000000000000000000000000000000000000000000000000000000000010111'\n\
    \  local binP = '00000000000000000000000000000000000000000000000000000000000011100'\n\
    \  local binQ = '00000000000000000000000000000000000000000000000000000000000011101'\n\
    \  local binR = '00000000000000000000000000000000000000000000000000000000000011111'\n\
    \  local binS = '00000000000000000000000000000000000000000000000000000000000100100'\n\
    \  local binT = '00000000000000000000000000000000000000000000000000000000000100101'\n\
    \  local binU = '00000000000000000000000000000000000000000000000000000000000100110'\n\
    \  local binV = '00000000000000000000000000000000000000000000000000000000000100111'\n\
    \  local binW = '00000000000000000000000000000000000000000000000000000000000101000'\n\
    \  local binX = '00000000000000000000000000000000000000000000000000000000000101001'\n\
    \  local binY = '00000000000000000000000000000000000000000000000000000000000101010'\n\
    \  local binZ = '00000000000000000000000000000000000000000000000000000000000101011'\n\
    \  local bin0 = '00000000000000000000000000000000000000000000000000000000000101100'\n\
    \  local bin1 = '00000000000000000000000000000000000000000000000000000000000101101'\n\
    \  local bin2 = '00000000000000000000000000000000000000000000000000000000000101110'\n\
    \  local bin3 = '00000000000000000000000000000000000000000000000000000000000101111'\n\
    \  local bin4 = '00000000000000000000000000000000000000000000000000000000001001000'\n\
    \  local bin5 = '00000000000000000000000000000000000000000000000000000000001001001'\n\
    \  local bin6 = '00000000000000000000000000000000000000000000000000000000001001010'\n\
    \  local bin7 = '00000000000000000000000000000000000000000000000000000000001001011'\n\
    \  local bin8 = '00000000000000000000000000000000000000000000000000000000001010010'\n\
    \  local bin9 = '00000000000000000000000000000000000000000000000000000000001010011'\n\
    \  local binA = '00000000000000000000000000000000000000000000000000000000001010100'\n\
    \  local binB = '00000000000000000000000000000000000000000000000000000000001010101'\n\
    \  local binC = '00000000000000000000000000000000000000000000000000000000001010111'\n\
    \  local binD = '00000000000000000000000000000000000000000000000000000000001011000'\n",
  "  local result = \"\"\n  for i = 1, #a do\n    local c = string.byte(a) ^ string.byte(b)\n\
    \    if c > 0 then\n      result = result .. string.char(c)\n    end\n    b =\
    \ string.sub(b, 2)\n  end\n  return result\nend", "    local ret = \"\"\n    for\
    \ i = 1, #a do\n        ret = ret .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \    end\n    return ret\nend", "    local result = ''\n    for i = 1, #a do\n\
    \        local c = a[i] ^ b[i]\n        if c > 0 then\n            c = string.format('%x',\
    \ c)\n        end\n        result = result .. c\n    end\n    return result\n\
    end", "  local result = \"\"\n  for i = 1, #a do\n    local c = tostring(a[i])\n\
    \    local d = tostring(b[i])\n    local carry = c\n    if d == \"1\" then\n \
    \     carry = 1\n    elseif d == \"0\" then\n      carry = 0\n    end\n    local\
    \ new_carry = carry ^ d\n    carry = new_carry / 2\n    result = result .. tostring(carry)\n\
    \  end\n  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n  \
    \  local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n\
    \    else\n      result = result .. \"0\"\n    end\n  end\n  return result\nend",
  "  local c = ''\n  for i = 1, #a do\n    c = c .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \  end\n  return c\nend", "  local x = 0\n  local y = 0\n  for i = 1, #a do\n\
    \    x = x + (a[i] == '1' and b[i] == '1' and 1 or 0)\n    y = y + (a[i] == '0'\
    \ and b[i] == '0' and 1 or 0)\n  end\n  return string.format('%x', x)\nend", " \
    \ local result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  return result\nend", "  local result = \"\"\n  for\
    \ i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 0 then\n      result = result\
    \ .. \"1\"\n    else\n      result = result .. \"0\"\n    end\n  end\n  return\
    \ result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local c = a[i]\
    \ ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n      result\
    \ = result .. \"0\"\n    end\n  end\n  return result\nend", "    local ret = ''\n\
    \    for i = 1, #a do\n        ret = ret .. tostring(a:byte(i)) ^ tostring(b:byte(i))\n\
    \    end\n    return ret\nend", "  local result = \"\"\n  for i = 1, #a do\n \
    \   local c = tostring(a[i]) .. tostring(b[i])\n    if c ~= '0' and c ~= '1' then\n\
    \      result = c\n      break\n    end\n  end\n  return result\nend", "  local\
    \ result = \"\"\n  for i = 1, #a do\n    local c = a[i] ^ b[i]\n    if c > 1 then\
    \ c = c else c = c end\n    result = result .. string.format(\"%x\", c)\n  end\n\
    \  return result\nend", "  local result = \"\"\n  for i = 1, #a do\n    local\
    \ c = a[i] ^ b[i]\n    if c > 0 then\n      result = result .. \"1\"\n    else\n\
    \      result = result .. \"0\"\n    end\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
