name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factor = 1\n    while n > 1 do\n        if n % factor ==\
    \ 0 then\n            n = n / factor\n        else\n            factor = factor\
    \ + 1\n        end\n    end\n    return factor\nend", "  -- Base case: n is 1\
    \ or even.\n  if n <= 1 then return n end", "  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The square root of n might be slightly\
    \ above or below sqrt(n).\n  -- Thus we conclude that n must be larger than or\
    \ equal to sqrt(n).\n  -- The largest prime factor is at most sqrt(n).\n  -- The\
    \ smallest prime factor is at least sqrt(n).\n  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n", " \
    \ -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ prime factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor plus one\n  local m = math.floor(math.sqrt(n))\n\
    \  while m % 2 == 0 do\n    m = m / 2\n  end\n  return m + 1\nend", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest factor\
    \ of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest\
    \ factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is prime, return its\
    \ largest factor of 5\n  if prime_table[n] then return 5 end\n  -- Otherwise,\
    \ loop through all prime factors of n and return the largest\n  for i = 2, n do\n\
    \    if prime_table[i] then\n      if largest_prime_factor(i) > largest_prime_factor(n)\
    \ then\n        return i\n      end\n    end\n  end\n  return n\nend", "  if n\
    \ < 2 then\n    return nil\n  end\n  local m = 2\n  while m <= n do\n    if n\
    \ % m == 0 then\n      return m\n    end\n    m = m + 1\n  end\n  return nil\n\
    end", "  -- Base case: n is less than or equal to 1.\n  if n <= 1 then\n    return\
    \ nil\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor((math.sqrt(n) + 1.0) / 2)\n  return largest_prime_factor(m) *\
    \ m end\nend", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n\
    \  -- Base case: n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case:\
    \ n is 3 or even.\n  if n % 2 == 0 then return 3 end\n  -- Base case: n is 4 or\
    \ even.\n  if n % 4 == 0 then return 2 end\n  -- Base case: n is 5, 7, 11, 13,\
    \ or 17 or odd.\n  if n % 8 == 0 or n % 16 == 0 or n % 32 == 0 or n % 64 == 0\
    \ then\n    return n / 2\n  end\n  -- Recursive case: n is 6 or greater.\n  return\
    \ largest_prime_factor(n - 1)\nend", "  -- Base case\n  if n < 2 then\n    return\
    \ nil\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n\
    \  end", "  -- Base case\n  if n == 1 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 3 == 0 then return 3 end\n  -- Otherwise,\
    \ loop through the numbers 2, 3, and 5 and return the largest factor of n that\
    \ divides evenly into all three\n  for i = 2, 3 do\n    if n % i == 0 then\n \
    \     return i\n    end\n  end\n  return 5\nend", "    local factor = 1\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "  -- Base case\n  if n == 1 then\n    return 1\n  end", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end", "  -- Base case\n  if n < 2 then return 1 end\n  --\
    \ If n is even, return its smallest factor\n  if n % 2 == 0 then return n end\n\
    \  -- If n is odd, return its smallest factor plus one\n  local m = math.floor(n/2)\
    \ + 1\n  while m <= n do\n    if n % m == 0 then return m end\n    m = m + 1\n\
    \  end\n  return n\nend", "    local factors = {}\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            table.insert(factors, i)\n        end\n  \
    \  end\n    return table.max(factors)\nend", "    local factor = 1\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "    local factor = 1\n    local i = 1\n    while i * factor <= n do\n \
    \       factor = factor * i\n        i = i + 1\n    end\n    return factor\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
