name: HumanEval_59_largest_prime_factor
language: lua
prompt: "-- Return the largest prime factor of n. Assume n > 1 and is not a prime.\n\
  -- >>> largest_prime_factor(13195)\n-- 29\n-- >>> largest_prime_factor(2048)\n--\
  \ 2\nlocal function largest_prime_factor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_prime_factor\n\
  \    lu.assertEquals(candidate(15), 5)\n    lu.assertEquals(candidate(27), 3)\n\
  \    lu.assertEquals(candidate(63), 7)\n    lu.assertEquals(candidate(330), 11)\n\
  \    lu.assertEquals(candidate(13195), 29)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factor = 1\n    while n > 1 do\n        if n % factor ==\
    \ 0 then\n            n = n / factor\n        else\n            factor = factor\
    \ + 1\n        end\n    end\n    return factor\nend", "  -- Base case: n is 1\
    \ or even.\n  if n <= 1 then return n end", "  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The square root of n might be slightly\
    \ above or below sqrt(n).\n  -- Thus we conclude that n must be larger than or\
    \ equal to sqrt(n).\n  -- The largest prime factor is at most sqrt(n).\n  -- The\
    \ smallest prime factor is at least sqrt(n).\n  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is at least sqrt(n).\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  -- The smallest prime factor is at least sqrt(n", " \
    \ -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ prime factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor plus one\n  local m = math.floor(math.sqrt(n))\n\
    \  while m % 2 == 0 do\n    m = m / 2\n  end\n  return m + 1\nend", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest factor\
    \ of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest\
    \ factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is prime, return its\
    \ largest factor of 5\n  if prime_table[n] then return 5 end\n  -- Otherwise,\
    \ loop through all prime factors of n and return the largest\n  for i = 2, n do\n\
    \    if prime_table[i] then\n      if largest_prime_factor(i) > largest_prime_factor(n)\
    \ then\n        return i\n      end\n    end\n  end\n  return n\nend", "  if n\
    \ < 2 then\n    return nil\n  end\n  local m = 2\n  while m <= n do\n    if n\
    \ % m == 0 then\n      return m\n    end\n    m = m + 1\n  end\n  return nil\n\
    end", "  -- Base case: n is less than or equal to 1.\n  if n <= 1 then\n    return\
    \ nil\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest prime factor\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is odd, return its largest prime factor plus one\n  local\
    \ m = math.floor((math.sqrt(n) + 1.0) / 2)\n  return largest_prime_factor(m) *\
    \ m end\nend", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n\
    \  -- Base case: n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case:\
    \ n is 3 or even.\n  if n % 2 == 0 then return 3 end\n  -- Base case: n is 4 or\
    \ even.\n  if n % 4 == 0 then return 2 end\n  -- Base case: n is 5, 7, 11, 13,\
    \ or 17 or odd.\n  if n % 8 == 0 or n % 16 == 0 or n % 32 == 0 or n % 64 == 0\
    \ then\n    return n / 2\n  end\n  -- Recursive case: n is 6 or greater.\n  return\
    \ largest_prime_factor(n - 1)\nend", "  -- Base case\n  if n < 2 then\n    return\
    \ nil\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n\
    \  end", "  -- Base case\n  if n == 1 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 3 == 0 then return 3 end\n  -- Otherwise,\
    \ loop through the numbers 2, 3, and 5 and return the largest factor of n that\
    \ divides evenly into all three\n  for i = 2, 3 do\n    if n % i == 0 then\n \
    \     return i\n    end\n  end\n  return 5\nend", "    local factor = 1\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "  -- Base case\n  if n == 1 then\n    return 1\n  end", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end", "  -- Base case\n  if n < 2 then return 1 end\n  --\
    \ If n is even, return its smallest factor\n  if n % 2 == 0 then return n end\n\
    \  -- If n is odd, return its smallest factor plus one\n  local m = math.floor(n/2)\
    \ + 1\n  while m <= n do\n    if n % m == 0 then return m end\n    m = m + 1\n\
    \  end\n  return n\nend", "    local factors = {}\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            table.insert(factors, i)\n        end\n  \
    \  end\n    return table.max(factors)\nend", "    local factor = 1\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "    local factor = 1\n    local i = 1\n    while i * factor <= n do\n \
    \       factor = factor * i\n        i = i + 1\n    end\n    return factor\nend",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ prime factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor plus one\n  local m = math.floor(math.sqrt(n))\n\
    \  local p = 2\n  while p * p <= m do\n    if n % p == 0 then return p end\n \
    \   p = p + 1\n  end\n  return n\nend", "    local factors = {}\n    for i = 2,\
    \ n do\n        local p = i\n        while p > 1 do\n            if n % p == 0\
    \ then\n                factors[#factors + 1] = i\n                n = n / p\n\
    \            else\n                p = p - 1\n            end\n        end\n \
    \   end\n    return factors[#factors]\nend", "  -- Base case: n is prime.\n  if\
    \ n == 1 then return n end\n  -- Base case: n is even.\n  if n % 2 == 0 then return\
    \ largest_prime_factor(n / 2) end\n  -- Find largest factor of n.\n  local m =\
    \ math.floor(math.sqrt(n))\n  -- While m divides n, m divides n+1.\n  while m\
    \ % n ~= 0 do\n    m = m + 1\n  end\n  return m\nend", "  -- Base case\n  if n\
    \ == 2 then return 2 end\n  -- If n is even, return its smallest factor\n  if\
    \ n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd, return\
    \ its largest factor\n  local m = math.floor(n/3)\n  local factor = 3\n  while\
    \ m % 2 == 0 and m > 1 do\n    factor = factor * 3\n    m = m / 2\n  end\n  return\
    \ factor\nend", "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n)\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n        else\n            i = i + 1\n        end\n    end\n\
    \    return factors[#factors]\nend", "    local factors = {}\n    for i = 2, n\
    \ do\n        local prime = true\n        for j = 2, i do\n            if n %\
    \ i == 0 then\n                prime = false\n                break\n        \
    \    end\n        end\n        if prime then\n            table.insert(factors,\
    \ i)\n        end\n    end\n    return table.max(factors)\nend", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop over all odd numbers\
    \ up to sqrt(n)\n  for i = 4, math.floor(math.sqrt(n)) + 1, 2 do\n    if n % i\
    \ == 0 then\n      return i\n    end\n  end\nend", "  -- Base case\n  if n < 2\
    \ then\n    return nil\n  end\n  -- If n is prime, return its prime factors\n\
    \  if primes[n] then\n    return primes[n]\n  end\n  -- If n is odd, return its\
    \ largest prime factor\n  if n % 2 == 1 then\n    return largest_prime_factor(n\
    \ / 2)\n  end\n  -- Otherwise, return its smallest prime factor\n  return largest_prime_factor(3\
    \ * n + 1)\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is\
    \ even, return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  --\
    \ If n is odd, return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n\
    \  -- Otherwise, loop through all possible factors of n and return the largest\
    \ one\n  for i = 2, n do\n    if n % i == 0 then\n      return i\n    end\n  end\n\
    end", "  -- Base case\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through all possible\
    \ factors of n and return the largest one\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n == 1 then return\
    \ 1 end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- If n is prime, return its largest factor of 5\n  local\
    \ i = 3\n  while i * i <= n do\n    if n % i == 0 then return 5 end\n    i = i\
    \ + 2\n  end\n  return n -- n is prime\nend", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 then return 2 end\n  -- Base case: n is prime.\n  if is_prime(n)\
    \ then return n end\n  -- Find largest factor of n that is greater than 1.\n \
    \ local factor = 1\n  while n > factor do\n    factor = factor * 2\n    if factor\
    \ > n then break end\n  end\n  return factor\nend", "  -- Base case\n  if n <\
    \ 2 then return 1 end\n  -- If n is even, return its largest prime factor\n  if\
    \ n % 2 == 0 then\n    local p = 2\n    while p * p <= n do\n      if n % p ==\
    \ 0 then\n        return p\n      end\n      p = p + 1\n    end\n  end\n  -- If\
    \ n is odd, return its largest prime factor plus 1\n  local p = 2\n  while p *\
    \ p <= n do\n    if n % p == 0 then\n      return p\n    end\n    p = p + 1\n\
    \  end\n  return n\nend", "  -- Base case\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its\
    \ largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is prime,\
    \ return its largest factor of 5\n  -- The largest factor of 5 must be greater\
    \ than or equal to sqrt(n)\n  local m = 5\n  while m <= math.sqrt(n) do\n    if\
    \ n % m == 0 then\n      return m\n    end\n    m = m + 1\n  end\nend", "  --\
    \ Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ prime factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor plus one\n  local m = math.floor(n/2)\n\
    \  if n % 2 == 1 then return largest_prime_factor(m) + 1 end\n  -- Otherwise,\
    \ loop over all odd numbers up to sqrt(n)\n  for i = 2, m do\n    if n % i ==\
    \ 0 then return largest_prime_factor(i) * i end\n  end\nend", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is prime, return its largest\
    \ factor of 5\n  if prime_table[n] then return 5 end\n  -- Otherwise, loop through\
    \ all prime factors of n and return the largest factor\n  for i = 2, n do\n  \
    \  if n % i == 0 then\n      return i\n    end\n  end\nend", "  -- Base case:\
    \ n is less than or equal to 1.\n  if n <= 1 then\n    return nil\n  end", " \
    \ -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base\
    \ case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case: n is 2\
    \ or even.\n  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n \
    \ if n == 3 then return 3 end\n  -- Base case: n is 4 or even.\n  if n == 4 then\
    \ return 2 end\n  -- Base case: n is 5 or even.\n  if n == 5 then return 3 end\n\
    \  -- Base case: n is 6 or even.\n  if n == 6 then return 4 end\n  -- Base case:\
    \ n is 7 or even.\n  if n == 7 then return 5 end\n  -- Base case: n is 8 or even.\n\
    \  if n == 8 then return 6 end\n  -- Base case: n is 9 or even.\n  if n == 9 then\
    \ return 7 end\n  -- Base case: n is 10 or even.\n  if n == 10 then return 8 end\n\
    \  -- Base case: n is 11 or even.\n  if n == 11 then return 9 end\n  -- Base case:\
    \ n is 12 or even.\n  if n == 12 then return 10 end\n  -- Base case: n is 13 or\
    \ even.\n  if n == 13 then return 11 end\n  -- Base case: n is 14 or even.\n \
    \ if n == 14 then return 12 end\n  -- Base case: n is 15 or even.\n  if n == 15\
    \ then return 13 end\n  -- Base case: n is 16 or even.\n  if n == 16 then return\
    \ 14 end\n  -- Base case: n is 17 or even.\n  if n == 17 then return 15 end\n\
    \  -- Base case: n is 18 or even.\n  if n == 18 then return 16 end\n  -- Base\
    \ case: n is 19 or even.\n  if n == 19 then return 17 end\n  -- Base case: n is\
    \ 20 or even.\n  if n == 20 then return 18 end\n  -- Base case: n is 21 or even.\n\
    \  if n == 21 then return 19 end\n  -- Base case: n is 22 or even.\n  if n ==\
    \ 22 then return 20 end\n  -- Base case: n is 23 or even.\n  if n == 23 then return\
    \ 21 end\n  -- Base case: n is 24 or even.\n  if n == 24 then return 22 end\n\
    \  -- Base case: n is 25 or even.\n  if n == 25 then return 23 end\n  -- Base\
    \ case: n is 26 or even.\n  if ", "  if n < 2 then return 1 end\n  local i = 1\n\
    \  while i * i <= n do\n    i = i * i\n  end\n  return i\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then return 1 end", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then\n    return nil\n  end", "  -- Base case: n is prime.\n  if n == 1\
    \ then\n    return 1\n  end", "  -- Base case: n is prime.\n  if n == 1 then\n\
    \    return 1\n  end", "  -- Base case\n  if n == 2 then return 2 end\n  if n\
    \ % 2 == 0 then return 2 end\n  -- Find largest factor of n\n  local i = 3\n \
    \ while i * i <= n do\n    if n % i == 0 then\n      n = n / i\n      return i\n\
    \    end\n    i = i + 2\n  end\n  return n\nend", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 or n % 2 == 0 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is even, return its largest prime factor\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd,\
    \ return its largest prime factor plus one\n  local m = math.floor((math.sqrt(n)\
    \ + 1.0) / 2.0)\n  return largest_prime_factor(m) * m end\nend", "  -- Base case\n\
    \  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is prime, return n\n  if n == 2 then return n end\n  -- If\
    \ n is even, return the largest prime factor of n/2\n  if n % 2 == 0 then\n  \
    \  local p = largest_prime_factor(n / 2)\n    if p > n then return p end\n  end\n\
    \  -- If n is odd, return the largest prime factor of 3*n+1\n  local p = largest_prime_factor(3\
    \ * n + 1)\n  if p > n then return p end\n  -- If n is prime, return its largest\
    \ prime factor\n  local q = largest_prime_factor(n)\n  if q > n then return q\
    \ end\n  -- If n is prime, return its largest prime factor\n  local r = largest_prime_factor(n\
    \ / 2)\n  if r > n then return r end\n  -- If n is prime, return its largest prime\
    \ factor\n  local s = largest_prime_factor(3 * n + 1)\n  if s > n then return\
    \ s end\n  -- If n is prime, return its largest prime factor\n  local t = largest_prime_factor(n)\n\
    \  if t > n then return t end\n  -- If n is prime, return its largest prime factor\n\
    \  local u = largest_prime_factor(n / 2)\n  if u > n then return u end\n  -- If\
    \ n is prime, return its largest prime factor\n  local v = largest_prime_factor(3\
    \ * n + 1)\n  if v > n then return v end\n  -- If n is prime, return its largest\
    \ prime factor\n  local w = largest_prime_factor(n)\n  if w > n then return w\
    \ end\n  -- If n is prime, return its largest prime factor\n  local x = largest_prime_factor(n\
    \ / 2)\n  if x > n then return x end\n  -- If n is prime, return its largest prime\
    \ factor\n  local y = largest_prime_factor(3 * n + 1)\n  if y > n then return\
    \ y end\n  -- If n is prime, return its largest prime factor\n  local z = largest_prime_factor(n)\n\
    \  if z > n then return z end\n  -- If n is prime, return its largest prime factor\n\
    \  local a = largest_prime_factor(n / 2)\n  if a > n then return a end\n  -- If\
    \ n is prime, return its largest prime factor\n  local b = largest_prime_factor(3\
    \ * n + 1)\n  if b > n then return b end\n  -- If n is prime", "  -- Base case:\
    \ n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case: n is 2 or even.\n\
    \  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n  if n % 2 ==\
    \ 0 then return 3 end\n  -- Base case: n is 4 or even.\n  if n % 4 == 0 then return\
    \ 2 end\n  -- Base case: n is 5 or even.\n  if n % 8 == 0 then return 3 end\n\
    \  -- Base case: n is 6 or even.\n  if n % 16 == 0 then return 4 end\n  -- Base\
    \ case: n is 7 or even.\n  if n % 32 == 0 then return 5 end\n  -- Base case: n\
    \ is 8 or even.\n  if n % 64 == 0 then return 6 end\n  -- Base case: n is 9 or\
    \ even.\n  if n % 128 == 0 then return 7 end\n  -- Base case: n is 10 or even.\n\
    \  if n % 256 == 0 then return 8 end\n  -- Base case: n is 11 or even.\n  if n\
    \ % 512 == 0 then return 9 end\n  -- Base case: n is 12 or even.\n  if n % 1024\
    \ == 0 then return 10 end\n  -- Base case: n is 13 or even.\n  if n % 2048 ==\
    \ 0 then return 11 end\n  -- Base case: n is 14 or even.\n  if n % 4096 == 0 then\
    \ return 12 end\n  -- Base case: n is 15 or even.\n  if n % 8192 == 0 then return\
    \ 13 end\n  -- Base case: n is 16 or even.\n  if n % 16384 == 0 then return 14\
    \ end\n  -- Base case: n is 17 or even.\n  if n % 32768 == 0 then return 15 end\n\
    \  -- Base case: n is 18 or even.\n  if n % 65536 == 0 then return 16 end\n  --\
    \ Base case: n is 19 or even.\n  if n % 131072 == 0 then return 17 end\n  -- Base\
    \ case: n is 20 or even.\n  if n % 262144 == 0 then return 18 end\n  -- Base case:\
    \ n is 21 or even.\n  if n % 524288 == 0 then return 19 end\n  -- Base case: n\
    \ is 22 or even.\n  if n % 1048576 == 0 then return 20 end\n  -- Base case: n\
    \ is 23 or even.\n  if n % 2097152 == 0 then return 21 end", "  -- The largest\
    \ prime factor is less than or equal to sqrt(n).\n  -- The smallest prime factor\
    \ is greater than sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than sqrt(n).\n  if n\
    \ < 2 then\n    return nil\n  end\n  -- The largest prime factor is less than\
    \ or equal to sqrt(n).\n  if n % 2 == 0 then\n    return nil\n  end\n  -- The\
    \ smallest prime factor is greater than sqrt(n).\n  if n % 3 == 0 then\n    return\
    \ nil\n  end\n  -- The largest prime factor is less than or equal to sqrt(n).\n\
    \  if n % 5 == 0 then\n    return nil\n  end\n  -- The smallest prime factor is\
    \ greater than sqrt(n).\n  if n % 7 == 0 then\n    return nil\n  end\n  -- The\
    \ largest prime factor is less than or equal to sqrt(n).\n  if n % 11 == 0 then\n\
    \    return nil\n  end\n  -- The smallest prime factor is greater than sqrt(n).\n\
    \  if n % 13 == 0 then\n    return nil\n  end\n  -- The largest prime factor is\
    \ less than or equal to sqrt(n).\n  if n % 17 == 0 then\n    return nil\n  end\n\
    \  -- The smallest prime factor is greater than sqrt(n).\n  if n % 19 == 0 then\n\
    \    return nil\n  end\n  -- The largest prime factor is less than or equal to\
    \ sqrt(n).\n  if n % 23 == 0 then\n    return nil\n  end\n  -- The smallest prime\
    \ factor is greater than sqrt(n).\n  if n % 29 == 0 then\n    return nil\n  end\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  if n % 31\
    \ == 0 then\n    return nil\n  end\n  -- The smallest prime factor is greater\
    \ than sqrt(n).\n  if n % 37 == 0 then\n    return nil\n  end\n  -- The largest\
    \ prime factor is less than or equal to sqrt(n).\n  if n % 41 == 0 then\n    return\
    \ nil\n  end\n  -- The smallest prime factor is greater than sqrt(n).\n  if n\
    \ % 43 == 0 then\n    return nil\n  end\n  -- The largest prime factor is less\
    \ than or equal to sqrt(n).\n  if n % 47 == 0 then\n    return nil\n  end\n  --\
    \ The smallest prime factor is greater than sqrt(n).\n  if n % 53 == 0 then\n\
    \    return nil\n  end\n  -- The largest prime factor is less than or equal to\
    \ sqrt(n).\n  if n % 59 == 0 then\n    return nil\n  end\n  -- The smallest prime\
    \ factor is greater than sqrt(n).\n  if n % 61 == 0 then\n    return nil\n  end\n\
    \  -- ", "  -- The largest prime factor is n-1 (the smallest is 1).\n  -- We only\
    \ need to test odd numbers, because even numbers have\n  -- a prime factor.\n\
    \  if n % 2 == 0 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then\
    \ return 1 end\n  -- If n is even, return its largest prime factor\n  if n % 2\
    \ == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd, return its\
    \ largest prime factor plus one\n  local m = math.floor(math.sqrt(n))\n  if n\
    \ % 2 == 1 then return largest_prime_factor(n / 2) end\n  -- Otherwise, loop over\
    \ all odd factors\n  for i = 2, m do\n    if n % i == 0 then return largest_prime_factor(n\
    \ / i) end\n  end\n  return n\nend", "  -- Base case: n is 1 or even.\n  if n\
    \ == 1 then return 2 end\n  -- Base case: n is 2 or even.\n  if n == 2 then return\
    \ 2 end\n  -- Base case: n is 3 or even.\n  if n == 3 then return 3 end\n  --\
    \ Base case: n is 4 or even.\n  if n == 4 then return 2 end\n  -- Base case: n\
    \ is 5 or even.\n  if n == 5 then return 3 end\n  -- Base case: n is 6 or even.\n\
    \  if n == 6 then return 4 end\n  -- Base case: n is 7 or even.\n  if n == 7 then\
    \ return 5 end\n  -- Base case: n is 8 or even.\n  if n == 8 then return 6 end\n\
    \  -- Base case: n is 9 or even.\n  if n == 9 then return 7 end\n  -- Base case:\
    \ n is 10 or even.\n  if n == 10 then return 8 end\n  -- Base case: n is 11 or\
    \ even.\n  if n == 11 then return 9 end\n  -- Base case: n is 12 or even.\n  if\
    \ n == 12 then return 10 end\n  -- Base case: n is 13 or even.\n  if n == 13 then\
    \ return 11 end\n  -- Base case: n is 14 or even.\n  if n == 14 then return 12\
    \ end\n  -- Base case: n is 15 or even.\n  if n == 15 then return 13 end\n  --\
    \ Base case: n is 16 or even.\n  if n == 16 then return 14 end\n  -- Base case:\
    \ n is 17 or even.\n  if n == 17 then return 15 end\n  -- Base case: n is 18 or\
    \ even.\n  if n == 18 then return 16 end\n  -- Base case: n is 19 or even.\n \
    \ if n == 19 then return 17 end\n  -- Base case: n is 20 or even.\n  if n == 20\
    \ then return 18 end\n  -- Base case: n is 21 or even.\n  if n == 21 then return\
    \ 19 end\n  -- Base case: n is 22 or even.\n  if n == 22 then return 20 end\n\
    \  -- Base case: n is 23 or even.\n  if n == 23 then return 21 end\n  -- Base\
    \ case: n is 24 or even.\n  if n == 24 then return 22 end\n  -- Base case: n is\
    \ 25 or even.\n  if n == 25 then return 23 end\n  -- Base case: n is 26 or even.\n\
    \  if ", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest prime factor\n  if n % 2 == 0 then\n    local m = math.floor(n/2)\
    \ -- Find the largest factor of n\n    return m == 1 and largest_prime_factor(m)\
    \ or largest_prime_factor(m)\n  end\n  -- If n is odd, return its largest prime\
    \ factor plus 1\n  local m = math.floor(n/2) -- Find the largest factor of n\n\
    \  return m == 1 and largest_prime_factor(m) or largest_prime_factor(m) + 1\n\
    end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise,\
    \ loop through the primes 2 through n / 2\n  for i = 2, n / 2 do\n    -- If n\
    \ is divisible by i, return i\n    if n % i == 0 then return i end\n  end\nend",
  "  if n < 2 then return nil end\n  local m = n / 2\n  while m > 1 do\n    if n %\
    \ m == 0 then return m end\n    m = m / 2\n  end\n  return nil\nend", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest factor\
    \ of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest\
    \ factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop over all\
    \ odd numbers up to sqrt(n)\n  for i = 4, math.floor(math.sqrt(n)) + 1, 2 do\n\
    \    if n % i == 0 then\n      return i\n    end\n  end\nend", "  -- Base case:\
    \ n is 1 or 2.\n  if n == 1 or n == 2 then\n    return n\n  end", "    local factors\
    \ = {}\n    for i = 2, n do\n        local factor = 1\n        for j = 2, i do\n\
    \            if i ~= j and n % i == 0 then\n                factor = j\n     \
    \           break\n            end\n        end\n        if factor > 1 then\n\
    \            table.insert(factors, factor)\n        end\n    end\n    return table.remove(factors)\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 then\n    return 1\n  end\n\
    \  -- If n is prime, return 1.\n  if prime_table[n] then\n    return 1\n  end\n\
    \  -- If n is even, return its largest factor of n.\n  if n % 2 == 0 then\n  \
    \  return largest_prime_factor(n / 2)\n  end\n  -- If n is odd, return the largest\
    \ factor of n that divides evenly.\n  local factor = 2\n  while n % factor ==\
    \ 0 do\n    factor = factor + 1\n  end\n  return factor\nend", "    local factor\
    \ = 1\n    local i = 1\n    while i * factor <= n do\n        factor = factor\
    \ * i\n        i = i + 1\n    end\n    return factor\nend", "    local factor\
    \ = 1\n    local i = 1\n    while i <= n do\n        if n % i == 0 then\n    \
    \        factor = i\n            n = n / i\n        else\n            i = i +\
    \ 1\n        end\n    end\n    return factor\nend", "  -- Base case\n  if n <\
    \ 2 then return 1 end\n  -- If n is even, return its smallest factor\n  if n %\
    \ 2 == 0 then return smallest_prime_factor(n) end\n  -- If n is odd, return its\
    \ largest factor\n  local function largest(factor)\n    local function is_prime(factor)\n\
    \      return factor > 1 and factor % factor == 0\n    end\n    local function\
    \ largest(factor)\n      return factor > 1 and factor % factor == 0 and largest(factor\
    \ / factor)\n    end\n    local function largest(factor)\n      return factor\
    \ > 1 and factor % factor == 0 and largest(factor / factor)\n    end\n    local\
    \ function largest(factor)\n      return factor > 1 and factor % factor == 0 and\
    \ largest(factor / factor)\n    end\n    local function largest(factor)\n    \
    \  return factor > 1 and factor % factor == 0 and largest(factor / factor)\n \
    \   end\n    local function largest(factor)\n      return factor > 1 and factor\
    \ % factor == 0 and largest(factor / factor)\n    end\n    local function largest(factor)\n\
    \      return factor > 1 and factor % factor == 0 and largest(factor / factor)\n\
    \    end\n    local function largest(factor)\n      return factor > 1 and factor\
    \ % factor == 0 and largest(factor / factor)\n    end\n    local function largest(factor)\n\
    \      return factor > 1 and factor % factor == 0 and largest(factor / factor)\n\
    \    end\n    local function largest(factor)\n      return factor > 1 and factor\
    \ % factor == 0 and largest(factor / factor)\n    end\n    local function largest(factor)\n\
    \      return factor > 1 and factor % factor == 0 and largest(factor / factor)\n\
    \    end\n    local function largest(factor)\n      return factor > 1 and factor\
    \ % factor == 0 and largest(factor / factor)\n    end\n    local function largest(factor)\n\
    \      return factor > 1 and factor % factor == 0 and largest(factor / factor)\n\
    \    end\n    local function largest(factor)\n      return factor > 1 and factor\
    \ % factor == 0 and largest(factor / factor)\n    end\n    local function largest(factor)\n\
    \      return factor > 1 and factor % factor == 0 and largest(factor / factor)\n\
    \    end\n    local function largest(factor)\n      return factor > 1 and factor\
    \ % factor == 0 and largest(factor / factor)\n    end\n    local function largest(factor)\n\
    \      return factor > 1 and factor % factor == 0 and largest(factor / factor)\n\
    \    end\n    local function largest(factor)\n      return factor > 1 and factor\
    \ % factor == 0 and ", "  -- Base case: n is 1 or even.\n  if n == 1 then return\
    \ 2 end\n  -- Base case: n is even.\n  if n % 2 == 0 then return n end\n  -- Find\
    \ largest factor of n that is even.\n  local function factor(n)\n    -- Divide\
    \ n by all odd numbers except n.\n    local function odd_factor(n)\n      -- Base\
    \ case: n is even.\n      if n % 2 == 0 then return n end\n      -- Divide n by\
    \ all odd numbers except n.\n      local function odd_factor(n)\n        -- Base\
    \ case: n is even.\n        if n % 2 == 0 then return n end\n        -- Divide\
    \ n by all odd numbers except n.\n        local function odd_factor(n)\n     \
    \     -- Base case: n is even.\n          if n % 2 == 0 then return n end\n  \
    \        -- Divide n by all odd numbers except n.\n          local function odd_factor(n)\n\
    \            -- Base case: n is even.\n            if n % 2 == 0 then return n\
    \ end\n            -- Divide n by all odd numbers except n.\n            local\
    \ function odd_factor(n)\n              -- Base case: n is even.\n           \
    \   if n % 2 == 0 then return n end\n              -- Divide n by all odd numbers\
    \ except n.\n              local function odd_factor(n)\n                -- Base\
    \ case: n is even.\n                if n % 2 == 0 then return n end\n        \
    \        -- Divide n by all odd numbers except n.\n                local function\
    \ odd_factor(n)\n                  -- Base case: n is even.\n                \
    \  if n % 2 == 0 then return n end\n                  -- Divide n by all odd numbers\
    \ except n.\n                  local function odd_factor(n)\n                \
    \    -- Base case: n is even.\n                    if n % 2 == 0 then return n\
    \ end\n                    -- Divide n by all odd numbers except n.\n        \
    \            local function odd_factor(n)\n                      -- Base case:\
    \ n is even.\n                      if n % 2 == 0 then return n end\n        \
    \              -- Divide n by all odd numbers except n.\n                    \
    \  local function odd_factor(n)\n                        -- Base case: n is even.\n\
    \                        if n % 2 == 0 then return n end\n                   \
    \     -- Divide n by all odd numbers except n.\n                        local\
    \ function odd_factor(n)\n                          -- Base case: n is even.\n\
    \                          if n % 2 == 0 then return n end\n                 \
    \         -- Divide n by all odd numbers except n.\n                         \
    \ local function odd_factor(n)\n                            -- Base case: ", " \
    \ if n < 2 then return nil end\n  local factor = 1\n  local i = 1\n  while i <=\
    \ n do\n    if n % i == 0 then\n      factor = i\n      break\n    end\n    i\
    \ = i + 1\n  end\n  return factor\nend", "  -- Base case\n  if n < 2 then\n  \
    \  return nil\n  end", "  -- Base case: n is 1 or even. Return the smallest factor.\n\
    \  if n == 1 then\n    return 1\n  elseif n % 2 == 0 then\n    return 2\n  else\n\
    \    -- Find the largest factor of n that is smaller than n.\n    local max_factor\
    \ = 1\n    for i = 2, n do\n      if n % i == 0 then\n        max_factor = i\n\
    \        break\n      end\n    end\n    return max_factor\n  end\nend", "  --\
    \ Base case\n  if n < 2 then return 1 end\n  -- If n is prime, return it\n  if\
    \ prime_table[n] then return n end\n  -- If n is even, divide by its smallest\
    \ prime factor\n  if n % 2 == 0 then\n    local p = smallest_prime_factor(n /\
    \ 2)\n    if p ~= nil then return p end\n  end\n  -- If n is odd, divide by its\
    \ largest prime factor\n  local p = largest_prime_factor(n / 2)\n  if p ~= nil\
    \ then return p end\n  -- If n is 1, return it\n  return n\nend", "  -- Base case:\
    \ n is less than or equal to 1.\n  if n <= 1 then\n    return nil\n  end", " \
    \ -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is prime, return it\n  if primes[n]\
    \ then return n end\n  -- Find largest factor of n\n  local max_factor = 1\n \
    \ for i = 2, n do\n    if n % i == 0 then\n      max_factor = i\n    end\n  end\n\
    \  -- If n is not a prime, return its largest prime factor\n  return max_factor\n\
    end", "  if n < 2 then return nil end\n  local factors = {}\n  for i = 2, n do\n\
    \    local prime = true\n    for j = 2, i do\n      if i % j == 0 then\n     \
    \   prime = false\n        break\n      end\n    end\n    if prime then\n    \
    \  table.insert(factors, i)\n    end\n  end\n  if #factors == 0 then return nil\
    \ end\n  table.sort(factors)\n  return factors[#factors]\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is even, return its largest factor of 2\n \
    \ if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through all odd\
    \ numbers up to sqrt(n)\n  for i = 4, math.floor(math.sqrt(n)) + 1, 2 do\n   \
    \ -- If n is divisible by i, return i\n    if n % i == 0 then return i end\n \
    \ end\nend", "  -- Base case\n  if n==1 then return 1 end\n  -- If n is even,\
    \ return its largest factor of 2\n  if n%2==0 then return 2 end\n  -- If n is\
    \ odd, return its largest factor of 3\n  if n%3==0 then return 3 end\n  -- If\
    \ n is prime, return its largest factor of 5\n  if n%5==0 then return 5 end\n\
    \  -- Otherwise, return its largest factor of 7\n  return 7\nend", "  -- Base\
    \ case\n  if n < 2 then\n    return nil\n  end", "  -- Base case\n  if n == 1\
    \ then\n    return 1\n  end", "  -- Base case\n  if n == 1 then\n    return 1\n\
    \  end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\n\
    \    return 2\n  end\n  -- If n is odd, return its largest factor of 3\n  if n\
    \ % 2 == 1 then\n    return 3\n  end\n  -- If n is prime, return its largest factor\
    \ of 5\n  if prime_number(n) then\n    return 5\n  end\n  -- Otherwise, loop through\
    \ all odd numbers between 2 and n / 2\n  for i = 2, n / 2 do\n    -- If n is divisible\
    \ by i, return i\n    if n % i == 0 then\n      return i\n    end\n  end\nend",
  "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its\
    \ largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop\
    \ over all odd numbers from 3 to sqrt(n)\n  for i = 4, math.floor(math.sqrt(n))\
    \ + 1, 2 do\n    -- If n is divisible by i, return i\n    if n % i == 0 then return\
    \ i end\n  end\nend", "  if n < 2 then return nil end\n  local i = 1\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      n = n / i\n      return i\n   \
    \ end\n    i = i + 1\n  end\n  return n\nend", "    local factor = 1\n    while\
    \ n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n    \
    \    else\n            factor = factor + 1\n        end\n    end\n    return factor\n\
    end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- If n\
    \ is prime, return its largest factor of 5\n  if prime_table[n] then return 5\
    \ end\n  -- Otherwise, return its largest factor of 7\n  return 7\nend", "   \
    \ local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n    \
    \        n = n / factor\n        else\n            factor = factor + 1\n     \
    \   end\n    end\n    return factor\nend", "  -- Base case\n  if n < 2 then return\
    \ 1 end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case\n  if n < 2 then return 1 end", "  -- Base case: n is prime.\n \
    \ if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then return\
    \ 1 end\n  -- If n is even, return its smallest factor\n  if n % 2 == 0 then return\
    \ smallest_prime_factor(n) end\n  -- If n is odd, return its largest factor\n\
    \  local max_factor = 1\n  for i = 2, n do\n    if n % i == 0 then\n      max_factor\
    \ = i\n    end\n  end\n  return max_factor\nend", "  -- The largest prime factor\
    \ is n-1 if n is odd and n+1 if n is even.\n  -- The largest prime factor is 2\
    \ if n is even and 3 if n is odd.\n  -- The largest prime factor is 3 if n is\
    \ odd and 5 if n is even.\n  -- The largest prime factor is 5 if n is even and\
    \ 7 if n is odd.\n  -- The largest prime factor is 7 if n is odd and 11 if n is\
    \ even.\n  -- The largest prime factor is 11 if n is even and 13 if n is odd.\n\
    \  -- The largest prime factor is 13 if n is odd and 17 if n is even.\n  -- The\
    \ largest prime factor is 17 if n is even and 19 if n is odd.\n  -- The largest\
    \ prime factor is 19 if n is odd and 23 and so on.\n  -- The largest prime factor\
    \ is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n  -- The largest\
    \ prime factor is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n\
    \  -- The largest prime factor is 23 and so on.\n  -- The largest prime factor\
    \ is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n  -- The largest\
    \ prime factor is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n\
    \  -- The largest prime factor is 23 and so on.\n  -- The largest prime factor\
    \ is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n  -- The largest\
    \ prime factor is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n\
    \  -- The largest prime factor is 23 and so on.\n  -- The largest prime factor\
    \ is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n  -- The largest\
    \ prime factor is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n\
    \  -- The largest prime factor is 23 and so on.\n  -- The largest prime factor\
    \ is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n  -- The largest\
    \ prime factor is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n\
    \  -- The largest prime factor is 23 and so on.\n  -- The largest prime factor\
    \ is 23 and so on.\n  -- The largest prime factor is 23 and so on.\n  -- The largest\
    \ prime factor is 23", "  -- Base case\n  if n < 2 then return 1 end\n  -- If\
    \ n is even, return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n\
    \  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then return\
    \ 3 end\n  -- Otherwise, loop through all possible factors of n and return the\
    \ largest one\n  for i = 2, n do\n    if n % i == 0 then\n      return i\n   \
    \ end\n  end\nend", "  -- Base case\n  if n < 2 then\n    return nil\n  end",
  "  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than sqrt(n).\n  -- The largest prime factor is less\
    \ than or equal to sqrt(n).\n  -- The smallest prime factor is greater than sqrt(n).\n\
    \  if n < 2 then return nil end\n  if n == 1 then return 2 end\n  -- The largest\
    \ prime factor is less than or equal to sqrt(n).\n  -- The smallest prime factor\
    \ is greater than sqrt(n).\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than sqrt(n).\n  if n\
    \ % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- The largest prime\
    \ factor is less than or equal to sqrt(n).\n  -- The smallest prime factor is\
    \ greater than sqrt(n).\n  -- The largest prime factor is less than or equal to\
    \ sqrt(n).\n  -- The smallest prime factor is greater than sqrt(n).\n  local m\
    \ = math.floor(math.sqrt(n))\n  -- The largest prime factor is less than or equal\
    \ to sqrt(n).\n  -- The smallest prime factor is greater than sqrt(n).\n  -- The\
    \ largest prime factor is less than or equal to sqrt(n).\n  -- The smallest prime\
    \ factor is greater than sqrt(n).\n  if m % 2 == 0 then return largest_prime_factor(m\
    \ / 2) end\n  -- The largest prime factor is less than or equal to sqrt(n).\n\
    \  -- The smallest prime factor is greater than sqrt(n).\n  -- The largest prime\
    \ factor is less than or equal to sqrt(n).\n  -- The smallest prime factor is\
    \ greater than sqrt(n).\n  local p = 2\n  -- The largest prime factor is less\
    \ than or equal to sqrt(n).\n  -- The smallest prime factor is greater than sqrt(n).\n\
    \  -- The largest prime factor is less than or equal to sqrt(n).\n  -- The smallest\
    \ prime factor is greater than sqrt(n).\n  while p <= m do\n    -- The largest\
    \ prime factor is less than or equal to sqrt(n).\n    -- The smallest prime factor\
    \ is greater than sqrt(n).\n    if n % p == 0 then return p end\n    -- The largest\
    \ prime factor is less than or equal to sqrt(n).\n    -- The smallest prime factor\
    \ is greater than sqrt(n).\n    local q = p * p\n    -- The largest prime factor\
    \ is less than or equal to sqrt(n).\n    -- The smallest prime factor is greater\
    \ than sqrt(n).\n    if q % n == 0 then return q end\n    -- The largest prime\
    \ factor is less than or equal to sqrt(n).\n    -- The smallest prime factor is\
    \ greater than sqrt(n).\n    p = p + 2\n  end\n", "  -- Base case\n  if n < 2\
    \ then return 1 end\n  -- If n is even, return its largest factor of 2\n  if n\
    \ % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor of 3\n\
    \  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through all odd factors\
    \ of n and return the largest one\n  for i = 5, n, 2 do\n    if n % i == 0 then\n\
    \      return i\n    end\n  end\nend", "  -- Base case: n is 1 or even.\n  if\
    \ n <= 1 then return n end\n  -- If n is prime, return its largest factor of n.\n\
    \  if prime_table[n] then return largest_prime_factor(prime_table[n]) else return\
    \ n end\n  -- If n is odd, return its largest factor of n.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n      i = i + 2\n    end\n    return n\n\
    \  end\n  -- Find largest factor of n in prime_table.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n      i = i + 2\n    end\n    return n\n\
    \  end\n  -- Find largest factor of n in prime_table.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n      i = i + 2\n    end\n    return n\n\
    \  end\n  -- Find largest factor of n in prime_table.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n      i = i + 2\n    end\n    return n\n\
    \  end\n  -- Find largest factor of n in prime_table.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n      i = i + 2\n    end\n    return n\n\
    \  end\n  -- Find largest factor of n in prime_table.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n      i = i + 2\n    end\n    return n\n\
    \  end\n  -- Find largest factor of n in prime_table.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n      i = i + 2\n    end\n    return n\n\
    \  end\n  -- Find largest factor of n in prime_table.\n  local function factor(n)\n\
    \    if n % 2 == 0 then return n end\n    local i = 3\n    while i * i <= n do\n\
    \      if n % i == 0 then return i end\n", "  -- The largest prime factor is n-1\
    \ (the smallest is 1).\n  -- So the largest prime factor is n-1/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- The smallest\
    \ prime factor is 1.\n  -- So the largest prime factor is (n-1)/2.\n  -- ", " \
    \ -- Base case\n  if n < 2 then\n    return nil\n  end", "  -- Base case: n is\
    \ less than or equal to 1.\n  if n <= 1 then return 1 end\n  -- Base case: n is\
    \ even.\n  if n % 2 == 0 then return 2 end\n  -- Base case: n is odd.\n  -- The\
    \ smallest prime factor is 2.\n  local function is_prime(n)\n    -- Base case:\
    \ n is prime.\n    if n == 2 then return true end\n    -- Base case: n is odd.\n\
    \    -- The smallest prime factor is 2.\n    if n % 2 == 1 then return false end\n\
    \    -- Base case: n is even.\n    -- The smallest prime factor is 2.\n    if\
    \ n % 2 == 0 then return false end\n    -- Base case: n is odd.\n    -- The smallest\
    \ prime factor is 3.\n    if n % 3 == 0 then return false end\n    -- Base case:\
    \ n is even.\n    -- The smallest prime factor is 3.\n    if n % 3 == 1 then return\
    \ false end\n    -- Base case: n is odd.\n    -- The smallest prime factor is\
    \ 5.\n    if n % 5 == 0 then return false end\n    -- Base case: n is even.\n\
    \    -- The smallest prime factor is 5.\n    if n % 5 == 1 then return false end\n\
    \    -- Base case: n is odd.\n    -- The smallest prime factor is 7.\n    if n\
    \ % 7 == 0 then return false end\n    -- Base case: n is even.\n    -- The smallest\
    \ prime factor is 7.\n    if n % 7 == 1 then return false end\n    -- Base case:\
    \ n is odd.\n    -- The smallest prime factor is 11.\n    if n % 11 == 0 then\
    \ return false end\n    -- Base case: n is even.\n    -- The smallest prime factor\
    \ is 11.\n    if n % 11 == 1 then return false end\n    -- Base case: n is odd.\n\
    \    -- The smallest prime factor is 13.\n    if n % 13 == 0 then return false\
    \ end\n    -- Base case: n is even.\n    -- The smallest prime factor is 13.\n\
    \    if n % 13 == 1 then return false end\n    -- Base case: n is odd.\n    --\
    \ The smallest prime factor is 17.\n    if n % 17 == 0 then return false end\n\
    \    -- Base case: n is even.\n    -- The smallest prime factor is 17.\n    if\
    \ n % 17 == 1 then return false end\n    -- Base case: n is odd.\n    -- The smallest\
    \ prime factor is 19.\n    if n % 19 == 0 then return false end\n    -- Base case:\
    \ n is even.\n    -- The smallest prime factor is 19.\n    if n % 19 == 1 then\
    \ return false end\n    -- Base case: n is od", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then\n  \
    \  return nil\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If\
    \ n is even, return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n\
    \  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then return\
    \ 3 end\n  -- Otherwise, loop through all possible factors of n and return the\
    \ largest one\n  for i = 4, math.floor(n/2), 2 do\n    if n % i == 0 then\n  \
    \    return i\n    end\n  end\nend", "  -- Base case\n  if n < 2 then return 1\
    \ end\n  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then\
    \ return 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 ==\
    \ 1 then return 3 end\n  -- Otherwise, loop through all odd factors of n and return\
    \ the largest one\n  for i = 5, n, 2 do\n    if n % i == 0 then\n      return\
    \ i\n    end\n  end\nend", "  -- Base case\n  if n == 1 then\n    return 1\n \
    \ end", "  if n < 2 then return nil end\n  if n == 2 then return 1 end\n  if n\
    \ % 2 == 0 then return largest_prime_factor(n / 2) end\n  local i = 3\n  while\
    \ i * i <= n do\n    if n % i == 0 then\n      return i\n    end\n    i = i +\
    \ 2\n  end\n  return nil\nend", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is prime, return n\n  if prime_table[n] then return n end\n  -- If\
    \ n is even, return the largest prime factor of n/2\n  if n % 2 == 0 then\n  \
    \  local p = largest_prime_factor(n / 2)\n    if p > n then return p end\n  end\n\
    \  -- If n is odd, return the largest prime factor of 3*n + 1\n  local p = 3\n\
    \  while p * p <= n do\n    p = p * 3 + 1\n    if prime_table[p] then return p\
    \ end\n  end\nend", "  -- Base case: n is 1 or even.\n  if n == 1 or n % 2 ==\
    \ 0 then\n    return 1\n  end", "  -- Base case: n is prime.\n  if n == 1 then\
    \ return 1 end\n  -- Find the largest factor of n that is smaller than n.\n  local\
    \ function factor(n)\n    local factor = 1\n    while n > 1 do\n      -- If n\
    \ is even, divide by 2.\n      if n % 2 == 0 then\n        factor = factor * 2\n\
    \        n = n / 2\n      -- If n is odd, divide by 3 and increase the factor\
    \ by 1.\n      else\n        factor = factor * 3 + 1\n        n = n / 3\n    \
    \  end\n    end\n    return factor\n  end\n  -- Find the largest factor of n that\
    \ is smaller than n.\n  local function factor(n)\n    local factor = 1\n    while\
    \ n > 1 do\n      -- If n is even, divide by 2.\n      if n % 2 == 0 then\n  \
    \      factor = factor * 2\n        n = n / 2\n      -- If n is odd, divide by\
    \ 3 and increase the factor by 1.\n      else\n        factor = factor * 3 + 1\n\
    \        n = n / 3\n      end\n    end\n    return factor\n  end\n  -- Find the\
    \ largest factor of n that is smaller than n.\n  local function factor(n)\n  \
    \  local factor = 1\n    while n > 1 do\n      -- If n is even, divide by 2.\n\
    \      if n % 2 == 0 then\n        factor = factor * 2\n        n = n / 2\n  \
    \    -- If n is odd, divide by 3 and increase the factor by 1.\n      else\n \
    \       factor = factor * 3 + 1\n        n = n / 3\n      end\n    end\n    return\
    \ factor\n  end\n  -- Find the largest factor of n that is smaller than n.\n \
    \ local function factor(n)\n    local factor = 1\n    while n > 1 do\n      --\
    \ If n is even, divide by 2.\n      if n % 2 == 0 then\n        factor = factor\
    \ * 2\n        n = n / 2\n      -- If n is odd, divide by 3 and increase the factor\
    \ by 1.\n      else\n        factor = factor * 3 + 1\n        n = n / 3\n    \
    \  end\n    end\n    return factor\n  end\n  -- Find the largest factor of n that\
    \ is smaller than n.\n  local function factor(n)\n    local factor = 1\n    while\
    \ n > 1 do\n      -- If n is even, divide by 2.\n      if n % 2 == 0 then\n  \
    \      factor = factor * 2\n        n = n / 2\n      -- If n is odd, divide by\
    \ 3 and increase the factor by 1.\n      else\n        factor = factor * 3 + 1\n\
    \        n = n / 3\n      end\n    end\n    return factor\n  end\n  -- Find the\
    \ largest factor of n that is smaller than n.\n  local function ", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case:\
    \ n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case: n is 2 or even.\n\
    \  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n  if n % 2 ==\
    \ 0 then return 3 end\n  -- Base case: n is divisible by 2 or 3.\n  if n % 3 ==\
    \ 0 then return n end\n  -- Find a factor of n by trial division.\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return i end\n    i = i + 2\n\
    \  end\n  -- If n is not a prime number, then n is not a prime number.\n  return\
    \ nil\nend", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base\
    \ case\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n < 2 then\n\
    \    return nil\n  end\n  -- If n is prime, return it\n  if prime_table[n] then\n\
    \    return n\n  end\n  -- If n is divisible by 2, return it\n  if n % 2 == 0\
    \ then\n    return n\n  end\n  -- If n is divisible by 3, return its largest factor\
    \ of 3\n  if n % 3 == 0 then\n    return 3\n  end\n  -- If n is divisible by 5,\
    \ return its largest factor of 5\n  if n % 5 == 0 then\n    return 5\n  end\n\
    \  -- If n is divisible by 7, return its largest factor of 7\n  if n % 7 == 0\
    \ then\n    return 7\n  end\n  -- If n is divisible by 11, return its largest\
    \ factor of 11\n  if n % 11 == 0 then\n    return 11\n  end\n  -- If n is divisible\
    \ by 13, return its largest factor of 13\n  if n % 13 == 0 then\n    return 13\n\
    \  end\n  -- If n is divisible by 17, return its largest factor of 17\n  if n\
    \ % 17 == 0 then\n    return 17\n  end\n  -- If n is divisible by 19, return its\
    \ largest factor of 19\n  if n % 19 == 0 then\n    return 19\n  end\n  -- If n\
    \ is divisible by 23, return its largest factor of 23\n  if n % 23 == 0 then\n\
    \    return 23\n  end\n  -- If n is divisible by 29, return its largest factor\
    \ of 29\n  if n % 29 == 0 then\n    return 29\n  end\n  -- If n is divisible by\
    \ 31, return its largest factor of 31\n  if n % 31 == 0 then\n    return 31\n\
    \  end\n  -- If n is divisible by 37, return its largest factor of 37\n  if n\
    \ % 37 == 0 then\n    return 37\n  end\n  -- If n is divisible by 41, return its\
    \ largest factor of 41\n  if n % 41 == 0 then\n    return 41\n  end\n  -- If n\
    \ is divisible by 43, return its largest factor of 43\n  if n % 43 == 0 then\n\
    \    return 43\n  end\n  -- If n is divisible by 47, return its largest factor\
    \ of 47\n  if n % 47 == 0 then\n    return 47\n  end\n  -- If n is divisible by\
    \ 53, return its largest factor of 53\n  if n % 53 == 0 then\n    return 53\n\
    \  end\n  -- If n is divisible by 59, return its largest factor of 59\n  if n\
    \ % 59 == 0 then\n    return 59\n  end\n  -- If ", "  -- Base case\n  if n < 2\
    \ then\n    return nil\n  end\n  -- If n is prime, return it\n  if primes[n] then\n\
    \    return n\n  end\n  -- If n is divisible by 2, return it\n  if n % 2 == 0\
    \ then\n    return 2\n  end\n  -- If n is divisible by 3, return it\n  if n %\
    \ 3 == 0 then\n    return 3\n  end\n  -- If n is divisible by 5, return it\n \
    \ if n % 5 == 0 then\n    return 5\n  end\n  -- If n is divisible by 7, return\
    \ it\n  if n % 7 == 0 then\n    return 7\n  end\n  -- If n is divisible by 11,\
    \ return it\n  if n % 11 == 0 then\n    return 11\n  end\n  -- If n is divisible\
    \ by 13, return it\n  if n % 13 == 0 then\n    return 13\n  end\n  -- If n is\
    \ divisible by 17, return it\n  if n % 17 == 0 then\n    return 17\n  end\n  --\
    \ If n is divisible by 19, return it\n  if n % 19 == 0 then\n    return 19\n \
    \ end\n  -- If n is divisible by 23, return it\n  if n % 23 == 0 then\n    return\
    \ 23\n  end\n  -- If n is divisible by 29, return it\n  if n % 29 == 0 then\n\
    \    return 29\n  end\n  -- If n is divisible by 31, return it\n  if n % 31 ==\
    \ 0 then\n    return 31\n  end\n  -- If n is divisible by 37, return it\n  if\
    \ n % 37 == 0 then\n    return 37\n  end\n  -- If n is divisible by 41, return\
    \ it\n  if n % 41 == 0 then\n    return 41\n  end\n  -- If n is divisible by 43,\
    \ return it\n  if n % 43 == 0 then\n    return 43\n  end\n  -- If n is divisible\
    \ by 47, return it\n  if n % 47 == 0 then\n    return 47\n  end\n  -- If n is\
    \ divisible by 53, return it\n  if n % 53 == 0 then\n    return 53\n  end\n  --\
    \ If n is divisible by 59, return it\n  if n % 59 == 0 then\n    return 59\n \
    \ end\n  -- If n is divisible by 61, return it\n  if n % 61 == 0 then\n    return\
    \ 61\n  end\n  -- If n is divisible by 67, return it\n  if n % 67 == 0 then\n\
    \    return 67\n  end\n  -- If n is divisible by 71, return it\n  if n % 71 ==\
    \ 0 then\n", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end",
  "  -- Base case: n is less than or equal to 1.\n  if n <= 1 then\n    return nil\n\
    \  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return largest factor of 3 that divides n.\n  local function factor(n)\n   \
    \ local i = 1\n    while i * i <= n do\n      if n % i == 0 then\n        return\
    \ i\n      end\n      i = i + 1\n    end\n    return n\n  end\n  -- If n is prime,\
    \ return its largest factor of 2\n  if prime_table[n] then return 2 end\n  --\
    \ Otherwise, return the largest factor of n that divides n.\n  return factor(n)\n\
    end", "  if n < 2 then return nil end\n  local i = 1\n  while i * i <= n do\n\
    \    if n % i == 0 then\n      n = n / i\n      return i\n    end\n    i = i +\
    \ 1\n  end\n  return n\nend", "    local factor = 1\n    while n > 1 do\n    \
    \    if n % factor == 0 then\n            n = n / factor\n        else\n     \
    \       factor = factor + 1\n        end\n    end\n    return factor\nend", " \
    \ -- The largest prime factor is less than or equal to sqrt(n).\n  -- The square\
    \ root of n approaches sqrt(n) when n >= 3.\n  -- The square root of n approaches\
    \ sqrt(n) when n <= 3.\n  -- Thus n >= sqrt(n) when n >= 3.\n  -- The square root\
    \ of n approaches sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n\
    \  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  --\
    \ Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus\
    \ n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n\
    \ <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <=\
    \ sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n)\
    \ when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when\
    \ n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n\
    \ <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <=\
    \ 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n\
    \  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  --\
    \ Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus\
    \ n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n\
    \ <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <=\
    \ sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n) when n <= 3.\n  -- Thus n <= sqrt(n)\
    \ when ", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its smallest prime factor\n  if n % 2 == 0 then return smallest_prime_factor(n)\
    \ end\n  -- If n is odd, return its largest prime factor\n  local m = math.floor(n/2)\n\
    \  local p = largest_prime_factor(m)\n  while n % p == 0 do\n    p = largest_prime_factor(p)\n\
    \  end\n  return p\nend", "  if n < 2 then\n    return nil\n  end\n  if n == 2\
    \ then\n    return 2\n  end\n  if n % 2 == 0 then\n    return nil\n  end\n  local\
    \ i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return nil\n   \
    \ end\n    i = i + 2\n  end\n  return i\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i <= math.sqrt(n) do\n        if n % i == 0 then\n        \
    \    table.insert(factors, i)\n            n = n / i\n        else\n         \
    \   i = i + 1\n        end\n    end\n    return table.remove(factors, 1)\nend",
  "    local factors = {}\n    local i = 1\n    while i <= math.sqrt(n) do\n     \
    \   if n % i == 0 then\n            table.insert(factors, i)\n            n =\
    \ n / i\n        else\n            i = i + 1\n        end\n    end\n    return\
    \ n and table.remove(factors)\nend", "    local factors = {}\n    for i = 2, n\
    \ do\n        local factor = 1\n        for j = 2, i do\n            if i % j\
    \ == 0 then\n                factor = j\n                break\n            end\n\
    \        end\n        if factor > 1 then\n            table.insert(factors, factor)\n\
    \        end\n    end\n    return table.max(factors)\nend", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise, loop through the prime\
    \ factors of n and return the largest one\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      return i\n    end\n  end\nend", "  if n < 2 then return 1 end\n\
    \  if n % 2 == 0 then return 2 end\n  local m = math.floor(n/3)\n  if n % 3 ==\
    \ 0 then return m end\n  local m2 = math.floor(m*2)\n  if m * m == n then return\
    \ m end\n  if m2 == n then return m end\n  if m * m2 == n then return m2 end\n\
    \  if m * m * m2 == n then return m*m end\n  return nil\nend", "  -- Base case:\
    \ n is 1 or even. Return the smallest factor.\n  if n <= 1 then return 1 end\n\
    \  -- If n is prime, return its largest factor.\n  if prime_table[n] then return\
    \ prime_table[n] end\n  -- If n is composite and larger than the largest prime\
    \ factor so far,\n  -- then it must be larger than any prime factor of the largest\n\
    \  -- prime factor so far. Thus it must be prime. Return the largest\n  -- prime\
    \ factor of the composite n.\n  local largest = largest_prime_factor(n / 2)\n\
    \  -- If n is composite and smaller than the largest prime factor so far,\n  --\
    \ then it must be smaller than any prime factor of the largest\n  -- prime factor\
    \ so far. Thus it must be a composite and largest prime\n  -- factor of the composite\
    \ n. Return the largest prime factor of the\n  -- composite n.\n  if n <= largest\
    \ then return largest end\n  -- If n is composite and larger than the largest\
    \ prime factor so far,\n  -- then it must be larger than any prime factor of the\
    \ largest\n  -- prime factor so far. Thus it must be prime. Return the largest\n\
    \  -- prime factor of the composite n.\n  largest = largest_prime_factor(n / 2)\n\
    \  -- If n is composite and smaller than the largest prime factor so far,\n  --\
    \ then it must be smaller than any prime factor of the largest\n  -- prime factor\
    \ so far. Thus it must be a composite and largest prime\n  -- factor of the composite\
    \ n. Return the largest prime factor of the\n  -- composite n.\n  if n <= largest\
    \ then return largest end\n  -- If n is composite and larger than the largest\
    \ prime factor so far,\n  -- then it must be larger than any prime factor of the\
    \ largest\n  -- prime factor so far. Thus it must be prime. Return the largest\n\
    \  -- prime factor of the composite n.\n  largest = largest_prime_factor(n / 2)\n\
    \  -- If n is composite and smaller than the largest prime factor so far,\n  --\
    \ then it must be smaller than any prime factor of the largest\n  -- prime factor\
    \ so far. Thus it must be a composite and largest prime\n  -- factor of the composite\
    \ n. Return the largest prime factor of the\n  -- composite n.\n  if n <= largest\
    \ then return largest end\n  -- If n is composite and larger than the largest\
    \ prime factor so far,\n  -- then it must be larger than any prime factor of the\
    \ largest\n  -- prime factor so far. Th", "  -- Base case: n is prime.\n  if n\
    \ == 1 then\n    return 1\n  end", "  -- The largest prime factor is n-1 if n\
    \ is odd and n+1 if n is even.\n  -- The largest prime factor is 2 if n is odd\
    \ and 3 if n is even.\n  -- The largest prime factor is 1 if n is odd and 4 if\
    \ n is even.\n  -- The largest prime factor is 1 if n is even and 3 if n is odd.\n\
    \  -- The largest prime factor is 2 if n is even and 4 if n is odd.\n  -- The\
    \ largest prime factor is 3 if n is even and 5 if n is odd.\n  -- The largest\
    \ prime factor is 4 if n is even and 6 if n is odd.\n  -- The largest prime factor\
    \ is 5 if n is even and 7 if n is odd.\n  -- The largest prime factor is 6 if\
    \ n is even and 8 if n is odd.\n  -- The largest prime factor is 7 if n is even\
    \ and 9 if n is odd.\n  -- The largest prime factor is 8 if n is even and 10 if\
    \ n is odd.\n  -- The largest prime factor is 9 if n is even and 11 if n is odd.\n\
    \  -- The largest prime factor is 10 if n is even and 12 if n is odd.\n  -- The\
    \ largest prime factor is 11 if n is even and 13 if n is odd.\n  -- The largest\
    \ prime factor is 12 if n is even and 14 if n is odd.\n  -- The largest prime\
    \ factor is 13 if n is even and 15 if n is odd.\n  -- The largest prime factor\
    \ is 14 if n is even and 16 if n is odd.\n  -- The largest prime factor is 15\
    \ if n is even and 17 if n is odd.\n  -- The largest prime factor is 16 if n is\
    \ even and 18 if n is odd.\n  -- The largest prime factor is 17 if n is even and\
    \ 19 if n is odd.\n  -- The largest prime factor is 18 if n is even and 20 if\
    \ n is odd.\n  -- The largest prime factor is 19 if n is even and 21 if n is odd.\n\
    \  -- The largest prime factor is 20 if n is even and 22 if n is odd.\n  -- The\
    \ largest prime factor is 21 if n is even and 23 if n is odd.\n  -- The largest\
    \ prime factor is 22 if n is even and 24 if n is odd.\n  -- The largest prime\
    \ factor is 23 if n is even ", "  -- Base case\n  if n == 1 then\n    return 1\n\
    \  end\n  -- If n is prime, return its largest factor\n  if is_prime(n) then\n\
    \    local factor = 1\n    while n % factor == 0 do\n      factor = factor * 2\n\
    \    end\n    return factor\n  end\n  -- If n is not prime, return its largest\
    \ prime factor\n  local factor = 1\n  while n % factor == 0 do\n    factor = factor\
    \ * 2\n  end\n  return factor\nend", "  -- Base case\n  if n == 1 then\n    return\
    \ 1\n  end", "  -- Base case\n  if n == 1 then\n    return 1\n  end", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is even, return its largest factor of\
    \ 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd, return its largest factor\
    \ of 3\n  if n % 2 == 1 then return 3 end\n  -- If n is prime, return its largest\
    \ factor of 5\n  if prime_table[n] then return 5 end\n  -- Otherwise, loop over\
    \ all prime factors of n and return the largest one\n  for i = 2, n do\n    if\
    \ prime_table[i] then return i end\n  end\nend", "  -- Base case: n is prime.\n\
    \  if n == 1 then\n    return 1\n  end", "  -- The largest prime factor is n-1\
    \ if n is odd and n+1 if n is even.\n  -- The largest prime factor is 2 if n is\
    \ odd and 3 if n is even.\n  -- The largest prime factor is 3 if n is odd and\
    \ 5 if n is even.\n  -- The largest prime factor is 5 if n is odd and 7 if n is\
    \ even.\n  -- The largest prime factor is 7 if n is odd and 11 if n is even.\n\
    \  -- The largest prime factor is 11 if n is odd and 13 if n is even.\n  -- The\
    \ largest prime factor is 13 if n is odd and 17 if n is even.\n  -- The largest\
    \ prime factor is 17 if n is odd and 19 if n is even.\n  -- The largest prime\
    \ factor is 19 if n is odd and 23 if n is even.\n  -- The largest prime factor\
    \ is 23 if n is odd and 29 if n is even.\n  -- The largest prime factor is 29\
    \ if n is odd and 31 if n is even.\n  -- The largest prime factor is 31 if n is\
    \ odd and 37 if n is even.\n  -- The largest prime factor is 37 if n is odd and\
    \ 43 if n is even.\n  -- The largest prime factor is 43 if n is odd and 47 if\
    \ n is even.\n  -- The largest prime factor is 47 if n is odd and 53 if n is even.\n\
    \  -- The largest prime factor is 53 if n is odd and 59 if n is even.\n  -- The\
    \ largest prime factor is 59 if n is odd and 63 if n is even.\n  -- The largest\
    \ prime factor is 63 if n is odd and 67 if n is even.\n  -- The largest prime\
    \ factor is 67 if n is odd and 71 if n is even.\n  -- The largest prime factor\
    \ is 71 if n is odd and 73 if n is even.\n  -- The largest prime factor is 73\
    \ if n is odd and 79 if n is even.\n  -- The largest prime factor is 79 if n is\
    \ odd and 83 if n is even.\n  -- The largest prime factor is 83 if n is odd and\
    \ 89 if n is even.\n  -- The largest prime factor is 89 if n is odd and 97 if\
    \ n is even.\n  -- The largest prime factor is 97 if n is odd and 101 if n is\
    \ even.\n", "    local factors = {}\n    for i = 2, n do\n        if n % i ==\
    \ 0 then\n            table.insert(factors, i)\n        end\n    end\n    table.sort(factors)\n\
    \    return factors[#factors]\nend", "    local factors = {}\n    local i = 1\n\
    \    while i <= math.sqrt(n) do\n        if n % i == 0 then\n            factors[i]\
    \ = i\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    local largest = factors[#factors]\n    if largest == n then\n  \
    \      return largest\n    else\n        return largest * largest_prime_factor(largest)\n\
    \    end\nend", "  -- Base case\n  if n == 1 then\n    return 1\n  end", "  --\
    \ Base case\n  if n < 2 then return 1 end", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 then return 2 end\n  -- If n is prime, return its prime factors.\n\
    \  if prime_table[n] then return prime_table[n] end\n  -- If n is odd, return\
    \ its smallest prime factor of 3 or greater.\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- If n is even, return its smallest prime factor of 5 or greater.\n\
    \  local factor = 5\n  while n % factor == 0 do\n    factor = factor * 3\n  end\n\
    \  return factor\nend", "    local factor = 1\n    while n > 1 do\n        if\
    \ n % factor == 0 then\n            n = n / factor\n        else\n           \
    \ factor = factor + 1\n        end\n    end\n    return factor\nend", "  -- Base\
    \ case: n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n\
    \  if n < 2 then return 1 end\n  -- If n is prime, return n\n  if n == 2 then\
    \ return n end\n  -- If n is even, return the largest prime factor of n/2\n  if\
    \ n % 2 == 0 then\n    local p = largest_prime_factor(n / 2)\n    if p > n then\
    \ return p end\n  end\n  -- If n is odd, return the largest prime factor of 3*n+1\n\
    \  local p = 3\n  while n % p == 0 do\n    p = p * 3 + 1\n  end\n  if p > n then\
    \ return p end\n  -- If n is prime, return n\n  if n == p then return n end\n\
    \  -- If n is even, return the largest prime factor of n/2\n  if n % 2 == 0 then\n\
    \    local p = largest_prime_factor(n / 2)\n    if p > n then return p end\n \
    \ end\n  -- If n is odd, return the largest prime factor of 3*n+1\n  local p =\
    \ 3\n  while n % p == 0 do\n    p = p * 3 + 1\n  end\n  if p > n then return p\
    \ end\n  -- If n is prime, return n\n  if n == p then return n end\n  -- If n\
    \ is even, return the largest prime factor of n/2\n  if n % 2 == 0 then\n    local\
    \ p = largest_prime_factor(n / 2)\n    if p > n then return p end\n  end\n  --\
    \ If n is odd, return the largest prime factor of 3*n+1\n  local p = 3\n  while\
    \ n % p == 0 do\n    p = p * 3 + 1\n  end\n  if p > n then return p end\n  --\
    \ If n is prime, return n\n  if n == p then return n end\n  -- If n is even, return\
    \ the largest prime factor of n/2\n  if n % 2 == 0 then\n    local p = largest_prime_factor(n\
    \ / 2)\n    if p > n then return p end\n  end\n  -- If n is odd, return the largest\
    \ prime factor of 3*n+1\n  local p = 3\n  while n % p == 0 do\n    p = p * 3 +\
    \ 1\n  end\n  if p > n then return p end\n  -- If n is prime, return n\n  if n\
    \ == p then return n end\n  -- If n is even, return the largest prime factor of\
    \ n/2\n  if n % 2 == 0 then\n    local p = largest_prime_factor(n / 2)\n    if\
    \ p > n then return p end\n  end\n  -- If n is ", "  -- Base case: n is 1 or even.\n\
    \  if n == 1 then return 2 end\n  -- If n is prime, return its prime factors.\n\
    \  if is_prime(n) then return n end\n  -- If n is composite but has no prime factors,\
    \ return its smallest factor.\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- Otherwise, find the smallest factor of n that is even.\n  local\
    \ function smallest_factor(n)\n    local function is_even(n)\n      return n %\
    \ 2 == 0\n    end\n    local function is_odd(n)\n      return n % 2 == 1\n   \
    \ end\n    local function is_prime(n)\n      return n % 2 == 0 and n > 1\n   \
    \ end\n    local function is_composite(n)\n      return n % 2 == 1 and n > 1\n\
    \    end\n    local function is_largest(n)\n      return is_even(n) and is_prime(n)\n\
    \    end\n    local function is_smallest(n)\n      return is_odd(n) and is_prime(n)\n\
    \    end\n    local function is_largest2(n)\n      return is_even(n) and is_odd(n)\n\
    \    end\n    local function is_smallest2(n)\n      return is_odd(n) and is_even(n)\n\
    \    end\n    local function is_largest3(n)\n      return is_even(n) and is_odd(n)\
    \ and is_prime(n)\n    end\n    local function is_smallest3(n)\n      return is_odd(n)\
    \ and is_even(n) and is_prime(n)\n    end\n    local function is_largest4(n)\n\
    \      return is_even(n) and is_odd(n) and is_odd(n)\n    end\n    local function\
    \ is_smallest4(n)\n      return is_odd(n) and is_even(n) and is_odd(n)\n    end\n\
    \    local function is_largest5(n)\n      return is_even(n) and is_odd(n) and\
    \ is_odd(n) and is_prime(n)\n    end\n    local function is_smallest5(n)\n   \
    \   return is_odd(n) and is_even(n) and is_odd(n) and is_prime(n)\n    end\n \
    \   local function is_largest6(n)\n      return is_even(n) and is_odd(n) and is_odd(n)\
    \ and is_odd(n)\n    end\n    local function is_smallest6(n)\n      return is_odd(n)\
    \ and is_even(n) and is_odd(n) and is_odd(n)\n    end\n    local function is_largest7(n)\n\
    \      return is_even(n) and is_odd(n) and is_odd(n) and is_odd(n) and is_prime(n)\n\
    \    end\n    local function is_smallest7(n)\n      return is_odd(n) and ", " \
    \ -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base case:\
    \ n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case: n is 3 or even.\n\
    \  if n % 2 == 0 then return 3 end\n  -- Base case: n is odd.\n  local i = 3\n\
    \  while i * i <= n do\n    if n % i == 0 then return i end\n    i = i + 2\n \
    \ end\n  return n\nend", "  -- Base case: n is less than or equal to 1.\n  if\
    \ n <= 1 then\n    return nil\n  end", "  -- Base case: n is 1 or even.\n  if\
    \ n == 1 then return 2 end", "  -- The largest prime factor is n-1 if n is odd\
    \ and n+1 if n is even.\n  -- The largest prime factor is 2 if n is odd and 1\
    \ if n is even.\n  -- The largest prime factor is 1 if n is odd and -1 if n is\
    \ even.\n  -- The largest prime factor is -1 if n is odd and -2 if n is even.\n\
    \  -- The largest prime factor is -2 if n is odd and -3 if n is even.\n  -- The\
    \ largest prime factor is -3 if n is odd and -4 if n is even.\n  -- The largest\
    \ prime factor is -4 is n is odd and -5 if n is even.\n  -- The largest prime\
    \ factor is -5 if n is odd and -6 if n is even.\n  -- The largest prime factor\
    \ is -6 if n is odd and -7 if n is even.\n  -- The largest prime factor is -7\
    \ if n is odd and -8 if n is even.\n  -- The largest prime factor is -8 if n is\
    \ odd and -9 if n is even.\n  -- The largest prime factor is -9 if n is odd and\
    \ -10 if n is even.\n  -- The largest prime factor is -10 if n is odd and -11\
    \ if n is even.\n  -- The largest prime factor is -11 if n is odd and -12 if n\
    \ is even.\n  -- The largest prime factor is -12 if n is odd and -13 if n is even.\n\
    \  -- The largest prime factor is -13 if n is odd and -14 if n is even.\n  --\
    \ The largest prime factor is -14 if n is odd and -15 if n is even.\n  -- The\
    \ largest prime factor is -15 if n is odd and -16 if n is even.\n  -- The largest\
    \ prime factor is -16 if n is odd and -17 if n is even.\n  -- The largest prime\
    \ factor is -17 if n is odd and -18 if n is even.\n  -- The largest prime factor\
    \ is -18 if n is odd and -19 if n is even.\n  -- The largest prime factor is -19\
    \ if n is odd and -20 if n is even.\n  -- The largest prime factor is -20 if n\
    \ is odd and -21 if n is even.\n  -- The largest prime factor is -21 if n is odd\
    \ and -22 if n is even.\n  -- The largest prime factor is -22 if n is odd and\
    \ -23 is n is even.\n  -- The largest prime ", "  -- Base case: n is 1 or 2.\n\
    \  if n == 1 or n == 2 then\n    return n\n  end", "    local factor = 1\n   \
    \ while n > 1 do\n        if n % factor == 0 then\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factor\nend", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n\
    \ is odd, return largest factor of 3 that divides n.\n  local function factor(n)\n\
    \    local function factors(n)\n      if n == 1 then return 2 end\n      if n\
    \ % 2 == 0 then return 2 * factors(n / 2) end\n      if n % 3 == 0 then return\
    \ 3 * factors(n / 3) end\n      return factors(n / 2)\n    end\n    return factors(n)\n\
    \  end\n  return factor(n)\nend", "  -- Base case: n is 1 or 2.\n  if n == 1 or\
    \ n == 2 then\n    return n\n  end\n  -- If n is even, return its largest factor\
    \ of n.\n  if n % 2 == 0 then\n    return largest_prime_factor(n / 2)\n  end\n\
    \  -- If n is odd, return its largest factor of 3 times its largest factor of\
    \ n.\n  local function factor(n)\n    if n % 3 == 0 then\n      return factor(n\
    \ / 3)\n    else\n      return 3 * factor(n / 3)\n    end\n  end\n  return factor(n)\n\
    end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- Base\
    \ case: n is 2 or even.\n  if n == 2 then return 2 end\n  -- Base case: n is 3\
    \ or even.\n  if n % 2 == 0 then return 3 end\n  -- Base case: n is 4 or even.\n\
    \  if n % 4 == 0 then return 2 end\n  -- Base case: n is 5 or even.\n  if n %\
    \ 8 == 0 then return 3 end\n  -- Base case: n is 6 or even.\n  if n % 16 == 0\
    \ then return 4 end\n  -- Base case: n is 7 or even.\n  if n % 32 == 0 then return\
    \ 5 end\n  -- Base case: n is 8 or even.\n  if n % 64 == 0 then return 6 end\n\
    \  -- Base case: n is 9 or even.\n  if n % 128 == 0 then return 7 end\n  -- Base\
    \ case: n is 10 or even.\n  if n % 256 == 0 then return 8 end\n  -- Base case:\
    \ n is 11 or even.\n  if n % 512 == 0 then return 9 end\n  -- Base case: n is\
    \ 12 or even.\n  if n % 1024 == 0 then return 10 end\n  -- Base case: n is 13\
    \ or even.\n  if n % 2048 == 0 then return 11 end\n  -- Base case: n is 14 or\
    \ even.\n  if n % 4096 == 0 then return 12 end\n  -- Base case: n is 15 or even.\n\
    \  if n % 8192 == 0 then return 13 end\n  -- Base case: n is 16 or even.\n  if\
    \ n % 16384 == 0 then return 14 end\n  -- Base case: n is 17 or even.\n  if n\
    \ % 32768 == 0 then return 15 end\n  -- Base case: n is 18 or even.\n  if n %\
    \ 65536 == 0 then return 16 end\n  -- Base case: n is 19 or even.\n  if n % 131072\
    \ == 0 then return 17 end\n  -- Base case: n is 20 or even.\n  if n % 262144 ==\
    \ 0 then return 18 end\n  -- Base case: n is 21 or even.\n  if n % 524288 == 0\
    \ then return 19 end\n  -- Base case: n is 22 or even.\n  if n % 1048576 == 0\
    \ then return 20 end\n  -- Base case: n is 23 or even.\n  if n % 2097152 == 0\
    \ then return 21 end", "  if n < 2 then return 1 end\n  local m = 2\n  while m\
    \ <= n do\n    if n % m == 0 then\n      n = n / m\n      return m\n    end\n\
    \    m = m + 1\n  end\n  return n\nend", "  -- Base case\n  if n < 2 then\n  \
    \  return nil\n  end", "  if n < 2 then return nil end\n  if n == 2 then return\
    \ 2 end\n  if n % 2 == 0 then return n end\n  local m = math.floor(math.sqrt(n))\n\
    \  while m ~= n do\n    if n % m == 0 then return m end\n    m = math.floor(m\
    \ / 2)\n  end\n  return nil\nend", "  -- Base case: n is 1 or even.\n  if n ==\
    \ 1 then return 2 end\n  -- If n is prime, return its largest factor of n.\n \
    \ if prime_table[n] then return prime_table[n] end\n  -- If n is even, divide\
    \ by 2 and return the largest factor of n.\n  local factor = 2\n  while n % factor\
    \ == 0 do\n    factor = factor * 2\n  end\n  return factor\nend", "  -- Base case:\
    \ n is prime.\n  if n == 1 then\n    return 1\n  end", "  -- Base case\n  if n\
    \ == 1 then\n    return 1\n  end", "    local factors = {}\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n        end\n\
    \    end\n    if #factors == 0 then\n        return n\n    end\n    local largest\
    \ = #factors\n    for i = #factors, 1, -1 do\n        if factors[largest] < factors[i]\
    \ then\n            largest = i\n        end\n    end\n    return factors[largest]\n\
    end", "  -- Base case: n is less than or equal to 1.\n  if n <= 1 then\n    return\
    \ nil\n  end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even,\
    \ return its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n\
    \ is odd, return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n\
    \  -- If n is prime, return its largest factor of 5\n  if prime_table[n] then\
    \ return 5 end\n  -- Otherwise, loop through all prime factors of n\n  for i =\
    \ 2, n do\n    if n % i == 0 then\n      -- If n is prime, return its largest\
    \ factor of i\n      if prime_table[i] then return i end\n      -- Otherwise,\
    \ return its largest factor of (i - 1)\n      return (i - 1)\n    end\n  end\n\
    end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Initialize\
    \ a list to store factors\n  local factors = {}\n  -- Initialize a variable to\
    \ store the largest prime factor\n  local largest_prime_factor = 1\n  -- Initialize\
    \ a variable to store the current number\n  local current_number = 1\n  -- Loop\
    \ through all numbers from 2 to n\n  for i = 2, n do\n    -- If i is divisible\
    \ by any number in factors, add it to current_number\n    if i ~= n and i % i\
    \ == 0 then\n      current_number = current_number * i\n      -- If current_number\
    \ is larger than largest_prime_factor, update largest_prime_factor\n      if current_number\
    \ > largest_prime_factor then\n        largest_prime_factor = current_number\n\
    \      end\n    end\n    -- Add the current number to factors\n    table.insert(factors,\
    \ current_number)\n  end\n  -- Return the largest prime factor of n\n  return\
    \ largest_prime_factor\nend", "  -- Base case\n  if n < 2 then return 1 end\n\
    \  -- If n is even, return its largest factor of 2\n  if n % 2 == 0 then return\
    \ 2 end\n  -- If n is odd, return its largest factor of 3\n  if n % 2 == 1 then\
    \ return 3 end\n  -- Otherwise, loop over all odd numbers up to sqrt(n)\n  for\
    \ i = 5, math.sqrt(n), 2 do\n    -- If n is divisible by i, return i\n    if n\
    \ % i == 0 then return i end\n  end\nend", "  -- Base case: n is prime.\n  if\
    \ n == 1 then\n    return 1\n  end", "    local factors = {}\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            table.insert(factors, i)\n     \
    \       n = n / i\n        end\n    end\n    return table.max(factors)\nend",
  "  -- The largest prime factor is n-1 if n is odd and n+1 if n is even.\n  -- The\
    \ largest prime factor is 2 if n is odd and 1 if n is even.\n  -- The largest\
    \ prime factor is 1 if n is odd and -1 if n is even.\n  -- The largest prime factor\
    \ is -1 if n is odd and -2 if n is even.\n  -- The largest prime factor is -2\
    \ if n is odd and -3 if n is even.\n  -- The largest prime factor is -3 if n is\
    \ odd and -4 if n is even.\n  -- The largest prime factor is -4 if n is odd and\
    \ -5 if n is even.\n  -- The largest prime factor is -5 if n is odd and -6 if\
    \ n is even.\n  -- The largest prime factor is -6 if n is odd and -7 if n is even.\n\
    \  -- The largest prime factor is -7 if n is odd and -8 if n is even.\n  -- The\
    \ largest prime factor is -8 if n is odd and -9 if n is even.\n  -- The largest\
    \ prime factor is -9 if n is odd and -10 if n is even.\n  -- The largest prime\
    \ factor is -10 if n is odd and -11 if n is even.\n  -- The largest prime factor\
    \ is -11 if n is odd and -12 if n is even.\n  -- The largest prime factor is -12\
    \ if n is odd and -13 if n is even.\n  -- The largest prime factor is -13 if n\
    \ is odd and -14 if n is even.\n  -- The largest prime factor is -14 if n is odd\
    \ and -15 if n is even.\n  -- The largest prime factor is -15 if n is odd and\
    \ -16 if n is even.\n  -- The largest prime factor is -16 if n is odd and -17\
    \ if n is even.\n  -- The largest prime factor is -17 if n is odd and -18 if n\
    \ is even.\n  -- The largest prime factor is -18 if n is odd and -19 if n is even.\n\
    \  -- The largest prime factor is -19 if n is odd and -20 if n is even.\n  --\
    \ The largest prime factor is -20 if n is odd and -21 if n is even.\n  -- The\
    \ largest prime factor is -21 if n is odd and -22 if n is even.\n  -- The largest\
    \ prime factor is -22 if n is odd and -23 if n is even.\n  -- The largest prime ",
  "  -- Base case: n is 1 or even.\n  if n == 1 then\n    return 1\n  end", "  --\
    \ Base case\n  if n < 2 then return 1 end\n  -- If n is prime, return it\n  if\
    \ primes[n] then return primes[n] end\n  -- If n is divisible by 2, return it\n\
    \  if n % 2 == 0 then return 2 end\n  -- If n is divisible by 3, return it\n \
    \ if n % 3 == 0 then return 3 end\n  -- If n is divisible by 5, return it\n  if\
    \ n % 5 == 0 then return 5 end\n  -- If n is divisible by 7, return it\n  if n\
    \ % 7 == 0 then return 7 end\n  -- If n is divisible by 11, return it\n  if n\
    \ % 11 == 0 then return 11 end\n  -- If n is divisible by 13, return it\n  if\
    \ n % 13 == 0 then return 13 end\n  -- If n is divisible by 17, return it\n  if\
    \ n % 17 == 0 then return 17 end\n  -- If n is divisible by 19, return it\n  if\
    \ n % 19 == 0 then return 19 end\n  -- If n is divisible by 23, return it\n  if\
    \ n % 23 == 0 then return 23 end\n  -- If n is divisible by 29, return it\n  if\
    \ n % 29 == 0 then return 29 end\n  -- If n is divisible by 31, return it\n  if\
    \ n % 31 == 0 then return 31 end\n  -- If n is divisible by 37, return it\n  if\
    \ n % 37 == 0 then return 37 end\n  -- If n is divisible by 41, return it\n  if\
    \ n % 41 == 0 then return 41 end\n  -- If n is divisible by 43, return it\n  if\
    \ n % 43 == 0 then return 43 end\n  -- If n is divisible by 47, return it\n  if\
    \ n % 47 == 0 then return 47 end\n  -- If n is divisible by 53, return it\n  if\
    \ n % 53 == 0 then return 53 end\n  -- If n is divisible by 59, return it\n  if\
    \ n % 59 == 0 then return 59 end\n  -- If n is divisible by 61, return it\n  if\
    \ n % 61 == 0 then return 61 end\n  -- If n is divisible by 67, return it\n  if\
    \ n % 67 == 0 then return 67 end\n  -- If n is divisible by 71, return it\n  if\
    \ n % 71 == 0 then return 71 end\n  -- If n is divisible by 73, return it\n  if\
    \ n % 73 == 0 then return 73 end\n  -- If n is ", "  -- Base case\n  if n < 2\
    \ then\n    return nil\n  end", "  if n < 2 then return nil end\n  if n == 2 then\
    \ return 1 end\n  if n % 2 == 0 then return n end\n  local m = math.floor(math.sqrt(n))\n\
    \  while m ~= 1 do\n    if n % m == 0 then\n      return m\n    end\n    m = m\
    \ / 2\n  end\n  return nil\nend", "    local factors = {}\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            table.insert(factors, i)\n          \
    \  n = n / i\n        end\n    end\n    return table.max(factors)\nend", "  --\
    \ Base case: n is 1 or even.\n  if n == 1 then return 2 end\n  -- If n is prime,\
    \ return its prime factors.\n  if prime_table[n] then return prime_table[n] end\n\
    \  -- If n is odd, return its smallest prime factor.\n  local factor = 2\n  while\
    \ n % factor == 0 do\n    factor = factor * 2\n  end\n  -- Return the largest\
    \ prime factor of n.\n  return factor\nend", "  -- Base case: n is prime.\n  if\
    \ n == 1 then\n    return 1\n  end", "  -- Base case\n  if n == 1 then\n    return\
    \ 1\n  end", "  -- Base case: n is 1 or even.\n  if n == 1 then\n    return 1\n\
    \  end\n  -- Base case: n is 2 or even.\n  if n == 2 then\n    return 2\n  end\n\
    \  -- Base case: n is 3 or even.\n  if n % 2 == 0 then\n    return 3\n  end\n\
    \  -- Base case: n is 4 or even.\n  if n % 4 == 0 then\n    return 4\n  end\n\
    \  -- Base case: n is 5, 7, 11, 13, or 17.\n  if n % 8 == 0 then\n    return 5\n\
    \  end\n  -- Base case: n is 6, 11, 13, 17, 19, 23, 29, or 31.\n  if n % 16 ==\
    \ 0 then\n    return 6\n  end\n  -- Base case: n is 7, 11, 13, 17, 19, 23, 29,\
    \ 31, or 31.\n  if n % 32 == 0 then\n    return 7\n  end\n  -- Base case: n is\
    \ 8, 12, 16, 20, 24, 28, 32, or 36.\n  if n % 64 == 0 then\n    return 8\n  end\n\
    \  -- Base case: n is 9, 15, 21, 28, 35, 42, 49, 53, 57, or 61.\n  if n % 128\
    \ == 0 then\n    return 9\n  end\n  -- Base case: n is 10, 20, 30, 40, 50, 60,\
    \ 70, 80, 90, or 100.\n  if n % 256 == 0 then\n    return 10\n  end\n  -- Base\
    \ case: n is 11, 22, 33, 44, 55, 66, 77, 88, 99, or 111.\n  if n % 512 == 0 then\n\
    \    return 11\n  end\n  -- Base case: n is 12, 24, 36, 48, 60, 72, 84, 96, 108,\
    \ 120, or 121.\n  if n % 1024 == 0 then\n    return 12\n  end\n  -- Base case:\
    \ n is 13, 25, 37, 49, 62, 75, 89, 101, 123, 135, or 137.\n  if n % 2048 == 0\
    \ then\n    return 13\n  end\n  -- Base case: n is 14, 26, 38, 50, 63, 76, 91,\
    \ 103, 125, 138, or 141.\n  if n % 4096 == 0 then\n    return 14\n  end\n  --\
    \ Base case: n is 15, 27, 39, 51, 65, 77, 93, 105, 127, 143, or 145.\n  if n %\
    \ 8192 == 0 then\n    return 15\n  end\n  -- Base case: n is 16, 28, 40, 52, 66,\
    \ 78, 94, 106, 128, 144, or 146.\n  if n % 16384 == 0 then\n    return 16\n  end\n\
    \  -- Base case: n is 17, 29, 41, 53, 67, 79, 95, 107, 129, 14", "  -- Base case:\
    \ n is 1 or even. Return 1.\n  if n == 1 then return 1 end\n  -- Base case: n\
    \ is prime. Return n.\n  if prime_table[n] then return n end\n  -- Base case:\
    \ n is even. Return 2.\n  if n % 2 == 0 then return 2 end\n  -- Find smallest\
    \ factor of n that is greater than 1.\n  local factor = 2\n  while factor < n\
    \ do\n    factor = factor + 1\n    -- If n is divisible by factor, divide n by\
    \ factor.\n    if n % factor == 0 then\n      n = n / factor\n      -- If n is\
    \ now greater than 1, divide n by 2.\n      if n > 1 then\n        n = n / 2\n\
    \      end\n      -- If n is now less than 1, divide n by 1.\n      if n < 1 then\n\
    \        n = n / 1\n      end\n      -- If n is now 1, return n.\n      if n ==\
    \ 1 then return n end\n      -- If n is now greater than 1, return 2.\n      if\
    \ n > 1 then return 2 end\n      -- If n is now less than 1, return 1.\n     \
    \ if n < 1 then return 1 end\n    end\n  end\n  -- If n is greater than 1, return\
    \ 2.\n  if n > 1 then return 2 end\n  -- If n is less than 1, return 1.\n  if\
    \ n < 1 then return 1 end\nend", "  -- Base case: n is 1 or even. Return 1.\n\
    \  if n == 1 then return 1 end\n  -- Base case: n is prime. Return the largest\
    \ prime factor of n.\n  if n % 2 == 0 then\n    local m = 2\n    while m <= n\
    \ do\n      if n % m == 0 then\n        return m\n      end\n      m = m + 1\n\
    \    end\n  end\n  -- Base case: n is odd. Return largest prime factor of n /\
    \ 2.\n  local m = 2\n  while m <= n do\n    if n % m == 0 then\n      return m\n\
    \    end\n    m = m + 1\n  end\nend", "  -- Base case: n is prime.\n  if n ==\
    \ 1 then\n    return 1\n  end", "    local factors = {}\n    local i = 1\n   \
    \ while i <= math.sqrt(n) do\n        local p = primes[i]\n        local q = n/p\n\
    \        if q == math.ceil(q) then\n            factors[p] = i\n            n\
    \ = q\n        else\n            i = i + 1\n        end\n    end\n    return n\n\
    end", "  -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return\
    \ its largest factor of 2\n  if n % 2 == 0 then return 2 end\n  -- If n is odd,\
    \ return its largest factor of 3\n  if n % 2 == 1 then return 3 end\n  -- Otherwise,\
    \ loop through all possible factors of n and return the largest one\n  for i =\
    \ 2, n do\n    if n % i == 0 then\n      return i\n    end\n  end\nend", "  --\
    \ Base case\n  if n < 2 then\n    return nil\n  end", "  -- Base case\n  if n\
    \ < 2 then return 1 end\n  -- If n is even, return its largest prime factor\n\
    \  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If n is odd,\
    \ return its largest prime factor plus one\n  local m = math.floor(math.sqrt(n))\n\
    \  while m % 2 == 0 do\n    m = m / 2\n  end\n  return m + 1\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        local prime = true\n        for j\
    \ = 2, i do\n            if i % j == 0 then\n                prime = false\n \
    \               break\n            end\n        end\n        if prime then\n \
    \           table.insert(factors, i)\n        end\n    end\n    return table.max(factors)\n\
    end", "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end", " \
    \ -- Base case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest\
    \ prime factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n\
    \  -- If n is odd, return its largest prime factor plus one\n  local m = math.floor(n/2)\n\
    \  while m % 2 == 0 do\n    m = m / 2\n  end\n  return m + largest_prime_factor(n\
    \ / 2)\nend", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n\
    \  -- Base case: n is even.\n  if n % 2 == 0 then return largest_prime_factor(n\
    \ / 2) end\n  -- Base case: n is odd.\n  local m = math.floor(n/3)\n  -- Find\
    \ the largest prime factor of n.\n  local i = 1\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      -- If n is divisible by i, n is not a prime factor.\n\
    \      if i == m then return nil end\n      -- If n is divisible by i, n is a\
    \ prime factor.\n      return i\n    end\n    i = i + 2\n  end\nend", "  -- Base\
    \ case\n  if n < 2 then return 1 end\n  -- If n is even, return its largest prime\
    \ factor\n  if n % 2 == 0 then return largest_prime_factor(n / 2) end\n  -- If\
    \ n is odd, return its largest prime factor plus 1\n  local m = math.floor(n/2)\n\
    \  local p = largest_prime_factor(m)\n  local q = largest_prime_factor(m - 1)\n\
    \  if p * q == n then return p end\n  return p * q\nend", "  -- Base case\n  if\
    \ n < 2 then\n    return nil\n  end", "  -- Base case\n  if n == 1 then\n    return\
    \ 1\n  end", "  -- Base case: n is 1 or even.\n  if n == 1 then return 2 end\n\
    \  -- If n is prime, return its prime factors.\n  if prime_table[n] then return\
    \ prime_table[n] end\n  -- If n is odd, return its smallest prime factor.\n  local\
    \ factor = 2\n  while n % factor == 0 do\n    factor = factor * 2\n  end\n  return\
    \ factor\nend", "  -- Base case: n is 1 or 2.\n  if n == 1 or n == 2 then\n  \
    \  return n\n  end", "  -- Base case\n  if n < 2 then\n    return nil\n  end",
  "  -- Base case: n is prime.\n  if n == 1 then\n    return 1\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
