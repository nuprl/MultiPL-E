name: HumanEval_58_common
language: lua
prompt: "-- Return sorted unique common elements for two tables.\n-- >>> common({1,\
  \ 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121})\n-- {1, 5, 653}\n-- >>> common({5,\
  \ 3, 2, 8}, {3, 2})\n-- {2, 3}\nlocal function common(l1, l2)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = common\n\
  \    lu.assertEquals(candidate({1, 4, 3, 34, 653, 2, 5}, {5, 7, 1, 5, 9, 653, 121}),\
  \ {1, 5, 653})\n    lu.assertEquals(candidate({5, 3, 2, 8}, {3, 2}), {2, 3})\n \
  \   lu.assertEquals(candidate({4, 3, 2, 8}, {3, 2, 4}), {2, 3, 4})\n    lu.assertEquals(candidate({4,\
  \ 3, 2, 8}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in\
    \ ipairs(l2) do\n      if v == v2 then\n        table.insert(common, v)\n    \
    \  end\n    end\n  end\n  return common\nend", "  local common = {}\n  for _,\
    \ v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n\
    \        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  for _, v in pairs(l1) do\n\
    \    for _, v2 in pairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  local i = 1\n  while i <= #l1 do\n    local j = 1\n    while j <= #l2 do\n\
    \      if l1[i] == l2[j] then\n        table.insert(common, l1[i])\n        i\
    \ = i + 1\n        break\n      else\n        j = j + 1\n      end\n    end\n\
    \    i = i + 1\n  end\n  return common\nend", "  local common = {}\n  for _, v\
    \ in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n  \
    \      table.insert(common, v)\n      end\n    end\n  end\n  return common\nend",
  "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n\
    \      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  for _, v in ipairs(l1)\
    \ do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2\
    \ then\n        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in pairs(l1) do\n    for _, v2 in pairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  for _, v in pairs(l1) do\n\
    \    for _, v2 in pairs(l2) do\n      if v == v2 then\n        table.insert(common,\
    \ v)\n      end\n    end\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v1 in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v1 == v2\
    \ then\n        table.insert(common, v1)\n      end\n    end\n  end\n  return\
    \ common\nend", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _,\
    \ v2 in ipairs(l2) do\n      if v == v2 then\n        table.insert(common, v)\n\
    \      end\n    end\n  end\n  return common\nend", "  local common = {}\n  for\
    \ _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2) do\n      if v == v2 then\n\
    \        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end", "  local common = {}\n  for _, v in ipairs(l1) do\n    for _, v2 in ipairs(l2)\
    \ do\n      if v == v2 then\n        table.insert(common, v)\n      end\n    end\n\
    \  end\n  return common\nend", "  local common = {}\n  local i1, i2 = 1, #l1\n\
    \  while i1 <= i2 do\n    local i3 = i1 + 1\n    while i3 <= i2 do\n      if l1[i1]\
    \ == l2[i3] then\n        common[#common+1] = l1[i1]\n        i1, i3 = i1 + 1,\
    \ i3 + 1\n      else\n        i3, i2 = i2 + 1, i3 + 1\n      end\n    end\n  \
    \  i1, i2 = i1 + 1, i2 + 1\n  end\n  return common\nend", "  local common = {}\n\
    \  for _, v in pairs(l1) do\n    for _, v2 in pairs(l2) do\n      if v == v2 then\n\
    \        table.insert(common, v)\n      end\n    end\n  end\n  return common\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
