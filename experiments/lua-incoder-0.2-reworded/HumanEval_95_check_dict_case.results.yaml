language: lua
name: HumanEval_95_check_dict_case
results:
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_i54x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5t2_i54x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) == 'string'\
    \ then\n      if k ~= string.lower(k) or k ~= string.upper(k) then\n        result\
    \ = false\n        break\n      end\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_hjh54o.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp0_hjh54o.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm6pxhqxl.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm6pxhqxl.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp104y3id_.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp104y3id_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            result = false\n            break\n        end\n\
    \        if type(v) ~= 'string' then\n            result = false\n           \
    \ break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9m7r0m1.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv9m7r0m1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n      break\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mrvx4bt.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7mrvx4bt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprzx08i0.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpprzx08i0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_i54x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5t2_i54x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n      break\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mrvx4bt.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7mrvx4bt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if k:lower() ~= k:upper()\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx094mjz.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvx094mjz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprzx08i0.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpprzx08i0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputf4fny6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmputf4fny6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_i54x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5t2_i54x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprzx08i0.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpprzx08i0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n      break\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mrvx4bt.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7mrvx4bt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k,v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            result = false\n            break\n        end\n\
    \        if type(v) ~= 'string' then\n            result = false\n           \
    \ break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc4yt3i7w.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc4yt3i7w.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp104y3id_.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp104y3id_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_i54x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5t2_i54x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_i54x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5t2_i54x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if k:lower() ~= k:upper()\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kfuxi7f.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2kfuxi7f.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputf4fny6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmputf4fny6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n    end\n    if type(v) ~= 'string' then\n     \
    \ result = false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf8_6uwv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprf8_6uwv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v3m4phe.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v3m4phe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not is_string(k)\
    \ then\n      result = false\n      break\n    end\n    if not is_string(v) then\n\
    \      result = false\n      break\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz56steby.lua:18:\
    \ attempt to call global 'is_string' (a nil value)\nstack traceback:\n\t/tmp/tmpz56steby.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpz56steby.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputf4fny6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmputf4fny6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ or k:lower() ~= k:upper() then\n      result = false\n      break\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qxgu7_0.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4qxgu7_0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n    end\n    if type(v) ~= 'string' then\n     \
    \ result = false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf8_6uwv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprf8_6uwv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v3m4phe.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v3m4phe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprzx08i0.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpprzx08i0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ or k:lower() ~= k:upper() then\n      result = false\n      break\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qxgu7_0.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4qxgu7_0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if k:lower() ~= k:upper()\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2kfuxi7f.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp2kfuxi7f.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if k:lower() ~= k:upper()\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx094mjz.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvx094mjz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v3m4phe.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v3m4phe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            result = false\n            break\n        end\n\
    \        if type(v) ~= 'string' then\n            result = false\n           \
    \ break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9m7r0m1.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv9m7r0m1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n    end\n    if type(v) ~= 'string' then\n     \
    \ result = false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprf8_6uwv.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprf8_6uwv.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n      break\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvue7bok.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvvue7bok.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n      break\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvue7bok.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvvue7bok.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n      break\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7mrvx4bt.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7mrvx4bt.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) == 'string'\
    \ then\n      if k:lower() ~= k then\n        result = false\n        break\n\
    \      end\n      if k:upper() ~= k then\n        result = false\n        break\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2xa_lkw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp2xa_lkw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ or k:lower() ~= k:upper() then\n      result = false\n      break\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qxgu7_0.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4qxgu7_0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if k:lower() ~= k:upper()\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx094mjz.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvx094mjz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputf4fny6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmputf4fny6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpprzx08i0.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpprzx08i0.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not (type(k) == 'string'\
    \ or type(k) == 'number') then\n      result = false\n      break\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvvue7bok.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpvvue7bok.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_i54x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5t2_i54x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v3m4phe.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v3m4phe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v3m4phe.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v3m4phe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v3m4phe.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v3m4phe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5t2_i54x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5t2_i54x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0v3m4phe.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0v3m4phe.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if k:lower() ~= k:upper()\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx094mjz.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvx094mjz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' then\n            result = false\n            break\n        end\n\
    \        if type(v) ~= 'string' then\n            result = false\n           \
    \ break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv9m7r0m1.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv9m7r0m1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if not type(k) == 'string'\
    \ then\n      result = false\n      break\n    end\n    if not type(v) == 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp104y3id_.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp104y3id_.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputf4fny6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmputf4fny6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if k:lower() ~= k:upper()\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvx094mjz.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvx094mjz.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(k) ~= 'string'\
    \ or k:lower() ~= k:upper() then\n      result = false\n      break\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple',\
    \ ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4qxgu7_0.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4qxgu7_0.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \    local result = true\n    for k, v in pairs(dict) do\n        if type(k) ~=\
    \ 'string' or type(v) ~= 'string' then\n            result = false\n         \
    \   break\n        end\n    end\n    return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = check_dict_case\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['b'] = 'banana'}), true)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['A'] = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputf4fny6.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmputf4fny6.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ or type(v) ~= 'string' then\n      result = false\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = check_dict_case\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['b']\
    \ = 'banana'}), true)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['A']\
    \ = 'banana', ['B'] = 'banana'}), false)\n    lu.assertEquals(candidate({['p']\
    \ = 'pineapple', ['5'] = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4khw_wjc.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4khw_wjc.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k,v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptt1uea_r.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmptt1uea_r.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
- exit_code: 1
  program: "-- Given a table, return true if all keys are strings in lower \n-- case\
    \ or all keys are strings in upper case, else return false.\n-- The function should\
    \ return false is the given table is empty.\n-- Examples:\n-- >>> check_dict_case({['a']\
    \ = 'apple', ['b'] = 'banana'})\n-- true\n-- >>> check_dict_case({['a'] = 'apple',\
    \ ['A'] = 'banana', ['B'] = 'banana'})\n-- false\n-- >>> check_dict_case({['a']\
    \ = 'apple', [8] = 'banana', ['a'] = 'apple'})\n-- false\n-- >>> check_dict_case({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'})\n-- false\n-- >>> check_dict_case({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'})\n-- true\nlocal function check_dict_case(dict)\n\
    \  local result = true\n  for k, v in pairs(dict) do\n    if type(k) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n    if type(v) ~= 'string'\
    \ then\n      result = false\n      break\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = check_dict_case\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['b'] = 'banana'}), true)\n\
    \    lu.assertEquals(candidate({['p'] = 'pineapple', ['A'] = 'banana', ['B'] =\
    \ 'banana'}), false)\n    lu.assertEquals(candidate({['p'] = 'pineapple', ['5']\
    \ = 'banana', ['a'] = 'apple'}), false)\n    lu.assertEquals(candidate({['Name']\
    \ = 'John', ['Age'] = '36', ['City'] = 'Houston'}), false)\n    lu.assertEquals(candidate({['STATE']\
    \ = 'NC', ['ZIP'] = '12345'}), true)\n    lu.assertEquals(candidate({['fruit']\
    \ = 'Orange', ['taste'] = 'Sweet'}), true)\n    lu.assertEquals(candidate({}),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiq372haw.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiq372haw.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750468
