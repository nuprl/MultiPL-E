name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a table of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\n-- >>> match_parens({'()(',\
  \ ')'})\n-- 'Yes'\n-- >>> match_parens({')', ')'})\n-- 'No'\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local open = 0\n  local close = 0\n  local good = false\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        good\
    \ = false\n        break\n      end\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif open == close then\n      good = true\n \
    \   end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local good = true\n  local stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      local top = stack[#stack + 1]\n      if top\
    \ ~= i then\n        good = false\n        break\n      end\n      stack[#stack]\
    \ = nil\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n  if good\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close_balance = close_balance\
    \ + 1\n    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n  \
    \  elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    end\n\
    \  end\n  if open_balance == close_balance then\n    return 'Yes'\n  else\n  \
    \  return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  if open == close then\n    return 'Yes'\n  end\n  return match_parens(lst)\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open == close\
    \ then\n      good = false\n    end\n  end\n  return good\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n  \
    \    if open ~= close then\n        good = false\n        break\n      end\n \
    \     open = open - 1\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    else\n      if open ~= close then\n        return false\n \
    \     end\n      result[#result + 1] = lst[i]\n    end\n  end\n  if open ~= close\
    \ then\n    return false\n  end\n  return result\nend", "  local stack = {}\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        stack[#stack + 1]\
    \ = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n\
    \  local good = 1\n  local i = #lst\n  while i > 0 do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        good = 0\n      end\n    end\n    i = i\
    \ - 1\n  end\n  if good then\n    return 'Yes'\n  end\n  return 'No'\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ result = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      if open\
    \ > close then\n        result = false\n        break\n      end\n      open =\
    \ open - 1\n    elseif lst[i] == ')' then\n      if open < close then\n      \
    \  result = false\n        break\n      end\n      close = close - 1\n    end\n\
    \  end\n  if result then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' and open > 0 then\n      stack[#stack + 1] = lst[i]\n      open\
    \ = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      open = open +\
    \ 1\n      close = close - 1\n    elseif lst[i] == ')' and open > 0 then\n   \
    \   open = open + 1\n    elseif lst[i] == '(' and close > 0 then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local stack_string = table.concat(stack)\n  local stack_string_count = #stack_string\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  local stack_string_count\
    \ = #stack_string\n  if stack_string ~= stack_string then\n    return 'No'\n \
    \ end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'", "  local stack = {}\n  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  stack[#stack + 1] = i\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        if #stack == 0\
    \ then\n          return 'Yes'\n        else\n          local top = stack[#stack\
    \ + 1]\n          local bottom = stack[#stack]\n          local left = lst[top\
    \ + 1]\n          local right = lst[bottom + 1]\n          if left ~= right then\n\
    \            return 'No'\n          end\n        end\n      end\n    end\n  end\n\
    \  return 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open == close then\n   \
    \ return 'Yes'\n  end\n  if open > close then\n    return 'No'\n  end\n  return\
    \ match_parens(lst)\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    result = 'Yes'\n  end\n  return result\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= close\
    \ then\n      return 'No'\n    elseif lst[i] == ')' and close ~= open then\n \
    \     return 'No'\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = ''\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] ==\
    \ '(' and close > open then\n      close = close - 1\n      result = result ..\
    \ lst[i]\n    elseif lst[i] == ')' and open > close then\n      open = open -\
    \ 1\n      result = result .. lst[i]\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        stack[#stack +\
    \ 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n \
    \ else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        stack[#stack +\
    \ 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n \
    \ else\n    return 'Yes'\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
