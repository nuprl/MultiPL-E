name: HumanEval_119_match_parens
language: lua
prompt: "-- You are given a table of two strings, both strings consist of open\n--\
  \ parentheses '(' or close parentheses ')' only.\n-- Your job is to check if it\
  \ is possible to concatenate the two strings in\n-- some order, that the resulting\
  \ string will be good.\n-- A string S is considered to be good if and only if all\
  \ parentheses in S\n-- are balanced. For example: the string '(())()' is good, while\
  \ the string\n-- '())' is not.\n-- Return 'Yes' if there's a way to make a good\
  \ string, and return 'No' otherwise.\n-- Examples:\n-- >>> match_parens({'()(',\
  \ ')'})\n-- 'Yes'\n-- >>> match_parens({')', ')'})\n-- 'No'\nlocal function match_parens(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = match_parens\n\
  \    lu.assertEquals(candidate({'()(', ')'}), 'Yes')\n    lu.assertEquals(candidate({')',\
  \ ')'}), 'No')\n    lu.assertEquals(candidate({'(()(())', '())())'}), 'No')\n  \
  \  lu.assertEquals(candidate({')())', '(()()('}), 'Yes')\n    lu.assertEquals(candidate({'(())))',\
  \ '(()())(('}), 'Yes')\n    lu.assertEquals(candidate({'()', '())'}), 'No')\n  \
  \  lu.assertEquals(candidate({'(()(', '()))()'}), 'Yes')\n    lu.assertEquals(candidate({'((((',\
  \ '((())'}), 'No')\n    lu.assertEquals(candidate({')(()', '(()('}), 'No')\n   \
  \ lu.assertEquals(candidate({')(', ')('}), 'No')\n    lu.assertEquals(candidate({'(',\
  \ ')'}), 'Yes')\n    lu.assertEquals(candidate({')', '('}), 'Yes')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local open = 0\n  local close = 0\n  local good = false\n  for i\
    \ = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        good\
    \ = false\n        break\n      end\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif open == close then\n      good = true\n \
    \   end\n  end\n  return good\nend", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local good = true\n  local stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      local top = stack[#stack + 1]\n      if top\
    \ ~= i then\n        good = false\n        break\n      end\n      stack[#stack]\
    \ = nil\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n  if good\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close_balance = close_balance\
    \ + 1\n    elseif lst[i] == '(' and open ~= 0 then\n      open = open + 1\n  \
    \  elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n    end\n\
    \  end\n  if open_balance == close_balance then\n    return 'Yes'\n  else\n  \
    \  return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  if open == close then\n    return 'Yes'\n  end\n  return match_parens(lst)\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open == close\
    \ then\n      good = false\n    end\n  end\n  return good\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n     \
    \ open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n  \
    \    if open ~= close then\n        good = false\n        break\n      end\n \
    \     open = open - 1\n    end\n  end\n  return good\nend", "  local open = 0\n\
    \  local close = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    else\n      if open ~= close then\n        return false\n \
    \     end\n      result[#result + 1] = lst[i]\n    end\n  end\n  if open ~= close\
    \ then\n    return false\n  end\n  return result\nend", "  local stack = {}\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        stack[#stack + 1]\
    \ = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n\
    \  local good = 1\n  local i = #lst\n  while i > 0 do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        good = 0\n      end\n    end\n    i = i\
    \ - 1\n  end\n  if good then\n    return 'Yes'\n  end\n  return 'No'\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ result = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      if open\
    \ > close then\n        result = false\n        break\n      end\n      open =\
    \ open - 1\n    elseif lst[i] == ')' then\n      if open < close then\n      \
    \  result = false\n        break\n      end\n      close = close - 1\n    end\n\
    \  end\n  if result then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' and open > 0 then\n      stack[#stack + 1] = lst[i]\n      open\
    \ = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      open = open +\
    \ 1\n      close = close - 1\n    elseif lst[i] == ')' and open > 0 then\n   \
    \   open = open + 1\n    elseif lst[i] == '(' and close > 0 then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local stack_string = table.concat(stack)\n  local stack_string_count = #stack_string\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  local stack_string_count\
    \ = #stack_string\n  if stack_string ~= stack_string then\n    return 'No'\n \
    \ end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'\n  end\n  if stack_string ~= stack_string\
    \ then\n    return 'No'\n  end\n  if stack_string ~= stack_string then\n    return\
    \ 'No'\n  end\n  if stack_string ~= stack_string then\n    return 'No'\n  end\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  if stack_string\
    \ ~= stack_string then\n    return 'No'", "  local stack = {}\n  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  stack[#stack + 1] = i\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        if #stack == 0\
    \ then\n          return 'Yes'\n        else\n          local top = stack[#stack\
    \ + 1]\n          local bottom = stack[#stack]\n          local left = lst[top\
    \ + 1]\n          local right = lst[bottom + 1]\n          if left ~= right then\n\
    \            return 'No'\n          end\n        end\n      end\n    end\n  end\n\
    \  return 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open == close then\n   \
    \ return 'Yes'\n  end\n  if open > close then\n    return 'No'\n  end\n  return\
    \ match_parens(lst)\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    result = 'Yes'\n  end\n  return result\nend", " \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= close\
    \ then\n      return 'No'\n    elseif lst[i] == ')' and close ~= open then\n \
    \     return 'No'\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = ''\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] ==\
    \ '(' and close > open then\n      close = close - 1\n      result = result ..\
    \ lst[i]\n    elseif lst[i] == ')' and open > close then\n      open = open -\
    \ 1\n      result = result .. lst[i]\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        stack[#stack +\
    \ 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n \
    \ else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        stack[#stack +\
    \ 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n \
    \ else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local stack = {}\n  local opening = 0\n  local\
    \ closing = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      opening\
    \ = opening + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      closing = closing + 1\n      if opening ~= closing then\n        return\
    \ 'No'\n      end\n    end\n  end\n  if opening ~= closing then\n    return 'No'\n\
    \  end\n  local stack_size = #stack\n  local stack_index = 1\n  local opening_stack\
    \ = {}\n  local opening_stack_index = 1\n  local opening_stack_size = 0\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ opening_stack_index = 1\n  local opening_stack_index = 1\n  local opening_stack_index\
    \ = 1\n  local opening_stack_index = 1\n  local opening_stack_index = 1\n  local\
    \ open", "  local open = 0\n  local close = 0\n  local result = {}\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        result[#result\
    \ + 1] = lst[i]\n      end\n    end\n  end\n  if #result == 0 then\n    return\
    \ 'No'\n  end\n  local good = true\n  for i = 1, #result do\n    if result[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local stack = {}\n  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = i\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n  \
    \    end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return\
    \ 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n  local result = ''\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif open == close then\n\
    \      result = result .. lst[i]\n    end\n  end\n  if open == close then\n  \
    \  return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local stack = {}\n  local\
    \ open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      stack[#stack + 1] = i\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \      if open_balance ~= close_balance then\n        return 'No'\n      end\n\
    \      open_balance = open_balance - 1\n      stack[#stack + 1] = i\n    end\n\
    \  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  local stack_size\
    \ = #stack\n  local stack_index = 1\n  local stack_value = 1\n  local stack_balance\
    \ = 0\n  local stack_balance_count = 0\n  local stack_balance_value = 1\n  local\
    \ stack_balance_count = 0\n  local stack_balance_value = 1\n  local stack_balance_count\
    \ = 0\n  local stack_balance_value = 1\n  local stack_balance_count = 0\n  local\
    \ stack_balance_value = 1\n  local stack_balance_count = 0\n  local stack_balance_value\
    \ = 1\n  local stack_balance_count = 0\n  local stack_balance_value = 1\n  local\
    \ stack_balance_count = 0\n  local stack_balance_value = 1\n  local stack_balance_count\
    \ = 0\n  local stack_balance_value = 1\n  local stack_balance_count = 0\n  local\
    \ stack_balance_value = 1\n  local stack_balance_count = 0\n  local stack_balance_value\
    \ = 1\n  local stack_balance_count = 0\n  local stack_balance_value = 1\n  local\
    \ stack_balance_count = 0\n  local stack_balance_value = 1\n  local stack_balance_count\
    \ = 0\n  local stack_balance_value = 1\n  local stack_balance_count = 0\n  local\
    \ stack_balance_value = 1\n  local stack_balance_count = 0\n  local stack_balance_value\
    \ = 1\n  local stack_balance_count = 0\n  local stack_balance_value = 1\n  local\
    \ stack_balance_count = 0\n  local stack_balance_value = 1\n  local ", "  local\
    \ open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local stack = {}\n  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = i\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n  \
    \    end\n    end\n  end\n  return #stack == 0 and 'Yes' or 'No'\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif lst[i] == ')' and open == close then\n  \
    \    good = true\n    end\n  end\n  return good\nend", "  local stack = {}\n \
    \ local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  end\n  local stack2 = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      stack2[#stack2 + 1] = i\n    elseif lst[i] == ')' then\n      stack2[#stack2\
    \ + 1] = i\n    end\n  end\n  local stack3 = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      stack3[#stack3 + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      stack3[#stack3 + 1] = i\n    end\n  end\n  local stack4 = {}\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      stack4[#stack4 + 1] = i\n\
    \    elseif lst[i] == ')' then\n      stack4[#stack4 + 1] = i\n    end\n  end\n\
    \  local stack5 = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack5[#stack5\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      stack5[#stack5 + 1] = i\n   \
    \ end\n  end\n  local stack6 = {}\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      stack6[#stack6 + 1] = i\n    elseif lst[i] == ')' then\n      stack6[#stack6\
    \ + 1] = i\n    end\n  end\n  local stack7 = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      stack7[#stack7 + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      stack7[#stack7 + 1] = i\n    end\n  end\n  local stack8 = {}\n \
    \ for i = 1, #lst do\n    if lst[i] == '(' then\n      stack8[#stack8 + 1] = i\n\
    \    elseif lst[i] == ')' then\n      stack8[#stack8 + 1] = i\n    end\n  end\n\
    \  local stack9 = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack9[#stack9\
    \ + 1] = i\n    elseif lst[i] == ", "  local stack = {}\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        stack[#stack + 1] = lst[i]\n\
    \      end\n    elseif open ~= close then\n      return false\n    end\n  end\n\
    \  if open ~= close then\n    return false\n  end\n  for i = 1, #stack do\n  \
    \  if stack[i] ~= '(' then\n      return false\n    end\n  end\n  return true\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  if open_balance ~= #lst - close then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  if open_balance ~= #lst - close + 1 then\n    return 'No'\n  end\n  return\
    \ 'Yes'\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  local\
    \ good = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        good = 0\n      end\n    \
    \  open = open - 1\n    end\n  end\n  if open ~= close then\n    good = 0\n  end\n\
    \  return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open == close then\n   \
    \ return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local\
    \ close = 0\n  local open_balance = 0\n  local close_balance = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and\
    \ open > 0 then\n      open_balance = open_balance + 1\n      open = open - 1\n\
    \    elseif lst[i] == ')' and close > 0 then\n      close_balance = close_balance\
    \ + 1\n      close = close - 1\n    elseif lst[i] == '(' and open > 0 then\n \
    \     open_balance = open_balance + 1\n      open = open - 1\n    elseif lst[i]\
    \ == ')' and close > 0 then\n      close_balance = close_balance + 1\n      close\
    \ = close - 1\n    end\n  end\n  if open_balance == close_balance then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif open == close then\n      result[#result + 1] = lst[i]\n    end\n\
    \  end\n  if #result == #lst then\n    return 'Yes'\n  else\n    return 'No'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local stack = {}\n  for i =\
    \ 1, #lst do\n    local char = lst[i]\n    if char == '(' or char == ')' then\n\
    \      stack[#stack + 1] = char\n    elseif char == '{' or char == '}' then\n\
    \      stack[#stack + 1] = char\n    elseif char == '[' or char == ']' then\n\
    \      stack[#stack + 1] = char\n    elseif char == '<' or char == '>' then\n\
    \      stack[#stack + 1] = char\n    end\n  end\n  local stack_size = #stack\n\
    \  local stack_remaining = stack_size\n  local stack_remaining_size = #stack\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_size]\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_size]\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_size]\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_size]\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_size]\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_size]\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_size]\n\
    \  local stack_remaining_char = lst[stack_remaining_size]\n  local stack_remaining_char\
    \ = lst[stack_remaining_size]\n  local stack_remaining_char = lst[stack_remaining_",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n   \
    \ return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for _, s in\
    \ ipairs(lst) do\n    if s == '(' then\n      open = open + 1\n    elseif s ==\
    \ ')' then\n      close = close + 1\n    end\n  end\n  return open >= close and\
    \ open ~= 0 and close ~= 0\nend", "  local open = 0\n  local close = 0\n  local\
    \ open_balance = 0\n  local close_balance = 0\n  local result = ''\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      close_balance = close_balance + 1\n    end\n  end\n  if open_balance ~=\
    \ close then\n    return 'No'\n  end\n  if open == 0 and close == 0 then\n   \
    \ return 'Yes'\n  end\n  if open > close then\n    local temp = open\n    open\
    \ = close\n    close = temp\n  end\n  local open_balance = open_balance - close\n\
    \  local close_balance = close_balance - open\n  if open_balance == 0 and close_balance\
    \ == 0 then\n    return 'Yes'\n  end\n  if open_balance > close_balance then\n\
    \    local temp = open_balance\n    open_balance = close_balance\n    close_balance\
    \ = temp\n  end\n  local open_balance = open_balance + close_balance\n  local\
    \ close_balance = open_balance - close\n  if open_balance == 0 and close_balance\
    \ == 0 then\n    return 'Yes'\n  end\n  if open_balance > close_balance then\n\
    \    local temp = open_balance\n    open_balance = close_balance\n    close_balance\
    \ = temp\n  end\n  local open_balance = open_balance + close_balance\n  local\
    \ close_balance = open_balance - close\n  if open_balance == 0 and close_balance\
    \ == 0 then\n    return 'Yes'\n  end\n  if open_balance > close_balance then\n\
    \    local temp = open_balance\n    open_balance = close_balance\n    close_balance\
    \ = temp\n  end\n  local open_balance = open_balance + close_balance\n  local\
    \ close_balance = open_balance - close\n  if open_balance == 0 and close_balance\
    \ == 0 then\n    return 'Yes'\n  end\n  if open_balance > close_balance then\n\
    \    local temp = open_balance\n    open_balance = close_balance\n    close_balance\
    \ = temp\n  end\n  local open_balance = open_balance + close_balance\n  local\
    \ close_balance = open_balance - ", "  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = i\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      if\
    \ open ~= close then\n        good = false\n        break\n      end\n      open\
    \ = open - 1\n    end\n  end\n  return good\nend", "  local stack = {}\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open == close\
    \ then\n    return 'Yes'\n  end\n  if open > close then\n    return 'No'\n  end\n\
    \  return match_parens(lst)\nend", "  local open = 0\n  local close = 0\n  local\
    \ result = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open\
    \ == close then\n      result[#result + 1] = lst[i]\n    end\n  end\n  return\
    \ #result == #lst\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local open_balance = 1\n  local close_balance = 1\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n    if open_balance ~= close_balance then\n      return 'No'\n    end\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for _, s\
    \ in ipairs(lst) do\n    if s == '(' then\n      open = open + 1\n    elseif s\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local stack = {}\n  for _, s in ipairs(lst) do\n  \
    \  if s == '(' then\n      stack[#stack + 1] = s\n    elseif s == ')' then\n \
    \     local top = stack[#stack + 1]\n      if top ~= '(' then\n        return\
    \ 'No'\n      end\n      stack[#stack + 1] = nil\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local stack = {}\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n    return 'No'\n\
    \  else\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  if\
    \ open_balance ~= #lst - close + 1 then\n    return 'No'\n  end\n  return 'Yes'\n\
    end", "  local open = 0\n  local close = 0\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0\
    \ then\n      open_balance = open_balance + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close_balance = close_balance + 1\n    end\n    if lst[i] ==\
    \ '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and\
    \ close ~= 0 then\n      close = close + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  if open ~= close then\n    return 'Yes'\n\
    \  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' or lst[i] == ')' then\n   \
    \   if lst[i] == '(' then\n        open = open + 1\n      else\n        close\
    \ = close + 1\n      end\n    elseif lst[i] == '[' then\n      stack[#stack +\
    \ 1] = lst[i]\n    elseif lst[i] == ']' then\n      if #stack > 0 then\n     \
    \   local top = stack[#stack]\n        if top == '[' then\n          stack[#stack]\
    \ = lst[i]\n        elseif top == ']' then\n          stack[#stack] = lst[i]\n\
    \        else\n          stack[#stack + 1] = lst[i]\n        end\n      else\n\
    \        return 'No'\n      end\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  for i = 1, #stack do\n    if stack[i] == '[' then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return #stack == 0\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    close = close + 1\n    end\n    if lst[i] == '(' and open ~= 0 then\n   \
    \   open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close\
    \ = close - 1\n    end\n  end\n  return open ~= close and open ~= 0 and close\
    \ ~= 0\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i] ~= '('\
    \ then\n      good = false\n    end\n  end\n  if good then\n    return 'Yes'\n\
    \  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open == close then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    elseif lst[i] == ')' and open_balance > close_balance then\n      return\
    \ 'No'\n    elseif lst[i] == '(' and close_balance > open_balance then\n     \
    \ return 'No'\n    end\n  end\n  if open == close then\n    return 'Yes'\n  end\n\
    \  return 'No'\nend", "  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      stack[#stack + 1] = lst[i]\n    elseif lst[i] == ')' then\n\
    \      local open = stack[#stack + 1]\n      if open ~= nil then\n        stack[#stack\
    \ + 1] = nil\n      else\n        return 'No'\n      end\n    end\n  end\n  if\
    \ #stack > 0 then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ ~= '(' then\n      good = false\n    end\n  end\n  if good then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        return false\n      end\n\
    \      open = open - 1\n    end\n  end\n  return #stack == 0\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      stack[#stack + 1] = lst[i]\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       stack[#stack + 1] = lst[i]\n      end\n    else\n      if open ~= close\
    \ then\n        stack[#stack + 1] = lst[i]\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  end\n  local result = true\n  for i = 1, #stack\
    \ do\n    if stack[i] ~= lst[i] then\n      result = false\n    end\n  end\n \
    \ return result\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  if\
    \ open_balance ~= #lst - close + 1 then\n    return 'No'\n  end\n  local open_balance_count\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance_count\
    \ = open_balance_count + 1\n    end\n  end\n  if open_balance_count ~= open then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return #stack == 0\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  end\n  local good = 1\n  for i = 1, #lst do\n \
    \   if lst[i] ~= '(' then\n      good = 0\n    end\n  end\n  if good then\n  \
    \  return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      open_balance = open_balance - 1\n\
    \      if open_balance == 0 then\n        return 'Yes'\n      end\n    end\n \
    \ end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n      open\
    \ = open - 1\n    else\n      return false\n    end\n  end\n  return #stack ==\
    \ 0\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ ~= close then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if\
    \ #stack > 0 then\n    return 'No'\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local stack2 = {}\n  for i = 1, #stack do\n    stack2[#stack2\
    \ + 1] = stack[i]\n  end\n  local stack3 = {}\n  for i = 1, #stack2 do\n    stack3[#stack3\
    \ + 1] = stack2[i]\n  end\n  local stack4 = {}\n  for i = 1, #stack3 do\n    stack4[#stack4\
    \ + 1] = stack3[i]\n  end\n  local stack5 = {}\n  for i = 1, #stack4 do\n    stack5[#stack5\
    \ + 1] = stack4[i]\n  end\n  local stack6 = {}\n  for i = 1, #stack5 do\n    stack6[#stack6\
    \ + 1] = stack5[i]\n  end\n  local stack7 = {}\n  for i = 1, #stack6 do\n    stack7[#stack7\
    \ + 1] = stack6[i]\n  end\n  local stack8 = {}\n  for i = 1, #stack7 do\n    stack8[#stack8\
    \ + 1] = stack7[i]\n  end\n  local stack9 = {}\n  for i = 1, #stack8 do\n    stack9[#stack9\
    \ + 1] = stack8[i]\n  end\n  local stack10 = {}\n  for i = 1, #stack9 do\n   \
    \ stack10[#stack10 + 1] = stack9[i]\n  end\n  local stack11 = {}\n  for i = 1,\
    \ #stack10 do\n    stack11[#stack11 + 1] = stack10[i]\n  end\n  local stack12\
    \ = {}\n  for i = 1, #stack11 do\n    stack12[#stack12 + 1] = stack11[i]\n  end\n\
    \  local stack13 = {}\n  for i = 1, #stack12 do\n    stack13[#stack13 + 1] = stack12[i]\n\
    \  end\n  local stack14 = {}\n  for i = 1, #stack13 do\n    stack14[#stack14 +\
    \ 1] = stack13[i]\n  end\n  local stack15 = {}\n  for i = 1, #stack14 do\n   \
    \ stack15[#stack15 + 1] = stack14[i]\n  end\n  local ", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open_balance = 1\n \
    \ local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      table.insert(stack, lst[i])\n\
    \    elseif lst[i] == ')' then\n      if #stack == 0 then\n        return 'No'\n\
    \      else\n        local top = stack[#stack]\n        stack[#stack] = nil\n\
    \        if top == '(' then\n          table.insert(stack, lst[i])\n        elseif\
    \ top == ')' then\n          table.insert(stack, lst[i])\n        else\n     \
    \     return 'No'\n        end\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      open_balance = open_balance - 1\n\
    \      if open_balance == 0 then\n        return 'Yes'\n      end\n    end\n \
    \ end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    end\n  end\n  if open_balance == close then\n    return 'Yes'\n  else\n\
    \    return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open ==\
    \ close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        if #stack > 0 then\n\
    \          local top = stack[#stack]\n          stack[#stack] = nil\n        \
    \  local i = stack[#stack + 1]\n          while i > top do\n            stack[#stack]\
    \ = i\n            i = stack[#stack + 1]\n          end\n          stack[#stack]\
    \ = nil\n        end\n        return 'Yes'\n      else\n        open = open -\
    \ 1\n      end\n    end\n  end\n  return 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open == close then\n        result = 'Yes'\n      end\n    end\n\
    \  end\n  return result\nend", "  local open = 0\n  local close = 0\n  for _,\
    \ v in ipairs(lst) do\n    if v == '(' or v == ')' then\n      open = open + 1\n\
    \      close = close + 1\n    elseif v == '{' then\n      open = open + 1\n  \
    \  elseif v == '}' then\n      close = close + 1\n    end\n  end\n  if open ~=\
    \ close then\n    return 'No'\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for _, v in ipairs(lst) do\n    if v == '(' or v == ')' then\n      open_balance\
    \ = open_balance + 1\n    elseif v == '{' then\n      open_balance = open_balance\
    \ + 1\n    elseif v == '}' then\n      close_balance = close_balance + 1\n   \
    \ end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n \
    \   end\n  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open -\
    \ 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close - 1\n \
    \   elseif lst[i] == '(' and open ~= close then\n      good = true\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local result\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    elseif open == close\
    \ then\n      result[#result + 1] = lst[i]\n    end\n  end\n  if #result == #lst\
    \ then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open\
    \ = 0\n  local close = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif open == close then\n      result[#result + 1] = lst[i]\n\
    \    end\n  end\n  return #result == #lst\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open_balance = 1\n  local\
    \ close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n    if open_balance ~= close_balance then\n      return 'No'\n\
    \    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      good = false\n    end\n  end\n \
    \ return good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 1\n  for i = 1, #lst do\n    if lst[i] ==\
    \ '(' then\n      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n\
    \      open_balance = open_balance - 1\n      if open_balance == 0 then\n    \
    \    return 'Yes'\n      end\n    end\n  end\n  return 'No'\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = false\n  for _, s in ipairs(lst) do\n    if s == '('\
    \ then\n      open = open + 1\n    elseif s == ')' then\n      close = close +\
    \ 1\n    elseif open == close then\n      good = false\n    end\n  end\n  if open\
    \ ~= close then\n    good = false\n  end\n  return good\nend", "  local open =\
    \ 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       return false\n      end\n      open = open - 1\n    end\n  end\n  return\
    \ true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      if open > close then\n        good = false\n        break\n    \
    \  end\n      open = open - 1\n    elseif lst[i] == ')' then\n      if open <\
    \ close then\n        good = false\n        break\n      end\n      close = close\
    \ + 1\n    end\n  end\n  if good then\n    return 'Yes'\n  end\n  return 'No'\n\
    end", "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1]\
    \ = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        return false\n      end\n      open = open - 1\n    end\n\
    \  end\n  return #stack == 0\nend", "  local open = 0\n  local close = 0\n  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        return false\n      end\n\
    \      open = open - 1\n    end\n  end\n  return true\nend", "  local stack =\
    \ {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      stack[#stack + 1] = lst[i]\n      open = open\
    \ + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n\
    \      if open ~= close then\n        return false\n      end\n      open = open\
    \ - 1\n    elseif lst[i] == '(' and open ~= 0 then\n      stack[#stack + 1] =\
    \ lst[i]\n      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local stack = {}\n  for i =\
    \ 1, #lst do\n    local c = lst[i]\n    if c == '(' or c == '{' then\n      table.insert(stack,\
    \ c)\n    elseif c == '}' or c == ')' then\n      local top = stack[#stack]\n\
    \      if top == '(' or top == '{' then\n        stack[#stack] = nil\n      else\n\
    \        stack[#stack] = c\n      end\n    end\n  end\n  return #stack == 0\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  if open_balance ~= #lst - close then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    elseif lst[i] == ')' and open == close then\n      good = false\n    end\n\
    \  end\n  return good\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n\
    \    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n \
    \     if open ~= close then\n        return 'No'\n      end\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local stack = {}\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ and open ~= 0 then\n      stack[#stack + 1] = lst[i]\n      open = open + 1\n\
    \    elseif lst[i] == ')' and close ~= 0 then\n      close = close + 1\n     \
    \ if open ~= close then\n        return false\n      end\n      open = open -\
    \ 1\n    elseif lst[i] == '(' and open ~= 0 then\n      stack[#stack + 1] = lst[i]\n\
    \      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      close\
    \ = close + 1\n      if open ~= close then\n        return false\n      end\n\
    \      open = open - 1\n    end\n  end\n  return true\nend", "  local stack =\
    \ {}\n  local open = 0\n  local close = 0\n  local good = 0\n  local i = 0\n \
    \ local j = 1\n  local n = #lst\n  while i < n do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n      if open ~= close then\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n    i = i + 1\n  end\n  local stack_size = #stack\n\
    \  if stack_size ~= 0 then\n    local stack_reverse = stack:reverse()\n    local\
    \ stack_reverse_count = 0\n    local stack_reverse_max = 0\n    for i = 1, stack_size\
    \ do\n      if stack_reverse[i] == i then\n        stack_reverse_count = stack_reverse_count\
    \ + 1\n        if stack_reverse_count > stack_reverse_max then\n          stack_reverse_max\
    \ = stack_reverse_count\n        end\n      end\n    end\n    if stack_reverse_max\
    \ ~= 0 then\n      good = 1\n    end\n  end\n  return good\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      stack[#stack + 1] = lst[i]\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       stack[#stack + 1] = lst[i]\n      end\n    elseif open ~= close then\n\
    \      return false\n    end\n  end\n  if open ~= close then\n    return false\n\
    \  end\n  local stack_string = table.concat(stack)\n  if stack_string ~= lst then\n\
    \    return false\n  end\n  return true\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    stack[#stack + 1] = i\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return #stack == 0\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        return false\n      end\n      open = open - 1\n    end\n  end\n\
    \  if open ~= close then\n    return false\n  end\n  for i = 1, #stack do\n  \
    \  local j = stack[i]\n    local k = stack[i + 1]\n    if lst[j] == lst[k] then\n\
    \      stack[i] = k + 1\n    end\n  end\n  return true\nend", "  local stack =\
    \ {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      stack[#stack + 1] = lst[i]\n      open = open\
    \ + 1\n    elseif lst[i] == ')' and close ~= 0 then\n      open = open - 1\n \
    \     close = close + 1\n    elseif lst[i] == ')' and open ~= 0 then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local stack_size = #stack\n  if stack_size <= 0 then\n    return 'Yes'\n  end\n\
    \  local stack_string = table.concat(stack)\n  local stack_string_size = #stack_string\n\
    \  if stack_string ~= stack_string then\n    return 'No'\n  end\n  local stack_string2\
    \ = table.concat(stack)\n  local stack_string2_size = #stack_string2\n  if stack_string2\
    \ ~= stack_string2 then\n    return 'No'\n  end\n  local stack_string3 = table.concat(stack)\n\
    \  local stack_string3_size = #stack_string3\n  if stack_string3 ~= stack_string3\
    \ then\n    return 'No'\n  end\n  local stack_string4 = table.concat(stack)\n\
    \  local stack_string4_size = #stack_string4\n  if stack_string4 ~= stack_string4\
    \ then\n    return 'No'\n  end\n  local stack_string5 = table.concat(stack)\n\
    \  local stack_string5_size = #stack_string5\n  if stack_string5 ~= stack_string5\
    \ then\n    return 'No'\n  end\n  local stack_string6 = table.concat(stack)\n\
    \  local stack_string6_size = #stack_string6\n  if stack_string6 ~= stack_string6\
    \ then\n    return 'No'\n  end\n  local stack_string7 = table.concat(stack)\n\
    \  local stack_string7_size = #stack_string7\n  if stack_string7 ~= stack_string7\
    \ then\n    return 'No'\n  end\n  local stack_string8 = table.concat(stack)\n\
    \  local stack_string8_size = #stack_string8\n  if stack_string8 ~= stack_string8\
    \ then\n    return 'No'\n  end\n  local stack_string9 = table.concat(stack)\n\
    \  local stack_string9_size = #stack_string9\n  if stack_string9 ~= stack_string9\
    \ then\n    return 'No'\n  end\n  local stack_string10 = table.concat(stack)\n\
    \  local stack_string10_size = #stack_string10\n  if stack_string10 ~= stack_string10\
    \ then\n    return 'No'\n  end\n  local stack_string11 = table.", "  local open\
    \ = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and\
    \ close ~= 0 then\n      close = close + 1\n    elseif lst[i] == ')' and close\
    \ == open then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n\
    \        stack[#stack + 1] = i\n      end\n    end\n  end\n  return #stack ==\
    \ 0\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n \
    \     close = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  local result = true\n  for i = 1, #lst do\n    if lst[i] ~= '(' then\n\
    \      result = false\n    end\n  end\n  if result then\n    return 'Yes'\n  end\n\
    \  return 'No'\nend", "  local open = 0\n  local close = 0\n  for _, v in ipairs(lst)\
    \ do\n    if v == '(' or v == ')' then\n      open = open + 1\n    elseif v ==\
    \ '{' or v == '}' then\n      close = close + 1\n    end\n  end\n  if open ~=\
    \ close then\n    return 'No'\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for _, v in ipairs(lst) do\n    if v == '(' or v == ')' then\n      open_balance\
    \ = open_balance + 1\n    elseif v == '{' or v == '}' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close then\n    return\
    \ 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local close = 0\n  local\
    \ stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        return false\n      end\n\
    \      open = open - 1\n    end\n  end\n  if open ~= close then\n    return false\n\
    \  end\n  local stack_size = #stack\n  local stack_index = 1\n  local stack_value\
    \ = lst[stack[stack_index]]\n  while stack_size > 0 do\n    stack_size = stack_size\
    \ - 1\n    stack_index = stack_index + 1\n    stack_value = lst[stack[stack_index]]\n\
    \    if stack_value ~= ')' then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open == close then\n    return\
    \ 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  local open_balance = 0\n  local close_balance = 0\n  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n      stack[#stack + 1] = i\n      open = open + 1\n    elseif lst[i] ==\
    \ ')' then\n      close_balance = close_balance + 1\n      local top = stack[#stack]\n\
    \      if top == nil then\n        return 'No'\n      elseif close_balance > open_balance\
    \ then\n        close = close + 1\n        open_balance = open_balance - 1\n \
    \     else\n        open = open - 1\n        close_balance = close_balance - 1\n\
    \      end\n      stack[#stack] = nil\n    end\n  end\n  if open_balance ~= close\
    \ then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open_balance = 0\n \
    \ local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  if open_balance ~= #lst - close then\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open == close then\n   \
    \ return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local result = true\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      result = result and match_parens(lst:sub(1,\
    \ i - 1))\n    elseif lst[i] == ')' then\n      result = result and match_parens(lst:sub(i\
    \ + 1, #lst))\n    end\n  end\n  return result and 'Yes'\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local stack = {}\n  for i =\
    \ 1, #lst do\n    local c = lst[i]\n    if c == '(' or c == '{' then\n      stack[#stack\
    \ + 1] = c\n    elseif c == '}' then\n      if #stack == 0 then\n        return\
    \ 'No'\n      else\n        stack[#stack] = nil\n      end\n    elseif c == ')'\
    \ then\n      if #stack == 0 then\n        return 'No'\n      else\n        stack[#stack]\
    \ = nil\n      end\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local\
    \ close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n\
    \  if open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local stack = {}\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n\
    \    end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n  local stack2\
    \ = {}\n  local open2 = 0\n  local close2 = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open2 = open2 + 1\n      stack2[#stack2 + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close2 = close2 + 1\n      if open2 ~= close2 then\n\
    \        stack2[#stack2 + 1] = i\n      end\n    end\n  end\n  if #stack2 > 0\
    \ then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local open = 0\n  local\
    \ close = 0\n  local open_balance = 0\n  local close_balance = 0\n  local open_balance_stack\
    \ = {}\n  local close_balance_stack = {}\n  local stack = {}\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance += 1\n      open_balance_stack[#open_balance_stack\
    \ + 1] = i\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n     \
    \ close_balance += 1\n      close_balance_stack[#close_balance_stack + 1] = i\n\
    \      stack[#stack + 1] = i\n    end\n  end\n  while #open_balance_stack > 0\
    \ do\n    local i = open_balance_stack[#open_balance_stack]\n    local j = close_balance_stack[#close_balance_stack]\n\
    \    if open_balance > close_balance then\n      open_balance -= 1\n      close_balance\
    \ += 1\n      open_balance_stack[#open_balance_stack] = i\n      close_balance_stack[#close_balance_stack]\
    \ = j\n      stack[#stack + 1] = j\n    elseif open_balance < close_balance then\n\
    \      open_balance += 1\n      open_balance_stack[#open_balance_stack] = i\n\
    \      stack[#stack + 1] = i\n    else\n      local stack_size = #stack\n    \
    \  local open_balance = #open_balance_stack\n      local close_balance = #close_balance_stack\n\
    \      local open_balance_stack = #open_balance_stack\n      local close_balance_stack\
    \ = #close_balance_stack\n      local stack = #stack\n      for i = 1, stack_size\
    \ do\n        local j = stack[stack_size-i]\n        if open_balance > close_balance\
    \ then\n          open_balance -= 1\n          close_balance += 1\n          open_balance_stack[open_balance_stack]\
    \ = i\n          close_balance_stack[close_balance_stack] = j\n          stack[stack_size-i\
    \ - 1] = j\n        elseif open_balance < close_balance then\n          open_balance\
    \ += 1\n          open_balance_stack[open_balance_stack] = i\n          stack[stack_size-i\
    \ - 1] = i\n        else\n          local stack_size = #stack\n          local\
    \ open_balance", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      stack[#stack\
    \ + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' and close ~=\
    \ 0 then\n      close = close + 1\n      local top = stack[#stack]\n      if top\
    \ ~= lst[i] then\n        return 'No'\n      end\n      stack[#stack] = nil\n\
    \      open = open - 1\n      close = close - 1\n    elseif lst[i] == ')' and\
    \ close ~= 0 then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local stack2 = {}\n  for i = 1, #stack do\n\
    \    stack2[#stack2 + 1] = stack[i]\n  end\n  if #stack2 ~= #lst then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local\
    \ good = 'Yes'\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open =\
    \ open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and open == close then\n      good = 'No'\n    end\n  end\n  return\
    \ good\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  if open_balance\
    \ == close then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack > 0 then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n \
    \   end\n  end\n  if #stack > 0 then\n    return 'Yes'\n  end\n  return 'No'\n\
    end", "  local open = 0\n  local close = 0\n  local good = true\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= close\
    \ then\n      good = false\n    end\n  end\n  return good\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open\
    \ ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      close = close + 1\n    elseif lst[i] == '(' and open ~= close then\n  \
    \    return 'No'\n    elseif lst[i] == ')' and close ~= open then\n      return\
    \ 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i] == '(' and open\
    \ > 0 then\n      open = open - 1\n    elseif lst[i] == ')' and close > 0 then\n\
    \      close = close - 1\n    elseif lst[i] == '(' and open > close then\n   \
    \   open = open + 1\n    elseif lst[i] == ')' and close > open then\n      close\
    \ = close + 1\n    elseif lst[i] == '(' and open > 0 then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' and close > 0 then\n      close = close + 1\n  \
    \  elseif lst[i] == '(' and close > 0 then\n      close = close + 1\n    elseif\
    \ lst[i] == ')' and close > 0 then\n      close = close + 1\n    elseif lst[i]\
    \ == '(' and open > 0 and close > 0 then\n      result = 'Yes'\n    end\n  end\n\
    \  return result\nend", "  local open = 0\n  local close = 0\n  local good = false\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open\
    \ == close then\n      good = true\n    end\n  end\n  return good\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 1\n  local close_balance = 1\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n    if open_balance ~= close_balance then\n  \
    \    return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local stack = {}\n\
    \  local open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1]\
    \ = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~=\
    \ close then\n        local top = stack[#stack]\n        local bottom = stack[#stack\
    \ + 1]\n        local diff = bottom - top\n        if diff > 1 then\n        \
    \  good = false\n        elseif diff == 1 then\n          stack[#stack] = bottom\n\
    \          stack[#stack + 1] = bottom\n        else\n          stack[#stack] =\
    \ bottom\n          stack[#stack + 1] = top\n        end\n      end\n    end\n\
    \  end\n  return good\nend", "  local stack = {}\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open ~= close then\n        return false\n      end\n      open\
    \ = open - 1\n    end\n  end\n  return open ~= close\nend", "  local open = 0\n\
    \  local close = 0\n  local open_balance = 0\n  local close_balance = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      close_balance = close_balance + 1\n    end\n  end\n  if open_balance ~=\
    \ close then\n    return 'No'\n  end\n  if open == 0 and close == 0 then\n   \
    \ return 'Yes'\n  end\n  if open > close then\n    return 'No'\n  end\n  return\
    \ match_parens(lst)\nend", "  local open = 0\n  local close = 0\n  local stack\
    \ = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n      if open == close then\n        return true\n      elseif open > close\
    \ then\n        return false\n      else\n        open = open - 1\n        stack[#stack\
    \ + 1] = i\n      end\n    end\n  end\n  return false\nend", "  local open = 0\n\
    \  local close = 0\n  local open_balance = 0\n  local close_balance = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n      open = open + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n      close = close + 1\n    elseif lst[i] == '(' and open_balance\
    \ > close_balance then\n      open_balance = open_balance - 1\n    elseif lst[i]\
    \ == ')' and open_balance < close_balance then\n      close_balance = close_balance\
    \ - 1\n    end\n  end\n  if open == close and open_balance == close_balance then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      table.insert(stack, lst[i])\n\
    \    elseif lst[i] == ')' then\n      local open = stack[#stack]\n      if not\
    \ open then\n        return 'No'\n      elseif open ~= '(' then\n        return\
    \ 'No'\n      else\n        stack[#stack] = nil\n      end\n    end\n  end\n \
    \ return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n \
    \   end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local stack2 = {}\n  for i = 1, #stack do\n\
    \    stack2[#stack2 + 1] = stack[i]\n  end\n  local stack3 = {}\n  for i = 1,\
    \ #stack2 do\n    stack3[#stack3 + 1] = stack2[i]\n  end\n  local stack4 = {}\n\
    \  for i = 1, #stack3 do\n    stack4[#stack4 + 1] = stack3[i]\n  end\n  for i\
    \ = 1, #stack4 do\n    if stack4[i] ~= stack[i] then\n      return 'No'\n    end\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  local balance = 0\n  local result = 'No'\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open_balance\
    \ = open_balance + 1\n      open = open - 1\n      close_balance = close_balance\
    \ + 1\n      close = close - 1\n      balance = open + close\n      if balance\
    \ == 0 then\n        result = 'Yes'\n        break\n      end\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      open_balance = open_balance - 1\n      open\
    \ = open + 1\n      close_balance = close_balance - 1\n      close = close + 1\n\
    \      balance = open + close\n      if balance == 0 then\n        result = 'Yes'\n\
    \        break\n      end\n    end\n  end\n  return result\nend", "  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    return\
    \ 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n\
    \  end\n  if open_balance ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  return 'Yes'\nend", "  local stack = {}\n  local open = 0\n \
    \ local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n   \
    \   close = close + 1\n      if open ~= close then\n        stack[#stack + 1]\
    \ = i\n      end\n    end\n  end\n  return #stack == 0 and 'Yes' or 'No'\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i] == ')'\
    \ then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  if open_balance ~= open+close then\n\
    \    return 'No'\n  end\n  return 'Yes'\nend", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open == close then\n        local start = stack[#stack\
    \ + 1]\n        local end = i\n        if start < end then\n          return 'Yes'\n\
    \        else\n          return 'No'\n        end\n      end\n    end\n  end\n\
    \  return 'No'\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    \
    \  stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n      close = close +\
    \ 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n \
    \   end\n  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n\
    \  end\nend", "  local open = 0\n  local close = 0\n  local result = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    elseif lst[i] == ')' and open\
    \ == close then\n      result[#result+1] = lst[i]\n    end\n  end\n  if #result\
    \ == #lst then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  if open_balance ~= (open - close) then\n    return 'No'\n  end\n\
    \  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' or lst[i] == ')' then\n      open\
    \ = open + 1\n      close = close + 1\n      stack[#stack + 1] = lst[i]\n    elseif\
    \ lst[i] == '{' then\n      open = open + 1\n      stack[#stack + 1] = lst[i]\n\
    \    elseif lst[i] == '}' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = lst[i]\n      end\n    end\n  end\n  if open\
    \ ~= close then\n    return 'No'\n  end\n  local result = {}\n  local stack_size\
    \ = #stack\n  for i = 1, stack_size do\n    local elem = stack[i]\n    if elem\
    \ == '(' or elem == ')' then\n      result[#result + 1] = elem\n    end\n  end\n\
    \  if #result == stack_size then\n    return 'Yes'\n  end\n  return 'No'\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      stack[#stack + 1] = i\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        return false\n      end\n      open = open - 1\n    end\n  end\n\
    \  return true\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = lst[i]\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      if open ~= close then\n        stack[#stack + 1] = lst[i]\n      end\n\
    \    end\n  end\n  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n\
    \  end\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  local\
    \ good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        stack[#stack + 1] = lst[i]\n\
    \      else\n        good = true\n      end\n    end\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local stack\
    \ = {}\n  for i = 1, #lst do\n    local c = lst[i]\n    if c == '(' or c == '{'\
    \ then\n      stack[#stack + 1] = c\n    elseif c == '}' or c == ')' then\n  \
    \    local top = stack[#stack + 1]\n      if top == '(' or top == '{' then\n \
    \       stack[#stack + 1] = c\n      elseif top == '}' or top == ')' then\n  \
    \      stack[#stack + 1] = c\n      else\n        return 'No'\n      end\n   \
    \ end\n  end\n  if #stack > 0 then\n    return 'No'\n  end\n  return 'Yes'\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      stack[#stack + 1] = i\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if #stack\
    \ > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", "  local stack\
    \ = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n      if open ~= close then\n \
    \       return false\n      end\n      open = open - 1\n    end\n  end\n  return\
    \ #stack == 0\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    elseif lst[i] == '(' and open_balance > close_balance then\n      open_balance\
    \ = open_balance - 1\n    elseif lst[i] == ')' and open_balance < close_balance\
    \ then\n      close_balance = close_balance - 1\n    end\n  end\n  if open_balance\
    \ ~= close then\n    return 'No'\n  end\n  local open_balance = 0\n  local close_balance\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      close_balance = close_balance + 1\n    elseif lst[i] == '('\
    \ and open_balance < close_balance then\n      open_balance = open_balance + 1\n\
    \    elseif lst[i] == ')' and open_balance > close_balance then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \      close_balance = close_balance + 1\n    elseif lst[i] == '(' and open_balance\
    \ > close_balance then\n      open_balance = open_balance - 1\n    elseif lst[i]\
    \ == ')' and open_balance < close_balance then\n      close_balance = close_balance\
    \ - 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close ", "  local open = 0\n\
    \  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close_balance then\n\
    \    return 'No'\n  end\n  local open_balance = 0\n  local close_balance = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance + 1\n\
    \    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n  end\n\
    \  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst do\n \
    \   if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n  if open_balance\
    \ ~= close_balance then\n    return 'No'\n  end\n  local open_balance = 0\n  local\
    \ close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open_balance\
    \ = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance = close_balance\
    \ + 1\n    end\n  end\n  if open_balance ~= close_balance then\n    return 'No'\n\
    \  end\n  local open_balance = 0\n  local close_balance = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open_balance = open_balance + 1\n    elseif\
    \ lst[i] == ')' then\n      close_balance = close_balance + 1\n    end\n  end\n\
    \  if open_balance ~= close_balance then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n", "  local open = 0\n  local close =\
    \ 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' or lst[i] == ')' then\n      table.insert(stack, lst[i])\n   \
    \ elseif #stack == 0 then\n      return 'No'\n    end\n  end\n  if #stack == 0\
    \ then\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  local good = true\n  local stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack + 1] = i\n   \
    \ elseif lst[i] == ')' then\n      local top = stack[#stack + 1]\n      if top\
    \ ~= nil then\n        local left = stack[#stack]\n        local right = stack[#stack\
    \ + 1]\n        stack[#stack] = nil\n        stack[#stack + 1] = nil\n       \
    \ if lst[left] ~= '(' then\n          good = false\n        end\n        if lst[right]\
    \ ~= ')' then\n          good = false\n        end\n      end\n    end\n  end\n\
    \  if good then\n    return 'Yes'\n  end\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and open > 0 then\n      open\
    \ = open - 1\n    elseif lst[i] == ')' and close > 0 then\n      close = close\
    \ - 1\n    elseif lst[i] == '(' and open > close then\n      return 'No'\n   \
    \ elseif lst[i] == ')' and close > open then\n      return 'No'\n    end\n  end\n\
    \  if open > close then\n    return 'Yes'\n  end\n  return 'No'\nend", "  local\
    \ open = 0\n  local close = 0\n  local good = false\n  for i = 1, #lst do\n  \
    \  if lst[i] == '(' and open ~= 0 then\n      open = open - 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close - 1\n    elseif lst[i] == '('\
    \ and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close\
    \ ~= 0 then\n      close = close + 1\n    else\n      good = true\n    end\n \
    \ end\n  if open ~= close then\n    good = false\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' and close ~= 0 then\n      close = close\
    \ + 1\n      if open ~= close then\n        stack[#stack + 1] = i\n      end\n\
    \    elseif lst[i] == '(' and open ~= close then\n      open = open + 1\n    elseif\
    \ lst[i] == ')' and close ~= open then\n      close = close + 1\n    end\n  end\n\
    \  if #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend",
  "  local stack = {}\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open == close\
    \ then\n        return true\n      elseif open > close then\n        return false\n\
    \      else\n        open = open - 1\n      end\n    end\n  end\n  return false\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  local i = 0\n  while i < #lst do\n    if lst[i] == '(' then\n      open\
    \ = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    end\n\
    \    i = i + 1\n  end\n  if open == close then\n    return 'Yes'\n  else\n   \
    \ return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n  local good\
    \ = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open +\
    \ 1\n    elseif lst[i] == ')' then\n      close = close + 1\n    else\n      if\
    \ open ~= close then\n        good = false\n      end\n    end\n  end\n  return\
    \ good\nend", "  local stack = {}\n  for i = 1, #lst do\n    local c = lst[i]\n\
    \    if c == '(' or c == '[' or c == '{' then\n      stack[#stack + 1] = c\n \
    \   elseif c == ')' or c == ']' or c == '}' then\n      if #stack == 0 then\n\
    \        return 'No'\n      elseif stack[#stack] == c then\n        stack[#stack]\
    \ = nil\n      else\n        return 'No'\n      end\n    end\n  end\n  return\
    \ 'Yes'\nend", "  local open = 0\n  local close = 0\n  local stack = {}\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ ~= close then\n        stack[#stack + 1] = i\n      end\n    end\n  end\n  if\
    \ #stack > 0 then\n    return 'No'\n  else\n    return 'Yes'\n  end\nend", " \
    \ local open = 0\n  local close = 0\n  local result = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    elseif open == close then\n      result[#result\
    \ + 1] = lst[i]\n    end\n  end\n  return #result == #lst\nend", "  local open\
    \ = 0\n  local close = 0\n  for _, x in ipairs(lst) do\n    if x == '(' and open\
    \ ~= 0 then\n      open = open + 1\n    elseif x == '(' and open == 0 then\n \
    \     close = close + 1\n    end\n  end\n  if close ~= open then\n    return 'No'\n\
    \  end\n  return 'Yes'\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n      open_balance = open_balance + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n      close_balance = close_balance +\
    \ 1\n    end\n  end\n  if open_balance ~= close then\n    return 'No'\n  end\n\
    \  if open == 0 and close == 0 then\n    return 'Yes'\n  end\n  if open > close\
    \ then\n    return 'Yes'\n  end\n  return match_parens(lst)\nend", "  local open\
    \ = 0\n  local close = 0\n  local good = true\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and\
    \ close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open\
    \ ~= close then\n      good = false\n    end\n  end\n  return good\nend", "  local\
    \ stack = {}\n  local open = 0\n  local close = 0\n  local good = false\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ ~= close then\n        good = false\n        break\n      end\n      open =\
    \ open - 1\n    end\n  end\n  if open ~= close then\n    good = false\n  end\n\
    \  return good\nend", "  local stack = {}\n  for i = 1, #lst do\n    local char\
    \ = lst[i]\n    if char == '(' or char == ')' then\n      stack[#stack + 1] =\
    \ char\n    elseif char == '{' or char == '}' then\n      stack[#stack + 1] =\
    \ char\n    elseif char == '[' or char == ']' then\n      stack[#stack + 1] =\
    \ char\n    else\n      return false\n    end\n  end\n  if #stack > 0 then\n \
    \   return false\n  end\n  return true\nend", "  local open = 0\n  local close\
    \ = 0\n  local stack = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n \
    \     open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return true\nend", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open_balance = open_balance + 1\n    elseif lst[i] == ')' then\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance ~= close then\n    return\
    \ 'No'\n  end\n  if open_balance == close then\n    return 'Yes'\n  end\n  return\
    \ 'No'\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  local\
    \ good = false\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      stack[#stack\
    \ + 1] = lst[i]\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n      if open ~= close then\n        stack[#stack + 1] = lst[i]\n\
    \      end\n    elseif open ~= close then\n      stack[#stack + 1] = lst[i]\n\
    \    end\n  end\n  if #stack > 0 then\n    good = true\n  end\n  return good\n\
    end", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local result = true\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  if open > close then\n        result = false\n      end\n      open = open\
    \ - 1\n    elseif lst[i] == ')' then\n      if open < close then\n        result\
    \ = false\n      end\n      close = close - 1\n    end\n  end\n  if open ~= close\
    \ then\n    return 'No'\n  end\n  return 'Yes'\nend", "  local open = 0\n  local\
    \ close = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open == close then\n    return 'Yes'\n  else\n    if open\
    \ > close then\n      return 'No'\n    else\n      for i = 1, #lst do\n      \
    \  if lst[i] == '(' then\n          close = close + 1\n        elseif lst[i] ==\
    \ ')' then\n          open = open - 1\n        end\n      end\n      if open >\
    \ close then\n        return 'No'\n      else\n        return 'Yes'\n      end\n\
    \    end\n  end\nend", "  local stack = {}\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' and stack[#stack] == nil then\n      table.insert(stack, i)\n    elseif\
    \ lst[i] == ')' and stack[#stack] == i then\n      stack[#stack] = nil\n    elseif\
    \ lst[i] == ')' and stack[#stack] ~= nil then\n      stack[#stack] = nil\n   \
    \ end\n  end\n  return #stack == 0\nend", "  local stack = {}\n  local open =\
    \ 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n    \
    \  open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n    end\n  end\n  return #stack == 0\nend",
  "  local open = 0\n  local close = 0\n  local stack = {}\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack + 1] = i\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n      if open ~= close\
    \ then\n        return false\n      end\n      open = open - 1\n    end\n  end\n\
    \  if open ~= close then\n    return false\n  end\n  for i = 1, #stack do\n  \
    \  local j = stack[i]\n    if lst[j] ~= '(' then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local stack = {}\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      table.insert(stack, lst[i])\n    elseif lst[i] ==\
    \ ')' then\n      if #stack == 0 then\n        return 'No'\n      else\n     \
    \   local top = stack[#stack]\n        stack[#stack] = nil\n        if top ==\
    \ '(' then\n          table.insert(stack, lst[i])\n        elseif top == ')' then\n\
    \          table.insert(stack, lst[i])\n        else\n          return 'No'\n\
    \        end\n      end\n    end\n  end\n  if #stack == 0 then\n    return 'Yes'\n\
    \  else\n    return 'No'\n  end\nend", "  local open = 0\n  local close = 0\n\
    \  local good = true\n  for i = 1, #lst do\n    if lst[i] == '(' and open ~= 0\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' and close ~= 0 then\n\
    \      close = close + 1\n    elseif lst[i] == '(' and open ~= close then\n  \
    \    good = false\n    end\n  end\n  return good\nend", "  local open = 0\n  local\
    \ close = 0\n  local good = 'Yes'\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    elseif open == close then\n      good = 'No'\n    end\n  end\n  return\
    \ good\nend", "  local stack = {}\n  local open = 0\n  local close = 0\n  for\
    \ i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n      stack[#stack\
    \ + 1] = i\n    elseif lst[i] == ')' then\n      close = close + 1\n      if open\
    \ == close then\n        local open = #stack\n        local close = 0\n      \
    \  local i = stack[open]\n        while open > 0 do\n          i = stack[open\
    \ - 1]\n          open = open - 1\n        end\n        if lst[i] == ')' then\n\
    \          return 'Yes'\n        else\n          return 'No'\n        end\n  \
    \    end\n    end\n  end\n  return 'No'\nend", "  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n      open = open + 1\n\
    \    elseif lst[i] == ')' then\n      close = close + 1\n    end\n  end\n  if\
    \ open ~= close then\n    return 'No'\n  end\n  local open = 0\n  local close\
    \ = 0\n  for i = 1, #lst ", "  local open = 0\n  local close = 0\n  local i =\
    \ 0\n  while i < #lst do\n    if lst[i] == '(' then\n      open = open + 1\n \
    \   elseif lst[i] == ')' then\n      close = close + 1\n    end\n    i = i + 1\n\
    \  end\n  if open == close then\n    return 'Yes'\n  else\n    return 'No'\n \
    \ end\nend", "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if\
    \ lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n \
    \     close = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n\
    \  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n\
    \  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local open = 0\n  local close\
    \ = 0\n  local result = {}\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    else\n      if open ~= close then\n        return false\n      end\n    \
    \  result[#result + 1] = lst[i]\n    end\n  end\n  if open ~= close then\n   \
    \ return false\n  end\n  return result\nend", "  local open = 0\n  local close\
    \ = 0\n  local result = {}\n  for _, v in ipairs(lst) do\n    if v == '(' then\n\
    \      open = open + 1\n    elseif v == ')' then\n      close = close + 1\n  \
    \  elseif open == close then\n      result[#result + 1] = v\n    end\n  end\n\
    \  if #result == 1 then\n    return 'Yes'\n  else\n    return 'No'\n  end\nend",
  "  local open = 0\n  local close = 0\n  local good = 'Yes'\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' and close ~= 0 then\n      close = close + 1\n    elseif lst[i] == '('\
    \ and open ~= close then\n      good = 'No'\n    end\n  end\n  return good\nend",
  "  local open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '('\
    \ then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close = close\
    \ + 1\n    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n\
    \      open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n\
    \    end\n  end\n  if open ~= close then\n    return 'No'\n  end\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst ", "  local stack = {}\n  local open\
    \ = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' then\n  \
    \    open = open + 1\n      stack[#stack + 1] = i\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n      if open ~= close then\n        return false\n\
    \      end\n      open = open - 1\n      stack[#stack + 1] = i\n    end\n  end\n\
    \  return #stack == 0\nend", "  local open = 0\n  local close = 0\n  for i = 1,\
    \ #lst do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i]\
    \ == ')' then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n\
    \    return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')'\
    \ then\n      close = close + 1\n    end\n  end\n  if open ~= close then\n   \
    \ return 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n\
    \    if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst do\n   \
    \ if lst[i] == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n\
    \      close = close + 1\n    end\n  end\n  if open ~= close then\n    return\
    \ 'No'\n  end\n  local open = 0\n  local close = 0\n  for i = 1, #lst ", "  local\
    \ open = 0\n  local close = 0\n  for i = 1, #lst do\n    if lst[i] == '(' and\
    \ open ~= 0 then\n      open = open + 1\n    elseif lst[i] == ')' and close ~=\
    \ 0 then\n      close = close + 1\n    elseif lst[i] == '(' and open ~= close\
    \ then\n      return 'No'\n    elseif lst[i] == ')' and close ~= open then\n \
    \     return 'No'\n    end\n  end\n  return 'Yes'\nend", "  local open = 0\n \
    \ local close = 0\n  local result = 'No'\n  for i = 1, #lst do\n    if lst[i]\
    \ == '(' then\n      open = open + 1\n    elseif lst[i] == ')' then\n      close\
    \ = close + 1\n    elseif open == close then\n      result = 'Yes'\n    end\n\
    \  end\n  return result\nend", "  local open = 0\n  local close = 0\n  for i =\
    \ 1, #lst do\n    if lst[i] == '(' and open ~= 0 then\n      open = open - 1\n\
    \    elseif lst[i] == ')' and close ~= 0 then\n      close = close - 1\n    elseif\
    \ lst[i] == '(' and open ~= 0 then\n      open = open + 1\n    elseif lst[i] ==\
    \ ')' and close ~= 0 then\n      close = close + 1\n    end\n  end\n  return open\
    \ ~= 0 and close == 0\nend", "  local open = 0\n  local close = 0\n  local open_balance\
    \ = 0\n  local close_balance = 0\n  local open_balance = #lst\n  for i = 1, #lst\
    \ do\n    if lst[i] == '(' then\n      open = open + 1\n      open_balance = open_balance\
    \ + 1\n    elseif lst[i] == ')' then\n      close = close + 1\n      close_balance\
    \ = close_balance + 1\n    end\n  end\n  if open_balance == close_balance then\n\
    \    return 'Yes'\n  else\n    return 'No'\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
