language: lua
name: HumanEval_35_max_element
results:
- exit_code: 1
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_index = nil\n\
    \  for i, v in ipairs(l) do\n    if v > max_value then\n      max_value = v\n\
    \      max_index = i\n    end\n  end\n  return max_value, max_index\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp03np2361.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp03np2361.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp03np2361.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 1
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for i, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = i\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9l9dm5os.lua:22:\
    \ expected: 124, actual: 9\nstack traceback:\n\t/tmp/tmp9l9dm5os.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 1
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = nil, -1\n  for idx, value\
    \ in ipairs(l) do\n    if max_value == nil or value > max_value then\n      max_value,\
    \ max_idx = value, idx\n    end\n  end\n  return max_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnfzb5ukl.lua:20:\
    \ expected: 124, actual: 9\nstack traceback:\n\t/tmp/tmpnfzb5ukl.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max,i=1,1\n\
    \  for _,v in ipairs(l) do\n    if v>max then max=v end\n    i=i+1\n  end\n  return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 1
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = nil, -1\n  for idx, value\
    \ in ipairs(l) do\n    if idx > max_idx then\n      max_value, max_idx = value,\
    \ idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsr4maif.lua:20:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmplsr4maif.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max = l[1]\n\
    \  for i=2,#l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n \
    \ return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max = l[1]\n\
    \  for i=2,#l do\n    if l[i]>max then max = l[i] end\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max = l[1]\n\
    \  for i=2,#l do\n    if l[i]>max then max = l[i] end\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local m\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then\n    return nil\n  end\n  local max\
    \ = 0\n  for i=1,#l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n\
    \  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 1
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max,i=nil,1\n\
    \  for i=1,#l do\n    if max and l[i]>max then max=l[i] end\n  end\n  return max\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpocfvzxj_.lua:18:\
    \ expected: 3, actual: nil\nstack traceback:\n\t/tmp/tmpocfvzxj_.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_index = 0, -1\n  for i = 1,\
    \ #l do\n    if l[i] > max_value then\n      max_value = l[i]\n      max_index\
    \ = i\n    end\n  end\n  return max_value, max_index\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = 0, -1\n  for idx, value\
    \ in ipairs(l) do\n    if value > max_value then\n      max_value, max_idx = value,\
    \ idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local m\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = 0, -1\n  for idx, v in\
    \ ipairs(l) do\n    if v > max_value then\n      max_value, max_idx = v, idx\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local m\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local m\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then return nil end\n  local m = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > m then m = l[i] end\n  end\n  return m\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local m\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > m then\n      m = l[i]\n    end\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = nil, -1\n  for idx, value\
    \ in ipairs(l) do\n    if max_value == nil or value > max_value then\n      max_value,\
    \ max_idx = value, idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max,i=1,1\n\
    \  for k,v in pairs(l) do\n    if v>max then max=v end\n    i=i+1\n  end\n  return\
    \ max,i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l == nil then return nil end\n  local max = l[1]\n\
    \  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n  end\n\
    \  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max,i=1,1\n\
    \  for _,v in ipairs(l) do\n    if v>max then max=v end\n    i=i+1\n  end\n  return\
    \ max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = 0, -1\n  for i, v in ipairs(l)\
    \ do\n    if v > max_value then\n      max_value = v\n      max_idx = i\n    end\n\
    \  end\n  return max_value, max_idx\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil or v > max_value then\n \
    \     max_value = v\n      max_element = v\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  local max_element = nil\n\
    \  for _, v in ipairs(l) do\n    if max_value == nil then\n      max_value = v\n\
    \      max_element = v\n    else\n      if v > max_value then\n        max_value\
    \ = v\n        max_element = v\n      end\n    end\n  end\n  return max_element\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local m = l[1]\n\
    \  for i=2,#l do\n    if l[i]>m then m = l[i] end\n  end\n  return m\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_value\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_value then\n      max_value =\
    \ l[i]\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 1
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = nil, -1\n  for idx, value\
    \ in ipairs(l) do\n    if idx > max_idx then\n      max_value, max_idx = value,\
    \ idx\n    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplsr4maif.lua:20:\
    \ expected: 124, actual: -10\nstack traceback:\n\t/tmp/tmplsr4maif.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max then\n      max = l[i]\n    end\n\
    \  end\n  return max\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max = l[1]\n\
    \  for i=2,#l do\n    if l[i]>max then max = l[i] end\n  end\n  return max\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = max_element\n\
    \    lu.assertEquals(candidate({1, 2, 3}), 3)\n    lu.assertEquals(candidate({5,\
    \ 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max_value\
    \ = l[1]\n  for i=2,#l do\n    if l[i]>max_value then\n      max_value = l[i]\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil then\n      max_value = value\n    else\n      if\
    \ value > max_value then\n        max_value = value\n      end\n    end\n  end\n\
    \  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if #l == 0 then\n    return nil\n  end\n  local max_element\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] > max_element then\n      max_element\
    \ = l[i]\n    end\n  end\n  return max_element\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for _, v in ipairs(l) do\n    if\
    \ m == nil or v > m then\n      m = v\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  if l==nil then return nil end\n  local max_value\
    \ = l[1]\n  for i=2,#l do\n    if l[i]>max_value then\n      max_value = l[i]\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, v in ipairs(l) do\n\
    \    if max_value == nil or v > max_value then\n      max_value = v\n    end\n\
    \  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = max_element\n    lu.assertEquals(candidate({1, 2, 3}), 3)\n\
    \    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1, -10}), 124)\n\
    end\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value = nil\n  for _, value in ipairs(l)\
    \ do\n    if max_value == nil or value > max_value then\n      max_value = value\n\
    \    end\n  end\n  return max_value\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local max_value, max_idx = 0, -1\n  for idx = 1,\
    \ #l do\n    if l[idx] > max_value then\n      max_value = l[idx]\n      max_idx\
    \ = idx\n    end\n  end\n  return max_value, max_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
- exit_code: 0
  program: "-- Return maximum element in the table.\n-- >>> max_element({1, 2, 3})\n\
    -- 3\n-- >>> max_element({5, 3, -5, 2, -3, 3, 9, 0, 123, 1, -10})\n-- 123\nlocal\
    \ function max_element(l)\n  local m = nil\n  for i = 1, #l do\n    if m == nil\
    \ or l[i] > m then\n      m = l[i]\n    end\n  end\n  return m\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = max_element\n    lu.assertEquals(candidate({1,\
    \ 2, 3}), 3)\n    lu.assertEquals(candidate({5, 3, -5, 2, -3, 3, 9, 0, 124, 1,\
    \ -10}), 124)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750171
