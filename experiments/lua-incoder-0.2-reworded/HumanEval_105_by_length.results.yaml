language: lua
name: HumanEval_105_by_length
results:
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value then\n      result[#result\
    \ + 1] = name .. value\n    end\n  end\n  if #arr > 0 then\n    for i = #result,\
    \ 1, -1 do\n      arr[i] = nil\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpylzr6qib.lua:18:\
    \ attempt to concatenate global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpylzr6qib.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpylzr6qib.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  if #arr > 0 then\n    for i = 1, 9 do\n      local value\
    \ = arr[i]\n      if value ~= nil then\n        result[value] = i\n      end\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxjicj164.lua:35:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 7, 8, 4, 5, 8=6}\nstack traceback:\n\t/tmp/tmpxjicj164.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  for i = 1, 9 do\n    local value = arr[i]\n    if value\
    \ ~= nil then\n      result[value] = i\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijvv7o6i.lua:33:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 7, 8, 4, 5, 8=6}\nstack traceback:\n\t/tmp/tmpijvv7o6i.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      local index = tonumber(name)\n  \
    \    if index then\n        result[index] = name\n      end\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpivezlumr.lua:31:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"2\", \"3\", \"4\", \"5\", 8=\"8\"}\nstack traceback:\n\
    \t/tmp/tmpivezlumr.lua:31: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      if not result[#result] then\n   \
    \     result[#result] = value\n      else\n        if result[#result] > value\
    \ then\n          result[#result] = value\n        end\n      end\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx6qy8dx.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmpgx6qy8dx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[key]\n \
    \   if value ~= nil then\n      result[key] = value\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhovg795.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfhovg795.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = one_or_nine[value]\n      if name ~= nil then\n        result[#result\
    \ + 1] = name\n      end\n    end\n  end\n  if #result == 0 then\n    return {}\n\
    \  end\n  table.sort(result)\n  for i = 1, 9 do\n    local value = result[i]\n\
    \    if value ~= nil then\n      result[i] = one_or_nine[value]\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4qiiruoj.lua:18:\
    \ attempt to index global 'one_or_nine' (a nil value)\nstack traceback:\n\t/tmp/tmp4qiiruoj.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp4qiiruoj.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      local index = tonumber(name)\n  \
    \    if index == nil then\n        index = tonumber(string.format(\"%g\", value))\n\
    \      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 1))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 1))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 10))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 10))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 100))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 100))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 1000))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 1000))\n      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 10000))\n      end\n      if index == nil then\n        index =\
    \ tonumber(string.format(\"%g\", value - 10000))\n      end\n      if index ==\
    \ nil then\n        index = tonumber(string.format(\"%g\", value + 100000))\n\
    \      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 100000))\n      end\n      if index == nil then\n        index =\
    \ tonumber(string.format(\"%g\", value + 1000000))\n      end\n      if index\
    \ == nil then\n        index = tonumber(string.format(\"%g\", value - 1000000))\n\
    \      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value + 10000000))\n      end\n      if index == nil then\n        index\
    \ = tonumber(string.format(\"%g\", value - 10000000))\n      end\n      if index\
    \ == nil then\n        index = tonumber(string.format(\"%g\", value + 100000000))\n\
    \      end\n      if index == nil then\n        index = tonumber(string.format(\"\
    %g\", value - 100000000))\n      end\n      if index == nil then\n        index\
    \ = tonumber(string.format(\"%g\", value + 1000000000))\n      end\n      if index\
    \ == nil\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfecvfssv.lua:81: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = map[value]\n      if name then\n        result[#result + 1] = name\n\
    \      end\n    end\n  end\n  if #result == 0 then\n    return {}\n  end\n  table.sort(result,\
    \ function (a, b)\n    return a < b\n  end)\n  for i = 1, 9 do\n    local value\
    \ = arr[i]\n    if value ~= nil then\n      local name = map[value]\n      if\
    \ name then\n        result[#result + 1] = name\n      end\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}),\
    \ {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnbbaqrzz.lua:18:\
    \ attempt to index global 'map' (a nil value)\nstack traceback:\n\t/tmp/tmpnbbaqrzz.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpnbbaqrzz.lua:45: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j0gdfnj.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp5j0gdfnj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 10 do\n    local value = arr[i]\n    if value ~= nil then\n     \
    \ result[value] = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6gklt7z.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpn6gklt7z.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[#result + 1] = key .. value\n    end\n  end\n\
    \  if #result > 0 then\n    table.sort(result)\n    for i = 1, #result do\n  \
    \    result[i] = \"One\" .. result[i]\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps48mo2fj.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"One12\", \"One21\", \"One31\", \"One44\", \"One55\", \"\
    One68\", \"One72\", \"One83\"}\nstack traceback:\n\t/tmp/tmps48mo2fj.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = tonumber(tostring(value))\n      if name ~= nil then\n        result[#result\
    \ + 1] = name\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmvo1liph.lua:30:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {2, 1, 1, 4, 5, 8, 2, 3}\nstack traceback:\n\t/tmp/tmpmvo1liph.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num then\n      local name =\
    \ one_or_nine[num - 1]\n      if not name then\n        error(\"Invalid number:\
    \ \" .. num)\n      end\n      result[i] = name\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwuwlf92_.lua:18:\
    \ attempt to index global 'one_or_nine' (a nil value)\nstack traceback:\n\t/tmp/tmpwuwlf92_.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpwuwlf92_.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value] or tostring(value)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps1gqz2oc.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmps1gqz2oc.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmps1gqz2oc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num ~= nil then\n      result[num]\
    \ = arr[i]\n    end\n  end\n  if #arr == 0 then\n    return result\n  end\n  local\
    \ keys = {}\n  for i = 1, 9 do\n    local num = arr[i]\n    if num ~= nil then\n\
    \      keys[num] = true\n    end\n  end\n  local reverse = {}\n  for i = 1, 9\
    \ do\n    local num = arr[i]\n    if num ~= nil then\n      reverse[num] = i\n\
    \    end\n  end\n  for i = 1, 9 do\n    local num = arr[i]\n    if num ~= nil\
    \ then\n      local key = reverse[num]\n      if key ~= nil then\n        result[key]\
    \ = arr[i]\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq5z3ov7_.lua:53:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 1, 4, 5, 8, 2, 3}\nstack traceback:\n\t/tmp/tmpq5z3ov7_.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  if #arr > 0 then\n    for i = 1, 9 do\n      local\
    \ value = arr[i]\n      if value ~= nil then\n        result[value] = arr[i]\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbd50kui3.lua:35:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpbd50kui3.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 10 do\n    local value = arr[i]\n    if value ~= nil then\n     \
    \ result[i] = name_by_value[value]\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp61aqmf1e.lua:18:\
    \ attempt to index global 'name_by_value' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp61aqmf1e.lua:18: in function 'candidate'\n\t/tmp/tmp61aqmf1e.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      if not result[#result] then\n   \
    \     result[#result] = value\n      else\n        if result[#result] > value\
    \ then\n          result[#result] = value\n        end\n      end\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx6qy8dx.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmpgx6qy8dx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = by_length(value) or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf091ymox.lua:16:\
    \ attempt to index local 'arr' (a number value)\nstack traceback:\n\t/tmp/tmpf091ymox.lua:16:\
    \ in function 'by_length'\n\t/tmp/tmpf091ymox.lua:18: in function 'candidate'\n\
    \t/tmp/tmpf091ymox.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.lower(string.format(\"%g\", value))\n      if not result[value]\
    \ then\n        result[value] = name\n      else\n        result[value] = result[value]\
    \ .. \", \" .. name\n      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmo3fzmzi.lua:32:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1, 1\", \"2, 2\", \"3\", \"4\", \"5\", 8=\"8\"}\nstack\
    \ traceback:\n\t/tmp/tmpmo3fzmzi.lua:32: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      table.insert(result, name)\n    end\n\
    \  end\n  if #arr > 0 then\n    table.sort(result)\n    for i = 1, 9 do\n    \
    \  local value = arr[i]\n      if value ~= nil then\n        local name = string.format(\"\
    %g\", value)\n        local index = #result\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\n        table.insert(result, name)\n\
    \        table.insert(result, name)\n        table.insert(result, name)\n    \
    \    table.insert(result, name)\n        table.insert(result, name)\n        table.insert(result,\
    \ name)\n        table.insert(result, name)\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp3qfmcga.lua:110: ''end'' expected (to close ''if'' at line
    26) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = \"One\"\n      if value < 10 then\n        result[value] = \"Two\"\n     \
    \   if value < 100 then\n          result[value] = \"Three\"\n          if value\
    \ < 1000 then\n            result[value] = \"Four\"\n            if value < 10000\
    \ then\n              result[value] = \"Five\"\n              if value < 100000\
    \ then\n                result[value] = \"Six\"\n                if value < 1000000\
    \ then\n                  result[value] = \"Seven\"\n                  if value\
    \ < 10000000 then\n                    result[value] = \"Eight\"\n           \
    \         if value < 100000000 then\n                      result[value] = \"\
    Nine\"\n                    end\n                  end\n                end\n\
    \              end\n            end\n          end\n        end\n      end\n \
    \   end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi91m8mxh.lua:51:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"One\"\
    , \"One\", \"One\"}\nstack traceback:\n\t/tmp/tmpi91m8mxh.lua:51: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num ~= nil then\n      local\
    \ name = string.format(\"%g\", num)\n      table.insert(result, name)\n    end\n\
    \  end\n  if #arr > 0 then\n    for i = #arr, 1, -1 do\n      local num = arr[i]\n\
    \      if num ~= nil then\n        local name = string.format(\"%g\", num)\n \
    \       table.insert(result, name)\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp98bdco7p.lua:37:\
    \ expected: \n{\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"\
    One\", \"One\"}\nactual: \n{\n    \"2\",\n    \"1\",\n    \"1\",\n    \"4\",\n\
    \    \"5\",\n    \"8\",\n    \"2\",\n    \"3\",\n    \"3\",\n    \"2\",\n    \"\
    8\",\n    \"5\",\n    \"4\",\n    \"1\",\n    \"1\",\n    \"2\"\n}\nstack traceback:\n\
    \t/tmp/tmp98bdco7p.lua:37: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      result[name] = result[name] or value\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c8ege8j.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=1, \"2\"=2, \"3\"=3, \"4\"=4, \"5\"=5, \"8\"=8}\nstack\
    \ traceback:\n\t/tmp/tmp2c8ege8j.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  if #arr > 0 then\n    table.sort(result)\n\
    \    for i = 1, 9 do\n      result[i] = name[result[i]]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq952ktki.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpq952ktki.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpq952ktki.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    local value\
    \ = arr[i]\n    if value ~= nil then\n      arr[value] = result[i]\n    end\n\
    \  end\n  for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n\
    \      arr[value] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    result[i]\
    \ = \"One\"\n  end\n  for i = 1, 9 do\n    result[i + 10] = \"Two\"\n  end\n \
    \ for i = 1, 9 do\n    result[i + 20] = \"Three\"\n  end\n  for i = 1, 9 do\n\
    \    result[i + 30] = \"Four\"\n  end\n  for i = 1, 9 do\n    result[i + 40] =\
    \ \"Five\"\n  end\n  for i = 1, 9 do\n    result[i + 50] = \"Six\"\n  end\n  for\
    \ i = 1, 9 do\n    result[i + 60] = \"Seven\"\n  end\n  for i = 1, 9 do\n    result[i\
    \ + 70] = \"Eight\"\n  end\n  for i = 1, 9 do\n    result[i + 80] = \"Nine\"\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare nil with number

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  if #arr == 0 then\n    return result\n  end\n  local\
    \ keys = pairs(result)\n  table.sort(keys)\n  for i = 1, 9 do\n    local value\
    \ = arr[i]\n    if value ~= nil then\n      arr[i] = result[keys[i]]\n    end\n\
    \  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdps30dzd.lua:25:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpdps30dzd.lua:25: in function 'candidate'\n\t/tmp/tmpdps30dzd.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j0gdfnj.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp5j0gdfnj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    result[i]\
    \ = \"One\"\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare nil with number

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[key] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0b4qhoc.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmpe0b4qhoc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[key]\n \
    \   if value ~= nil then\n      result[key] = value\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhovg795.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpfhovg795.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    arr[i] = result[arr[i]]\n\
    \  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num then\n      local name =\
    \ string.format(\"%g\", num)\n      local length = #name\n      if length <= 1\
    \ then\n        result[name] = num\n      else\n        local reversed = reverse_name(name)\n\
    \        result[reversed] = num\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6uly3upv.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=1, \"2\"=2, \"3\"=3, \"4\"=4, \"5\"=5, \"8\"=8}\nstack\
    \ traceback:\n\t/tmp/tmp6uly3upv.lua:34: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    if arr[i] then\n      result[key]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71_oxaav.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmp71_oxaav.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      local index = string.find(name, \"\
    %\")\n      if index == 0 then\n        table.insert(result, name)\n      else\n\
    \        local prefix = name\n        local suffix = string.sub(prefix, index\
    \ + 1)\n        local number = tonumber(suffix)\n        if number == 0 then\n\
    \          table.insert(result, name)\n        else\n          local digit = math.floor((number\
    \ - 1) / 10)\n          local remainder = number - 10 * digit\n          local\
    \ name = string.format(\"%g\", digit)\n          table.insert(result, name)\n\
    \          table.insert(result, string.format(\"%g\", remainder))\n        end\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprbgg8fxw.lua:19:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmprbgg8fxw.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmprbgg8fxw.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    arr[i] = result[arr[i]]\n\
    \  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    arr[i] = result[arr[i]]\n\
    \  end\n  return arr\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[key] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0b4qhoc.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmpe0b4qhoc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[key] = value\n    end\n  end\n  if #arr ==\
    \ 0 then\n    return result\n  end\n  local reverse = {}\n  for i = 1, 9 do\n\
    \    local key = tostring(i)\n    local value = arr[i]\n    if value ~= nil then\n\
    \      reverse[key] = value\n    end\n  end\n  for i = 1, 9 do\n    local key\
    \ = tostring(i)\n    local value = reverse[key]\n    if value ~= nil then\n  \
    \    arr[i] = value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzwx4fv0n.lua:46:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmpzwx4fv0n.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  if #arr == 0 then\n    return result\n  end\n\
    \  table.sort(result)\n  for i = 1, 9 do\n    local value = result[i]\n    if\
    \ value ~= nil then\n      result[i] = name[value]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwzutjpr5.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpwzutjpr5.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpwzutjpr5.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.gsub(value, \"^.-\", \"\")\n      result[name] = result[name]\
    \ or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppskunmbu.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=1, \"2\"=2, \"3\"=3, \"4\"=4, \"5\"=5, \"8\"=8}\nstack\
    \ traceback:\n\t/tmp/tmppskunmbu.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value] or tostring(value)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps1gqz2oc.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmps1gqz2oc.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmps1gqz2oc.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = by_length(value) or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf091ymox.lua:16:\
    \ attempt to index local 'arr' (a number value)\nstack traceback:\n\t/tmp/tmpf091ymox.lua:16:\
    \ in function 'by_length'\n\t/tmp/tmpf091ymox.lua:18: in function 'candidate'\n\
    \t/tmp/tmpf091ymox.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name_by_value[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp52epwjlm.lua:18:\
    \ attempt to index global 'name_by_value' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp52epwjlm.lua:18: in function 'candidate'\n\t/tmp/tmp52epwjlm.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num then\n      result[#result\
    \ + 1] = num\n    end\n  end\n  if #arr > 0 then\n    for i = #result, 1, -1 do\n\
    \      result[#result + 1] = arr[i]\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp117hq9i0.lua:32:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {2, 1, 1, 4, 5, 8, 2, 3, 3, 2, 8, 5, 4, 1, 1, 2}\nstack traceback:\n\
    \t/tmp/tmp117hq9i0.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num ~= nil then\n      result[num]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp08sqbcze.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp08sqbcze.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  if #arr == 0 then\n    return result\n  end\n  local\
    \ reverse = {}\n  for i = 9, 1, -1 do\n    table.insert(reverse, arr[i])\n  end\n\
    \  for i = 1, 9 do\n    arr[i] = reverse[arr[i]]\n  end\n  for i = 1, 9 do\n \
    \   result[arr[i]] = arr[i]\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz49sqsvi.lua:32:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmpz49sqsvi.lua:32: in function\
    \ 'candidate'\n\t/tmp/tmpz49sqsvi.lua:40: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[key] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0b4qhoc.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmpe0b4qhoc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2f713tny.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmp2f713tny.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp2f713tny.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  for i = 1, 9 do\n    if result[i] ~= nil then\n     \
    \ arr[i] = result[i]\n    end\n  end\n  return arr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpshelcg2v.lua:32:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 7, 8, 4, 5, 8, 2, 6}\nstack traceback:\n\t/tmp/tmpshelcg2v.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name_by_value(value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6m8u3yj0.lua:18:\
    \ attempt to call global 'name_by_value' (a nil value)\nstack traceback:\n\t/tmp/tmp6m8u3yj0.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp6m8u3yj0.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j0gdfnj.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp5j0gdfnj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  if #arr > 0 then\n    for i = 9, 1, -1 do\n    \
    \  local value = arr[i]\n      if value ~= nil then\n        result[value] = arr[i]\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8lngl5i9.lua:35:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp8lngl5i9.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      local index = math.floor(math.log(value)\
    \ / math.log(10))\n      assert(index >= 0 and index < 10)\n      name = string.format(\"\
    %g\", 10 ** index)\n      result[name] = true\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkfkmxf23.lua:21: unexpected symbol near ''*''

    '
  stdout: ''
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 10 do\n    local value = arr[i]\n    if value ~= nil then\n     \
    \ result[value] = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn6gklt7z.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpn6gklt7z.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[key] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0b4qhoc.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmpe0b4qhoc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_l20xoj.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 7, 8, 4, 5, 8=6}\nstack traceback:\n\t/tmp/tmpe_l20xoj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 10 do\n    local key = tostring(i)\n    if arr[i] ~= nil then\n \
    \     table.insert(result, key)\n    end\n  end\n  table.sort(result)\n  for i\
    \ = 1, 10 do\n    local key = tostring(i)\n    if arr[i] ~= nil then\n      result[i]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl7p0bdke.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {2, 1, 1, 4, 5, 8, 2, 3}\nstack traceback:\n\t/tmp/tmpl7p0bdke.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  if #arr > 0 then\n    for i = 1, #arr do\n\
    \      local value = arr[i]\n      if value ~= nil then\n        result[i] = name[value]\n\
    \      end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdez3009p.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpdez3009p.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpdez3009p.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      if not result[#result] then\n   \
    \     result[#result] = value\n      else\n        if result[#result] > value\
    \ then\n          result[#result] = value\n        end\n      end\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx6qy8dx.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmpgx6qy8dx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    local value\
    \ = result[i]\n    if value ~= nil then\n      result[i] = \"One\"\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      local index = string.find(name, \"\
    %\")\n      if index == nil then\n        result[#result + 1] = name\n      else\n\
    \        local prefix = name\n        local suffix = name\n        if index >\
    \ 1 then\n          prefix = prefix:sub(1, index - 1)\n          suffix = suffix:sub((index\
    \ - 1), index)\n        end\n        result[#result + 1] = prefix + suffix\n \
    \     end\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgifrn_br.lua:19:\
    \ malformed pattern (ends with '%')\nstack traceback:\n\t/tmp/tmpgifrn_br.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpgifrn_br.lua:39: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value then\n      result[#result\
    \ + 1] = string.format(\"%g\", value)\n    end\n  end\n  if #arr > 0 then\n  \
    \  for i = #result, 1, -1 do\n      result[i] = \"Nine\"\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps7io16se.lua:32:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\", \"Nine\"\
    , \"Nine\", \"Nine\"}\nstack traceback:\n\t/tmp/tmps7io16se.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5j0gdfnj.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp5j0gdfnj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  if #arr > 0 then\n    local reversed = {}\n    for\
    \ i = 9, 1, -1 do\n      reversed[#reversed + 1] = arr[i]\n    end\n    for i\
    \ = 1, 9 do\n      local value = reversed[i - 1]\n      if value ~= nil then\n\
    \        result[value] = arr[i]\n      end\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaouq0wi5.lua:39:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 3=1, 4=8, 5=5, 8=4}\nstack traceback:\n\t/tmp/tmpaouq0wi5.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    arr[result[i]]\
    \ = i\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare number with nil

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      local index = string.find(name, \"\
    .\")\n      if index == nil then\n        result[#result + 1] = name\n      else\n\
    \        local digit = tonumber(name[index + 1])\n        if digit ~= nil then\n\
    \          result[#result + 1] = string.format(\"%g\", math.floor(digit / 10)\n\
    \            .. (digit % 10 * 10^math.floor(index / 10)))\n        end\n     \
    \ end\n    end\n  end\n  if #result == 0 then\n    return {}\n  end\n  table.sort(result)\n\
    \  local reversed = {}\n  for i = 1, #result do\n    reversed[#reversed + 1] =\
    \ result[i]\n  end\n  for i = 1, #reversed do\n    local name = reversed[i]\n\
    \    local index = string.find(name, \".\")\n    if index == nil then\n      reversed[i]\
    \ = string.format(\"%g\", math.floor(i / 10)\n        .. (i % 10 * 10^math.floor(i\
    \ / 10)))\n    end\n  end\n  return reversed\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoqktjqu9.lua:53:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {}\nstack traceback:\n\t/tmp/tmpoqktjqu9.lua:53: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[key] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0b4qhoc.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmpe0b4qhoc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 10 do\n    local value = arr[i]\n    if value ~= nil then\n     \
    \ result[value] = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpok95ba2w.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpok95ba2w.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value then\n      result[#result\
    \ + 1] = string.format(\"%g\", value)\n    end\n  end\n  if #result > 0 then\n\
    \    table.sort(result)\n    for i = 1, #result do\n      result[i] = string.format(\"\
    %g\", result[i])\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyauubgoe.lua:33:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"1\", \"2\", \"2\", \"3\", \"4\", \"5\", \"8\"}\n\
    stack traceback:\n\t/tmp/tmpyauubgoe.lua:33: in function 'test_humaneval'\n\n\
    Ran 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      if not result[#result] then\n   \
    \     result[#result] = value\n      else\n        if result[#result] > value\
    \ then\n          result[#result] = value\n        end\n      end\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx6qy8dx.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmpgx6qy8dx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.format(\"%g\", value)\n      if not result[#result] then\n   \
    \     result[#result] = value\n      else\n        if result[#result] > value\
    \ then\n          result[#result] = value\n        end\n      end\n    end\n \
    \ end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgx6qy8dx.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {0=1}\nstack traceback:\n\t/tmp/tmpgx6qy8dx.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num ~= nil then\n      result[num]\
    \ = arr[i]\n    end\n  end\n  table.sort(result)\n  for i = 1, 9 do\n    local\
    \ num = result[i]\n    if num ~= nil then\n      result[i] = \"One\"\n    end\n\
    \  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare nil with number

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      local\
    \ name = string.lower(string.format(\"%u\", value))\n      if not result[value]\
    \ then\n        result[value] = name\n      elseif result[value] ~= name then\n\
    \        result[value] = name\n      end\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4nox7xpd.lua:32:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"2\", \"3\", \"4\", \"5\", 8=\"8\"}\nstack traceback:\n\
    \t/tmp/tmp4nox7xpd.lua:32: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  if #arr == 0 then\n    return result\n  end\n  local\
    \ reversed = {}\n  for i = 1, 9 do\n    table.insert(reversed, arr[i])\n  end\n\
    \  table.sort(reversed)\n  for i = 1, 9 do\n    local value = reversed[i]\n  \
    \  if value ~= nil then\n      result[value] = arr[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysj_bci4.lua:41:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 4, 5, 8, 2, 8=3}\nstack traceback:\n\t/tmp/tmpysj_bci4.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    local value = arr[i]\n   \
    \ if value ~= nil then\n      result[key] = value\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe0b4qhoc.lua:28:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\"=2, \"2\"=1, \"3\"=1, \"4\"=4, \"5\"=5, \"6\"=8, \"\
    7\"=2, \"8\"=3}\nstack traceback:\n\t/tmp/tmpe0b4qhoc.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgeeclijf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"3\", \"7\", \"8\", \"4\", \"5\", 8=\"6\"}\nstack traceback:\n\
    \t/tmp/tmpgeeclijf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local key = tostring(i)\n    if arr[i] ~= nil then\n  \
    \    table.insert(result, key)\n    end\n  end\n  table.sort(result)\n  for i\
    \ = 1, 9 do\n    local key = tostring(i)\n    if arr[i] ~= nil then\n      result[i]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7wi1jpx.lua:34:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {2, 1, 1, 4, 5, 8, 2, 3}\nstack traceback:\n\t/tmp/tmpj7wi1jpx.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 10 do\n    local value = arr[i]\n    if value ~= nil then\n     \
    \ result[value] = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpll_gxgd9.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 7, 8, 4, 5, 8=6}\nstack traceback:\n\t/tmp/tmpll_gxgd9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32wvzzbr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp32wvzzbr.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local num = arr[i]\n    if num then\n      local name =\
    \ one_or_nine[num - 1]\n      if not name then\n        error(\"unexpected number\
    \ in by_length: \" .. num)\n      end\n      result[i] = name\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8,\
    \ 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n  \
    \  lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -1, 55}),\
    \ {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three', 'Two', 'One'})\n\
    \    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight', 'Four'})\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2u5emzp6.lua:18:\
    \ attempt to index global 'one_or_nine' (a nil value)\nstack traceback:\n\t/tmp/tmp2u5emzp6.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmp2u5emzp6.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = by_length(value) or value\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf091ymox.lua:16:\
    \ attempt to index local 'arr' (a number value)\nstack traceback:\n\t/tmp/tmpf091ymox.lua:16:\
    \ in function 'by_length'\n\t/tmp/tmpf091ymox.lua:18: in function 'candidate'\n\
    \t/tmp/tmpf091ymox.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo8doqm9m.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpo8doqm9m.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpo8doqm9m.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe_l20xoj.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 7, 8, 4, 5, 8=6}\nstack traceback:\n\t/tmp/tmpe_l20xoj.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = tostring(i - 1)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa_4cghdr.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"2\", \"6\", \"7\", \"3\", \"4\", 8=\"5\"}\nstack traceback:\n\
    \t/tmp/tmpa_4cghdr.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = result[i] or tostring(value)\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzgv4rodf.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {\"1\", \"2\", \"8\", \"4\", \"5\", 8=\"8\"}\nstack traceback:\n\
    \t/tmp/tmpzgv4rodf.lua:27: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[i]\
    \ = name[value]\n    end\n  end\n  if #arr > 0 then\n    table.sort(result)\n\
    \    for i = 1, 9 do\n      result[i] = name[result[i]]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = by_length\n    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight',\
    \ 'Five', 'Four', 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}),\
    \ {})\n    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq952ktki.lua:18:\
    \ attempt to index global 'name' (a nil value)\nstack traceback:\n\t/tmp/tmpq952ktki.lua:18:\
    \ in function 'candidate'\n\t/tmp/tmpq952ktki.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 10 do\n    local value = arr[i]\n    if value ~= nil then\n     \
    \ result[value] = result[i] or value\n    end\n  end\n  return result\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3ki1q4vt.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 8, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmp3ki1q4vt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = i\n    end\n  end\n  for i = 1, 9 do\n    local value = arr[i]\n    if value\
    \ ~= nil then\n      arr[value] = result[i]\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = by_length\n\
    \    lu.assertEquals(candidate({2, 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four',\
    \ 'Three', 'Two', 'Two', 'One', 'One'})\n    lu.assertEquals(candidate({}), {})\n\
    \    lu.assertEquals(candidate({1, -1, 55}), {'One'})\n    lu.assertEquals(candidate({1,\
    \ -1, 3, 2}), {'Three', 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}),\
    \ {'Nine', 'Eight', 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8ukzbwhm.lua:33:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {3, 7, 8, 4, 5, 8=6}\nstack traceback:\n\t/tmp/tmp8ukzbwhm.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
- exit_code: 1
  program: "-- Given a table of integers, sort the integers that are between 1 and\
    \ 9 inclusive,\n-- reverse the resulting table, and then replace each digit by\
    \ its corresponding name from\n-- \"One\", \"Two\", \"Three\", \"Four\", \"Five\"\
    , \"Six\", \"Seven\", \"Eight\", \"Nine\".\n-- For example:\n-- >>> by_length({2,\
    \ 1, 1, 4, 5, 8, 2, 3})\n-- {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'}\n-- If the table is empty, return an empty table:\n-- >>> by_length({})\n\
    -- {}\n-- If the table has any strange number ignore it:\n-- >>> by_length({1,\
    \ -1, 55})\n-- {'One'}\nlocal function by_length(arr)\n  local result = {}\n \
    \ for i = 1, 9 do\n    local value = arr[i]\n    if value ~= nil then\n      result[value]\
    \ = arr[i]\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = by_length\n    lu.assertEquals(candidate({2,\
    \ 1, 1, 4, 5, 8, 2, 3}), {'Eight', 'Five', 'Four', 'Three', 'Two', 'Two', 'One',\
    \ 'One'})\n    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1,\
    \ -1, 55}), {'One'})\n    lu.assertEquals(candidate({1, -1, 3, 2}), {'Three',\
    \ 'Two', 'One'})\n    lu.assertEquals(candidate({9, 4, 8}), {'Nine', 'Eight',\
    \ 'Four'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzab5j62u.lua:27:\
    \ expected: {\"Eight\", \"Five\", \"Four\", \"Three\", \"Two\", \"Two\", \"One\"\
    , \"One\"}\nactual: {1, 2, 3, 4, 5, 8=8}\nstack traceback:\n\t/tmp/tmpzab5j62u.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750508
