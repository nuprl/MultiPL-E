name: HumanEval_145_order_by_points
language: lua
prompt: "-- Write a function which sorts the given table of integers\n-- in ascending\
  \ order according to the sum of their digits.\n-- Note: if there are several items\
  \ with similar sum of their digits,\n-- order them based on their index in original\
  \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
  \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
  \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
  \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
  \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11,\
  \ -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
  \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n\
    \    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for\
    \ i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n\
    \  end\n  return sorted_nums_copy\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j):tonumber()\n    end\n    table.insert(result, sum)\n  end\n  return result\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for\
    \ j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result, function(a, b)\n    return a < b\n  end)\n\
    \  return result\nend", "  local nums_sorted = {}\n  local nums_sum = 0\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    nums_sum = nums_sum + num\n  \
    \  if nums_sum > 0 then\n      table.insert(nums_sorted, num)\n    end\n  end\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n\
    \    local digits = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n  \
    \    sum = sum + tonumber(string.sub(digits, j, j))\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted)\n  local result = {}\n  for i = 1, #nums_sorted\
    \ do\n    table.insert(result, nums[i])\n  end\n  return result\nend", "  local\
    \ sorted = {}\n  for i = 1, #nums do\n    local digits = nums[i]\n    local sum\
    \ = 0\n    for j = 1, #digits do\n      sum = sum + tonumber(string.sub(digits,\
    \ j, j))\n    end\n    table.insert(sorted, sum)\n  end\n  table.sort(sorted,\
    \ function(a, b) return a < b end)\n  local result = {}\n  for i = 1, #sorted\
    \ do\n    table.insert(result, sorted[i])\n  end\n  return result\nend", "  local\
    \ sorted_nums = {}\n  local sorted_index = {}\n  local num_sum = 0\n  for i =\
    \ 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(abs(num),\
    \ 10))\n    local num_sum = num_sum + num_digits\n    sorted_index[num_sum] =\
    \ i\n    sorted_nums[num_sum] = num\n  end\n  table.sort(sorted_nums, function(a,\
    \ b) return a < b end)\n  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums\
    \ do\n    sorted_nums_copy[sorted_index[i]] = sorted_nums[i]\n  end\n  return\
    \ sorted_nums_copy\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n \
    \   local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  return table.concat(nums_sorted)\nend", "  local nums_sorted = {}\n  local\
    \ nums_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local sum\
    \ = 0\n    for j = 1, #num do\n      sum = sum + num:sub(j, j)\n    end\n    local\
    \ index = #nums_sorted\n    if nums_sums[sum] == nil then\n      nums_sorted[index]\
    \ = num\n      nums_sums[sum] = index\n    else\n      local j = nums_sums[sum]\n\
    \      while j > 0 do\n        if nums_sorted[j - 1] < num then\n          nums_sorted[j]\
    \ = num\n          nums_sums[sum] = j\n          break\n        end\n        j\
    \ = j - 1\n      end\n      nums_sorted[j] = num\n      nums_sums[sum] = j + 1\n\
    \    end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits\
    \ = math.floor(math.log(num) / math.log(10))\n    num_sum = num_sum + num_digits\n\
    \    if num_digits > 1 then\n      local num_digits_sum = 0\n      local num_digits_index\
    \ = 1\n      while num_digits_index < num_digits do\n        local num_digits_sum\
    \ = num_digits_sum + math.pow(10, num_digits_index)\n        num_digits_index\
    \ = num_digits_index + 1\n      end\n      local num_digits_sum = math.floor(num_digits_sum)\n\
    \      if num_digits_sum > num_sum then\n        table.insert(nums_sorted, num)\n\
    \      else\n        local num_digits_sum_index = 1\n        while num_digits_sum_index\
    \ < num_digits_sum do\n          table.insert(nums_sorted, nums[num_digits_sum_index])\n\
    \          num_digits_sum_index = num_digits_sum_index + 1\n        end\n    \
    \  end\n    else\n      table.insert(nums_sorted, num)\n    end\n  end\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  local num_sums = {}\n  for i\
    \ = 1, #nums do\n    local num_sum = math.floor(math.abs(nums[i])):int()\n   \
    \ if num_sum ~= 0 then\n      num_sums[num_sum] = num_sums[num_sum] or {}\n  \
    \    table.insert(num_sums[num_sum], i)\n    end\n  end\n  for num_sum, nums_in_sum\
    \ in pairs(num_sums) do\n    table.sort(nums_in_sum, function(a, b)\n      return\
    \ a[1] + b[1]\n    end)\n    for i = 1, #nums_in_sum do\n      table.insert(nums_sorted,\
    \ nums[nums_in_sum[i]])\n    end\n  end\n  return nums_sorted\nend", "  local\
    \ nums_sorted = {}\n  local nums_sum = 0\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    nums_sum = nums_sum + num\n    table.insert(nums_sorted, num)\n\
    \  end\n  table.sort(nums_sorted, function(a, b) return nums_sum - a < nums_sum\
    \ - b end)\n  return nums_sorted\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend", " \
    \ local sorted = {}\n  local index = 1\n  for i = 1, #nums do\n    local digits\
    \ = nums:sub(i, i)\n    local sum = tonumber(digits)\n    if sum == 0 then\n \
    \     table.insert(sorted, index)\n    else\n      index = index + 1\n      table.insert(sorted,\
    \ sum)\n    end\n  end\n  return sorted\nend", "  local result = {}\n  for i =\
    \ 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:byte(j)\
    \ * j\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n \
    \ return result\nend", "  local sorted_nums = {}\n  local num_sum = 0\n  for i\
    \ = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_sum = num_sum + num_digits\n    sorted_nums[num_sum]\
    \ = num\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res = {}\n  for\
    \ i = 1, #sorted_nums do\n    sorted_nums_res[#sorted_nums_res + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_res\nend", "  local nums_sorted = {}\n  local index\
    \ = 1\n  for i = 1, #nums do\n    local num = nums[i]\n    local digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local sum_digits = math.fmod(num, math.pow(10, digits))\n\
    \    local key = tostring(sum_digits)\n    if not nums_sorted[key] then\n    \
    \  nums_sorted[key] = index\n      index = index + 1\n    end\n  end\n  return\
    \ table.unpack(nums_sorted)\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in\
    \ ipairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
