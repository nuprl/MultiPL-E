name: HumanEval_145_order_by_points
language: lua
prompt: "-- Write a function which sorts the given table of integers\n-- in ascending\
  \ order according to the sum of their digits.\n-- Note: if there are several items\
  \ with similar sum of their digits,\n-- order them based on their index in original\
  \ table.\n-- For example:\n-- >>> order_by_points({1, 11, -1, -11, -12})\n-- {-1,\
  \ -11, 1, -12, 11}\n-- >>> order_by_points({})\n-- {}\nlocal function order_by_points(nums)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = order_by_points\n\
  \    lu.assertEquals(candidate({1, 11, -1, -11, -12}), {-1, -11, 1, -12, 11})\n\
  \    lu.assertEquals(candidate({1234, 423, 463, 145, 2, 423, 423, 53, 6, 37, 3457,\
  \ 3, 56, 0, 46}), {0, 2, 3, 6, 53, 423, 423, 423, 1234, 145, 37, 46, 56, 463, 3457})\n\
  \    lu.assertEquals(candidate({}), {})\n    lu.assertEquals(candidate({1, -11,\
  \ -32, 43, 54, -98, 2, -3}), {-3, -32, -98, -11, 1, 2, 43, 54})\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11}), {1, 10, 2, 11, 3, 4, 5, 6, 7, 8, 9})\n    lu.assertEquals(candidate({0,\
  \ 6, 6, -76, -21, 23, 4}), {-76, -21, 0, 4, 23, 6, 6})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n\
    \    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for\
    \ i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n\
    \  end\n  return sorted_nums_copy\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j):tonumber()\n    end\n    table.insert(result, sum)\n  end\n  return result\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for\
    \ j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result, function(a, b)\n    return a < b\n  end)\n\
    \  return result\nend", "  local nums_sorted = {}\n  local nums_sum = 0\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    nums_sum = nums_sum + num\n  \
    \  if nums_sum > 0 then\n      table.insert(nums_sorted, num)\n    end\n  end\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n\
    \    local digits = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n  \
    \    sum = sum + tonumber(string.sub(digits, j, j))\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted)\n  local result = {}\n  for i = 1, #nums_sorted\
    \ do\n    table.insert(result, nums[i])\n  end\n  return result\nend", "  local\
    \ sorted = {}\n  for i = 1, #nums do\n    local digits = nums[i]\n    local sum\
    \ = 0\n    for j = 1, #digits do\n      sum = sum + tonumber(string.sub(digits,\
    \ j, j))\n    end\n    table.insert(sorted, sum)\n  end\n  table.sort(sorted,\
    \ function(a, b) return a < b end)\n  local result = {}\n  for i = 1, #sorted\
    \ do\n    table.insert(result, sorted[i])\n  end\n  return result\nend", "  local\
    \ sorted_nums = {}\n  local sorted_index = {}\n  local num_sum = 0\n  for i =\
    \ 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(abs(num),\
    \ 10))\n    local num_sum = num_sum + num_digits\n    sorted_index[num_sum] =\
    \ i\n    sorted_nums[num_sum] = num\n  end\n  table.sort(sorted_nums, function(a,\
    \ b) return a < b end)\n  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums\
    \ do\n    sorted_nums_copy[sorted_index[i]] = sorted_nums[i]\n  end\n  return\
    \ sorted_nums_copy\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n \
    \   local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  return table.concat(nums_sorted)\nend", "  local nums_sorted = {}\n  local\
    \ nums_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local sum\
    \ = 0\n    for j = 1, #num do\n      sum = sum + num:sub(j, j)\n    end\n    local\
    \ index = #nums_sorted\n    if nums_sums[sum] == nil then\n      nums_sorted[index]\
    \ = num\n      nums_sums[sum] = index\n    else\n      local j = nums_sums[sum]\n\
    \      while j > 0 do\n        if nums_sorted[j - 1] < num then\n          nums_sorted[j]\
    \ = num\n          nums_sums[sum] = j\n          break\n        end\n        j\
    \ = j - 1\n      end\n      nums_sorted[j] = num\n      nums_sums[sum] = j + 1\n\
    \    end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits\
    \ = math.floor(math.log(num) / math.log(10))\n    num_sum = num_sum + num_digits\n\
    \    if num_digits > 1 then\n      local num_digits_sum = 0\n      local num_digits_index\
    \ = 1\n      while num_digits_index < num_digits do\n        local num_digits_sum\
    \ = num_digits_sum + math.pow(10, num_digits_index)\n        num_digits_index\
    \ = num_digits_index + 1\n      end\n      local num_digits_sum = math.floor(num_digits_sum)\n\
    \      if num_digits_sum > num_sum then\n        table.insert(nums_sorted, num)\n\
    \      else\n        local num_digits_sum_index = 1\n        while num_digits_sum_index\
    \ < num_digits_sum do\n          table.insert(nums_sorted, nums[num_digits_sum_index])\n\
    \          num_digits_sum_index = num_digits_sum_index + 1\n        end\n    \
    \  end\n    else\n      table.insert(nums_sorted, num)\n    end\n  end\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  local num_sums = {}\n  for i\
    \ = 1, #nums do\n    local num_sum = math.floor(math.abs(nums[i])):int()\n   \
    \ if num_sum ~= 0 then\n      num_sums[num_sum] = num_sums[num_sum] or {}\n  \
    \    table.insert(num_sums[num_sum], i)\n    end\n  end\n  for num_sum, nums_in_sum\
    \ in pairs(num_sums) do\n    table.sort(nums_in_sum, function(a, b)\n      return\
    \ a[1] + b[1]\n    end)\n    for i = 1, #nums_in_sum do\n      table.insert(nums_sorted,\
    \ nums[nums_in_sum[i]])\n    end\n  end\n  return nums_sorted\nend", "  local\
    \ nums_sorted = {}\n  local nums_sum = 0\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    nums_sum = nums_sum + num\n    table.insert(nums_sorted, num)\n\
    \  end\n  table.sort(nums_sorted, function(a, b) return nums_sum - a < nums_sum\
    \ - b end)\n  return nums_sorted\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(result, sum)\n  end\n  return result\nend", " \
    \ local sorted = {}\n  local index = 1\n  for i = 1, #nums do\n    local digits\
    \ = nums:sub(i, i)\n    local sum = tonumber(digits)\n    if sum == 0 then\n \
    \     table.insert(sorted, index)\n    else\n      index = index + 1\n      table.insert(sorted,\
    \ sum)\n    end\n  end\n  return sorted\nend", "  local result = {}\n  for i =\
    \ 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:byte(j)\
    \ * j\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n \
    \ return result\nend", "  local sorted_nums = {}\n  local num_sum = 0\n  for i\
    \ = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_sum = num_sum + num_digits\n    sorted_nums[num_sum]\
    \ = num\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res = {}\n  for\
    \ i = 1, #sorted_nums do\n    sorted_nums_res[#sorted_nums_res + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_res\nend", "  local nums_sorted = {}\n  local index\
    \ = 1\n  for i = 1, #nums do\n    local num = nums[i]\n    local digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local sum_digits = math.fmod(num, math.pow(10, digits))\n\
    \    local key = tostring(sum_digits)\n    if not nums_sorted[key] then\n    \
    \  nums_sorted[key] = index\n      index = index + 1\n    end\n  end\n  return\
    \ table.unpack(nums_sorted)\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in\
    \ ipairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local result = {}\n  local sum = 0\n\
    \  for _, v in ipairs(nums) do\n    sum = sum + v\n    result[sum] = v\n  end\n\
    \  table.sort(result, function(a, b) return a < b end)\n  return result\nend",
  "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums) do\n\
    \    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a < num_sum - b end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted)\n  local nums_sorted = {}\n  for i =\
    \ 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum\
    \ + nums[i][j]\n    end\n    table.insert(nums_sorted, sum)\n  end\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum - b end)\n\
    \  return nums_sorted\nend", "  local sorted_nums = {}\n  local num_sums = {}\n\
    \  for i = 1, #nums do\n    local num_sum = sum((nums[i]):gsub(\"%d+\", \"\"))\n\
    \    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n\
    \  for i = 1, #sorted_nums do\n    local num_sum = num_sums[i]\n    for j = 1,\
    \ #nums do\n      if num_sum == num_sums[j] then\n        sorted_nums[j] = sorted_nums[i]\n\
    \        break\n      end\n    end\n  end\n  return sorted_nums\nend", "  local\
    \ nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10\
    \ do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    if nums_sorted[sum]\
    \ == nil then\n      table.insert(nums_sorted, sum)\n    end\n  end\n  return\
    \ table.sort(nums_sorted)\nend", "  local nums_sorted = {}\n  local num_sum =\
    \ 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(abs(num),\
    \ 10))\n    local num_sum = num_sum + num_digits\n    if num_sum > 0 then\n  \
    \    nums_sorted[num_sum] = num\n    end\n  end\n  local num_sum = 0\n  for i\
    \ = 1, #nums_sorted do\n    local num = nums_sorted[i]\n    local num_digits =\
    \ math.floor(math.log(abs(num), 10))\n    local num_sum = num_sum + num_digits\n\
    \    if num_sum > 0 then\n      table.insert(nums, num)\n    end\n  end\n  return\
    \ nums\nend", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n\
    \    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n\
    \    table.insert(result, sum)\n  end\n  table.sort(result, function(a, b) return\
    \ a < b end)\n  return result\nend", "  local sorted_nums = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j):tonumber()\n    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local result = {}\n  for i = 1, #nums do\n    table.insert(result, nums[i])\n\
    \  end\n  return result\nend", "  local nums_sorted = {}\n  local num_sums = {}\n\
    \  for i = 1, #nums do\n    local num_sum = sum(nums[i])\n    if num_sum == 0\
    \ then\n      num_sum = 1\n    end\n    if num_sum in num_sums then\n      num_sums[num_sum]\
    \ = num_sums[num_sum] + 1\n    else\n      num_sums[num_sum] = 1\n    end\n  end\n\
    \  for num_sum, count in pairs(num_sums) do\n    if count > 1 then\n      table.insert(nums_sorted,\
    \ nums[math.random(#nums)])\n    end\n  end\n  return table.concat(nums_sorted)\n\
    end", "  local result = {}\n  local index = 1\n  for i = 1, #nums do\n    local\
    \ digits = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n      sum =\
    \ sum + tonumber(string.sub(digits, j, j))\n    end\n    if index == 1 or sum\
    \ > result[index] then\n      result[index] = sum\n      index = index + 1\n \
    \   end\n  end\n  return result\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local digits = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n\
    \      sum = sum + tonumber(digits[j])\n    end\n    table.insert(result, sum)\n\
    \  end\n  table.sort(result, function(a, b) return a < b end)\n  return result\n\
    end", "  local result = {}\n  local sum = 0\n  for i = 1, #nums do\n    sum =\
    \ sum + nums[i]\n    result[sum] = nums[i]\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n\
    \      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result, function(a, b) return a < b end)\n  return\
    \ result\nend", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n\
    \    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n\
    \    table.insert(result, sum)\n  end\n  table.sort(result, function(a, b) return\
    \ a < b end)\n  return result\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits =\
    \ math.floor(math.log(num) / math.log(10))\n    num_sum = num_sum + num_digits\n\
    \    nums_sorted[i] = num\n  end\n  table.sort(nums_sorted, function(a, b) return\
    \ num_sum - math.floor(math.log(a) / math.log(b)) end)\n  return nums_sorted\n\
    end", "  local sorted_nums = {}\n  local num_sum = 0\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    num_sum = num_sum + num_digits\n    sorted_nums[num_sum] = num\n  end\n \
    \ table.sort(sorted_nums)\n  local sorted_nums_reverse = {}\n  for i = 1, #sorted_nums\
    \ do\n    sorted_nums_reverse[#sorted_nums_reverse + 1] = sorted_nums[i]\n  end\n\
    \  return sorted_nums_reverse\nend", "  local sorted_nums = {}\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_index = nil\n  local num_sum\
    \ = 0\n  local num_key\n  local num_value\n  for num_key, num_value in pairs(nums)\
    \ do\n    num_sum = num_sum + num_value\n    sorted_nums[num_sum] = num_key\n\
    \  end\n  sorted_keys = table.sort(sorted_nums)\n  sorted_values = table.sort(nums)\n\
    \  for num_key, num_value in pairs(sorted_nums) do\n    sorted_index = num_value\
    \ - num_sum\n    sorted_nums[num_value] = sorted_values[sorted_index]\n  end\n\
    \  return sorted_nums\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_sum = num_sum + num_digits\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - math.abs(num_digits\
    \ - math.abs(b - a)) end)\n  return nums_sorted\nend", "  local sorted_nums =\
    \ {}\n  for i = 1, #nums do\n    local digits = nums[i]\n    local sum = 0\n \
    \   for j = 1, #digits do\n      sum = sum + tonumber(string.sub(digits, j, j))\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_copy\nend", "  local nums_sorted\
    \ = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local digits = num:gsub(\"\
    %d+\", \"\")\n    local sum_digits = tonumber(digits)\n    if sum_digits == nil\
    \ then\n      sum_digits = 0\n    end\n    local index = #nums_sorted + 1\n  \
    \  nums_sorted[index] = num\n  end\n  table.sort(nums_sorted, function(a, b)\n\
    \    return tonumber(a) - tonumber(b)\n  end)\n  return nums_sorted\nend", " \
    \ local sorted_nums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n   \
    \ local digits = string.sub(tostring(num), 1, 1)\n    local sum = 0\n    for j\
    \ = 1, #digits do\n      sum = sum + tonumber(digits[j])\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local result = {}\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n\
    \      sum = sum + tonumber(digits[j])\n    end\n    if sum == sorted_nums[i]\
    \ then\n      table.insert(result, num)\n    end\n  end\n  return result\nend",
  "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local\
    \ digits = num:gsub(\"%d+\", \"\")\n    local sum_digits = tonumber(digits)\n\
    \    if sum_digits == nil then\n      sum_digits = 0\n    end\n    local index\
    \ = #nums_sorted\n    nums_sorted[index] = num\n  end\n  table.sort(nums_sorted,\
    \ function(a, b)\n    local a_digits = a:gsub(\"%d+\", \"\")\n    local b_digits\
    \ = b:gsub(\"%d+\", \"\")\n    local a_sum_digits = tonumber(a_digits)\n    local\
    \ b_sum_digits = tonumber(b_digits)\n    if a_sum_digits == nil then\n      a_sum_digits\
    \ = 0\n    end\n    if b_sum_digits == nil then\n      b_sum_digits = 0\n    end\n\
    \    if a_sum_digits > b_sum_digits then\n      return 1\n    elseif a_sum_digits\
    \ < b_sum_digits then\n      return -1\n    else\n      return a<b\n    end\n\
    \  end)\n  return table.concat(nums_sorted)\nend", "  local nums_sorted = {}\n\
    \  local num_sum = 0\n  for _, num in ipairs(nums) do\n    num_sum = num_sum +\
    \ num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return num_sum - a > num_sum - b end)\n  return nums_sorted\nend", "  local\
    \ nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum\
    \ = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n\
    \    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  local\
    \ sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    sorted_nums_copy[#sorted_nums_copy\
    \ + 1] = sorted_nums[i]\n  end\n  return sorted_nums_copy\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num, 10))\n    local num_sum = num_sum\
    \ + num_digits\n    if num_digits > 1 then\n      local num_digits_sum = 0\n \
    \     for j = 1, num_digits do\n        num_digits_sum = num_digits_sum + math.pow(10,\
    \ j)\n      end\n      local num_digits_sum = math.floor(num_digits_sum)\n   \
    \   local num_digits_diff = num_digits - num_digits_sum\n      local num_digits_diff_sum\
    \ = 0\n      for j = 1, num_digits_diff do\n        num_digits_diff_sum = num_digits_diff_sum\
    \ + math.pow(10, num_digits_diff - j)\n      end\n      local num_digits_diff_sum\
    \ = math.floor(num_digits_diff_sum)\n      local num_digits_diff_diff = num_digits_diff\
    \ - num_digits_diff_sum\n      local num_digits_diff_diff_sum = 0\n      for j\
    \ = 1, num_digits_diff_diff do\n        num_digits_diff_diff_sum = num_digits_diff_diff_sum\
    \ + math.pow(10, num_digits_diff_diff - j)\n      end\n      local num_digits_diff_diff_sum\
    \ = math.floor(num_digits_diff_diff_sum)\n      local num_digits_diff_diff_diff\
    \ = num_digits_diff_diff - num_digits_diff_diff_sum\n      local num_digits_diff_diff_diff_sum\
    \ = 0\n      for j = 1, num_digits_diff_diff_diff do\n        num_digits_diff_diff_diff_sum\
    \ = num_digits_diff_diff_diff_sum + math.pow(10, num_digits_diff_diff_diff - j)\n\
    \      end\n      local num_digits_diff_diff_diff_sum = math.floor(num_digits_diff_diff_diff_sum)\n\
    \      local num_digits_diff_diff_diff_diff = num_digits_diff_diff_diff - num_digits_diff_diff_diff_sum\n\
    \      local num_digits_diff_diff_diff_diff_sum = 0\n      for j = 1, num_digits_diff_diff_diff_diff\
    \ do\n        num_digits_diff_diff_diff_diff_sum = num_digits_diff_diff_diff_diff_sum\
    \ + math.pow(10, num_digits_diff_diff_diff_diff - j)\n      end\n      local num_digits_diff_diff_diff_diff_sum\
    \ = math.floor(num_digits_diff_diff_diff_diff_sum)\n      local num_digits_diff_diff_diff_diff_diff\
    \ = num_digits_diff_diff_diff_diff - num_digits_diff_diff_diff_diff_sum\n    \
    \  num_digits_diff_diff_diff_diff_diff_sum = math.floor(num_digits_diff_diff_diff_diff_diff_sum)\n\
    \      num_digits_diff_diff_diff_diff_diff_", "  local nums_sorted = {}\n  local\
    \ num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n \
    \   table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b)\n    return num_sum - b\n  end)\n  return nums_sorted\nend", "  local nums_sorted\
    \ = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local sum_of_digits = math.fmod(num, math.pow(10, digits))\n\
    \    local index = #nums_sorted\n    nums_sorted[index] = num\n    if sum_of_digits\
    \ > 0 then\n      index = index + 1\n      nums_sorted[index] = sum_of_digits\n\
    \    end\n  end\n  return table.concat(nums_sorted)\nend", "  local sorted_nums\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num) / math.log(10))\n    num_sum\
    \ = num_sum + num_digits\n    sorted_nums[num_sum] = num\n  end\n  table.sort(sorted_nums)\n\
    \  return sorted_nums\nend", "  local nums_sorted = {}\n  local index = 1\n  for\
    \ _, num in pairs(nums) do\n    local digits = math.floor(math.log(num) / math.log(10))\n\
    \    local sum_of_digits = math.fmod(num, math.pow(10, digits))\n    local key\
    \ = tostring(sum_of_digits)\n    if nums_sorted[key] then\n      index = index\
    \ + 1\n      nums_sorted[key] = index\n    else\n      nums_sorted[key] = index\n\
    \    end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ nums_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local sum\
    \ = 0\n    for j = 1, #num do\n      sum = sum + num:sub(j, j)\n    end\n    if\
    \ nums_sums[sum] == nil then\n      nums_sums[sum] = i\n      nums_sorted[i] =\
    \ num\n    end\n  end\n  return nums_sorted\nend", "  local sorted = {}\n  local\
    \ index = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n\
    \      sum = sum + nums[i]:sub(j, j)\n    end\n    sorted[i] = sum\n    index[sum]\
    \ = i\n  end\n  table.sort(sorted, function(a, b) return index[a] < index[b] end)\n\
    \  return sorted\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n   \
    \ local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:digit(j) * j\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_copy\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num) / math.log(10))\n    local num_digits_sum\
    \ = num_digits + num_sum\n    if num_digits_sum > num_sum then\n      num_sum\
    \ = num_digits_sum\n      nums_sorted[i] = num\n    end\n  end\n  return table.concat(nums_sorted)\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums do\n\
    \    num_sum = num_sum + nums[i]\n    if num_sum > 0 then\n      table.insert(nums_sorted,\
    \ i)\n    end\n  end\n  table.sort(nums_sorted, function(i, j) return nums[j]\
    \ - nums[i] end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ nums_sorted_index = {}\n  local num_sum = 0\n  for i, v in ipairs(nums) do\n\
    \    local num_digits = math.floor(math.log(v) / math.log(10))\n    num_sum =\
    \ num_sum + num_digits\n    nums_sorted[i] = v\n    nums_sorted_index[v] = i\n\
    \  end\n  table.sort(nums_sorted, function(a, b) return num_sum - math.floor(math.log(a)\
    \ / math.log(b)) end)\n  return nums_sorted_index\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum((nums[i]):gsub(\"\
    %d+\", \"\"))\n    sorted_nums[i] = nums[i]\n    num_sums[i] = num_sum\n  end\n\
    \  table.sort(sorted_nums, function(a, b) return num_sums[a] > num_sums[b] end)\n\
    \  return sorted_nums\nend", "  local nums_sorted = {}\n  local nums_sums = {}\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local sum = nums_sums[num]\
    \ or 0\n    sum = sum + num\n    nums_sums[num] = sum\n    nums_sorted[i] = num\n\
    \  end\n  table.sort(nums_sorted, function(a, b) return nums_sums[a] > nums_sums[b]\
    \ end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num_sum = nums[i]\n    if num_sum ==\
    \ nil then\n      num_sum = 0\n    end\n    table.insert(sorted_nums, num_sum)\n\
    \    table.insert(num_sums, num_sum)\n  end\n  table.sort(sorted_nums)\n  table.sort(num_sums)\n\
    \  local sorted_nums_copy = {}\n  local num_sums_copy = {}\n  for i = 1, #sorted_nums\
    \ do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n    table.insert(num_sums_copy,\
    \ num_sums[i])\n  end\n  for i = 1, #num_sums do\n    sorted_nums[#sorted_nums\
    \ + 1] = num_sums_copy[i]\n  end\n  return sorted_nums\nend", "  local result\
    \ = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n\
    \      sum = sum + nums[i][j]\n    end\n    table.insert(result, sum)\n  end\n\
    \  table.sort(result)\n  return result\nend", "  local sorted_nums = {}\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    local digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local sum = 0\n    for j = 1, digits do\n      sum = sum\
    \ + math.pow(10, j) * num % 10\n      num = math.floor(num / 10)\n    end\n  \
    \  table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy\
    \ = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n\
    \  end\n  return sorted_nums_copy\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits =\
    \ math.floor(math.log(num) / math.log(10))\n    num_sum = num_sum + num_digits\n\
    \    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b)\n    local a_digits = math.floor(math.log(a) / math.log(10))\n    local b_digits\
    \ = math.floor(math.log(b) / math.log(10))\n    if a_digits < b_digits then\n\
    \      return -1\n    elseif a_digits > b_digits then\n      return 1\n    else\n\
    \      return num_sum - a_digits - b_digits\n    end\n  end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = math.floor(math.log(num) / math.log(10))\n    local sum_of_digits\
    \ = math.fmod(num, math.pow(10, digits))\n    local index = #nums_sorted + 1\n\
    \    nums_sorted[index] = num\n    if sum_of_digits > 0 then\n      local new_sum_of_digits\
    \ = sum_of_digits\n      while #nums_sorted > index and new_sum_of_digits > 0\
    \ do\n        new_sum_of_digits = new_sum_of_digits - nums_sorted[index + 1]\n\
    \        index = index + 1\n      end\n      nums_sorted[index] = num\n    end\n\
    \  end\n  return table.unpack(nums_sorted)\nend", "  local nums_sorted = {}\n\
    \  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local\
    \ num_digits = math.floor(math.log(num) / math.log(10))\n    local num_sum = num_sum\
    \ + num_digits\n    nums_sorted[i] = num\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return num_sum - math.abs(num_sum - math.abs(a - b)) end)\n  return nums_sorted\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for\
    \ j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    result[sum]\
    \ = nums[i]\n  end\n  return result\nend", "  local nums_sorted = {}\n  local\
    \ nums_sums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local sum\
    \ = 0\n    for j = 1, #num do\n      sum = sum + num:sub(j, j)\n    end\n    local\
    \ index = #nums_sorted\n    if nums_sums[sum] == nil then\n      nums_sums[sum]\
    \ = index\n      nums_sorted[index] = num\n    else\n      local index = nums_sums[sum]\n\
    \      nums_sums[sum] = index\n      nums_sorted[index] = num\n    end\n  end\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num,\
    \ 10))\n    local num_digits_sum = num_digits + num_sum\n    if num_digits_sum\
    \ > num_sum then\n      num_sum = num_digits_sum\n      nums_sorted[i] = num\n\
    \    end\n  end\n  return table.concat(nums_sorted)\nend", "  local result = {}\n\
    \  local sum = 0\n  for _, v in ipairs(nums) do\n    sum = sum + v\n    result[sum]\
    \ = v\n  end\n  return result\nend", "  local nums_sorted = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j):tonumber()\n    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  return table.concat(nums_sorted)\nend", "  local sorted_nums = {}\n  local\
    \ num_sums = {}\n  for i = 1, #nums do\n    local num_sum = nums[i]\n    if num_sum\
    \ == 0 then\n      sorted_nums[#sorted_nums+1] = nums[i]\n      num_sums[num_sum]\
    \ = i\n    else\n      local index = num_sums[num_sum]\n      sorted_nums[index]\
    \ = nums[i]\n      num_sums[num_sum] = i\n    end\n  end\n  return sorted_nums\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums)\
    \ do\n    local num_digits = math.floor(math.log(num) / math.log(10))\n    num_sum\
    \ = num_sum + num_digits\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - math.floor(math.log(a) / math.log(b)) end)\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n\
    \    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local result = {}\n  for i = 1, #nums_sorted do\n    table.insert(result, nums[i])\n\
    \  end\n  return result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for _, num in ipairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b)\n    return num_sum -\
    \ b\n  end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  for i =\
    \ 1, #nums do\n    local digits = nums[i]\n    local sum = 0\n    for j = 1, #digits\
    \ do\n      sum = sum + tonumber(string.sub(digits, j, j))\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for\
    \ i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n\
    \  end\n  return sorted_nums_copy\nend", "  local sorted_nums = {}\n  local num_sum\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits =\
    \ math.floor(math.log(num, 10))\n    local num_sum = num_sum + num_digits\n  \
    \  sorted_nums[num_sum] = num\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res\
    \ = {}\n  for i = 1, #sorted_nums do\n    sorted_nums_res[#sorted_nums_res + 1]\
    \ = sorted_nums[i]\n  end\n  return sorted_nums_res\nend", "  local result = {}\n\
    \  local sum = 0\n  for _, v in ipairs(nums) do\n    sum = sum + v\n    result[sum]\
    \ = v\n  end\n  table.sort(result, function(a, b) return a < b end)\n  return\
    \ result\nend", "  local sorted_nums = {}\n  local num_sums = {}\n  for i = 1,\
    \ #nums do\n    local num_sum = math.floor(math.abs(nums[i])):reverse():sub(1,\
    \ #math.floor(math.abs(nums[i]))):reverse()\n    sorted_nums[#sorted_nums+1] =\
    \ nums[i]\n    num_sums[num_sum] = num_sums[num_sum] or {}\n    num_sums[num_sum][#num_sums[num_sum]+1]\
    \ = i\n  end\n  local sorted_num_sums = {}\n  for num_sum, indices in pairs(num_sums)\
    \ do\n    sorted_num_sums[#sorted_num_sums+1] = num_sum\n    table.sort(indices,\
    \ function(a, b) return nums[a] > nums[b] end)\n  end\n  return table.concat(sorted_nums,\
    \ sorted_num_sums)\nend", "  local result = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n\
    \    table.insert(result, sum)\n  end\n  table.sort(result, function(a, b) return\
    \ a < b end)\n  return result\nend", "  local sorted_nums = {}\n  local num_sum\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits =\
    \ math.floor(math.log(num, 10))\n    local num_sum = num_sum + num_digits\n  \
    \  sorted_nums[num_sum] = num\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res\
    \ = {}\n  for i = 1, #sorted_nums do\n    sorted_nums_res[#sorted_nums_res + 1]\
    \ = sorted_nums[i]\n  end\n  return sorted_nums_res\nend", "  local sorted_nums\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num))\n    local num_digits_sum =\
    \ num_digits + num_sum\n    sorted_nums[num_digits_sum] = num\n    num_sum = num_sum\
    \ + num_digits\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n\
    \  for i = 1, #sorted_nums do\n    sorted_nums_copy[#sorted_nums_copy + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_copy\nend", "  local sorted = {}\n  local index =\
    \ {}\n  for i = 1, #nums do\n    local n = nums[i]\n    local digits = math.floor(math.log10(n))\n\
    \    local sum = 0\n    for j = 1, digits do\n      sum = sum + math.floor(n/math.pow(10,\
    \ j))\n      n = math.floor(n / math.pow(10, j))\n    end\n    table.insert(sorted,\
    \ sum)\n    table.insert(index, i)\n  end\n  table.sort(sorted, function(a, b)\n\
    \    return index[a] < index[b]\n  end)\n  return sorted\nend", "  local sorted\
    \ = {}\n  local index = 1\n  for i = 1, #nums do\n    local digits = nums[i]\n\
    \    local sum = 0\n    for j = 1, #digits do\n      sum = sum + tonumber(string.sub(digits,\
    \ j, j))\n    end\n    table.insert(sorted, index)\n    index = index + 1\n  \
    \  if sum > 0 then\n      table.insert(sorted, sum)\n    end\n  end\n  table.sort(sorted,\
    \ function(a, b)\n    return a > b\n  end)\n  local result = {}\n  for i = 1,\
    \ #sorted do\n    table.insert(result, sorted[i])\n  end\n  return result\nend",
  "  local nums_sorted = {}\n  local nums_sums = {}\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local sum = 0\n    for j = 1, #nums_sums do\n      sum =\
    \ sum + nums_sums[j]\n      if sum > 0 then\n        break\n      end\n    end\n\
    \    local index = #nums_sorted\n    if sum > 0 then\n      index = index - 1\n\
    \    end\n    nums_sorted[index] = num\n    nums_sums[index] = sum\n  end\n  return\
    \ nums_sorted\nend", "  local result = {}\n  for i = 1, #nums do\n    local sum\
    \ = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(result, sum)\n  end\n  table.sort(result, function(a,\
    \ b) return a < b end)\n  return result\nend", "  local nums_sorted = {}\n  local\
    \ num_sum = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n \
    \   table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return num_sum - a > num_sum - b end)\n  return nums_sorted\nend", "  local\
    \ sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    local num_sum = #num:gsub(\"%d+\", \"\")\n    sorted_nums[#sorted_nums\
    \ + 1] = num\n    num_sums[num_sum] = true\n  end\n  table.sort(sorted_nums)\n\
    \  for i = 1, #sorted_nums do\n    if num_sums[sorted_nums[i]] then\n      sorted_nums[i]\
    \ = i\n    end\n  end\n  return sorted_nums\nend", "  local sorted = {}\n  for\
    \ i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum +\
    \ nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(sorted, sum)\n  end\n\
    \  table.sort(sorted, function(a, b)\n    return a < b\n  end)\n  local result\
    \ = {}\n  for i = 1, #nums do\n    table.insert(result, nums[i])\n  end\n  return\
    \ result\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local digits\
    \ = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n      sum = sum + tonumber(digits[j])\n\
    \    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_res = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_res,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_res\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for _, num in ipairs(nums) do\n    num_sum = num_sum\
    \ + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - a > num_sum - b end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum - b end)\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for i = 1, #nums do\n    num_sum = num_sum + nums[i]\n    if num_sum > 0 then\n\
    \      table.insert(nums_sorted, i)\n    end\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return nums[a] > nums[b] end)\n  return nums_sorted\nend", " \
    \ local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j\
    \ = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    table.insert(sorted_nums,\
    \ sum)\n  end\n  table.sort(sorted_nums)\n  local result = {}\n  for i = 1, #nums\
    \ do\n    table.insert(result, nums[i])\n  end\n  return result\nend", "  local\
    \ sorted_nums = {}\n  local sorted_keys = nil\n  local sorted_values = nil\n \
    \ local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys =\
    \ nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_keys = nil\n  local sorted_values = nil\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local ", "  local sorted_nums = {}\n \
    \ for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i][j] % 10\n      nums[i][j] = nums[i][j] / 10\n    end\n    sorted_nums[sum]\
    \ = nums[i]\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res = {}\n\
    \  for i = 1, #sorted_nums do\n    sorted_nums_res[#sorted_nums_res + 1] = sorted_nums[i]\n\
    \  end\n  return sorted_nums_res\nend", "  local sorted_nums = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num_sum = nums[i]\n    if num_sum ==\
    \ 0 then\n      sorted_nums[#sorted_nums+1] = nums[i]\n      num_sums[num_sum]\
    \ = i\n    else\n      local index = num_sums[num_sum]\n      sorted_nums[#sorted_nums+1]\
    \ = nums[index]\n      num_sums[num_sum] = index\n    end\n  end\n  return sorted_nums\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = string.gsub(tostring(num), \"^%d+\", \"\")\n    local sum_digits\
    \ = tonumber(digits)\n    if sum_digits == nil then\n      sum_digits = 0\n  \
    \  end\n    local index = #nums_sorted\n    nums_sorted[index] = num\n  end\n\
    \  table.sort(nums_sorted, function(a, b)\n    return a.sum_digits > b.sum_digits\n\
    \  end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits =\
    \ math.floor(math.log(num) / math.log(10))\n    num_sum = num_sum + num_digits\n\
    \    nums_sorted[num_sum] = num\n  end\n  local num_sums = {}\n  for i = 1, #nums_sorted\
    \ do\n    local num_sum = nums_sorted[i]\n    if num_sums[num_sum] == nil then\n\
    \      num_sums[num_sum] = 1\n    else\n      num_sums[num_sum] = num_sums[num_sum]\
    \ + 1\n    end\n  end\n  local sorted_nums = {}\n  for num_sum, count in pairs(num_sums)\
    \ do\n    sorted_nums[num_sum] = nums_sorted[num_sum]\n  end\n  return sorted_nums\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local digits = nums[i]\n\
    \    local sum = 0\n    for j = 1, #digits do\n      sum = sum + tonumber(string.sub(digits,\
    \ j, j))\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local result = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n\
    \    table.insert(result, sum)\n  end\n  table.sort(result)\n  return result\n\
    end", "  local nums_sorted = {}\n  local index = 1\n  for i = 1, #nums do\n  \
    \  local digits = nums:sub(i, i)\n    local sum = digits:reduce(function(acc,\
    \ digit)\n      return acc + digit\n    end)\n    if nums_sorted[sum] then\n \
    \     index = index + 1\n      nums_sorted[sum] = index\n    else\n      nums_sorted[sum]\
    \ = index\n    end\n  end\n  return nums_sorted\nend", "  local nums_sorted =\
    \ {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = sum((nums[i]):gsub(\"\
    %d+\", \"\"))\n    if num_sum == 0 then\n      num_sum = 1\n    end\n    table.insert(nums_sorted,\
    \ nums[i])\n    table.insert(num_sums, num_sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local num_sums_sorted = {}\n  for i = 1, #num_sums do\n    table.insert(num_sums_sorted,\
    \ num_sums[i])\n  end\n  table.sort(num_sums_sorted)\n  for i = 1, #nums_sorted\
    \ do\n    local num = nums_sorted[i]\n    local num_sum = num_sums_sorted[i]\n\
    \    local index = #nums_sorted\n    for j = 1, #num_sums_sorted do\n      if\
    \ num_sums_sorted[j] == num_sum then\n        index = j\n        break\n     \
    \ end\n    end\n    table.insert(nums_sorted, index)\n  end\n  return nums_sorted\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for\
    \ j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    if sum > 0 then\n\
    \      table.insert(result, i)\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n\
    \      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    result[sum] = nums[i]\n\
    \  end\n  return result\nend", "  local nums_sorted = {}\n  local num_sums = {}\n\
    \  for i = 1, #nums do\n    local num_sum = 0\n    for j = 1, 10 do\n      num_sum\
    \ = num_sum + nums[i]:sub(j, j)\n    end\n    if num_sum in num_sums then\n  \
    \    table.insert(nums_sorted, nums[i])\n      table.insert(nums_sorted, num_sums[num_sum])\n\
    \    else\n      table.insert(nums_sorted, nums[i])\n      num_sums[num_sum] =\
    \ i\n    end\n  end\n  return nums_sorted\nend", "  local result = {}\n  for i\
    \ = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum\
    \ + nums[i][j]\n    end\n    table.insert(result, sum)\n  end\n  return result\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = math.floor(math.log10(num))\n    local sum = 0\n    for j\
    \ = 1, digits do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n\
    \    end\n    if nums_sorted[sum] == nil then\n      nums_sorted[sum] = i\n  \
    \  end\n  end\n  table.sort(nums_sorted, function(a, b) return a < b end)\n  local\
    \ result = {}\n  for i = 1, #nums_sorted do\n    result[nums_sorted[i]] = nums[i]\n\
    \  end\n  return result\nend", "  local sorted_nums = {}\n  local sorted_keys\
    \ = nil\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num, 10))\n    local num_sum = num_sum\
    \ + num_digits\n    sorted_nums[num_sum] = num\n    if sorted_keys == nil then\n\
    \      sorted_keys = sorted_nums\n    else\n      local prev_sum = sorted_keys[num_sum]\n\
    \      for j = 1, #sorted_keys do\n        if sorted_keys[j] == prev_sum then\n\
    \          sorted_keys[j] = sorted_nums[j]\n        end\n      end\n    end\n\
    \  end\n  return sorted_keys\nend", "  local sorted_nums = {}\n  local sorted_keys\
    \ = nil\n  local sorted_values = nil\n  local sorted_index = 0\n  local sorted_sum\
    \ = 0\n  local sorted_keys = nil\n  local sorted_values = nil\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    sorted_sum = sorted_sum + num\n    sorted_index\
    \ = sorted_index + 1\n    sorted_nums[sorted_index] = num\n    if sorted_sum >\
    \ 0 then\n      sorted_keys = sorted_keys or {}\n      sorted_values = sorted_values\
    \ or {}\n      local sum = 0\n      for j = 1, 10 do\n        sum = sum + sorted_nums[sorted_index\
    \ - j]\n      end\n      sorted_keys[#sorted_keys + 1] = sorted_index\n      sorted_values[#sorted_values\
    \ + 1] = sum\n    end\n  end\n  if sorted_sum ~= 0 then\n    sorted_keys = sorted_keys\
    \ or {}\n    sorted_values = sorted_values or {}\n    local sum = 0\n    for j\
    \ = 1, 10 do\n      sum = sum + sorted_nums[#sorted_nums]\n    end\n    sorted_keys[#sorted_keys\
    \ + 1] = #sorted_nums\n    sorted_values[#sorted_values + 1] = sum\n  end\n  return\
    \ table.concat(sorted_keys), table.concat(sorted_values)\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    num_sum = num_sum + nums[i]\n\
    \    if num_sum > 0 then\n      table.insert(nums_sorted, i)\n    end\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return nums[a] > nums[b] end)\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    local digits = math.floor(math.log10(num))\n    local num_sorted\
    \ = {}\n    for j = 1, digits do\n      num_sorted[j] = num / math.pow(10, j +\
    \ 1)\n    end\n    local sum_of_digits = math.sum(num_sorted)\n    local index\
    \ = #nums_sorted\n    if sum_of_digits > 0 then\n      index = index - 1\n   \
    \ end\n    nums_sorted[index] = num\n  end\n  return nums_sorted\nend", "  local\
    \ sorted_nums = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local\
    \ digits = math.floor(math.log(num) / math.log(10))\n    local sum = 0\n    for\
    \ j = 1, digits do\n      sum = sum + math.pow(10, j) * num % 10\n      num =\
    \ math.floor(num / 10)\n    end\n    table.insert(sorted_nums, sum)\n  end\n \
    \ table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums\
    \ do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n  end\n  return sorted_nums_copy\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = math.floor(math.log10(num))\n    local sum = 0\n    for j\
    \ = 1, digits do\n      sum = sum + num % 10\n      num = math.floor(num / 10)\n\
    \    end\n    if nums_sorted[sum] == nil then\n      nums_sorted[sum] = i\n  \
    \  end\n  end\n  table.sort(nums_sorted, function(a, b)\n    return nums[a] >\
    \ nums[b] or nums[a] == nums[b] and #nums[a] > #nums[b]\n  end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local digits = nums:sub(i,\
    \ i):gsub(\"%d+\", \"\"):gsub(\"%d\", \"\")\n    local sum = 0\n    for _, d in\
    \ ipairs(digits) do\n      sum = sum + tonumber(d)\n    end\n    table.insert(nums_sorted,\
    \ sum)\n  end\n  table.sort(nums_sorted)\n  local result = {}\n  for i = 1, #nums_sorted\
    \ do\n    table.insert(result, nums[#nums_sorted + i])\n  end\n  return result\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in pairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum - b end)\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    num_sum = num_sum + num_digits\n    nums_sorted[i] = num\n\
    \  end\n  table.sort(nums_sorted, function(a, b) return num_sum - math.floor(math.log(a)\
    \ / math.log(b)) end)\n  return nums_sorted\nend", "  local result = {}\n  for\
    \ i = 1, #nums do\n    local digits = nums[i]\n    local sum = 0\n    for j =\
    \ 1, #digits do\n      sum = sum + tonumber(string.sub(digits, j, j))\n    end\n\
    \    table.insert(result, sum)\n  end\n  table.sort(result)\n  return result\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = math.floor(math.log(num) / math.log(10))\n    local sum_digits\
    \ = math.fmod(num, math.pow(10, digits))\n    local index = #nums_sorted + 1\n\
    \    nums_sorted[index] = num\n    if sum_digits > 0 then\n      table.insert(nums_sorted,\
    \ index)\n    end\n  end\n  return nums_sorted\nend", "  local sorted_nums = {}\n\
    \  for i = 1, #nums do\n    local digits = nums[i]\n    local sum = 0\n    for\
    \ j = 1, #digits do\n      sum = sum + tonumber(string.sub(digits, j, j))\n  \
    \  end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local result = {}\n  for i = 1, #sorted_nums do\n    table.insert(result, nums[sorted_nums[i]])\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, #nums do\n \
    \   local digits = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n   \
    \   sum = sum + tonumber(string.sub(digits, j, j))\n    end\n    table.insert(result,\
    \ sum)\n  end\n  table.sort(result)\n  return result\nend", "  local result =\
    \ {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum\
    \ = sum + nums[i]:sub(j, j)\n    end\n    table.insert(result, sum)\n  end\n \
    \ return result\nend", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n\
    \    sorted_nums[#sorted_nums+1] = sum\n  end\n  table.sort(sorted_nums)\n  local\
    \ sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    sorted_nums_copy[#sorted_nums_copy+1]\
    \ = sorted_nums[i]\n  end\n  return sorted_nums_copy\nend", "  local sorted_nums\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num) / math.log(10))\n    local num_sum\
    \ = num_sum + num_digits\n    sorted_nums[num_sum] = num\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_rev = table.copy(sorted_nums)\n  table.sort(sorted_nums_rev,\
    \ function(a, b) return a < b end)\n  table.insert(sorted_nums, 1, num_sum)\n\
    \  table.insert(sorted_nums_rev, 1, num_sum)\n  return sorted_nums, sorted_nums_rev\n\
    end", "  local nums_sorted = {}\n  local nums_sums = {}\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    local sum = 0\n    for j = 1, #nums_sums do\n  \
    \    sum = sum + nums_sums[j]\n      if sum > num then\n        break\n      end\n\
    \    end\n    if sum > num then\n      nums_sorted[i] = num\n      nums_sums[#nums_sums\
    \ + 1] = sum\n    else\n      nums_sorted[i] = num\n      nums_sums[#nums_sums\
    \ + 1] = num\n    end\n  end\n  return nums_sorted\nend", "  local result = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(j, j)\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result,\
    \ function(a, b) return a < b end)\n  return result\nend", "  local nums_sorted\
    \ = {}\n  local nums_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    nums_sum = nums_sum + num\n    if nums_sum > 0 then\n      table.insert(nums_sorted,\
    \ num)\n    end\n  end\n  if #nums_sorted == 0 then\n    return {}\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return a > b end)\n  return nums_sorted\nend", "  local nums_sorted\
    \ = {}\n  local nums_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    nums_sum = nums_sum + num\n    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return nums_sum - a < nums_sum - b end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for _, num in ipairs(nums)\
    \ do\n    num_sum = num_sum + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return num_sum - a < num_sum - b end)\n\
    \  return nums_sorted\nend", "  local result = {}\n  for i = 1, #nums do\n   \
    \ local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    table.insert(result, sum)\n  end\n  return result\nend", "  local\
    \ sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum\
    \ = sum(nums[i])\n    sorted_nums[i] = nums[i]\n    num_sums[num_sum] = sorted_nums[i]\n\
    \  end\n  table.sort(sorted_nums)\n  for i = 1, #sorted_nums do\n    sorted_nums[i]\
    \ = num_sums[sum(sorted_nums[i])]\n  end\n  return sorted_nums\nend", "  local\
    \ sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum\
    \ = nums[i]\n    sorted_nums[num_sum] = nums[i]\n    num_sums[num_sum] = i\n \
    \ end\n  table.sort(sorted_nums)\n  for i = 1, #sorted_nums do\n    local num_sum\
    \ = sorted_nums[i]\n    local index = num_sums[num_sum]\n    nums[index] = sorted_nums[i]\n\
    \  end\n  return nums\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    num_sum = num_sum + num_digits\n    if num_sum > 0 then\n\
    \      table.insert(nums_sorted, num)\n    end\n  end\n  if #nums_sorted == 0\
    \ then\n    return {}\n  end\n  table.sort(nums_sorted, function(x, y)\n    local\
    \ x_digits = math.floor(math.log(x / 10^num_sum) / math.log(10))\n    local y_digits\
    \ = math.floor(math.log(y / 10^num_sum) / math.log(10))\n    if x_digits < y_digits\
    \ then\n      return -1\n    elseif x_digits > y_digits then\n      return 1\n\
    \    else\n      return 0\n    end\n  end)\n  return nums_sorted\nend", "  local\
    \ nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num\
    \ = nums[i]\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    local num_digits_sum = num_digits + num_sum\n    if num_digits_sum > num_sum\
    \ then\n      num_sum = num_digits_sum\n      nums_sorted[i] = num\n    end\n\
    \  end\n  return table.concat(nums_sorted)\nend", "  local nums_sorted = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(j, j)\n    end\n    if nums_sorted[sum] then\n      nums_sorted[sum]\
    \ = nums_sorted[sum] .. \", \" .. i\n    else\n      nums_sorted[sum] = i\n  \
    \  end\n  end\n  return nums_sorted\nend", "  local result = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(abs(num),\
    \ 10))\n    local num_digits_sum = num_sum + num_digits\n    if num_digits_sum\
    \ > num_sum then\n      nums_sorted[num_digits_sum] = num\n      num_sum = num_digits_sum\n\
    \    end\n  end\n  if #nums_sorted > 1 then\n    table.sort(nums_sorted, function(a,\
    \ b) return a < b end)\n  end\n  return nums_sorted\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num) / math.log(10))\n    num_sum\
    \ = num_sum + num_digits\n    nums_sorted[i] = num\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return num_sum - math.floor(math.log(a) / math.log(b)) end)\n\
    \  return nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_sum = num_sum + num_digits\n    local num_digits_str\
    \ = string.format(\"%0*d\", num_digits, num)\n    local num_digits_str_sorted\
    \ = num_digits_str:gsub(\"%d\", function(digit)\n      return string.format(\"\
    %0*d\", math.floor(math.log(num_digits_str) / math.log(10)), digit)\n    end)\n\
    \    table.insert(nums_sorted, num_digits_str_sorted)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b)\n    return a:sub(1, #a) < b:sub(1, #b)\n  end)\n  return nums_sorted\n\
    end", "  local sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n\
    \    local num_sum = math.floor(math.abs(nums[i])):long()\n    if num_sum == 0\
    \ then\n      num_sum = 1\n    end\n    sorted_nums[i] = nums[i]\n    num_sums[i]\
    \ = num_sum\n  end\n  table.sort(sorted_nums)\n  local num_sums_sorted = {}\n\
    \  for i = 1, #num_sums do\n    num_sums_sorted[i] = num_sums[i]\n  end\n  for\
    \ i = 1, #nums do\n    nums[i] = sorted_nums[i]\n  end\n  return num_sums_sorted\n\
    end", "  local sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n\
    \    local num_sum = sum(nums[i])\n    if num_sum == 0 then\n      sorted_nums[#sorted_nums+1]\
    \ = nums[i]\n    else\n      num_sums[num_sum] = num_sums[num_sum] or {}\n   \
    \   num_sums[num_sum][#num_sums[num_sum]+1] = nums[i]\n    end\n  end\n  for num_sum,\
    \ nums in pairs(num_sums) do\n    sorted_nums[#sorted_nums+1] = nums[#nums]\n\
    \  end\n  return sorted_nums\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for _, num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local nums_sum\
    \ = 0\n  for i = 1, #nums do\n    nums_sum = nums_sum + nums[i]\n    table.insert(nums_sorted,\
    \ nums[i])\n  end\n  table.sort(nums_sorted, function(a, b) return nums_sum -\
    \ b end)\n  return nums_sorted\nend", "  local sorted_nums = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num_sum = nums[i]\n    local index =\
    \ i\n    while num_sum > 0 do\n      num_sums = num_sums or {}\n      num_sums[num_sum]\
    \ = index\n      num_sum = num_sum - nums[index]\n      index = index + 1\n  \
    \  end\n    sorted_nums[#sorted_nums + 1] = num_sums\n  end\n  table.sort(sorted_nums)\n\
    \  local result = {}\n  for i = 1, #sorted_nums do\n    local num_sums = sorted_nums[i]\n\
    \    for j = 1, #num_sums do\n      result[j] = result[j] or {}\n      result[j][num_sums[j]]\
    \ = nums[i]\n    end\n  end\n  return result\nend", "  local sorted_nums = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(sorted_nums, sum)\n\
    \  end\n  table.sort(sorted_nums)\n  local sorted_nums_copy = {}\n  for i = 1,\
    \ #sorted_nums do\n    table.insert(sorted_nums_copy, sorted_nums[i])\n  end\n\
    \  return sorted_nums_copy\nend", "  local nums_sorted = {}\n  local num_sums\
    \ = {}\n  for i = 1, #nums do\n    local num_sum = math.floor(math.abs(nums[i])):long()\n\
    \    if num_sum == 0 then\n      num_sum = 1\n    end\n    if num_sums[num_sum]\
    \ == nil then\n      num_sums[num_sum] = 1\n    else\n      num_sums[num_sum]\
    \ = num_sums[num_sum] + 1\n    end\n  end\n  for num_sum, count in pairs(num_sums)\
    \ do\n    if count > 1 then\n      table.insert(nums_sorted, nums[num_sum - 1])\n\
    \    end\n  end\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local\
    \ num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_digits\
    \ = math.floor(math.log(num) / math.log(10))\n    num_sum = num_sum + num_digits\n\
    \    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return num_sum - math.floor(math.log(a) / math.log(b)) end)\n  return nums_sorted\n\
    end", "  local sorted_nums = {}\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local sorted_value = nil\n  local sorted_sum\
    \ = nil\n  local sorted_index = nil\n  local ", "  local nums_sorted = {}\n  for\
    \ i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum +\
    \ nums[i]:sub(j, j):tonumber()\n    end\n    table.insert(nums_sorted, sum)\n\
    \  end\n  table.sort(nums_sorted)\n  local nums_sorted_sorted = {}\n  for i =\
    \ 1, #nums_sorted do\n    table.insert(nums_sorted_sorted, nums[i])\n  end\n \
    \ return nums_sorted_sorted\nend", "  local nums_sorted = {}\n  local num_sum\
    \ = 0\n  for i = 1, #nums do\n    num_sum = num_sum + nums[i]\n    if num_sum\
    \ > 0 then\n      table.insert(nums_sorted, i)\n    end\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return nums[a] > nums[b] end)\n  return nums_sorted\nend", " \
    \ local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j\
    \ = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    if\
    \ nums_sorted[sum] == nil then\n      table.insert(nums_sorted, sum)\n    end\n\
    \  end\n  table.sort(nums_sorted, function(a, b)\n    return #a + #b - #a - #b\n\
    \  end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local nums_sum\
    \ = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    nums_sum = nums_sum\
    \ + num\n    if nums_sum > 0 then\n      table.insert(nums_sorted, num)\n    end\n\
    \  end\n  if #nums_sorted == 0 then\n    return {}\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return a > b end)\n  return nums_sorted\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    num_sum = num_sum + nums[i]\n\
    \    if num_sum > 0 then\n      table.insert(nums_sorted, i)\n    end\n  end\n\
    \  table.sort(nums_sorted)\n  local sorted_nums = {}\n  for i = 1, #nums_sorted\
    \ do\n    table.insert(sorted_nums, nums[nums_sorted[i]])\n  end\n  return sorted_nums\n\
    end", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local digits = num:gsub(\"%d+\", \"\")\n    local sum_digits = tonumber(digits)\n\
    \    if sum_digits > 0 then\n      nums_sorted[i] = num\n    end\n  end\n  return\
    \ table.sort(nums_sorted)\nend", "  local sorted_nums = {}\n  local num_sums =\
    \ {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local num_sum = tonumber(string.format(\"\
    %0.d\", num))\n    sorted_nums[i] = num\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums,\
    \ function(a, b) return num_sums[a] > num_sums[b] end)\n  return sorted_nums\n\
    end", "  local nums_sorted = {}\n  local nums_sum = 0\n  for i = 1, #nums do\n\
    \    nums_sum = nums_sum + nums[i]\n    table.insert(nums_sorted, nums[i])\n \
    \ end\n  table.sort(nums_sorted)\n  local index = 1\n  local nums_sorted = {}\n\
    \  for i = 1, #nums do\n    nums_sum = nums_sum + nums[i]\n    table.insert(nums_sorted,\
    \ nums[i])\n    if nums_sum == 0 then\n      table.insert(nums_sorted, index)\n\
    \      index = index + 1\n      nums_sum = 1\n    end\n  end\n  return nums_sorted\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for\
    \ j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    if\
    \ result[sum] == nil then\n      result[sum] = i\n    end\n  end\n  return result\n\
    end", "  local sorted_nums = {}\n  for i = 1, #nums do\n    local sum = 0\n  \
    \  for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n    end\n    sorted_nums[sum]\
    \ = i\n  end\n  table.sort(sorted_nums)\n  local sorted_nums_res = {}\n  for i\
    \ = 1, #nums do\n    sorted_nums_res[sorted_nums[i]] = nums[i]\n  end\n  return\
    \ sorted_nums_res\nend", "  local sorted = {}\n  for i = 1, #nums do\n    local\
    \ sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n    end\n\
    \    table.insert(sorted, sum)\n  end\n  table.sort(sorted, function(a, b) return\
    \ a < b end)\n  return sorted\nend", "  local sorted_nums = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(sorted_nums, sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_res = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_res,\
    \ sorted_nums[i])\n  end\n  return sorted_nums_res\nend", "  local result = {}\n\
    \  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum\
    \ + nums[i]:sub(j, j)\n    end\n    result[sum] = nums[i]\n  end\n  return result\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    local num_digits_sum = num_digits + num_sum\n    if num_digits_sum > num_sum\
    \ then\n      table.insert(nums_sorted, num)\n      num_sum = num_digits_sum\n\
    \    end\n  end\n  if #nums_sorted == 0 then\n    return {}\n  end\n  table.sort(nums_sorted,\
    \ function(a, b)\n    return num_sum - tonumber(string.format(\"%0*d\", num_digits,\
    \ a))\n  end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  for i\
    \ = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    if nums[i] > 0 then\n      nums_sorted[#nums_sorted + 1] =\
    \ nums[i]\n    end\n    if sum > 0 then\n      local index = #nums_sorted\n  \
    \    nums_sorted[index] = sum\n      while index > 1 do\n        local tmp = nums_sorted[index]\n\
    \        nums_sorted[index] = nums_sorted[index - 1]\n        nums_sorted[index\
    \ - 1] = tmp\n        index = index - 1\n      end\n    end\n  end\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local index = 1\n  for i = 1, #nums do\n  \
    \  local digits = nums:sub(i, i)\n    local sum = 0\n    for j = 1, #digits do\n\
    \      sum = sum + digits:sub(j, j)\n    end\n    if nums_sorted[sum] == nil then\n\
    \      nums_sorted[sum] = index\n      index = index + 1\n    end\n  end\n  return\
    \ nums_sorted\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for _,\
    \ num in pairs(nums) do\n    num_sum = num_sum + num\n    table.insert(nums_sorted,\
    \ num)\n  end\n  table.sort(nums_sorted, function(a, b) return num_sum - a > num_sum\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  local nums_sorted_by_sum\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    local num_digits = math.floor(math.log(num, 10))\n    local num_sum = num_sum\
    \ + num_digits\n    if num_digits > 1 then\n      table.insert(nums_sorted, num)\n\
    \      table.insert(nums_sorted_by_sum, num_sum)\n    end\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return order_by_sums(a, b) end)\n  return nums_sorted_by_sum\n\
    end", "  local result = {}\n  for i = 1, #nums do\n    local digits = nums[i]\n\
    \    local sum = 0\n    for j = 1, #digits do\n      sum = sum + tonumber(string.sub(digits,\
    \ j, j))\n    end\n    if sum > 0 then\n      table.insert(result, i)\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for i = 1, #nums do\n \
    \   local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n\
    \    end\n    table.insert(result, sum)\n  end\n  table.sort(result)\n  return\
    \ result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums\
    \ do\n    local num = nums[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    num_sum = num_sum + num_digits\n    local num_digits_sorted\
    \ = num_digits - math.floor(math.log(num_sum) / math.log(10))\n    table.insert(nums_sorted,\
    \ num)\n    table.insert(nums_sorted, num_digits_sorted)\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return a < b end)\n  return nums_sorted\nend", "  local nums_sorted\
    \ = {}\n  local nums_sum = 0\n  for i = 1, #nums do\n    nums_sum = nums_sum +\
    \ nums[i]\n    table.insert(nums_sorted, nums[i])\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return nums_sum - a < nums_sum - b end)\n  return nums_sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    local num_sum = num_sum + num_digits\n    if num_sum > 0 then\n      nums_sorted[num_sum]\
    \ = num\n    end\n  end\n  local num_sum = 0\n  for i = 1, #nums_sorted do\n \
    \   local num = nums_sorted[i]\n    local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n    local num_sum = num_sum + num_digits\n    if num_sum >\
    \ 0 then\n      table.insert(nums, num)\n    end\n  end\n  return nums\nend",
  "  local nums_sorted = {}\n  local index = 1\n  for _, num in pairs(nums) do\n \
    \   local digits = math.floor(math.log(num) / math.log(10))\n    local sum_of_digits\
    \ = math.floor(math.fmod(num, math.pow(10, digits)) + 0.5)\n    local key = tostring(sum_of_digits)\n\
    \    if not nums_sorted[key] then\n      nums_sorted[key] = index\n      index\
    \ = index + 1\n    end\n  end\n  return nums_sorted\nend", "  local sorted = {}\n\
    \  local index = 1\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, #nums[i]\
    \ do\n      sum = sum + nums[i][j]\n    end\n    table.insert(sorted, index)\n\
    \    index = index + 1\n    table.insert(sorted, sum)\n  end\n  table.sort(sorted,\
    \ function(a, b) return a < b end)\n  local result = {}\n  for i = 1, #sorted\
    \ do\n    table.insert(result, sorted[i])\n  end\n  return result\nend", "  local\
    \ nums_sorted = {}\n  for i = 1, #nums do\n    local num = nums[i]\n    local\
    \ digits = num:gsub('%d+', '%'):gsub('%d*', '%'):gsub('%d-', '%d'):gsub('%d-%d+',\
    \ '%d')\n    local num_sorted = tonumber(digits .. '0'):reverse()\n    if num_sorted\
    \ ~= num then\n      nums_sorted[#nums_sorted + 1] = num_sorted\n    end\n  end\n\
    \  return table.concat(nums_sorted)\nend", "  local nums_sorted = {}\n  local\
    \ num_sum = 0\n  for _, num in ipairs(nums) do\n    num_sum = num_sum + num\n\
    \    table.insert(nums_sorted, num)\n  end\n  table.sort(nums_sorted, function(a,\
    \ b) return num_sum - b end)\n  return nums_sorted\nend", "  local sorted_nums\
    \ = {}\n  local num_sums = {}\n  for i = 1, #nums do\n    local num_sum = 0\n\
    \    for j = 1, 10 do\n      num_sum = num_sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    sorted_nums[i] = num_sum\n    num_sums[i] = num_sum\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_num_sums = {}\n  for i = 1, #nums do\n    sorted_num_sums[i] =\
    \ num_sums[sorted_nums[i]]\n  end\n  table.sort(sorted_num_sums)\n  local sorted_nums_copy\
    \ = {}\n  for i = 1, #nums do\n    sorted_nums_copy[i] = nums[sorted_nums[i]]\n\
    \  end\n  return sorted_nums_copy\nend", "  local sorted = {}\n  for i = 1, #nums\
    \ do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j,\
    \ j)\n    end\n    table.insert(sorted, sum)\n  end\n  return sorted\nend", " \
    \ local nums_sorted = {}\n  local nums_sum = 0\n  for i = 1, #nums do\n    local\
    \ num = nums[i]\n    nums_sum = nums_sum + num\n    if nums_sum > 0 then\n   \
    \   table.insert(nums_sorted, num)\n    end\n  end\n  if #nums_sorted > 0 then\n\
    \    table.sort(nums_sorted)\n  end\n  return nums_sorted\nend", "  local sorted\
    \ = {}\n  local index = 1\n  for k, v in pairs(nums) do\n    local digits = math.floor(math.abs(v))\n\
    \    sorted[index] = v\n    index = index + 1\n    if digits > 1 then\n      local\
    \ sum = 0\n      local i = index\n      while i do\n        sum = sum + nums[i]\n\
    \        i = i - 1\n      end\n      local swap = sorted[index - 1]\n      sorted[index\
    \ - 1] = sorted[index]\n      sorted[index] = sum\n    end\n  end\n  return sorted\n\
    end", "  local nums_sorted = {}\n  local num_sum = 0\n  for i = 1, #nums do\n\
    \    local num = nums[i]\n    local num_digits = math.floor(math.log(num) / math.log(10))\n\
    \    local num_digits_sum = num_digits + num_sum\n    if num_digits_sum > num_sum\
    \ then\n      num_sum = num_digits_sum\n      nums_sorted[i] = num\n    end\n\
    \  end\n  return table.concat(nums_sorted)\nend", "  local result = {}\n  for\
    \ i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum +\
    \ nums[i]:sub(j, j):tonumber()\n    end\n    if result[i] ~= sum then\n      result[i]\
    \ = sum\n      result[i + 1] = i\n    end\n  end\n  return result\nend", "  local\
    \ result = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n\
    \      sum = sum + nums[i]:sub(j, j)\n    end\n    result[sum] = nums[i]\n  end\n\
    \  return result\nend", "  local nums_sorted = {}\n  local nums_sums = {}\n  for\
    \ i = 1, #nums do\n    local num = nums[i]\n    local sum = nums_sums[num] or\
    \ 0\n    sum = sum + num\n    nums_sums[num] = sum\n    nums_sorted[i] = num\n\
    \  end\n  table.sort(nums_sorted, function(a, b) return nums_sums[b] - nums_sums[a]\
    \ end)\n  return nums_sorted\nend", "  local result = {}\n  for i = 1, #nums do\n\
    \    local sum = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j)\n\
    \    end\n    result[sum] = nums[i]\n  end\n  return result\nend", "  local nums_sorted\
    \ = {}\n  local num_sum = 0\n  for i = 1, #nums do\n    num_sum = num_sum + nums[i]\n\
    \    if num_sum > 0 then\n      table.insert(nums_sorted, nums[i])\n    end\n\
    \  end\n  if #nums_sorted == 0 then\n    return {}\n  end\n  table.sort(nums_sorted)\n\
    \  local num_sum = 0\n  local nums_sorted = {}\n  for i = 1, #nums do\n    num_sum\
    \ = num_sum + nums[i]\n    if num_sum > 0 then\n      table.insert(nums_sorted,\
    \ nums[i])\n    end\n  end\n  return nums_sorted\nend", "  local nums_sorted =\
    \ {}\n  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n  \
    \  local num_digits = math.floor(math.log(num) / math.log(10))\n    num_sum =\
    \ num_sum + num_digits\n    nums_sorted[i] = num\n  end\n  local num_digits =\
    \ math.floor(math.log(num_sum) / math.log(10))\n  local num_digits_sorted = {}\n\
    \  for i = 1, #nums_sorted do\n    local num = nums_sorted[i]\n    local num_digits\
    \ = math.floor(math.log(num) / math.log(10))\n    if num_digits > num_digits_sorted[#num_digits_sorted]\
    \ then\n      num_digits_sorted[#num_digits_sorted] = num_digits\n    end\n  end\n\
    \  local sorted_nums = {}\n  for i = 1, #num_digits_sorted do\n    local num_digits\
    \ = num_digits_sorted[i]\n    local sorted_num = {}\n    for j = 1, #nums_sorted\
    \ do\n      local num = nums_sorted[j]\n      local num_digits = math.floor(math.log(num)\
    \ / math.log(10))\n      if num_digits == num_digits then\n        table.insert(sorted_num,\
    \ num)\n      end\n    end\n    table.insert(sorted_nums, sorted_num)\n  end\n\
    \  return sorted_nums\nend", "  local nums_sorted = {}\n  local nums_sums = {}\n\
    \  for i = 1, #nums do\n    local num = nums[i]\n    local sum = num:gsub(\"%d+\"\
    , \"\"):reverse()\n    local index = #nums_sums\n    nums_sums[index] = sum\n\
    \    nums_sorted[index] = num\n  end\n  table.sort(nums_sorted, function(a, b)\n\
    \    local a_sum = nums_sums[a]\n    local b_sum = nums_sums[b]\n    if a_sum\
    \ == b_sum then\n      return a\n    else\n      return a_sum < b_sum and a or\
    \ b\n    end\n  end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n\
    \  local num_sum = 0\n  for i = 1, #nums do\n    local num = nums[i]\n    local\
    \ num_digits = math.floor(math.log(num) / math.log(10))\n    local num_sum = num_sum\
    \ + num_digits\n    nums_sorted[num_sum] = num\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return a < b end)\n  return nums_sorted\nend", "  local nums_sorted\
    \ = {}\n  local nums_summed = 0\n  for i = 1, #nums do\n    local num = nums[i]\n\
    \    nums_summed = nums_summed + num\n    table.insert(nums_sorted, num)\n  end\n\
    \  table.sort(nums_sorted, function(a, b) return nums_summed - a < nums_summed\
    \ - b end)\n  return nums_sorted\nend", "  local nums_sorted = {}\n  for i = 1,\
    \ #nums do\n    local sum = 0\n    for j = 1, #nums[i] do\n      sum = sum + nums[i][j]\n\
    \    end\n    table.insert(nums_sorted, sum)\n  end\n  table.sort(nums_sorted)\n\
    \  local nums_sorted_res = {}\n  for i = 1, #nums_sorted do\n    table.insert(nums_sorted_res,\
    \ nums[i])\n  end\n  return nums_sorted_res\nend", "  local result = {}\n  for\
    \ i = 1, #nums do\n    local sum = 0\n    for j = 1, 10 do\n      sum = sum +\
    \ nums[i]:sub(j, j)\n    end\n    result[sum] = nums[i]\n  end\n  return result\n\
    end", "  local sorted_nums = {}\n  local num_sums = {}\n  for i = 1, #nums do\n\
    \    local num_sum = nums[i]\n    local index = i\n    for j = i + 1, #nums do\n\
    \      local next_num_sum = nums[j]\n      if num_sum < next_num_sum then\n  \
    \      num_sum = next_num_sum\n        index = j\n      end\n    end\n    table.insert(sorted_nums,\
    \ index)\n    table.insert(num_sums, num_sum)\n  end\n  table.sort(sorted_nums)\n\
    \  local sorted_nums_copy = {}\n  for i = 1, #sorted_nums do\n    table.insert(sorted_nums_copy,\
    \ sorted_nums[i])\n  end\n  table.sort(num_sums)\n  local sorted_nums_copy_sum\
    \ = {}\n  for i = 1, #num_sums do\n    table.insert(sorted_nums_copy_sum, num_sums[i])\n\
    \  end\n  local sorted_nums_copy_sum_copy = {}\n  for i = 1, #sorted_nums_copy_sum\
    \ do\n    table.insert(sorted_nums_copy_sum_copy, sorted_nums_copy_sum[i])\n \
    \ end\n  local sorted_nums_copy_sum_copy_copy = {}\n  for i = 1, #sorted_nums_copy_sum_copy\
    \ do\n    table.insert(sorted_nums_copy_sum_copy_copy, sorted_nums_copy_sum_copy[i])\n\
    \  end\n  local sorted_nums_copy_sum_copy_copy_copy = {}\n  for i = 1, #sorted_nums_copy_sum_copy_copy\
    \ do\n    table.insert(sorted_nums_copy_sum_copy_copy_copy, sorted_nums_copy_sum_copy_copy[i])\n\
    \  end\n  local sorted_nums_copy_sum_copy_copy_copy_copy = {}\n  for i = 1, #sorted_nums_copy_sum_copy_copy_copy\
    \ do\n    table.insert(sorted_nums_copy_sum_copy_copy_copy_copy, sorted_nums_copy_sum_copy_copy_copy[i])\n\
    \  end\n  local sorted_nums_copy_sum_copy_copy_copy_copy_copy = {}\n  for i =\
    \ 1, #sorted_nums_copy_sum_copy_copy_copy_copy do\n    table.insert(sorted_nums_copy_sum_copy_copy_copy_copy_copy,\
    \ sorted_nums_copy_sum_copy_copy_copy_copy[i])\n  end\n  local sorted_nums_copy_sum_copy_copy_copy_copy_copy_copy\
    \ = {}\n  for i = 1, #sorted_nums_copy_sum_copy_copy_copy_copy_copy do\n    table.insert(sorted_nums_copy_sum_copy_copy_copy_copy_copy_copy,\
    \ sorted_nums_copy_sum_copy_copy_copy_copy_copy[i])\n  end\n  local sorted_nums_copy_sum_copy_copy_copy_copy_copy_copy_copy\
    \ = {}\n  for i = 1, #sorted_nums_copy_sum_copy_copy_copy_copy_copy_copy do\n\
    \    table.insert(sorted_nums_copy_sum_copy_copy_copy_", "  local nums_sorted\
    \ = {}\n  local index = 1\n  for _, num in ipairs(nums) do\n    local digits =\
    \ math.floor(num / 10)\n    local sum = 0\n    for i = 1, digits do\n      sum\
    \ = sum + num % 10\n      num = num / 10\n    end\n    table.insert(nums_sorted,\
    \ index)\n    index = index + 1\n    table.insert(nums_sorted, sum)\n  end\n \
    \ table.sort(nums_sorted)\n  local result = {}\n  for _, num in ipairs(nums_sorted)\
    \ do\n    table.insert(result, num)\n  end\n  return result\nend", "  local result\
    \ = {}\n  for _, v in ipairs(nums) do\n    local digits = math.floor(math.abs(v))\n\
    \    local sum = 0\n    for i = 1, digits do\n      sum = sum + v % 10\n     \
    \ v = math.floor(v / 10)\n    end\n    table.insert(result, sum)\n  end\n  return\
    \ result\nend", "  local nums_sorted = {}\n  for i = 1, #nums do\n    local sum\
    \ = 0\n    for j = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n\
    \    end\n    if nums_sorted[sum] == nil then\n      table.insert(nums_sorted,\
    \ sum)\n    end\n  end\n  table.sort(nums_sorted, function(a, b)\n    return #a\
    \ + #b - #a:sub(#a, #a) + #b:sub(#b, #b) - a:sub(1, 1) + b:sub(1, 1)\n  end)\n\
    \  return nums_sorted\nend", "  local sorted_nums = {}\n  local sorted_keys =\
    \ nil\n  local sorted_values = nil\n  local sorted_keys = nil\n  local sorted_values\
    \ = nil\n  local num_sum = 0\n  local num_sum2 = 0\n  local num_sum3 = 0\n  local\
    \ num_sum4 = 0\n  local num_sum5 = 0\n  local num_sum6 = 0\n  local num_sum7 =\
    \ 0\n  local num_sum8 = 0\n  local num_sum9 = 0\n  local num_sum10 = 0\n  local\
    \ num_sum11 = 0\n  local num_sum12 = 0\n  local num_sum13 = 0\n  local num_sum14\
    \ = 0\n  local num_sum15 = 0\n  local num_sum16 = 0\n  local num_sum17 = 0\n \
    \ local num_sum18 = 0\n  local num_sum19 = 0\n  local num_sum20 = 0\n  local num_sum21\
    \ = 0\n  local num_sum22 = 0\n  local num_sum23 = 0\n  local num_sum24 = 0\n \
    \ local num_sum25 = 0\n  local num_sum26 = 0\n  local num_sum27 = 0\n  local num_sum28\
    \ = 0\n  local num_sum29 = 0\n  local num_sum30 = 0\n  local num_sum31 = 0\n \
    \ local num_sum32 = 0\n  local num_sum33 = 0\n  local num_sum34 = 0\n  local num_sum35\
    \ = 0\n  local num_sum36 = 0\n  local num_sum37 = 0\n  local num_sum38 = 0\n \
    \ local num_sum39 = 0\n  local num_sum40 = 0\n  local num_sum41 = 0\n  local num_sum42\
    \ = 0\n  local num_sum43 = 0\n  local num_sum44 = 0\n  local num_sum45 = 0\n \
    \ local num_sum46 = 0\n  local num_sum47 = 0\n  local num_sum48 = 0\n  local num_sum49\
    \ = 0\n  local num_sum50 = 0\n  local num_sum51 = 0\n  local num_sum52 = 0\n \
    \ local num_sum53 = 0\n  local num_sum54 = 0\n  local num_sum55 = 0\n  local num_sum56\
    \ = 0\n  local num_sum57 = 0\n  local num_sum58 = 0\n  local num_sum59 = 0\n \
    \ local num_sum60 = 0\n  local num_sum61 = 0\n  local num_sum62 = 0\n  local num_sum63\
    \ = 0\n  local num_sum64 = 0\n  local num_sum65 = 0\n  local num_sum66 = 0\n \
    \ local num_sum67 = 0\n  local num_sum68 = 0\n  local num_sum69 = 0\n", "  local\
    \ result = {}\n  local sum = 0\n  for i = 1, #nums do\n    sum = sum + nums[i]\n\
    \    result[sum] = nums[i]\n  end\n  table.sort(result, function(a, b) return\
    \ a < b end)\n  return result\nend", "  local result = {}\n  for i = 1, #nums\
    \ do\n    local digits = nums[i]\n    local sum = 0\n    for j = 1, #digits do\n\
    \      sum = sum + tonumber(string.sub(digits, j, j))\n    end\n    if sum > 0\
    \ then\n      table.insert(result, i)\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend", "  local nums_sorted = {}\n  local num_sum = 0\n  for\
    \ i = 1, #nums do\n    num_sum = num_sum + nums[i]\n    if num_sum > 0 then\n\
    \      table.insert(nums_sorted, i)\n    end\n  end\n  table.sort(nums_sorted,\
    \ function(a, b) return nums[a] > nums[b] end)\n  return nums_sorted\nend", " \
    \ local nums_sorted = {}\n  for i = 1, #nums do\n    local sum = 0\n    for j\
    \ = 1, 10 do\n      sum = sum + nums[i]:sub(j, j):tonumber()\n    end\n    if\
    \ nums_sorted[sum] == nil then\n      table.insert(nums_sorted, sum)\n    end\n\
    \  end\n  table.sort(nums_sorted)\n  return nums_sorted\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
