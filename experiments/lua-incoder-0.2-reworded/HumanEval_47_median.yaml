name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2, 4,\
  \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid-1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend", "  if #l == 0 then return nil end\n  local half = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[half]\n  else\n    return (l[half -\
    \ 1] + l[half]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ n = #l\n  local half = n / 2\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half] + l[half - 1]) / 2\n  end\nend", "  local n = #l\n  if n\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(n / 2)\n  if n %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  else\n    return (l[m] +\
    \ l[m - 1]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n  end\n  local mid\
    \ = math.floor((n+1)/2)\n  return median(l[mid], l[mid-1])\nend", "  local n =\
    \ #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n  if n %\
    \ 2 == 0 then\n    return l[half]\n  else\n    return median(l[half], l[half+1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return\
    \ l[half]\n  else\n    return median(l[half], l[half+1])\n  end\nend", "  if #l\
    \ == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0\
    \ then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half =\
    \ math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half+1])\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
