name: HumanEval_47_median
language: lua
prompt: "-- Return median of elements in the table l.\n-- >>> median({3, 1, 2, 4,\
  \ 5})\n-- 3\n-- >>> median({-10, 4, 6, 1000, 10, 20})\n-- 15.0\nlocal function median(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = median\n\
  \    lu.assertEquals(candidate({3, 1, 2, 4, 5}), 3)\n    lu.assertEquals(candidate({-10,\
  \ 4, 6, 1000, 10, 20}), 8.0)\n    lu.assertEquals(candidate({5}), 5)\n    lu.assertEquals(candidate({6,\
  \ 5}), 5.5)\n    lu.assertEquals(candidate({8, 1, 3, 9, 9, 2, 7}), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid-1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n \
    \ end\nend", "  if #l == 0 then return nil end\n  local half = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[half]\n  else\n    return (l[half -\
    \ 1] + l[half]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ n = #l\n  local half = n / 2\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half] + l[half - 1]) / 2\n  end\nend", "  local n = #l\n  if n\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(n / 2)\n  if n %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  else\n    return (l[m] +\
    \ l[m - 1]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n  end\n  local mid\
    \ = math.floor((n+1)/2)\n  return median(l[mid], l[mid-1])\nend", "  local n =\
    \ #l\n  if n < 1 then return nil end\n  local half = math.floor(n/2)\n  if n %\
    \ 2 == 0 then\n    return l[half]\n  else\n    return median(l[half], l[half+1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n < 1 then\
    \ return nil end\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return\
    \ l[half]\n  else\n    return median(l[half], l[half+1])\n  end\nend", "  if #l\
    \ == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0\
    \ then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half =\
    \ math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half+1])\n  end\nend", "  local n = #l\n  if n < 1 then return\
    \ nil end\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n\
    \  else\n    return (l[half-1] + l[half]) / 2\n  end\nend", "  if #l == 0 then\
    \ return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n  \
    \  return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n % 2 == 1 then\n\
    \    return l[math.floor(n/2)]\n  end\n  local half = math.floor(n/2)\n  local\
    \ median1 = median(l[half])\n  local median2 = median(l[half+1])\n  return median1\
    \ + median2/2\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median\
    \ = median + l[i] / 2\n  end\n  return median\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  local median = l[mid]\n  for\
    \ i = mid + 1, #l do\n    median = median + l[i] / 2\n  end\n  return median\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ n = #l\n  local m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  end\n  local\
    \ q = math.floor(m)\n  local r = math.ceil(m)\n  if r - q > 1 then\n    return\
    \ median(l[q..r])\n  end\n  return l[q]\nend", "  if #l == 0 then return nil end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return\
    \ nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  local n =\
    \ #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n    return\
    \ l[((n - 1) / 2)]:floor()\n  end\n  local mid = n / 2\n  local lower = median(l)\n\
    \  local upper = median(l)\n  if lower == nil then\n    return upper\n  elseif\
    \ upper == nil then\n    return lower\n  else\n    return math.floor(lower + (upper\
    \ - lower) / 2)\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ n = #l\n  if n % 2 == 0 then\n    return l[((n - 1) / 2)] + median(l[((n - 1)\
    \ / 2) + 1 : n])\n  else\n    return l[((n - 1) / 2)]\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local n = #l\n  if n % 2 == 0 then\n    return\
    \ l[math.floor(n/2)]\n  else\n    local mid = math.floor(n/2)\n    local low =\
    \ median(l)\n    local high = median(l)\n    if low == nil then\n      return\
    \ high\n    elseif high == nil then\n      return low\n    else\n      return\
    \ (low + high) / 2\n    end\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local n = #l\n  if n % 2 == 0 then\n    return l[((n - 1) / 2)] + median(l[((n\
    \ - 1) / 2) + 1 .. n])\n  else\n    return l[((n - 1) / 2)]\n  end\nend", "  if\
    \ #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend", "  if #l == 0 then return nil end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  if n % 2 == 0 then\n    return l[((n - 1) / 2) + 1]\n\
    \  end\n  local mid = n / 2\n  local lower = l[mid]\n  local upper = l[mid]\n\
    \  for i = mid + 1, n do\n    lower = math.min(lower, l[i])\n    upper = math.max(upper,\
    \ l[i])\n  end\n  return lower + (upper - lower) / 2\nend", "  local n = #l\n\
    \  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n/2)\n  if\
    \ n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[mid-1])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local n = #l\n  if n % 2 == 0 then\n   \
    \ return l[math.floor(n/2)]\n  else\n    return (l[math.floor(n/2)] + l[math.floor(n/2)+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n == 1 then\n    return l[1]\n  end\n  local mid = math.floor(n/2)\n  local\
    \ median = median(l[mid], l[mid-1])\n  if n % 2 == 0 then\n    return median\n\
    \  else\n    return median + median\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then return nil end\n  local half = math.floor(#l / 2)\n  if half == 0 then\
    \ return l[half] end\n  if #l % 2 == 0 then return median(l[half], l[half + 1])\
    \ end\n  local median = l[half]\n  for i = half + 2, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n\
    \  end\n  local mid = math.floor(n/2)\n  local lower = median(l)\n  local upper\
    \ = median(l:sub(1, mid))\n  return lower + ((upper - lower) / 2)\nend", "  local\
    \ n = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[mid-1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n\
    \ = #l\n  local m = n / 2\n  if n % 2 == 0 then\n    return l[m]\n  else\n   \
    \ return (l[m] + l[m - 1]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  local half = math.floor(n / 2)\n  if n % 2 == 0 then\n\
    \    return l[half]\n  else\n    return (l[half] + l[half - 1]) / 2\n  end\nend",
  "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 0 then\n\
    \    return l[math.floor(n/2)]\n  end\n  local mid = math.floor((n+1)/2)\n  return\
    \ median(l, mid-1) or median(l, mid)\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return\
    \ nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local n = #l\n  local half = math.floor(n/2)\n  if n\
    \ % 2 == 0 then\n    return l[half]\n  else\n    return (l[half] + l[half+1])\
    \ / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n \
    \ end\n  local n = #l\n  local m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n\
    \  else\n    return (l[m] + l[m - 1]) / 2\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median\
    \ + l[i] / 2\n  end\n  return median\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local n = #l\n  if n % 2 == 1 then\n    return l[((n\
    \ - 1) / 2) + 1]\n  end\n  local mid = math.floor(n / 2)\n  local lower = median(l,\
    \ 1, mid)\n  local upper = median(l, mid + 1, n)\n  return lower + ((upper - lower)\
    \ / 2)\nend", "  local n = #l\n  if n < 1 then return nil end\n  if n % 2 == 0\
    \ then\n    local m = n / 2\n    return l[m]\n  else\n    local m = n / 2\n  \
    \  return l[m] + (median(l[m + 1]) - l[m])\n  end\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n    return l[math.floor(n/2)]\n\
    \  end\n  local mid = math.floor(n/2)\n  local lower = median(l[mid-1:mid])\n\
    \  local upper = median(l[mid+1:n])\n  return lower + (upper - lower) / 2\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ n = #l\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n\
    \  else\n    return (l[half-1] + l[half]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local mid = n / 2\n\
    \  if n % 2 == 1 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l - 1])\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l\
    \ % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n    return\
    \ l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n  local lower = median(l,\
    \ 1, mid)\n  local upper = median(l, mid+1, n)\n  return lower + ((upper - lower)\
    \ / 2)\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local\
    \ mid = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid-1], l[mid])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local n = #l\n  local half = math.floor(n / 2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return (l[half - 1] + l[half])\
    \ / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  elseif\
    \ n == 1 then\n    return l[1]\n  end\n  local mid = math.floor((n + 1) / 2)\n\
    \  if l[mid] == nil then\n    return nil\n  end\n  if l[mid] > l[n - 1] then\n\
    \    return median(l[mid..n])\n  else\n    return median(l[1..mid])\n  end\nend",
  "  if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n  if n % 2 ==\
    \ 0 then\n    return l[math.floor(n / 2)]\n  end\n  local mid = math.floor(n /\
    \ 2)\n  local lower = median(l, mid - 1)\n  local upper = median(l, mid)\n  return\
    \ lower + ((n - mid) * (upper - lower)) / 2\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  local n = #l\n  if\
    \ n == 0 then\n    return nil\n  end\n  if n % 2 == 1 then\n    return l[((n -\
    \ 1) / 2) + 1]\n  end\n  local half = n / 2\n  local median1 = median(l, half)\n\
    \  local median2 = median(l, half + 1)\n  return median1 + median2 / (2 * n)\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then return nil end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local n = #l\n  local half = math.floor(n / 2)\n  if\
    \ n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half], l[half\
    \ + 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n\
    \  local mid = n / 2\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then return nil end\n  local n = #l\n  local\
    \ half = math.floor(n / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n\
    \    return (l[half - 1] + l[half]) / 2\n  end\nend", "  if #l == 0 then\n   \
    \ return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l - 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  local median = l[mid]\n  for\
    \ i = mid + 1, #l do\n    median = median + l[i] / 2\n  end\n  return median\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half + 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  local n\
    \ = #l\n  if n == 0 then\n    return nil\n  end\n  local mid = math.floor(n /\
    \ 2)\n  if n % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n < 1 then return nil end\n  local half\
    \ = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ median(l[half], l[half+1])\n  end\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  local half = math.floor(n / 2)\n  if n % 2 == 0 then\n\
    \    return l[half]\n  else\n    return (l[half] + l[half - 1]) / 2\n  end\nend",
  "  local n = #l\n  if n < 1 then return nil end\n  local m = math.floor(n / 2)\n\
    \  if n % 2 == 0 then\n    return l[m]\n  else\n    return median(l[m - 1], l[m])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid =\
    \ math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return\
    \ median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  local median = l[mid]\n  for i = mid + 1,\
    \ #l do\n    median = median + l[i] / 2\n  end\n  return median\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local middle = math.floor(#l / 2)\n  if\
    \ #l % 2 == 0 then\n    return l[middle]\n  else\n    return median(l[middle],\
    \ l[middle + 1])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local n = #l\n  local half = math.floor(n/2)\n  if n\
    \ % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half], l[half+1])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local n = #l\n  local half\
    \ = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return\
    \ (l[half-1] + l[half]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n\
    \  if n % 2 == 1 then\n    return l[n / 2]\n  end\n  local mid = n / 2\n  local\
    \ lower = median(l, 1, mid)\n  local upper = median(l, mid + 1, n)\n  return lower\
    \ + (upper - lower) / 2\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local n = #l\n  if n % 2 == 0 then\n    return l[((n - 1) / 2)\
    \ + 1]\n  else\n    return (l[((n - 1) / 2)] + l[((n - 1) / 2) - 1]) / 2\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid-1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0\
    \ then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median +\
    \ l[i] / 2\n  end\n  return median\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  if n % 2 == 0 then\n    return l[math.floor(n/2)]\n\
    \  end\n  local half = math.floor(n/2)\n  local median = l[half]\n  for i = half+1,\
    \ n do\n    median = median + l[i]\n  end\n  return median\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  if #l == 0 then return nil end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return median(l[mid], l[#l - 1])\n  end\nend", "  local n = #l\n  if n ==\
    \ 0 then\n    return nil\n  end\n  local half = math.floor(n / 2)\n  if n % 2\
    \ == 0 then\n    return l[half]\n  else\n    return (l[half - 1] + l[half]) /\
    \ 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] +\
    \ l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n\
    \    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then return nil\
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ mid = n / 2\n  if n % 2 == 1 then\n    return l[mid]\n  end\n  local lower =\
    \ median(l, 1, mid)\n  local upper = median(l, mid + 1, n)\n  return math.floor(lower\
    \ + 0.5 * (upper - lower))\nend", "  if #l == 0 then return nil end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n \
    \ end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  end\n  local i1, i2 = 0,\
    \ n - 1\n  while i1 <= i2 do\n    local mid = math.floor((i1 + i2) / 2)\n    if\
    \ l[mid] > l[mid + 1] then\n      i2 = mid - 1\n    else\n      i1 = mid + 1\n\
    \    end\n  end\n  return l[m]\nend", "  local n = #l\n  if n < 1 then\n    return\
    \ nil\n  end\n  if n % 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local\
    \ half = math.floor(n/2)\n  local median = l[half]\n  for i = half+1, n do\n \
    \   median = median + l[i]/2\n  end\n  return median\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n\
    \  if n % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half =\
    \ n / 2\n  local median1 = median(l[((half - 1) / 2)])\n  local median2 = median(l[((half\
    \ + 1) / 2)])\n  return median1 + median2 / (2 * n)\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local middle = math.floor(#l / 2)\n  if middle == 0\
    \ then\n    return l[1]\n  else\n    return median(l[middle], l[#l])\n  end\n\
    end", "  local n = #l\n  if n < 1 then return nil end\n  local half = math.floor(n\
    \ / 2)\n  if n % 2 == 0 then\n    return l[half]\n  else\n    return median(l[half],\
    \ l[half + 1])\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n\
    \  end\n  if n == 1 then\n    return l[1]\n  end\n  local mid = math.floor((n\
    \ - 1) / 2)\n  if l[mid] <= l[mid+1] then\n    return median(l[mid], l[mid+1])\n\
    \  else\n    return median(l[mid], l[mid+1])\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n\
    \  end\nend", "  if #l == 0 then return nil end\n  local half = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[half]\n  else\n    return (l[half\
    \ - 1] + l[half]) / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return\
    \ nil\n  end\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return\
    \ l[half]\n  else\n    return (l[half] + l[half+1]) / 2.0\n  end\nend", "  if\
    \ #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l % 2 ==\
    \ 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n % 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n\
    \  local median = median(l, mid)\n  local lower = median\n  local upper = median\n\
    \  for i = mid + 1, n do\n    if l[i] < lower then\n      lower = l[i]\n    end\n\
    \    if l[i] > upper then\n      upper = l[i]\n    end\n  end\n  return lower\
    \ + math.fabs((upper - lower) / 2)\nend", "  if #l == 0 then\n    return nil\n\
    \  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n \
    \ if #l % 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1])\
    \ / 2\n  end\nend", "  local n = #l\n  if n == 0 then\n    return nil\n  end\n\
    \  if n % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local half =\
    \ n / 2\n  local median1 = median(l[((half - 1) / 2)..half])\n  local median2\
    \ = median(l[half..((half + 1) / 2)])\n  return median1 + median2 / (2 * n)\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local middle = math.floor(#l\
    \ / 2)\n  local median = l[middle]\n  for i = middle + 1, #l do\n    median =\
    \ median + l[i] / 2\n  end\n  return median\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l ==\
    \ 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2\
    \ == 0 then\n    return l[mid]\n  else\n    return median(l[mid], l[#l])\n  end\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  local median = l[mid]\n  for i = mid + 1, #l do\n    median = median +\
    \ l[i] / 2\n  end\n  return median\nend", "  local n = #l\n  if n == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(n/2)\n  if n % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return median(l[mid-1], l[mid])\n  end\nend",
  "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if n % 2 == 1 then\n\
    \    return l[n / 2]\n  end\n  local mid = n / 2\n  local lower = median(l, 1,\
    \ mid)\n  local upper = median(l, mid + 1, n)\n  return lower + (upper - lower)\
    \ / 2\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local\
    \ m = n / 2\n  if n % 2 == 0 then\n    return l[m]\n  else\n    return l[m] +\
    \ median(l[m + 1] - l[m])\n  end\nend", "  if #l == 0 then\n    return nil\n \
    \ end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return median(l[mid], l[#l])\n  end\nend", "  if #l == 0 then\n \
    \   return nil\n  end\n  local n = #l\n  local half = math.floor(n/2)\n  if n\
    \ % 2 == 0 then\n    return l[half]\n  else\n    return (l[half-1] + l[half])\
    \ / 2\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l\
    \ / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n =\
    \ #l\n  local half = math.floor(n/2)\n  if n % 2 == 0 then\n    return l[half]\n\
    \  else\n    return (l[half] + l[half+1]) / 2.0\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n\
    \    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", " \
    \ if #l == 0 then\n    return nil\n  end\n  local n = #l\n  local half = math.floor(n/2)\n\
    \  if n % 2 == 0 then\n    return l[half]\n  else\n    return (l[half] + l[half+1])\
    \ / 2.0\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n\
    \  local m = n / 2\n  if n % 2 == 1 then\n    return l[m]\n  end\n  local l1 =\
    \ l\n  local l2 = l\n  l1[m], l2[m] = l2[m], l1[m]\n  local m1 = median(l1)\n\
    \  local m2 = median(l2)\n  if m1 == nil or m2 == nil then\n    return nil\n \
    \ end\n  return (m1 + m2) / 2\nend", "  if #l == 0 then\n    return nil\n  end\n\
    \  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n\
    \  else\n    return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n\
    \    return nil\n  end\n  local mid = math.floor(#l / 2)\n  local median = l[mid]\n\
    \  for i = mid + 1, #l do\n    median = median + l[i] / 2\n  end\n  return median\n\
    end", "  if #l == 0 then\n    return nil\n  end\n  local mid = math.floor(#l /\
    \ 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n    return median(l[mid],\
    \ l[#l])\n  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local mid\
    \ = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return l[mid]\n  else\n   \
    \ return (l[mid] + l[mid+1]) / 2\n  end\nend", "  if #l == 0 then\n    return\
    \ nil\n  end\n  local mid = math.floor(#l / 2)\n  if #l % 2 == 0 then\n    return\
    \ l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2.0\n  end\nend", "  if #l\
    \ == 0 then\n    return nil\n  end\n  local mid = math.floor(#l / 2)\n  local\
    \ median = l[mid]\n  for i = mid + 1, #l do\n    median = median + l[i] / 2\n\
    \  end\n  return median\nend", "  if #l == 0 then\n    return nil\n  end\n  local\
    \ n = #l\n  if n % 2 == 1 then\n    return l[((n - 1) / 2) + 1]\n  end\n  local\
    \ half = n / 2\n  local median1 = median(l[((half - 1) / 2)])\n  local median2\
    \ = median(l[((half + 1) / 2)])\n  return median1 + median2 / (2 * n)\nend", " \
    \ if #l == 0 then return nil end\n  local mid = math.floor(#l / 2)\n  if #l %\
    \ 2 == 0 then\n    return l[mid]\n  else\n    return (l[mid] + l[mid+1]) / 2\n\
    \  end\nend", "  if #l == 0 then\n    return nil\n  end\n  local n = #l\n  if\
    \ n % 2 == 1 then\n    return l[math.floor(n/2)]\n  end\n  local mid = math.floor(n/2)\n\
    \  local median = median(l[mid], l[mid-1])\n  return median\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
