language: lua
name: HumanEval_24_largest_divisor
results:
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = math.floor(n/2) + 1\n  local max_div2 = math.floor(n/max_div)\n\
    \  local max_div3 = math.floor(n/max_div2)\n  local max_div4 = math.floor(n/max_div3)\n\
    \  local max_div5 = math.floor(n/max_div4)\n  local max_div6 = math.floor(n/max_div5)\n\
    \  local max_div7 = math.floor(n/max_div6)\n  local max_div8 = math.floor(n/max_div7)\n\
    \  local max_div9 = math.floor(n/max_div8)\n  local max_div10 = math.floor(n/max_div9)\n\
    \  local max_div11 = math.floor(n/max_div10)\n  local max_div12 = math.floor(n/max_div11)\n\
    \  local max_div13 = math.floor(n/max_div12)\n  local max_div14 = math.floor(n/max_div13)\n\
    \  local max_div15 = math.floor(n/max_div14)\n  local max_div16 = math.floor(n/max_div15)\n\
    \  local max_div17 = math.floor(n/max_div16)\n  local max_div18 = math.floor(n/max_div17)\n\
    \  local max_div19 = math.floor(n/max_div18)\n  local max_div20 = math.floor(n/max_div19)\n\
    \  local max_div21 = math.floor(n/max_div20)\n  local max_div22 = math.floor(n/max_div21)\n\
    \  local max_div23 = math.floor(n/max_div22)\n  local max_div24 = math.floor(n/max_div23)\n\
    \  local max_div25 = math.floor(n/max_div24)\n  local max_div26 = math.floor(n/max_div25)\n\
    \  local max_div27 = math.floor(n/max_div26)\n  local max_div28 = math.floor(n/max_div27)\n\
    \  local max_div29 = math.floor(n/max_div28)\n  local max_div30 = math.floor(n/max_div29)\n\
    \  local max_div31 = math.floor(n/max_div30)\n  local max_div32 = math.floor(n/max_div31)\n\
    \  local max_div33 = math.floor(n/max_div32)\n  local max_div34 = math.floor(n/max_div33)\n\
    \  local max_div35 = math.floor(n/max_div34)\n  local max_div36 = math.floor(n/max_div35)\n\
    \  local max_div37 = math.floor(n/max_\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3aper593.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  local max_divisor_ppp = 1\n  for i = 2, n do\n    if n % i == 0 then\n\
    \      local divisor_p = i\n      local divisor_pp = i\n      local divisor_ppp\
    \ = i\n      for j = 1, i do\n        if n % j == 0 then\n          divisor_p\
    \ = j\n          divisor_pp = j\n          divisor_ppp = j\n        end\n    \
    \  end\n      if divisor_p * divisor_pp * divisor_ppp == n then\n        if divisor_p\
    \ * divisor_pp * divisor_ppp > max_divisor then\n          max_divisor = divisor_p\
    \ * divisor_pp * divisor_ppp\n          max_divisor_p = divisor_p\n          max_divisor_pp\
    \ = divisor_pp\n          max_divisor_ppp = divisor_ppp\n        end\n      end\n\
    \    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2z193qt8.lua:39:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2z193qt8.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzycjptou.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzycjptou.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n/2 + 1\n  return n/2 + 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_mac4jj.lua:16:\
    \ expected: 1, actual: 2.5\nstack traceback:\n\t/tmp/tmp9_mac4jj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6thfi77.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6x35y2q.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpp6x35y2q.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = i\n            end\n        end\n    end\n   \
    \ return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3npf_hy.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu3npf_hy.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            -- If n is divisible by i, then\
    \ n is divisible by max_divisor\n            max_divisor = i\n            max_divisor_remainder\
    \ = n % i\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj6a8ut_2.lua:20:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpj6a8ut_2.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        if n % divisor == 0 then\n            if max_divisor < divisor then\n\
    \                max_divisor = divisor\n            end\n        end\n       \
    \ divisor = divisor + 1\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3336ppc.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf3336ppc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  local max_div_n_n = 1\n  for\
    \ i = 1, n do\n    local div = math.floor(n/i)\n    if div > max_div then\n  \
    \    max_div = div\n      max_div_n = i\n      max_div_n_n = i\n    end\n  end\n\
    \  if max_div_n_n ~= n then\n    max_div = max_div_n_n\n  end\n  return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe373mz3x.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpe373mz3x.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpe373mz3x.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2dmvkiux.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp2dmvkiux.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2)\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_div36\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzg90g2lg.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjptflma_.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjptflma_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = n\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder % i ==\
    \ 0 then\n                max_divisor = i\n                max_divisor_remainder\
    \ = max_divisor_remainder / i\n            else\n                max_divisor_remainder\
    \ = max_divisor_remainder / i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb6z29epi.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpb6z29epi.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We only need to check up to sqrt(n), since sqrt(n) divides evenly into n.\n\
    \  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ i\n    end\n    i = i + 1\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0n_f5ver.lua:21:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp0n_f5ver.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local p =\
    \ i / max_divisor\n            local n = n / max_divisor\n            if p > max_divisor\
    \ then\n                max_divisor_p = p\n                max_divisor = n\n \
    \           else\n                max_divisor_p = p\n                max_divisor\
    \ = n\n            end\n        end\n    end\n    return max_divisor_p, max_divisor_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1o8bzpaw.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp1o8bzpaw.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ccqu1n0.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6ccqu1n0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 0\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rrqhjl8.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp8rrqhjl8.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = n\n  local max_divisor_remainder_remainder\
    \ = 1\n  local max_divisor_remainder_divisor = 1\n  while max_divisor_remainder_remainder\
    \ > 0 do\n    max_divisor_remainder_remainder = max_divisor_remainder / max_divisor_remainder_divisor\n\
    \    max_divisor_remainder_divisor = max_divisor_remainder % max_divisor_remainder_divisor\n\
    \    if max_divisor_remainder_divisor == 0 then\n      max_divisor = max_divisor_remainder\n\
    \    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpysx28224.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpysx28224.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while n % divisor == 0 do\n        divisor = divisor\
    \ + 1\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp6x35y2q.lua:15:\
    \ expected: 1, actual: 2\nstack traceback:\n\t/tmp/tmpp6x35y2q.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = n / i\n            if p > max_divisor\
    \ then\n                max_divisor = p\n                max_divisor_p = i\n \
    \           end\n        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgvlvix8.lua:24:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpwgvlvix8.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is even.\n  -- If n is even, divide\
    \ it by two, until you get down to 1.\n  -- If n is odd, divide it by 3, until\
    \ you get down to 1.\n  -- If n is 1, return 1.\n  -- If n is even, divide it\
    \ by 2, until you get down to 1.\n  -- If n is odd, divide it by 3, until you\
    \ get down to 1.\n  -- If n is even, divide it by 2, until you get down to 1.\n\
    \  -- If n is odd, divide it by 3, until you get down to 1.\n  -- If n is even,\
    \ divide it by 2, until you get down to 1.\n  -- If n is odd, divide it by 3,\
    \ until you get down to 1.\n  -- If n is even, divide it by 2, until you get down\
    \ to 1.\n  -- If n is odd, divide it by 3, until you get down to 1.\n  -- If n\
    \ is even, divide it by 2, until you get down to 1.\n  -- If n is odd, divide\
    \ it by 3, until you get down to 1.\n  -- If n is even, divide it by 2, until\
    \ you get down to 1.\n  -- If n is odd, divide it by 3, until you get down to\
    \ 1.\n  -- If n is even, divide it by 2, until you get down to 1.\n  -- If n is\
    \ odd, divide it by 3, until you get down to 1.\n  -- If n is even, divide it\
    \ by 2, until you get down to 1.\n  -- If n is odd, divide it by 3, until you\
    \ get down to 1.\n  -- If n is even, divide it by 2, until you get down to 1.\n\
    \  -- If n is odd, divide it by 3, until you get down to 1.\n  -- If n is even,\
    \ divide it by 2, until you get down to 1.\n  -- If n is odd, divide it by 3,\
    \ until you get down to 1.\n  -- If n is even, divide it by 2, until you get down\
    \ to 1.\n  -- If n is odd, divide it by 3, until you get down to 1.\n  -- If n\
    \ is even, divide it by 2, until you get down to 1.\n  -- If n is odd, divide\
    \ it by 3, until you get down to 1.\n  -- If n is even, divide it by 2, until\
    \ you get down to 1.\n  \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5pnne3nx.lua:46: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 0\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      local divisor = i\n      local divisor_remainder\
    \ = n % i\n      if divisor_remainder > max_divisor_remainder then\n        max_divisor\
    \ = divisor\n        max_divisor_remainder = divisor_remainder\n      end\n  \
    \  end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppo5r2qbz.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmppo5r2qbz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use an auxiliary table to store the divisors we encounter\n  local divisors\
    \ = {}\n  -- We start by checking if n is even\n  if n % 2 == 0 then\n    -- If\
    \ n is even, we add 2 to its divisors\n    divisors[2] = 2\n    -- We then check\
    \ if n is divisible by 3\n    if n % 3 == 0 then\n      -- If n is divisible by\
    \ 3, we add 3 to its divisors\n      divisors[3] = 3\n      -- We then check if\
    \ n is divisible by 5\n      if n % 5 == 0 then\n        -- If n is divisible\
    \ by 5, we add 5 to its divisors\n        divisors[5] = 5\n        -- We then\
    \ check if n is divisible by 7\n        if n % 7 == 0 then\n          -- If n\
    \ is divisible by 7, we add 7 to its divisors\n          divisors[7] = 7\n   \
    \       -- We then check if n is divisible by 11\n          if n % 11 == 0 then\n\
    \            -- If n is divisible by 11, we add 11 to its divisors\n         \
    \   divisors[11] = 11\n            -- We then check if n is divisible by 13\n\
    \            if n % 13 == 0 then\n              -- If n is divisible by 13, we\
    \ add 13 to its divisors\n              divisors[13] = 13\n              -- We\
    \ then check if n is divisible by 17\n              if n % 17 == 0 then\n    \
    \            -- If n is divisible by 17, we add 17 to its divisors\n         \
    \       divisors[17] = 17\n                -- We then check if n is divisible\
    \ by 19\n                if n % 19 == 0 then\n                  -- If n is divisible\
    \ by 19, we add 19 to its divisors\n                  divisors[19] = 19\n    \
    \              -- We then check if n is divisible by 23\n                  if\
    \ n % 23 == 0 then\n                    -- If n is divisible by 23, we add 23\
    \ to its divisors\n                    divisors[23] = 23\n                   \
    \ -- We then check if n is divisible by 29\n                    if n % 29 == 0\
    \ then\n                      -- If n is divisible by 29, we add 29 to its divisors\n\
    \                      divisors[29] = 29\n                      -- We then check\
    \ if n is divisible by 31\n                      if n % 31 == 0 then\n       \
    \                 -- If n is divisible by 31, we add 31 to its divisors\n    \
    \                    divisors[31] = 31\n                        -- We then check\
    \ if n is divisible by 37\n                        if n % 37 == 0 then\n     \
    \                     -- If n is di\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3o6lt03k.lua:65: ''end'' expected (to close ''if'' at line
    52) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\n  -- Recursive case\n\
    \  if n % 2 == 0 then\n    return largest_divisor(n / 2)\n  else\n    return largest_divisor(3\
    \ * n + 1) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppejjop9t.lua:20:\
    \ expected: 1, actual: 0.25\nstack traceback:\n\t/tmp/tmppejjop9t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjptflma_.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjptflma_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1, since any number\
    \ divided by 1 is also evenly divisible by 1\n  -- The largest divisor is n-1,\
    \ since any number divided by n-1 is also evenly divisible by n-1\n  -- The smallest\
    \ divisor is 1, since any number divided by 1 is also evenly divisible by 1\n\
    \  -- The largest divisor is n-1, since any number divided by n-1 is also evenly\
    \ divisible by n-1\n  -- The smallest divisor is 1, since any number divided by\
    \ 1 is also evenly divisible by 1\n  -- The largest divisor is n-1, since any\
    \ number divided by n-1 is also evenly divisible by n-1\n  -- The smallest divisor\
    \ is 1, since any number divided by 1 is also evenly divisible by 1\n  -- The\
    \ largest divisor is n-1, since any number divided by n-1 is also evenly divisible\
    \ by n-1\n  -- The smallest divisor is 1, since any number divided by 1 is also\
    \ evenly divisible by 1\n  -- The largest divisor is n-1, since any number divided\
    \ by n-1 is also evenly divisible by n-1\n  -- The smallest divisor is 1, since\
    \ any number divided by 1 is also evenly divisible by 1\n  -- The largest divisor\
    \ is n-1, since any number divided by n-1 is also evenly divisible by n-1\n  --\
    \ The smallest divisor is 1, since any number divided by 1 is also evenly divisible\
    \ by 1\n  -- The largest divisor is n-1, since any number divided by n-1 is also\
    \ evenly divisible by n-1\n  -- The smallest divisor is 1, since any number divided\
    \ by 1 is also evenly divisible by 1\n  -- The largest divisor is n-1, since any\
    \ number divided by n-1 is also evenly divisible by n-1\n  -- The smallest divisor\
    \ is 1, since any number divided by 1 is also evenly divisible by 1\n  -- The\
    \ largest divisor is n-1, since any number divided by n-1 is also evenly divisible\
    \ by n-1\n  -- The smallest divisor is 1, since any number divided by 1 is also\
    \ evenly divisible by 1\n  -- The largest divisor is n-1, since any number divided\
    \ by n-1 is also evenly divisible by n-1\n  -- The smallest divisor is 1, since\
    \ any number divided by 1 is also evenly divisible by 1\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9s7re657.lua:39: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n must be evenly divisible by n-1\n \
    \ -- >>> largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(20)\n  -- 10\n\
    \  -- >>> largest_divisor(30)\n  -- 15\n  -- >>> largest_divisor(40)\n  -- 20\n\
    \  -- >>> largest_divisor(50)\n  -- 25\n  -- >>> largest_divisor(60)\n  -- 30\n\
    \  -- >>> largest_divisor(70)\n  -- 35\n  -- >>> largest_divisor(80)\n  -- 40\n\
    \  -- >>> largest_divisor(90)\n  -- 45\n  -- >>> largest_divisor(100)\n  -- 50\n\
    \  -- >>> largest_divisor(1000)\n  -- 50\n  -- >>> largest_divisor(10000)\n  --\
    \ 50\n  -- >>> largest_divisor(100000)\n  -- 50\n  -- >>> largest_divisor(1000000)\n\
    \  -- 50\n  -- >>> largest_divisor(10000000)\n  -- 50\n  -- >>> largest_divisor(100000000)\n\
    \  -- 50\n  -- >>> largest_divisor(1000000000)\n  -- 50\n  -- >>> largest_divisor(10000000000)\n\
    \  -- 50\n  -- >>> largest_divisor(100000000000)\n  -- 50\n  -- >>> largest_divisor(1000000000000)\n\
    \  -- 50\n  -- >>> largest_divisor(10000000000000)\n  -- 50\n  -- >>> largest_divisor(100000000000000)\n\
    \  -- 50\n  -- >>> largest_divisor(1000000000000000)\n  -- 50\n  -- >>> largest_divisor(10000000000000000)\n\
    \  -- 50\n  -- >>> largest_divisor(100000000000000000)\n  -- 50\n  -- >>> largest_divisor(1000000000000000000)\n\
    \  -- 50\n  -- >>> largest_divisor(10000000000000000000)\n  -- 50\n  -- >>> largest_divisor(100000000000000000000)\n\
    \  -- 50\n  -- >>> largest_divisor(1000000000000000000000)\n  -- 50\n  -- >>>\
    \ largest_divisor(10000000000000000000000)\n  -- 50\n  -- >>> largest_divisor(100000000000000000000000)\n\
    \  -- 50\n  -- >>> largest_divisor(1000000000000000000000000)\n  -- 50\n  -- >>>\
    \ largest_divisor(10000000000000000000000000)\n  -- 50\n  -- >>> largest_divisor(100000000000000000000000000)\n\
    \  -- \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0jirpa_a.lua:85: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qrk48kw.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_qrk48kw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qrk48kw.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_qrk48kw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6u93ubn.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpx6u93ubn.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpx6u93ubn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9mjj9dnj.lua:18: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7hjt9o9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk7hjt9o9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local max_divisor = 1\n  local max_divisor_value\
    \ = 1\n  local max_divisor_value_index = 1\n  for i = 2, n do\n    if n % i ==\
    \ 0 then\n      if max_divisor_value < i then\n        max_divisor_value = i\n\
    \        max_divisor_value_index = i\n      end\n    end\n  end\n  return max_divisor_value_index\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn6425q7.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfn6425q7.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzycjptou.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzycjptou.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div_n > i then\n\
    \                max_div = i\n                max_div_n = n\n            else\n\
    \                max_div_n = max_div_n * i\n            end\n        end\n   \
    \ end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8nx1erwc.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8nx1erwc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor * i\n            end\n\
    \        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfk3bt7bj.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpfk3bt7bj.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = max_divisor_remainder\
    \ - i\n            else\n                max_divisor_remainder = i\n         \
    \   end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcxsxv2c0.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpcxsxv2c0.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7hjt9o9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk7hjt9o9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      local p = i / max_divisor\n      if p > max_divisor then\n\
    \        max_divisor = p\n        max_divisor_p = p\n      end\n    end\n  end\n\
    \  return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiuqwqpim.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpiuqwqpim.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 because n is evenly divisible by all numbers\
    \ up to and including n-1\n  -- >>> largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(16)\n\
    \  -- 4\n  -- >>> largest_divisor(17)\n  -- 3\n  -- >>> largest_divisor(18)\n\
    \  -- 2\n  -- >>> largest_divisor(19)\n  -- 1\n  -- >>> largest_divisor(20)\n\
    \  -- 0\n  -- >>> largest_divisor(21)\n  -- 1\n  -- >>> largest_divisor(22)\n\
    \  -- 2\n  -- >>> largest_divisor(23)\n  -- 3\n  -- >>> largest_divisor(24)\n\
    \  -- 4\n  -- >>> largest_divisor(25)\n  -- 5\n  -- >>> largest_divisor(26)\n\
    \  -- 6\n  -- >>> largest_divisor(27)\n  -- 7\n  -- >>> largest_divisor(28)\n\
    \  -- 8\n  -- >>> largest_divisor(29)\n  -- 9\n  -- >>> largest_divisor(30)\n\
    \  -- 10\n  -- >>> largest_divisor(31)\n  -- 11\n  -- >>> largest_divisor(32)\n\
    \  -- 12\n  -- >>> largest_divisor(33)\n  -- 13\n  -- >>> largest_divisor(34)\n\
    \  -- 14\n  -- >>> largest_divisor(35)\n  -- 15\n  -- >>> largest_divisor(36)\n\
    \  -- 16\n  -- >>> largest_divisor(37)\n  -- 17\n  -- >>> largest_divisor(38)\n\
    \  -- 18\n  -- >>> largest_divisor(39)\n  -- 19\n  -- >>> largest_divisor(40)\n\
    \  -- 20\n  -- >>> largest_divisor(41)\n  -- 21\n  -- >>> largest_divisor(42)\n\
    \  -- 22\n  -- >>> largest_divisor(43)\n  -- 23\n  -- >>> largest_divisor(44)\n\
    \  -- 24\n  -- >>> largest_divisor(45)\n  -- 25\n  -- >>> largest_divisor(46)\n\
    \  -- 26\n  -- >>> largest_divisor(47)\n  -- 27\n  -- >>> largest_divisor(48)\n\
    \  -- 28\n  -- >>> largest_divisor(49)\n  -- 29\n  -- >>> largest_divisor(50)\n\
    \  -- 30\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjjny_brp.lua:90: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\n  -- Recursive case\n\
    \  if n % 2 == 0 then\n    return largest_divisor(n / 2)\n  else\n    return largest_divisor(3\
    \ * n + 1) / 2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppejjop9t.lua:20:\
    \ expected: 1, actual: 0.25\nstack traceback:\n\t/tmp/tmppejjop9t.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            if\
    \ divisor > max_divisor then\n                max_divisor = divisor\n        \
    \        max_divisor_value = i\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyceue2gp.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyceue2gp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use an auxiliary table to store the largest divisor so far\n  local max_divisors\
    \ = {}\n  -- We use an auxiliary table to store the largest divisor so far\n \
    \ local max_divisors_index = {}\n  -- We use an auxiliary table to store the largest\
    \ divisor so far\n  local max_divisors_index_temp = {}\n  -- We use an auxiliary\
    \ table to store the largest divisor so far\n  local max_divisors_index_temp2\
    \ = {}\n  -- We use an auxiliary table to store the largest divisor so far\n \
    \ local max_divisors_index_temp3 = {}\n  -- We use an auxiliary table to store\
    \ the largest divisor so far\n  local max_divisors_index_temp4 = {}\n  -- We use\
    \ an auxiliary table to store the largest divisor so far\n  local max_divisors_index_temp5\
    \ = {}\n  -- We use an auxiliary table to store the largest divisor so far\n \
    \ local max_divisors_index_temp6 = {}\n  -- We use an auxiliary table to store\
    \ the largest divisor so far\n  local max_divisors_index_temp7 = {}\n  -- We use\
    \ an auxiliary table to store the largest divisor so far\n  local max_divisors_index_temp8\
    \ = {}\n  -- We use an auxiliary table to store the largest divisor so far\n \
    \ local max_divisors_index_temp9 = {}\n  -- We use an auxiliary table to store\
    \ the largest divisor so far\n  local max_divisors_index_temp10 = {}\n  -- We\
    \ use an auxiliary table to store the largest divisor so far\n  local max_divisors_index_temp11\
    \ = {}\n  -- We use an auxiliary table to store the largest divisor so far\n \
    \ local max_divisors_index_temp12 = {}\n  -- We use an auxiliary table to store\
    \ the largest divisor so far\n  local max_divisors_index_temp13 = {}\n  -- We\
    \ use an auxiliary table to store the largest divisor so far\n  local max_divisors_index_temp14\
    \ = {}\n  -- We use an auxiliary table to store the largest divisor so far\n \
    \ local max_divisors_index_temp15 = {}\n  -- We use an auxiliary table to store\
    \ the largest divisor so far\n  local max_divisors_index_temp16 = {}\n  -- We\
    \ use an auxiliary table to store the largest divisor so far\n  local max_divisors_index_temp17\
    \ = {}\n  -- We use an auxiliary table to store the largest divisor so far\n \
    \ local max_divisors_index_temp18 = {}\n  -- We use an auxiliary table to store\
    \ the largest divisor so far\n  local max_divisor\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc6ko6jjb.lua:58: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  local max_div = math.floor(n/2)\n  local max_div2\
    \ = math.floor(n/max_div)\n  local max_div3 = math.floor(n/max_div2)\n  local\
    \ max_div4 = math.floor(n/max_div3)\n  local max_div5 = math.floor(n/max_div4)\n\
    \  local max_div6 = math.floor(n/max_div5)\n  local max_div7 = math.floor(n/max_div6)\n\
    \  local max_div8 = math.floor(n/max_div7)\n  local max_div9 = math.floor(n/max_div8)\n\
    \  local max_div10 = math.floor(n/max_div9)\n  local max_div11 = math.floor(n/max_div10)\n\
    \  local max_div12 = math.floor(n/max_div11)\n  local max_div13 = math.floor(n/max_div12)\n\
    \  local max_div14 = math.floor(n/max_div13)\n  local max_div15 = math.floor(n/max_div14)\n\
    \  local max_div16 = math.floor(n/max_div15)\n  local max_div17 = math.floor(n/max_div16)\n\
    \  local max_div18 = math.floor(n/max_div17)\n  local max_div19 = math.floor(n/max_div18)\n\
    \  local max_div20 = math.floor(n/max_div19)\n  local max_div21 = math.floor(n/max_div20)\n\
    \  local max_div22 = math.floor(n/max_div21)\n  local max_div23 = math.floor(n/max_div22)\n\
    \  local max_div24 = math.floor(n/max_div23)\n  local max_div25 = math.floor(n/max_div24)\n\
    \  local max_div26 = math.floor(n/max_div25)\n  local max_div27 = math.floor(n/max_div26)\n\
    \  local max_div28 = math.floor(n/max_div27)\n  local max_div29 = math.floor(n/max_div28)\n\
    \  local max_div30 = math.floor(n/max_div29)\n  local max_div31 = math.floor(n/max_div30)\n\
    \  local max_div32 = math.floor(n/max_div31)\n  local max_div33 = math.floor(n/max_div32)\n\
    \  local max_div34 = math.floor(n/max_div33)\n  local max_div35 = math.floor(n/max_div34)\n\
    \  local max_div36 = math.floor(n/max_div35)\n  local max_div37\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpik1tw3oi.lua:54: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = n\
    \ / i\n                max_divisor_n = i\n            end\n        end\n    end\n\
    \    return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl5qtx09z.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpl5qtx09z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qrk48kw.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_qrk48kw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqpll1vv_.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by finding the largest divisor of n that is smaller than n\n  local\
    \ max_divisor = math.floor(n/2) + 1\n  -- Then we keep dividing n by max_divisor\
    \ until we get down to 1\n  while max_divisor > 1 do\n    -- If max_divisor is\
    \ even, divide n by 2\n    if max_divisor % 2 == 0 then\n      n = n/2\n     \
    \ max_divisor = math.floor(n/2) + 1\n    -- If max_divisor is odd, divide n by\
    \ max_divisor and add 1\n    else\n      n = n/max_divisor\n      max_divisor\
    \ = math.floor(n/2) + 1\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoa26ekgi.lua:27:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpoa26ekgi.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    local divisor = i\n    while divisor > 1 do\n      divisor = divisor / 2\n\
    \    end\n    if n % divisor == 0 then\n      if divisor > max_divisor then\n\
    \        max_divisor = divisor\n      end\n      if n % divisor > max_divisor_remainder\
    \ then\n        max_divisor_remainder = n % divisor\n      end\n    end\n  end\n\
    \  return max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7fjypr_b.lua:29:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp7fjypr_b.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor, max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuqnclw43.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpuqnclw43.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  else\n                max_divisor_value = max_divisor_value * i / n\n     \
    \       end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ak3ufk5.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9ak3ufk5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = n / i\n            end\n\
    \        end\n    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15veuwcg.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp15veuwcg.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7hjt9o9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk7hjt9o9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6thfi77.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case: n is even\n  if n % 2 == 0 then\n    return n\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz3l61jo1.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qrk48kw.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_qrk48kw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      local divisor_p = i / max_divisor_p\n\
    \      local divisor_n = i / max_divisor_n\n      if divisor_p > divisor_n then\n\
    \        max_divisor_p = divisor_p\n        max_divisor_n = 1\n      else\n  \
    \      max_divisor_p = divisor_n\n        max_divisor_n = divisor_p\n      end\n\
    \    end\n  end\n  return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcl6n4i6i.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcl6n4i6i.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n      end\n      if divisor > max_divisor_value\
    \ then\n        max_divisor_value = divisor\n      end\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuvix_4cj.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpuvix_4cj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local largest = 1\n  for i = 2, n do\n    if n % i == 0 then\n      largest\
    \ = i\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzycjptou.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzycjptou.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div_n * i > max_div then\n          max_div = max_div_n\n     \
    \   end\n      end\n      max_div_n = i\n    end\n  end\n  return max_div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzbndkujt.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzbndkujt.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    local divisor = math.floor(n/i)\n    if divisor > max_divisor\
    \ then\n      max_divisor = divisor\n      max_divisor_p = i\n      max_divisor_n\
    \ = divisor\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfhypnun.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpbfhypnun.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n/2 + 1\n  return n/2 + 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_mac4jj.lua:16:\
    \ expected: 1, actual: 2.5\nstack traceback:\n\t/tmp/tmp9_mac4jj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7hjt9o9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk7hjt9o9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n-1\n  if n % 2 == 1 then\n    return n-1\n  end\n \
    \ -- If n is prime, return n\n  if prime_check(n) then\n    return n\n  end\n\
    \  -- If n is divisible by 2, return n/2\n  if n % 2 == 0 then\n    return n/2\n\
    \  end\n  -- If n is divisible by 3, return n-1\n  if n % 3 == 0 then\n    return\
    \ n-1\n  end\n  -- If n is divisible by 5, return n\n  if n % 5 == 0 then\n  \
    \  return n\n  end\n  -- If n is divisible by 7, return n-1\n  if n % 7 == 0 then\n\
    \    return n-1\n  end\n  -- If n is divisible by 11, return n\n  if n % 11 ==\
    \ 0 then\n    return n\n  end\n  -- If n is divisible by 13, return n-1\n  if\
    \ n % 13 == 0 then\n    return n-1\n  end\n  -- If n is divisible by 17, return\
    \ n\n  if n % 17 == 0 then\n    return n\n  end\n  -- If n is divisible by 19,\
    \ return n-1\n  if n % 19 == 0 then\n    return n-1\n  end\n  -- If n is divisible\
    \ by 23, return n\n  if n % 23 == 0 then\n    return n\n  end\n  -- If n is divisible\
    \ by 29, return n-1\n  if n % 29 == 0 then\n    return n-1\n  end\n  -- If n is\
    \ divisible by 31, return n\n  if n % 31 == 0 then\n    return n\n  end\n  --\
    \ If n is divisible by 37, return n-1\n  if n % 37 == 0 then\n    return n-1\n\
    \  end\n  -- If n is divisible by 41, return n\n  if n % 41 == 0 then\n    return\
    \ n\n  end\n  -- If n is divisible by 43, return n-1\n  if n % 43 == 0 then\n\
    \    return n-1\n  end\n  -- If n is divisible by 47, return n\n  if n % 47 ==\
    \ 0 then\n    return n\n  end\n  -- If n is divisible by 53, return n-1\n  if\
    \ n % 53 == 0 then\n    return n-1\n  end\n  -- If n is divisible by 59, return\
    \ n\n  if n % 59 == 0 then\n    return n\n  end\n  -- If n is divisible by 61,\
    \ return n-1\n  if n % 61 == \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnehhfvlt.lua:87: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            local div = i / n\n            if div > max_div\
    \ then\n                max_div = div\n                max_div_n = n\n       \
    \     end\n        end\n    end\n    return max_div_n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfapsj3g4.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpfapsj3g4.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpfapsj3g4.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = i\n          \
    \  else\n                max_divisor_value = max_divisor_value*i\n           \
    \ end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3l5705h_.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp3l5705h_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n / i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdmoswcdn.lua:25:\
    \ expected: 5, actual: 2\nstack traceback:\n\t/tmp/tmpdmoswcdn.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  local max_divisor_value_n2 = 1\n  for i = 2, n do\n    if n % i == 0\
    \ then\n      local divisor = i\n      if divisor > max_divisor then\n       \
    \ max_divisor = divisor\n        max_divisor_value = divisor\n        max_divisor_value_n\
    \ = 1\n      elseif divisor == max_divisor then\n        max_divisor_value = divisor\n\
    \        max_divisor_value_n = 1\n      else\n        max_divisor_value = max_divisor\n\
    \        max_divisor_value_n2 = divisor\n      end\n    end\n  end\n  if max_divisor_value\
    \ > max_divisor_value_n2 then\n    return max_divisor_value_n\n  else\n    return\
    \ max_divisor_value_n2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3f9edvds.lua:37:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp3f9edvds.lua:37: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            elseif max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            end\n \
    \       end\n    end\n    return max_div\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpylyj9pbj.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpylyj9pbj.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil or max_div > i then\n  \
    \              max_div = i\n                max_div_n = n\n            else\n\
    \                max_div_n = max_div_n * i \n            end\n        end\n  \
    \  end\n    return max_div_n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqcpak93_.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpqcpak93_.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_pp\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor\
    \ < i then\n                max_divisor = i\n                max_divisor_p = i\n\
    \                max_divisor_pp = i\n            else\n                max_divisor_p\
    \ = max_divisor_pp\n                max_divisor_pp = i\n            end\n    \
    \    end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp84ftkt4q.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp84ftkt4q.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        if n % divisor == 0 then\n            if max_divisor < divisor then\n\
    \                max_divisor = divisor\n            end\n        end\n       \
    \ divisor = divisor + 1\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3336ppc.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf3336ppc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: -1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        max_divisor = divisor\n        divisor = n / divisor\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750179
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6u93ubn.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpx6u93ubn.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpx6u93ubn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  for i = 2, n do\n    if n % i == 0 then\n      local p = i\n      while n %\
    \ p == 0 do\n        p = p * 2\n      end\n      if p > max_divisor then\n   \
    \     max_divisor = n\n        max_divisor_p = p\n        max_divisor_n = n\n\
    \      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo_y3qnuq.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpo_y3qnuq.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            -- If n is divisible by i, then\
    \ i is its largest divisor.\n            -- If n is not divisible by i, then i\
    \ is the largest divisor of n that divides n evenly.\n            if max_divisor_remainder\
    \ < i then\n                max_divisor = i\n                max_divisor_remainder\
    \ = i\n            else\n                max_divisor_remainder = max_divisor_remainder\
    \ / i\n            end\n        end\n    end\n    return max_divisor\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm718uw9m.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpm718uw9m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qrk48kw.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_qrk48kw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = i\n            end\n        end\n    end\n   \
    \ return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu3npf_hy.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpu3npf_hy.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by 2, otherwise n+1\n\
    \  -- >>> largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(16)\n  -- 6\n\
    \  -- >>> largest_divisor(17)\n  -- 7\n  -- >>> largest_divisor(18)\n  -- 8\n\
    \  -- >>> largest_divisor(19)\n  -- 9\n  -- >>> largest_divisor(20)\n  -- 10\n\
    \  -- >>> largest_divisor(21)\n  -- 11\n  -- >>> largest_divisor(22)\n  -- 12\n\
    \  -- >>> largest_divisor(23)\n  -- 13\n  -- >>> largest_divisor(24)\n  -- 14\n\
    \  -- >>> largest_divisor(25)\n  -- 15\n  -- >>> largest_divisor(26)\n  -- 16\n\
    \  -- >>> largest_divisor(27)\n  -- 17\n  -- >>> largest_divisor(28)\n  -- 18\n\
    \  -- >>> largest_divisor(29)\n  -- 19\n  -- >>> largest_divisor(30)\n  -- 20\n\
    \  -- >>> largest_divisor(31)\n  -- 21\n  -- >>> largest_divisor(32)\n  -- 22\n\
    \  -- >>> largest_divisor(33)\n  -- 23\n  -- >>> largest_divisor(34)\n  -- 24\n\
    \  -- >>> largest_divisor(35)\n  -- 25\n  -- >>> largest_divisor(36)\n  -- 26\n\
    \  -- >>> largest_divisor(37)\n  -- 27\n  -- >>> largest_divisor(38)\n  -- 28\n\
    \  -- >>> largest_divisor(39)\n  -- 29\n  -- >>> largest_divisor(40)\n  -- 30\n\
    \  -- >>> largest_divisor(41)\n  -- 31\n  -- >>> largest_divisor(42)\n  -- 32\n\
    \  -- >>> largest_divisor(43)\n  -- 33\n  -- >>> largest_divisor(44)\n  -- 34\n\
    \  -- >>> largest_divisor(45)\n  -- 35\n  -- >>> largest_divisor(46)\n  -- 36\n\
    \  -- >>> largest_divisor(47)\n  -- 37\n  -- >>> largest_divisor(48)\n  -- 38\n\
    \  -- >>> largest_divisor(49)\n  -- 39\n  -- >>> largest_divisor(50)\n  -- 40\n\
    \  -- >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw423_dzp.lua:90: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local i = 1\n  while\
    \ i <= n do\n    if n % i == 0 then\n      local divisor = i\n      if divisor\
    \ > max_divisor then\n        max_divisor = divisor\n      end\n      if divisor\
    \ > max_divisor_value then\n        max_divisor_value = divisor\n      end\n \
    \   end\n    i = i + 1\n  end\n  return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_ikquw8l.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_ikquw8l.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  local max_divisor_value_n2 = 1\n  for i = 2, n do\n    if n % i == 0\
    \ then\n      local divisor = i\n      if divisor > max_divisor then\n       \
    \ max_divisor = divisor\n      end\n      if divisor > max_divisor_value_n then\n\
    \        max_divisor_value_n2 = max_divisor_value_n\n        max_divisor_value_n\
    \ = 1\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n      end\n      if divisor > max_divisor_value_n then\n        max_divisor_value_n2\
    \ = divisor\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdziz28u5.lua:93: ''end'' expected (to close ''if'' at line
    79) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if and only if n is evenly divisible by n-1\n\
    \  -- >>> largest_divisor(15)\n  -- 5\n  -- >>> largest_divisor(16)\n  -- 5\n\
    \  -- >>> largest_divisor(17)\n  -- 5\n  -- >>> largest_divisor(18)\n  -- 5\n\
    \  -- >>> largest_divisor(19)\n  -- 5\n  -- >>> largest_divisor(20)\n  -- 5\n\
    \  -- >>> largest_divisor(21)\n  -- 5\n  -- >>> largest_divisor(22)\n  -- 5\n\
    \  -- >>> largest_divisor(23)\n  -- 5\n  -- >>> largest_divisor(24)\n  -- 5\n\
    \  -- >>> largest_divisor(25)\n  -- 5\n  -- >>> largest_divisor(26)\n  -- 5\n\
    \  -- >>> largest_divisor(27)\n  -- 5\n  -- >>> largest_divisor(28)\n  -- 5\n\
    \  -- >>> largest_divisor(29)\n  -- 5\n  -- >>> largest_divisor(30)\n  -- 5\n\
    \  -- >>> largest_divisor(31)\n  -- 5\n  -- >>> largest_divisor(32)\n  -- 5\n\
    \  -- >>> largest_divisor(33)\n  -- 5\n  -- >>> largest_divisor(34)\n  -- 5\n\
    \  -- >>> largest_divisor(35)\n  -- 5\n  -- >>> largest_divisor(36)\n  -- 5\n\
    \  -- >>> largest_divisor(37)\n  -- 5\n  -- >>> largest_divisor(38)\n  -- 5\n\
    \  -- >>> largest_divisor(39)\n  -- 5\n  -- >>> largest_divisor(40)\n  -- 5\n\
    \  -- >>> largest_divisor(41)\n  -- 5\n  -- >>> largest_divisor(42)\n  -- 5\n\
    \  -- >>> largest_divisor(43)\n  -- 5\n  -- >>> largest_divisor(44)\n  -- 5\n\
    \  -- >>> largest_divisor(45)\n  -- 5\n  -- >>> largest_divisor(46)\n  -- 5\n\
    \  -- >>> largest_divisor(47)\n  -- 5\n  -- >>> largest_divisor(48)\n  -- 5\n\
    \  -- >>> largest_divisor(49)\n  -- 5\n  -- >>> largest_divisor(50)\n  -- 5\n\
    \  -- >>> \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4727zzqk.lua:90: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6thfi77.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n % 2\
    \ == 0 then return largest_divisor(n / 2) end\n  -- Recursive case\n  if n % 3\
    \ == 0 then return largest_divisor(n / 3) end\n  -- Recursive case\n  if n % 5\
    \ == 0 then return largest_divisor(n / 5) end\n  -- Recursive case\n  if n % 7\
    \ == 0 then return largest_divisor(n / 7) end\n  -- Recursive case\n  if n % 11\
    \ == 0 then return largest_divisor(n / 11) end\n  -- Recursive case\n  if n %\
    \ 13 == 0 then return largest_divisor(n / 13) end\n  -- Recursive case\n  if n\
    \ % 17 == 0 then return largest_divisor(n / 17) end\n  -- Recursive case\n  if\
    \ n % 19 == 0 then return largest_divisor(n / 19) end\n  -- Recursive case\n \
    \ if n % 23 == 0 then return largest_divisor(n / 23) end\n  -- Recursive case\n\
    \  if n % 29 == 0 then return largest_divisor(n / 29) end\n  -- Recursive case\n\
    \  if n % 31 == 0 then return largest_divisor(n / 31) end\n  -- Recursive case\n\
    \  if n % 37 == 0 then return largest_divisor(n / 37) end\n  -- Recursive case\n\
    \  if n % 41 == 0 then return largest_divisor(n / 41) end\n  -- Recursive case\n\
    \  if n % 43 == 0 then return largest_divisor(n / 43) end\n  -- Recursive case\n\
    \  if n % 47 == 0 then return largest_divisor(n / 47) end\n  -- Recursive case\n\
    \  if n % 53 == 0 then return largest_divisor(n / 53) end\n  -- Recursive case\n\
    \  if n % 59 == 0 then return largest_divisor(n / 59) end\n  -- Recursive case\n\
    \  if n % 61 == 0 then return largest_divisor(n / 61) end\n  -- Recursive case\n\
    \  if n % 67 == 0 then return largest_divisor(n / 67) end\n  -- Recursive case\n\
    \  if n % 71 == 0 then return largest_divisor(n / 71) end\n  -- Recursive case\n\
    \  if n % 73 == 0 then return largest_divisor(n / 73) end\n  -- Recursive case\n\
    \  if n % 79 == 0 then return largest_divisor(n / 79) end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8nv4zcv0.lua:62: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            -- The current divisor divides\
    \ n evenly, so its remainder must be less than n\n            if max_divisor_remainder\
    \ < n then\n                max_divisor = i\n                max_divisor_remainder\
    \ = n % i\n            end\n        end\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppue07c0_.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppue07c0_.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n % 2 == 0\
    \ then return n end\n  local m = n / 2\n  while m % 2 == 0 do\n    m = m / 2\n\
    \  end\n  return m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2odbeex.lua:18:\
    \ expected: 1, actual: 1.5\nstack traceback:\n\t/tmp/tmpo2odbeex.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        if n % divisor == 0 then\n            if max_divisor < divisor then\n\
    \                max_divisor = divisor\n            end\n        end\n       \
    \ divisor = divisor + 1\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf3336ppc.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpf3336ppc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    local divisor = i\n    while divisor > 1 do\n      if n % divisor == 0 then\n\
    \        divisor = divisor - 1\n      else\n        break\n      end\n    end\n\
    \    if divisor > max_divisor then\n      max_divisor = divisor\n      max_divisor_remainder\
    \ = n % divisor\n    end\n  end\n  return max_divisor_remainder\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprggvjnr7.lua:29:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmprggvjnr7.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      if max_divisor < i then\n        max_divisor = i\n\
    \      end\n      if max_divisor_value < n / i then\n        max_divisor_value\
    \ = n / i\n      end\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11bmpdzg.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp11bmpdzg.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n/2 + 1\n  return n/2 + 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9_mac4jj.lua:16:\
    \ expected: 1, actual: 2.5\nstack traceback:\n\t/tmp/tmp9_mac4jj.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzns3u8z6.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    while divisor < n do\n        divisor = math.floor(n\
    \ / divisor)\n    end\n    return divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7jgti_v.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpw7jgti_v.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    \  -- If n is odd, return n/2+1\n  return n/2 + 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcpjawnfo.lua:16:\
    \ expected: 1, actual: 2.5\nstack traceback:\n\t/tmp/tmpcpjawnfo.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 0 then\n    return 0\n  end\n  -- Find the largest\
    \ divisor smaller than n\n  local max_divisor = 1\n  local max_divisor_index =\
    \ 1\n  for i = 2, n do\n    if n % i == 0 then\n      -- If n is divisible by\
    \ i, then n is larger than largest divisor so far\n      if n > max_divisor then\n\
    \        max_divisor = n\n        max_divisor_index = i\n      end\n    end\n\
    \  end\n  return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcv2mijoo.lua:27:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcv2mijoo.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n-1 if n is evenly divisible\
    \ by all numbers from 1 to n-1.\n  -- The largest divisor is n if n is evenly\
    \ divisible by all numbers from 1 to n.\n  -- The largest divisor is n+1 if n\
    \ is evenly divisible by all numbers from 1 to n+1.\n  -- The largest divisor\
    \ is n-1 if n is evenly divisible by all numbers from 1 to n-1.\n  -- The largest\
    \ divisor is n if n is evenly divisible by all numbers from 1 to n.\n  -- The\
    \ largest divisor is n+1 if n is evenly divisible by all numbers from 1 to n+1.\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n-1 if n is evenly divisible\
    \ by all numbers from 1 to n-1.\n  -- The largest divisor is n if n is evenly\
    \ divisible by all numbers from 1 to n.\n  -- The largest divisor is n+1 if n\
    \ is evenly divisible by all numbers from 1 to n+1.\n  -- The largest divisor\
    \ is n-1 if n is evenly divisible by all numbers from 1 to n-1.\n  -- The largest\
    \ divisor is n if n is evenly divisible by all numbers from 1 to n.\n  -- The\
    \ largest divisor is n+1 if n is evenly divisible by all numbers from 1 to n+1.\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers from\
    \ 1 to n-1.\n  -- The largest divisor is n if n is evenly divisible by all numbers\
    \ from 1 to n.\n  -- The largest divisor is n+1 if n is evenly divisible by all\
    \ numbers from 1 to n+1.\n  -- The largest divisor is n-1 if n is evenly di\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7k7589g2.lua:38: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if n is evenly divisible by all numbers up to\
    \ and including n.\n  -- The largest divisor is n if n is evenly divisible by\
    \ all numbers up to and including n-1.\n  -- The largest divisor is n-1 if n is\
    \ evenly divisible by all numbers up to and including n-1.\n  -- The largest divisor\
    \ is n if n is evenly divisible by all numbers up to and including n-1.\n  --\
    \ The largest divisor is n-1 if n is evenly divisible by all numbers up to and\
    \ including n-1.\n  -- The largest divisor is n if n is evenly divisible by all\
    \ numbers up to and including n-1.\n  -- The largest divisor is n-1 if n is evenly\
    \ divisible by all numbers up to and including n-1.\n  -- The largest divisor\
    \ is n if n is evenly divisible by all numbers up to and including n-1.\n  --\
    \ The largest divisor is n-1 if n is evenly divisible by all numbers up to and\
    \ including n-1.\n  -- The largest divisor is n if n is evenly divisible by all\
    \ numbers up to and including n-1.\n  -- The largest divisor is n-1 if n is evenly\
    \ divisible by all numbers up to and including n-1.\n  -- The largest divisor\
    \ is n if n is evenly divisible by all numbers up to and including n-1.\n  --\
    \ The largest divisor is n-1 if n is evenly divisible by all numbers up to and\
    \ including n-1.\n  -- The largest divisor is n if n is evenly divisible by all\
    \ numbers up to and including n-1.\n  -- The largest divisor is n-1 if n is evenly\
    \ divisible by all numbers up to and including n-1.\n  -- The largest divisor\
    \ is n if n is evenly divisible by all numbers up to and including n-1.\n  --\
    \ The largest divisor is n-1 if n is evenly divisible by all numbers up to and\
    \ including n-1.\n  -- The largest divisor is n if n is evenly divisible by all\
    \ numbers up to and including n-1.\n  -- The largest divisor is n-1 if n is evenly\
    \ divisible by all numbers up to and including n-1.\n  -- The largest divisor\
    \ is n if n is evenly divisible by all numbers up to and including n-1.\n  --\
    \ The largest divisor is n-1 if n is evenly divisible by all numbers up to and\
    \ including n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz6qyy087.lua:37: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return n/2\n  end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqpll1vv_.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw6thfi77.lua:42: '')'' expected (to close ''('' at line 41)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6u93ubn.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpx6u93ubn.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpx6u93ubn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  else\n                max_divisor_value = max_divisor_value * i / n\n     \
    \       end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9ak3ufk5.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9ak3ufk5.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7hjt9o9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk7hjt9o9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_div = nil\n    local max_div_n = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            if max_div == nil then\n                max_div\
    \ = i\n                max_div_n = n\n            else\n                if max_div\
    \ > i then\n                    max_div = i\n                    max_div_n = n\n\
    \                end\n            end\n        end\n    end\n    return max_div\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp15jp__cg.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp15jp__cg.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            local divisor = i\n            if\
    \ divisor > max_divisor then\n                max_divisor = divisor\n        \
    \        max_divisor_value = i\n            end\n        end\n    end\n    return\
    \ max_divisor_value\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyceue2gp.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyceue2gp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = n\n    while max_divisor_remainder\
    \ > 1 do\n        max_divisor = max_divisor + 1\n        max_divisor_remainder\
    \ = max_divisor_remainder / max_divisor\n    end\n    return max_divisor\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiy9no2z5.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpiy9no2z5.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6u93ubn.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpx6u93ubn.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpx6u93ubn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = n\n    local max_divisor_remainder_remainder\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            if max_divisor_remainder\
    \ % i == 0 then\n                max_divisor_remainder = max_divisor_remainder\
    \ / i\n                max_divisor_remainder_remainder = max_divisor_remainder\
    \ % i\n            else\n                max_divisor = i\n                max_divisor_remainder\
    \ = max_divisor_remainder / i\n                max_divisor_remainder_remainder\
    \ = max_divisor_remainder % i\n            end\n        end\n    end\n    return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3dtvgp9a.lua:28:\
    \ expected: 5, actual: 10\nstack traceback:\n\t/tmp/tmp3dtvgp9a.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  for i = 2, n do\n    if\
    \ n % i == 0 then\n      if max_divisor < i then\n        max_divisor = i\n  \
    \      max_divisor_p = i\n      end\n    end\n  end\n  return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkhu_3mns.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkhu_3mns.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We start by finding all the factors of n\n  local factors = {}\n  for i\
    \ = 1, n do\n    local f = math.floor(n/i)\n    if f ~= i then\n      table.insert(factors,\
    \ f)\n    end\n  end\n  -- Now we find the largest one\n  local largest = nil\n\
    \  for _, f in ipairs(factors) do\n    if largest == nil or f > largest then\n\
    \      largest = f\n    end\n  end\n  return largest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp027j9x7_.lua:26:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp027j9x7_.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    for i = 2, n do\n     \
    \   if n % i == 0 then\n            divisor = i\n            max_divisor = i\n\
    \        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmfgis7af.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpmfgis7af.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            local p = i / max_divisor\n         \
    \   if p > max_divisor then\n                max_divisor_p = p\n             \
    \   max_divisor = i\n            end\n        end\n    end\n    return max_divisor_p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7hnftqsj.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7hnftqsj.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ccqu1n0.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6ccqu1n0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_value = n\n          \
    \  end\n        end\n    end\n    return max_divisor_value\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9185qs4e.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp9185qs4e.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qrk48kw.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_qrk48kw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            end\n  \
    \      end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5w0gfcqo.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp5w0gfcqo.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      local div = i / n\n      if div > max_div then\n        max_div\
    \ = div\n        max_div_n = n\n      end\n    end\n  end\n  return max_div_n\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx6u93ubn.lua:10:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpx6u93ubn.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpx6u93ubn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = math.floor(n/2) + 1\n  local max_div2 = math.floor(n/3) + 1\n\
    \  local max_div3 = math.floor(n/7) + 1\n  local max_div4 = math.floor(n/15) +\
    \ 1\n  local max_div5 = math.floor(n/25) + 1\n  local max_div6 = math.floor(n/35)\
    \ + 1\n  local max_div7 = math.floor(n/45) + 1\n  local max_div8 = math.floor(n/55)\
    \ + 1\n  local max_div9 = math.floor(n/65) + 1\n  local max_div10 = math.floor(n/75)\
    \ + 1\n  local max_div11 = math.floor(n/85) + 1\n  local max_div12 = math.floor(n/95)\
    \ + 1\n  local max_div13 = math.floor(n/105) + 1\n  local max_div14 = math.floor(n/115)\
    \ + 1\n  local max_div15 = math.floor(n/125) + 1\n  local max_div16 = math.floor(n/135)\
    \ + 1\n  local max_div17 = math.floor(n/145) + 1\n  local max_div18 = math.floor(n/155)\
    \ + 1\n  local max_div19 = math.floor(n/165) + 1\n  local max_div20 = math.floor(n/175)\
    \ + 1\n  local max_div21 = math.floor(n/185) + 1\n  local max_div22 = math.floor(n/195)\
    \ + 1\n  local max_div23 = math.floor(n/205) + 1\n  local max_div24 = math.floor(n/215)\
    \ + 1\n  local max_div25 = math.floor(n/225) + 1\n  local max_div26 = math.floor(n/235)\
    \ + 1\n  local max_div27 = math.floor(n/245) + 1\n  local max_div28 = math.floor(n/255)\
    \ + 1\n  local max_div29 = math.floor(n/265) + 1\n  local max_div30 = math.floor(n/275)\
    \ + 1\n  local max_div31 = math.floor(n/285) + 1\n  local max_div32 = math.floor(n/295)\
    \ + 1\n  local max_div33 = math.floor(n/305) + 1\n  local max_div34 = math.floor(n/315)\
    \ + 1\n  local max_div35 = math.floor(n/325) + 1\n  local max_div36 = math.floor(n/335)\
    \ + 1\n  local max_div37 = math.floor(n/345) + 1\n  local max_div38 = math.floor(n/355)\
    \ + 1\n  local max_div39 = math.floor(n/365) + 1\n  local max_div40 = math.floor(n/375)\
    \ + 1\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3e1ewd5x.lua:57: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_index = 1\n  for i = 2, n do\n \
    \   if n % i == 0 then\n      local divisor = i\n      if divisor > max_divisor\
    \ then\n        max_divisor = divisor\n        max_divisor_index = i\n      end\n\
    \    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzpuvvmgi.lua:22:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpzpuvvmgi.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1 if and only if n-1 divides evenly into n.\n \
    \ -- The largest divisor is 1 if and only if n-1 divides evenly into 1.\n  --\
    \ The largest divisor is n-1 if and only if n-1 divides evenly into n-1.\n  --\
    \ The largest divisor is 1 if and only if n-1 divides evenly into 1.\n  -- The\
    \ largest divisor is n-1 if and only if n-1 divides evenly into n-1.\n  -- The\
    \ largest divisor is 1 if and only if n-1 divides evenly into 1.\n  -- The largest\
    \ divisor is n-1 if and only if n-1 divides evenly into n-1.\n  -- The largest\
    \ divisor is 1 if and only if n-1 divides evenly into 1.\n  -- The largest divisor\
    \ is n-1 if and only if n-1 divides evenly into n-1.\n  -- The largest divisor\
    \ is 1 if and only if n-1 divides evenly into 1.\n  -- The largest divisor is\
    \ n-1 if and only if n-1 divides evenly into n-1.\n  -- The largest divisor is\
    \ 1 if and only if n-1 divides evenly into 1.\n  -- The largest divisor is n-1\
    \ if and only if n-1 divides evenly into n-1.\n  -- The largest divisor is 1 if\
    \ and only if n-1 divides evenly into 1.\n  -- The largest divisor is n-1 if and\
    \ only if n-1 divides evenly into n-1.\n  -- The largest divisor is 1 if and only\
    \ if n-1 divides evenly into 1.\n  -- The largest divisor is n-1 if and only if\
    \ n-1 divides evenly into n-1.\n  -- The largest divisor is 1 if and only if n-1\
    \ divides evenly into 1.\n  -- The largest divisor is n-1 if and only if n-1 divides\
    \ evenly into n-1.\n  -- The largest divisor is 1 if and only if n-1 divides evenly\
    \ into 1.\n  -- The largest divisor is n-1 if and only if n-1 divides evenly into\
    \ n-1.\n  -- The largest divisor is 1 if and only if n-1 divides evenly into 1.\n\
    \  -- The largest divisor is n-1 if and only if n-1 divides evenly into n-1.\n\
    \  -- The largest divisor is 1 if and only if n-1 divides evenly into 1.\n  --\
    \ The largest divisor is n-1 if and only if n-1 divides evenly into n-1.\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpi3cul0i1.lua:41: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_square = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_square < i then\n\
    \                max_divisor = i\n                max_divisor_square = i * i\n\
    \            end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcs3sd76v.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpcs3sd76v.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor_value < i then\n\
    \                max_divisor_value = i\n                max_divisor = i\n    \
    \        end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjptflma_.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpjptflma_.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_value = 1\n  local max_divisor_value_n\
    \ = 1\n  local max_divisor_value_n2 = 1\n  local max_divisor_value_n3 = 1\n  local\
    \ max_divisor_value_n4 = 1\n  local max_divisor_value_n5 = 1\n  local max_divisor_value_n6\
    \ = 1\n  local max_divisor_value_n7 = 1\n  local max_divisor_value_n8 = 1\n  local\
    \ max_divisor_value_n9 = 1\n  local max_divisor_value_n10 = 1\n  local max_divisor_value_n11\
    \ = 1\n  local max_divisor_value_n12 = 1\n  local max_divisor_value_n13 = 1\n\
    \  local max_divisor_value_n14 = 1\n  local max_divisor_value_n15 = 1\n  local\
    \ max_divisor_value_n16 = 1\n  local max_divisor_value_n17 = 1\n  local max_divisor_value_n18\
    \ = 1\n  local max_divisor_value_n19 = 1\n  local max_divisor_value_n20 = 1\n\
    \  local max_divisor_value_n21 = 1\n  local max_divisor_value_n22 = 1\n  local\
    \ max_divisor_value_n23 = 1\n  local max_divisor_value_n24 = 1\n  local max_divisor_value_n25\
    \ = 1\n  local max_divisor_value_n26 = 1\n  local max_divisor_value_n27 = 1\n\
    \  local max_divisor_value_n28 = 1\n  local max_divisor_value_n29 = 1\n  local\
    \ max_divisor_value_n30 = 1\n  local max_divisor_value_n31 = 1\n  local max_divisor_value_n32\
    \ = 1\n  local max_divisor_value_n33 = 1\n  local max_divisor_value_n34 = 1\n\
    \  local max_divisor_value_n35 = 1\n  local max_divisor_value_n36 = 1\n  local\
    \ max_divisor_value_n37 = 1\n  local max_divisor_value_n38 = 1\n  local max_divisor_value_n39\
    \ = 1\n  local max_divisor_value_n40 = 1\n  local max_divisor_value_n41 = 1\n\
    \  local max_divisor_value_n42 = 1\n  local max_divisor_value_n43 = 1\n  local\
    \ max_divisor_value_n44 = 1\n  local max_divisor_value_n45 = 1\n  local max_divisor_value_n46\
    \ = 1\n  local max_divisor_value_n47 = 1\n  local max_divisor_value_n48 = 1\n\
    \  local max_divisor_value_n49 = 1\n  local max_divisor_value_n50 = 1\n  local\
    \ max_divisor_value_n51 = 1\n  local max_divisor_value_n52 = 1\n  local max_divisor_value_n53\
    \ = 1\n  local max_divisor_value_n54 = 1\n  local max_divisor_value\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphmo3aewa.lua:73: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_index = 1\n    for i = 2, n\
    \ do\n        if n % i == 0 then\n            if max_divisor < i then\n      \
    \          max_divisor = i\n                max_divisor_index = i\n          \
    \  else\n                max_divisor_index = i\n            end\n        end\n\
    \    end\n    return max_divisor_index\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk7hjt9o9.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpk7hjt9o9.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor < i then\n           \
    \     max_divisor = i\n                max_divisor_p = i\n            else\n \
    \               max_divisor_p = max_divisor_p * i\n            end\n        end\n\
    \    end\n    return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_qrk48kw.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp_qrk48kw.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcqlcwsjg.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor * max_divisor_remainder\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ccqu1n0.lua:19:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp6ccqu1n0.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_div = nil\n  local max_div_n = 1\n  for i = 2, n do\n    if n % i\
    \ == 0 then\n      if max_div == nil then\n        max_div = i\n      else\n \
    \       if max_div > i then\n          max_div = i\n        end\n      end\n \
    \     max_div_n = max_div_n * i\n    end\n  end\n  return max_div_n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph0n9uw2e.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmph0n9uw2e.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 1 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcqlcwsjg.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n == 0 then\n    return 0\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9v4spj7h.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n\
    \            if max_divisor < i then\n                max_divisor = i\n      \
    \      end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyo_a0311.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpyo_a0311.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- The largest divisor is n-1\n  -- The smallest divisor is 1\n  -- The largest\
    \ divisor is n/2\n  -- The smallest divisor is n/2\n  -- The largest divisor is\
    \ n/3\n  -- The smallest divisor is n/3\n  -- The largest divisor is n/6\n  --\
    \ The smallest divisor is n/6\n  -- The largest divisor is n/9\n  -- The smallest\
    \ divisor is n/9\n  -- The largest divisor is n/12\n  -- The smallest divisor\
    \ is n/12\n  -- The largest divisor is n/15\n  -- The smallest divisor is n/15\n\
    \  -- The largest divisor is n/20\n  -- The smallest divisor is n/20\n  -- The\
    \ largest divisor is n/25\n  -- The smallest divisor is n/25\n  -- The largest\
    \ divisor is n/30\n  -- The smallest divisor is n/30\n  -- The largest divisor\
    \ is n/35\n  -- The smallest divisor is n/35\n  -- The largest divisor is n/40\n\
    \  -- The smallest divisor is n/40\n  -- The largest divisor is n/45\n  -- The\
    \ smallest divisor is n/45\n  -- The largest divisor is n/50\n  -- The smallest\
    \ divisor is n/50\n  -- The largest divisor is n/55\n  -- The smallest divisor\
    \ is n/55\n  -- The largest divisor is n/60\n  -- The smallest divisor is n/60\n\
    \  -- The largest divisor is n/65\n  -- The smallest divisor is n/65\n  -- The\
    \ largest divisor is n/70\n  -- The smallest divisor is n/70\n  -- The largest\
    \ divisor is n/75\n  -- The smallest divisor is n/75\n  -- The largest divisor\
    \ is n/80\n  -- The smallest divisor is n/80\n  -- The largest divisor is n/85\n\
    \  -- The smallest divisor is n/85\n  -- The largest divisor is n/90\n  -- The\
    \ smallest divisor is n/90\n  -- The largest divisor is n/95\n  -- The smallest\
    \ divisor is n/95\n  -- The largest divisor is n/100\n  -- The smallest divisor\
    \ is n/100\n  -- The largest divisor is n/105\n  -- The smallest divisor is n/105\n\
    \  -- The largest divisor is n/110\n  -- The \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2hh5bftj.lua:68: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_remainder = 1\n  for i = 2, n do\n\
    \    if n % i == 0 then\n      max_divisor = i\n      max_divisor_remainder =\
    \ n % i\n    end\n  end\n  return max_divisor\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptgom4qsr.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmptgom4qsr.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor_remainder > i then\n\
    \                max_divisor = i\n                max_divisor_remainder = n %\
    \ i\n            else\n                max_divisor_remainder = n % i\n       \
    \     end\n        end\n    end\n    return max_divisor\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9pnsapjp.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp9pnsapjp.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_n = 1\n\
    \  local max_divisor_pp = 1\n  local max_divisor_pn = 1\n  local max_divisor_ppp\
    \ = 1\n  for i = 2, n do\n    local divisor = math.floor(n/i)\n    if divisor\
    \ > max_divisor then\n      max_divisor = divisor\n      max_divisor_p = i\n \
    \     max_divisor_pp = math.floor(n/max_divisor_p)\n      max_divisor_pn = math.floor(n/max_divisor_p)\n\
    \      max_divisor_ppp = math.floor(n/max_divisor_p)\n    end\n  end\n  return\
    \ max_divisor\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = largest_divisor\n    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7),\
    \ 1)\n    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100),\
    \ 50)\n    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdr1im8md.lua:28:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpdr1im8md.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  local max_divisor = 1\n  local max_divisor_p = 1\n  local max_divisor_pp =\
    \ 1\n  local max_divisor_ppp = 1\n  local max_divisor_pppp = 1\n  for i = 2, n\
    \ do\n    local divisor_p = math.floor(n/i)\n    local divisor_pp = math.floor(n/i*i)\n\
    \    local divisor_ppp = math.floor(n/i*i*i)\n    local divisor_pppp = math.floor(n/i*i*i*i)\n\
    \    if divisor_p*divisor_pp*divisor_ppp*divisor_pppp > max_divisor_p*max_divisor_pp*max_divisor_ppp*max_divisor_pppp\
    \ then\n      max_divisor_p = divisor_p\n      max_divisor_pp = divisor_pp\n \
    \     max_divisor_ppp = divisor_ppp\n      max_divisor_pppp = divisor_pppp\n \
    \   end\n  end\n  return max_divisor_p\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2qarsqzv.lua:30:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp2qarsqzv.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- We use two loops to find the largest divisor of n that divides n evenly.\n\
    \  -- The first loop finds the largest divisor of n that divides n evenly by 1.\n\
    \  -- The second loop finds the largest divisor of n that divides n evenly by\
    \ 2.\n  -- The largest divisor of n that divides n evenly by 3 is then found by\
    \ adding 3 to the\n  -- largest divisor of n that divides n evenly by 1.\n  --\
    \ The largest divisor of n that divides n evenly by 4 is then found by adding\
    \ 4 to the\n  -- largest divisor of n that divides n evenly by 2.\n  -- The largest\
    \ divisor of n that divides n evenly by 5 is then found by adding 5 to the\n \
    \ -- largest divisor of n that divides n evenly by 3.\n  -- The largest divisor\
    \ of n that divides n evenly by 6 is then found by adding 6 to the\n  -- largest\
    \ divisor of n that divides n evenly by 4.\n  -- The largest divisor of n that\
    \ divides n evenly by 7 is then found by adding 7 to the\n  -- largest divisor\
    \ of n that divides n evenly by 5.\n  -- The largest divisor of n that divides\
    \ n evenly by 8 is then found by adding 8 to the\n  -- largest divisor of n that\
    \ divides n evenly by 6.\n  -- The largest divisor of n that divides n evenly\
    \ by 9 is then found by adding 9 to the\n  -- largest divisor of n that divides\
    \ n evenly by 7.\n  -- The largest divisor of n that divides n evenly by 10 is\
    \ then found by adding 10 to the\n  -- largest divisor of n that divides n evenly\
    \ by 8.\n  -- The largest divisor of n that divides n evenly by 11 is then found\
    \ by adding 11 to the\n  -- largest divisor of n that divides n evenly by 9.\n\
    \  -- The largest divisor of n that divides n evenly by 12 is then found by adding\
    \ 12 to the\n  -- largest divisor of n that divides n evenly by 10.\n  -- The\
    \ largest divisor of n that divides n evenly by 13 is then found by adding 13\
    \ to the\n  -- largest divisor of n that divides n evenly by 11.\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpteoupc_f.lua:41: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \  -- Base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = largest_divisor\n    lu.assertEquals(candidate(3),\
    \ 1)\n    lu.assertEquals(candidate(7), 1)\n    lu.assertEquals(candidate(10),\
    \ 5)\n    lu.assertEquals(candidate(100), 50)\n    lu.assertEquals(candidate(49),\
    \ 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzns3u8z6.lua:20: ''end'' expected (to close ''function'' at
    line 4) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local max_divisor = 1\n    local max_divisor_remainder = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            local divisor = i\n          \
    \  local divisor_remainder = n % i\n            if divisor_remainder > max_divisor_remainder\
    \ then\n                max_divisor = divisor\n                max_divisor_remainder\
    \ = divisor_remainder\n            end\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmperbfe45b.lua:25:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmperbfe45b.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
- exit_code: 1
  program: "-- For a given number n, find the largest number that divides n evenly,\
    \ smaller than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n\
    \    local divisor = 1\n    local max_divisor = 1\n    while divisor <= n do\n\
    \        if n % divisor == 0 then\n            divisor = divisor + 1\n       \
    \ else\n            divisor = divisor * 2\n        end\n        if divisor > max_divisor\
    \ then\n            max_divisor = divisor\n        end\n    end\n    return max_divisor\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
    \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n\
    \    lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
    \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpexgg_vtd.lua:23:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmpexgg_vtd.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750174
