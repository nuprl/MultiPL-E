name: HumanEval_120_maximum
language: lua
prompt: "-- Given a table arr of integers and a positive integer k, return a sorted\
  \ table \n-- of length k with the maximum k numbers in arr.\n-- Example 1:\n-- >>>\
  \ maximum({-3, -4, 5}, 3)\n-- {-4, -3, 5}\n-- Example 2:\n-- >>> maximum({4, -4,\
  \ 4}, 2)\n-- {4, 4}\n-- Example 3:\n-- >>> maximum({-3, 2, 1, 2, -1, -2, 1}, 1)\n\
  -- {2}\n-- Note:\n-- 1. The length of the table will be in the range of [1, 1000].\n\
  -- 2. The elements in the table will be in the range of [-1000, 1000].\n-- 3. 0\
  \ <= k <= len(arr)\nlocal function maximum(arr, k)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = maximum\n\
  \    lu.assertEquals(candidate({-3, -4, 5}, 3), {-4, -3, 5})\n    lu.assertEquals(candidate({4,\
  \ -4, 4}, 2), {4, 4})\n    lu.assertEquals(candidate({-3, 2, 1, 2, -1, -2, 1}, 1),\
  \ {2})\n    lu.assertEquals(candidate({123, -123, 20, 0, 1, 2, -3}, 3), {2, 20,\
  \ 123})\n    lu.assertEquals(candidate({-123, 20, 0, 1, 2, -3}, 4), {0, 1, 2, 20})\n\
  \    lu.assertEquals(candidate({5, 15, 0, 3, -13, -8, 0}, 7), {-13, -8, 0, 0, 3,\
  \ 5, 15})\n    lu.assertEquals(candidate({-1, 0, 2, 5, 3, -10}, 2), {3, 5})\n  \
  \  lu.assertEquals(candidate({1, 0, 5, -7}, 1), {5})\n    lu.assertEquals(candidate({4,\
  \ -4}, 2), {-4, 4})\n    lu.assertEquals(candidate({-10, 10}, 2), {-10, 10})\n \
  \   lu.assertEquals(candidate({1, 2, 3, -23, 243, -400, 0}, 0), {})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- Write your code here.\n  local result = {}\n  local max = 0\n\
    \  for i = 1, k do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n\
    \  for i = 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n\
    \  end\n  return result\nend", "  -- Base case\n  if k == 1 then\n    return arr\n\
    \  end\n  \n  -- Find the maximum element in the given array\n  local max_element\
    \ = arr[1]\n  for i = 2, #arr do\n    if arr[i] > max_element then\n      max_element\
    \ = arr[i]\n    end\n  end\n  \n  -- Sort the array in descending order and return\
    \ the k largest elements\n  local sorted_arr = table.sort(arr, function(a, b)\
    \ return b - a; end)\n  \n  return sorted_arr:sub(1, k)\nend", "  assert(k > 0\
    \ and k <= #arr, 'k should be greater than 0 and less than or equal to length\
    \ of arr')\n  \n  local result = {}\n  local max = 0\n  local index = 1\n  \n\
    \  repeat\n    local element = arr[index]\n    if element > max then\n      max\
    \ = element\n    end\n    \n    if index == k then\n      table.insert(result,\
    \ max)\n      break\n    end\n    \n    index = index + 1\n  until index == k\n\
    \  \n  return result\nend", "    local n = #arr\n    local m = math.max(1, n)\n\
    \    local t = {}\n    local i = 1\n    while i <= m do\n        local j = 1\n\
    \        while j <= n and arr[j] < arr[i] do\n            j = j + 1\n        end\n\
    \        if j > n then\n            table.insert(t, arr[i])\n            i = i\
    \ + 1\n        else\n            table.insert(t, arr[j])\n            i = i +\
    \ 1\n            j = j + 1\n        end\n    end\n    if k > n then\n        return\
    \ t\n    else\n        return table.sort(t)\n    end\nend", "  -- Base case\n\
    \  if k == 1 then\n    return arr\n  end", "  local t = {}\n  local len = #arr\n\
    \  local m = math.min(k, len)\n  for i = 1, m do\n    local v = arr[i]\n    if\
    \ v > t[#t] then\n      t[#t] = v\n    end\n  end\n  return t\nend", "  local\
    \ result = {}\n  local n = #arr\n  assert(n >= k, 'k must be less than or equal\
    \ to n')\n  assert(k > 0, 'k must be positive')\n  assert(n >= k, 'k must be less\
    \ than or equal to n')\n  \n  -- Sort the array in descending order.\n  for i\
    \ = n - 1, -1, -1 do\n    local element = arr[i]\n    if element > result[k] then\n\
    \      result[k] = element\n    end\n  end\n  \n  return result\nend", "  assert(k\
    \ > 0 and k <= #arr, \"k should be greater than 0 and less than or equal to the\
    \ length of the array\")\n  local result = {}\n  local max = 0\n  for i = 1, k\
    \ do\n    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  for i =\
    \ 1, k do\n    if arr[i] > max then\n      result[i] = arr[i]\n    end\n  end\n\
    \  return result\nend", "    local n = #arr\n    local m = math.min(k, n)\n  \
    \  local t = {}\n    for i = 1, m do\n        local max_val = arr[i]\n       \
    \ for j = 1, n do\n            if arr[j] > max_val then\n                max_val\
    \ = arr[j]\n            end\n        end\n        t[#t + 1] = max_val\n    end\n\
    \    return t\nend", "  -- Write your code here.\n  local max = {}\n  local i\
    \ = 0\n  local j = 0\n  local maxlen = 0\n  while i < #arr do\n    if j > k then\n\
    \      max[#max+1] = arr[i]\n      maxlen = #max\n    else\n      if arr[i] >\
    \ arr[j] then\n        max[#max+1] = arr[i]\n        i = i + 1\n      else\n \
    \       max[#max+1] = arr[j]\n        j = j + 1\n      end\n    end\n  end\n \
    \ if maxlen > k then\n    for i = k+1, maxlen do\n      max[#max+1] = arr[i]\n\
    \    end\n  end\n  return max\nend", "  local n = #arr\n  assert(k > 0 and k <\
    \ n)\n  local m = math.max(k, n)\n  local t = {}\n  for i = 1, m do\n    local\
    \ v = arr[i]\n    for j = 1, n do\n      if j == i then\n        t[j] = v\n  \
    \    elseif v > t[j] then\n        t[j] = v\n      end\n    end\n  end\n  return\
    \ t\nend", "  local n = #arr\n  local m = math.max(k, n)\n  local t = {}\n  for\
    \ i = 1, m do\n    table.insert(t, arr[i])\n  end\n  return t\nend", "  local\
    \ n = #arr\n  local m = math.min(k, n)\n  local max = arr[1]\n  for i = 2, m do\n\
    \    if arr[i] > max then\n      max = arr[i]\n    end\n  end\n  return max\n\
    end", "  assert(k > 0 and k <= #arr, \"k should be greater than 0 and less than\
    \ or equal to #arr\")\n  local result = {}\n  local maxVal = -math.inf\n  local\
    \ maxIdx = 0\n  for i = 1, k do\n    local curVal = arr[i]\n    if curVal > maxVal\
    \ then\n      maxVal = curVal\n      maxIdx = i\n    end\n  end\n  result[maxIdx]\
    \ = maxVal\n  return result\nend", "  -- Write your code here.\n  local table\
    \ = {}\n  local max = 0\n  for i = 1, k do\n    if arr[i] > max then\n      max\
    \ = arr[i]\n    end\n  end\n  for i = 1, k do\n    if arr[i] > max then\n    \
    \  table[i] = arr[i]\n    end\n  end\n  return table\nend", "  -- Base case\n\
    \  if k == 1 then\n    return arr\n  end", "  -- Base case\n  if k == 1 then\n\
    \    return arr\n  end", "  assert(k > 0 and k <= #arr)\n  local result = {}\n\
    \  local pos = 1\n  local max_val = arr[pos]\n  for i = 1, k do\n    if arr[i]\
    \ > max_val then\n      max_val = arr[i]\n    end\n    result[i] = max_val\n \
    \   pos = pos + 1\n  end\n  return result\nend", "  local n = #arr\n  assert(n\
    \ >= 0 and k <= n)\n  local t = {}\n  local m = math.max(1, math.floor(n/2))\n\
    \  for i = 1, m do\n    local x = arr[i]\n    if x > t[#t] then\n      t[#t] =\
    \ x\n    end\n  end\n  if k > #t then\n    return t\n  end\n  local i = k\n  local\
    \ j = n - k\n  while i <= j do\n    local x = arr[i]\n    i = i + 1\n    if x\
    \ > t[#t] then\n      t[#t] = x\n    end\n  end\n  return t\nend", "  assert(k\
    \ > 0 and k <= #arr, 'k should be greater than 0 and less than or equal to length\
    \ of arr')\n  local result = {}\n  for i = 1, k do\n    local max_value = -math.inf\n\
    \    for j = 1, #arr do\n      if arr[j] > max_value then\n        max_value =\
    \ arr[j]\n      end\n    end\n    result[i] = max_value\n  end\n  return result\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
