name: HumanEval_13_greatest_common_divisor
language: lua
prompt: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
  \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
  \ b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
  \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
  \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
  \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then return a\n  elseif a == 0 then return b\n  elseif b == a then return\
    \ b\n  elseif a == b then return a\n  else\n    local c = a\n    while c > b do\n\
    \      c = c / b\n    end\n    return c\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while b > 0\
    \ do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return\
    \ a\n  elseif a % b == 0 then return greatest_common_divisor(b, a / b) end\n \
    \ return greatest_common_divisor(b, a % b)\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local div =\
    \ math.floor((a % b) / b)\n  return b * div + a % b\nend", "  -- If b is 0, then\
    \ return 0\n  if b == 0 then\n    return 0\n  end", "  -- Make sure a and b are\
    \ integers\n  a = tonumber(a)\n  b = tonumber(b)\n  -- Make sure b is not 0\n\
    \  if b == 0 then\n    return a\n  end\n  -- Make sure a is not 0\n  if a == 0\
    \ then\n    return b\n  end\n  -- Make sure a is greater than b\n  if a > b then\n\
    \    a, b = b, a\n  end\n  -- Initialize greatest common divisor to 1\n  local\
    \ greatest_common_divisor = 1\n  -- Initialize remainder to b\n  local remainder\
    \ = b\n  -- Initialize quotient to a\n  local quotient = a\n  -- Loop while remainder\
    \ is not 0\n  while remainder ~= 0 do\n    -- Update greatest common divisor\n\
    \    greatest_common_divisor = greatest_common_divisor + 1\n    -- Update remainder\n\
    \    remainder = remainder % greatest_common_divisor\n    -- Update quotient\n\
    \    quotient = quotient / greatest_common_divisor\n  end\n  return greatest_common_divisor\n\
    end", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n \
    \   return a\n  elseif b == 2 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   local m = math.floor((a + b) / 2)\n    if m == a then return b end\n    if\
    \ m == b then return a end\n    if m % a == 0 and m % b == 0 then\n      return\
    \ m\n    end\n    i = i + 1\n  end\nend", "  if a == 0 then return b end\n  if\
    \ b == 0 then return a end\n  if a > b then a, b = b, a end\n  local div = math.floor((a\
    \ % b) / b)\n  return b * div + a % b\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
