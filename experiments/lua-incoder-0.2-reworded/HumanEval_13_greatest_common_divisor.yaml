name: HumanEval_13_greatest_common_divisor
language: lua
prompt: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
  \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
  \ b)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
  \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
  \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
  \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then return a\n  elseif a == 0 then return b\n  elseif b == a then return\
    \ b\n  elseif a == b then return a\n  else\n    local c = a\n    while c > b do\n\
    \      c = c / b\n    end\n    return c\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while b > 0\
    \ do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  elseif a == b then\n    return a\n  else\n    local m = math.floor((a\
    \ + b) / 2)\n    return greatest_common_divisor(a, m) * greatest_common_divisor(b,\
    \ m)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return\
    \ a\n  elseif a % b == 0 then return greatest_common_divisor(b, a / b) end\n \
    \ return greatest_common_divisor(b, a % b)\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local div =\
    \ math.floor((a % b) / b)\n  return b * div + a % b\nend", "  -- If b is 0, then\
    \ return 0\n  if b == 0 then\n    return 0\n  end", "  -- Make sure a and b are\
    \ integers\n  a = tonumber(a)\n  b = tonumber(b)\n  -- Make sure b is not 0\n\
    \  if b == 0 then\n    return a\n  end\n  -- Make sure a is not 0\n  if a == 0\
    \ then\n    return b\n  end\n  -- Make sure a is greater than b\n  if a > b then\n\
    \    a, b = b, a\n  end\n  -- Initialize greatest common divisor to 1\n  local\
    \ greatest_common_divisor = 1\n  -- Initialize remainder to b\n  local remainder\
    \ = b\n  -- Initialize quotient to a\n  local quotient = a\n  -- Loop while remainder\
    \ is not 0\n  while remainder ~= 0 do\n    -- Update greatest common divisor\n\
    \    greatest_common_divisor = greatest_common_divisor + 1\n    -- Update remainder\n\
    \    remainder = remainder % greatest_common_divisor\n    -- Update quotient\n\
    \    quotient = quotient / greatest_common_divisor\n  end\n  return greatest_common_divisor\n\
    end", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n \
    \   return a\n  elseif b == 2 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   local m = math.floor((a + b) / 2)\n    if m == a then return b end\n    if\
    \ m == b then return a end\n    if m % a == 0 and m % b == 0 then\n      return\
    \ m\n    end\n    i = i + 1\n  end\nend", "  if a == 0 then return b end\n  if\
    \ b == 0 then return a end\n  if a > b then a, b = b, a end\n  local div = math.floor((a\
    \ % b) / b)\n  return b * div + a % b\nend", "  if b == 0 then return a\n  elseif\
    \ b == 1 then return a\n  elseif a == 0 then return b\n  elseif a == 1 then return\
    \ b\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n", "  -- If b is 0, then return a\n  if b == 0 then\n  \
    \  return a\n  end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n \
    \   return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n \
    \   return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then return\
    \ greatest_common_divisor(b, a) end\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n\
    \  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local t = b\n    b = a % t\n    a = t\n\
    \  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m % a == 0 and m % b == 0 then\n      return m\n    end\n\
    \    i = i + 1\n  end\n  return a\nend", "  -- Make sure a and b are integers\n\
    \  a = tonumber(a)\n  b = tonumber(b)\n  -- Make sure b is greater than a\n  if\
    \ b < a then\n    a, b = b, a\n  end\n  -- Return greatest common divisor of a\
    \ and b\n  local gcd = math.gcd(a, b)\n  return gcd > 0 and gcd or 1\nend", " \
    \ if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then\
    \ a, b = b, a end\n  local i = 1\n  while i <= a do\n    if a % i == 0 then\n\
    \      local r = a / i\n      if r == a then return i end\n      if r > b then\
    \ return r end\n    end\n    i = i + 1\n  end\n  return b\nend", "  if b == 0\
    \ then\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n \
    \ end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  else\n    local gcd = math.gcd(a, b)\n    return gcd > a and\
    \ gcd or b\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return\
    \ b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while\
    \ b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a == 0 then\
    \ return b\n  elseif a == 1 then return b\n  elseif a == b then return a\n  elseif\
    \ a == b + 1 then return a\n  elseif a == b - 1 then return a\n  elseif a == b\
    \ * 2 then return a\n  elseif a == b * 3 then return a\n  elseif a == b * 4 then\
    \ return a\n  elseif a == b * 5 then return a\n  elseif a == b * 6 then return\
    \ a\n  elseif a == b * 7 then return a\n  elseif a == b * 8 then return a\n  elseif\
    \ a == b * 9 then return a\n  elseif a == b * 10 then return a\n  elseif a ==\
    \ b * 11 then return a\n  elseif a == b * 12 then return a\n  elseif a == b *\
    \ 13 then return a\n  elseif a == b * 14 then return a\n  elseif a == b * 15 then\
    \ return a\n  elseif a == b * 16 then return a\n  elseif a == b * 17 then return\
    \ a\n  elseif a == b * 18 then return a\n  elseif a == b * 19 then return a\n\
    \  elseif a == b * 20 then return a\n  elseif a == b * 21 then return a\n  elseif\
    \ a == b * 22 then return a\n  elseif a == b * 23 then return a\n  elseif a ==\
    \ b * 24 then return a\n  elseif a == b * 25 then return a\n  elseif a == b *\
    \ 26 then return a\n  elseif a == b * 27 then return a\n  elseif a == b * 28 then\
    \ return a\n  elseif a == b * 29 then return a\n  elseif a == b * 30 then return\
    \ a\n  elseif a == b * 31 then return a\n  elseif a == b * 32 then return a\n\
    \  elseif a == b * 33 then return a\n  elseif a == b * 34 then return a\n  elseif\
    \ a == b * 35 then return a\n  elseif a == b * 36 then return a\n  elseif a ==\
    \ b * 37 then return a\n  elseif a == b * 38 then return a\n  elseif a == b *\
    \ 39 then return a\n  elseif a == b * 40 then return a\n  elseif a == b * 41 then\
    \ return a\n  else", "  if b == 0 then\n    return a\n  elseif b == 1 then\n \
    \   return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m == a then return b end\n    if m == b then return a end\n\
    \    if m % a == 0 and m % b == 0 then\n      a = m\n    else\n      b = m\n \
    \   end\n    i = i + 1\n  end\n  return a\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return a\n\
    \  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  --\
    \ We use \"Euclid's algorithm\" which computes the GCD of two numbers\n  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- The GCD of two numbers is the greatest integer that divides both of them.\n\
    \  -- The GCD of any positive integer is always positive.\n  -- The GCD of negative\
    \ numbers is always negative.\n  -- The GCD of zero is always zero.\n  -- The\
    \ GCD of any number is always equal to the number.\n  -- The GCD of two non-zero\
    \ numbers is always less than the smaller number.\n  -- The GCD of two zeros is\
    \ always zero.\n  -- The GCD of any non-zero number is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always greater than the smaller\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger\
    \ number.\n  -- The GCD of two non-zero numbers is always equal to the larger ",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return\
    \ b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local\
    \ div = math.gcd(a, b)\n  return div\nend", "  local gcd = math.gcd(a, b)\n  if\
    \ gcd == 1 then return b else return gcd end\nend", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while\
    \ b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend",
  "  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  -- We\
    \ use Euclid's algorithm to find the greatest common divisor\n  -- between two\
    \ integers a and b\n  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n \
    \ -- The algorithm is based on the following observation:\n  -- If x and y are\
    \ two integers and gcd(x, y) = 1, then gcd\n  -- (x, y) is the same as gcd(y,\
    \ x).\n  -- If x and y are two integers and gcd(x, y) = 0, then gcd\n  -- (x,\
    \ y) is the same as gcd(y, x).\n  -- If x and y are two integers and gcd(x, y)\
    \ = y, then gcd\n  -- (x, y) is the same as gcd(y, x).\n  -- If x and y are two\
    \ integers and gcd(x, y) = x, then gcd\n  -- (x, y) is the same as gcd(y, x).\n\
    \  -- If gcd(x, y) = 1, then gcd(x, y) = gcd(y, x).\n  -- If gcd(x, y) = 0, then\
    \ gcd(x, y) = gcd(y, x).\n  -- If gcd(x, y) = y, then gcd(x, y) = gcd(y, x).\n\
    \  -- If gcd(x, y) = x, then gcd(x, y) = gcd(y, x).\n  -- If gcd(x, y) = gcd(y,\
    \ x), then gcd(x, y) = gcd(y, x).\n  -- Therefore, we can use the following relation:\n\
    \  -- If gcd(x, y) = gcd(y, x), then gcd(x, y) = gcd(y, x).\n  -- This implies\
    \ that gcd(x, y) = gcd(y, gcd(x, y)).\n  -- Therefore, we can use the following\
    \ relation:\n  -- If gcd(x, y) = gcd(y, gcd(x, y)), then gcd(x, y) = gcd(y, x).\n\
    \  -- This implies that gcd(x, y) = gcd(y, gcd(y, x)).\n  -- Therefore, we can\
    \ use the following relation:\n  -- If gcd(x, y) = gcd(y, gcd(y, x)), then gcd(x,\
    \ y) = gcd(y, x).\n  -- This implies that gcd(x, y) = gcd(y, gcd(y, x)).\n  --\
    \ Therefore, we can use the following relation:\n  -- If gcd(x, y) = gcd(y, gcd(y,\
    \ x)), then gcd(x, y) = gcd(y, x).\n  -- This implies that gcd(x, y) = gcd(y,\
    \ gcd(y, x)).\n  -- Therefore, we can use the following relation:\n  -- If gcd(x,\
    \ y) = gcd(y, gcd(y, x)), then gcd(x, y) = gcd(y, x).\n  -- This implies that\
    \ gcd(x, y) = gcd(y, gcd(y, x)).\n  -- Therefore, we can use the following relation:\n\
    \  -- If gcd(x, y) = gcd(y, gcd(y, x)), then gcd(x, y) = gcd(y, x).\n  -- This\
    \ implies that gcd(x, y) = gcd(y, gcd(y, x)).\n  -- Therefore, we can use the\
    \ following relation", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n   \
    \ return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end", "  -- If the numbers are equal, return a\n  if a == b then return a end\n\
    \  -- If the numbers are equal, return b\n  if b == a then return b end\n  --\
    \ If the numbers are equal, return 0\n  if a == 0 then return b end\n  -- If the\
    \ numbers are equal, return b\n  if b == 0 then return a end\n  -- If b is greater\
    \ than a, return b\n  if b > a then return b end\n  -- If b is greater than a,\
    \ return a\n  if a > b then return a end\n  -- If b is greater than a, return\
    \ a\n  if b == 0 then return a end\n  -- If b is greater than a, return a\n  if\
    \ a == 0 then return a end\n  -- If b is greater than a, return a\n  if b > a\
    \ then return a end\n  -- If b is greater than a, return a\n  if a == 0 then return\
    \ a end\n  -- If b is greater than a, return a\n  if b > a then return a end\n\
    \  -- If b is greater than a, return a\n  if a == 0 then return a end\n  -- If\
    \ b is greater than a, return a\n  if b > a then return a end\n  -- If b is greater\
    \ than a, return a\n  if a == 0 then return a end\n  -- If b is greater than a,\
    \ return a\n  if b > a then return a end\n  -- If b is greater than a, return\
    \ a\n  if a == 0 then return a end\n  -- If b is greater than a, return a\n  if\
    \ b > a then return a end\n  -- If b is greater than a, return a\n  if a == 0\
    \ then return a end\n  -- If b is greater than a, return a\n  if b > a then return\
    \ a end\n  -- If b is greater than a, return a\n  if a == 0 then return a end\n\
    \  -- If b is greater than a, return a\n  if b > a then return a end\n  -- If\
    \ b is greater than a, return a\n  if a == 0 then return a end\n  -- If b is greater\
    \ than a, return a\n  if b > a then return a end\n  -- If b is greater than a,\
    \ return a\n  if a == 0 then return a end\n  -- If b is greater than a, return\
    \ a\n  if b > a then return a end\n  -- If b is greater than a, return a\n  if\
    \ a == 0 then return a end\n  -- If b is greater than a, return a\n  if b > a\
    \ then return a end\n  -- If b is greater than a, return a\n  if a == 0 then return\
    \ a end\n  -- If b is greater than a, return a\n  if b > a then return a end",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n   \
    \ return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend", "  -- If b is 0, then\
    \ return a\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n    return\
    \ a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then return a\n  elseif b == 1 then return a\n  else return greatest_common_divisor(b,\
    \ a % b) end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n  \
    \  return a\n  elseif a > b then\n    local tmp = a\n    a = b\n    b = tmp\n\
    \  end\n  local i = 1\n  while b > 0 do\n    local tmp = a\n    a = b\n    b =\
    \ tmp % b\n    i = i + 1\n  end\n  return i\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif b == 0 then\n\
    \    return a\n  else\n    local m = math.floor(a/b);\n    if a % b == 0 then\n\
    \      return m * greatest_common_divisor(b, a - m * b)\n    else\n      return\
    \ m * greatest_common_divisor(b, a - m * b)\n    end\n  end\nend", "  local gcd\
    \ = math.gcd(a, b)\n  if gcd == 1 then\n    return a\n  else\n    return b\n \
    \ end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then return a\n  elseif b == 1 then return a\n  elseif a == 0 then return\
    \ b\n  elseif a == 1 then return b\n  elseif a == b then return a\n  elseif a\
    \ == (b % b) then return greatest_common_divisor(b, a % b)\n  else return greatest_common_divisor(b,\
    \ a % b) + 1\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while\
    \ b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend",
  "  local gcd = math.gcd(a, b)\n  if gcd == 1 then\n    return a\n  else\n    return\
    \ b\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a ==\
    \ b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n    return\
    \ greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return\
    \ b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local\
    \ div = math.gcd(a, b)\n  return div * div\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- We use Euclid's algorithm to find the greatest common\
    \ divisor.\n  -- The algorithm is as follows:\n  --\n  --     1. Initialize a\
    \ to be the smaller of the two given numbers.\n  --     2. Initialize b to be\
    \ the larger of the two given numbers.\n  --     3. While a is less than b:\n\
    \  --         1. Add 1 to a and b.\n  --         2. Subtract a from b while b\
    \ is greater than a.\n  --         3. Return b.\n  --     4. While a is greater\
    \ than b:\n  --         1. Add 1 to a and b.\n  --         2. Subtract b from\
    \ a, while a is greater than b.\n  --         3. Return a.\n  --\n  -- This algorithm\
    \ is O(log(a) + log(b)) where a and b are the lengths of\n  -- two integers respectively.\n\
    \  -- See https://en.wikipedia.org/wiki/Euclidean_algorithm#Algorithm_to_find_greatest_common_divisor\n\
    \  -- See https://rosettacode.org/wiki/Greatest_common_divisor#Lua\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#Lua\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#Python\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n  -- See\
    \ https://rosettacode.org/wiki/Euclidean_algorithm#Java\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#2\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#3\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#4\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#5\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#6\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#7\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#8\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#9\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#10\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#11\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#12\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#13\n", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return a\n  elseif b == a then\n    return a\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a % b)\n\
    \  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif\
    \ a % b == 0 then return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend", "  if b == 0 then return a\n  elseif b == 1 then return\
    \ b\n  elseif a == 0 then return b\n  elseif a == 1 then return a\n  elseif a\
    \ == b then return a\n  elseif a == b + 1 then return a\n  elseif a == b - 1 then\
    \ return b\n  elseif a == b + 2 then return greatest_common_divisor(b - 1, b -\
    \ 2)\n  elseif a == b - 2 then return greatest_common_divisor(b - 1, b + 2)\n\
    \  elseif a == b + 3 then return greatest_common_divisor(b - 1, b - 2)\n  elseif\
    \ a == b - 3 then return greatest_common_divisor(b + 2, b + 3)\n  elseif a ==\
    \ b + 4 then return greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 4\
    \ then return greatest_common_divisor(b + 2, b + 3)\n  elseif a == b + 5 then\
    \ return greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 5 then return\
    \ greatest_common_divisor(b + 2, b + 3)\n  elseif a == b + 6 then return greatest_common_divisor(b\
    \ - 1, b - 2)\n  elseif a == b - 6 then return greatest_common_divisor(b + 2,\
    \ b + 3)\n  elseif a == b + 7 then return greatest_common_divisor(b - 1, b - 2)\n\
    \  elseif a == b - 7 then return greatest_common_divisor(b + 2, b + 3)\n  elseif\
    \ a == b + 8 then return greatest_common_divisor(b - 1, b - 2)\n  elseif a ==\
    \ b - 8 then return greatest_common_divisor(b + 2, b + 3)\n  elseif a == b + 9\
    \ then return greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 9 then\
    \ return greatest_common_divisor(b + 2, b + 3)\n  elseif a == b + 10 then return\
    \ greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 10 then return greatest_common_divisor(b\
    \ + 2, b + 3)\n  elseif a == b + 11 then return greatest_common_divisor(b - 1,\
    \ b - 2)\n  elseif a == b - 11 then return greatest_common_divisor(b + 2, b +\
    \ 3)\n  elseif a == b + 12 then return greatest_common_divisor(b - 1, b - 2)\n\
    \  elseif a == b", "  local gcd = math.gcd(a, b)\n  if gcd == 1 then return b\
    \ else return gcd end\nend", "  if b == 0 then\n    return a\n  elseif b == 1\
    \ then\n    return b\n  else\n    return greatest_common_divisor(b, a % b)\n \
    \ end\nend", "  if a == 0 then return b end\n  if b == 0 then return a end\n \
    \ if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a\
    \ = b\n    b = c\n  end\n  return a\nend", "  -- If b is 0, then return a\n  if\
    \ b == 0 then\n    return a\n  end", "  -- TODO: Use Euclid's algorithm for this.\n\
    \  assert(type(b) == 'number')\n  assert(type(a) == 'number')\n  assert(a >= 0\
    \ and b >= 0)\n  assert(a > b)\n  if a == 0 then\n    return b\n  elseif b ==\
    \ 0 then\n    return a\n  else\n    local gcd = math.gcd(a, b)\n    if gcd ==\
    \ 1 then\n      return a\n    else\n      return gcd\n    end\n  end\nend", " \
    \ -- Special case: if the divisor is 1, return 1\n  if a == 1 then\n    return\
    \ 1\n  end\n  -- Special case: if the divisor is zero, return 0\n  if b == 1 then\n\
    \    return 0\n  end\n  -- Special case: if the divisor is 1, return 1\n  if a\
    \ == 0 then\n    return 1\n  end\n  -- Special case: if the divisor is zero, return\
    \ 0\n  if b == 0 then\n    return 0\n  end\n  -- Special case: if the divisor\
    \ is 1, return 1\n  if a == 1 then\n    return 1\n  end\n  -- Special case: if\
    \ the divisor is zero, return 0\n  if b == 1 then\n    return 0\n  end\n  -- Special\
    \ case: if the divisor is 1, return 1\n  if a == 0 then\n    return 1\n  end\n\
    \  -- Special case: if the divisor is zero, return 0\n  if b == 0 then\n    return\
    \ 0\n  end\n  -- Special case: if the divisor is 1, return 1\n  if a == 1 then\n\
    \    return 1\n  end\n  -- Special case: if the divisor is zero, return 0\n  if\
    \ b == 1 then\n    return 0\n  end\n  -- Special case: if the divisor is 1, return\
    \ 1\n  if a == 0 then\n    return 1\n  end\n  -- Special case: if the divisor\
    \ is zero, return 0\n  if b == 0 then\n    return 0\n  end\n  -- Special case:\
    \ if the divisor is 1, return 1\n  if a == 1 then\n    return 1\n  end\n  -- Special\
    \ case: if the divisor is zero, return 0\n  if b == 1 then\n    return 0\n  end\n\
    \  -- Special case: if the divisor is 1, return 1\n  if a == 0 then\n    return\
    \ 1\n  end\n  -- Special case: if the divisor is zero, return 0\n  if b == 0 then\n\
    \    return 0\n  end\n  -- Special case: if the divisor is 1, return 1\n  if a\
    \ == 1 then\n    return 1\n  end\n  -- Special case: if the divisor is zero, return\
    \ 0\n  if b == 1 then\n    return 0\n  end\n  -- Special case: if the divisor\
    \ is 1, return 1\n  if a == 0 then\n    return 1\n  end\n  -- Special case: if\
    \ the divisor is zero, return 0\n  if b == 0 then\n    return 0\n  end\n  -- Special\
    \ case: if the divisor is 1, return 1\n  if a == 1 then\n    return 1\n  end\n\
    \  -- Special case: if the divisor is zero, return 0\n", "  -- If b is 0, then\
    \ return a\n  if b == 0 then\n    return a\n  end", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   local m = math.floor((a + b) / 2)\n    if m == a then return b end\n    if\
    \ m == b then return a end\n    if m % a == 0 and m % b == 0 then\n      a = m\n\
    \    else\n      b = m\n    end\n    i = i + 1\n  end\n  return a\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n\
    \  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return a\n  elseif b == a then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return\
    \ b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local\
    \ div = math.floor((a % b) / b)\n  return b * div + b\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local\
    \ i = 1\n  while i <= a do\n    if i % b == 0 then return i end\n    i = i + 1\n\
    \  end\n  return a\nend", "  if b == 0 then return a\n  elseif b == 1 then return\
    \ a\n  elseif a == 0 then return b\n  elseif a == 1 then return b\n  elseif a\
    \ == b then return a\n  else\n    local c = greatest_common_divisor(b, a % b)\n\
    \    return c * b + (a % b)\n  end\nend", "  if a == 0 then\n    return b\n  elseif\
    \ b == 0 then\n    return a\n  elseif b == a then\n    return a\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return a\n\
    \  elseif b == 1 then return a\n  elseif a == 0 then return b\n  elseif a == 1\
    \ then return b\n  elseif a == b then return a\n  elseif a == b + 1 then return\
    \ a\n  elseif a == b - 1 then return b\n  elseif a == b * 2 then return a\n  elseif\
    \ a == b * 3 then return b\n  elseif a == b * 4 then return a\n  elseif a == b\
    \ * 5 then return b\n  elseif a == b * 6 then return a\n  elseif a == b * 7 then\
    \ return b\n  elseif a == b * 8 then return a\n  elseif a == b * 9 then return\
    \ b\n  elseif a == b * 10 then return a\n  elseif a == b * 11 then return b\n\
    \  elseif a == b * 12 then return a\n  elseif a == b * 13 then return b\n  elseif\
    \ a == b * 14 then return a\n  elseif a == b * 15 then return b\n  elseif a ==\
    \ b * 16 then return a\n  elseif a == b * 17 then return b\n  elseif a == b *\
    \ 18 then return a\n  elseif a == b * 19 then return b\n  elseif a == b * 20 then\
    \ return a\n  elseif a == b * 21 then return b\n  elseif a == b * 22 then return\
    \ a\n  elseif a == b * 23 then return b\n  elseif a == b * 24 then return a\n\
    \  elseif a == b * 25 then return b\n  elseif a == b * 26 then return a\n  elseif\
    \ a == b * 27 then return b\n  elseif a == b * 28 then return a\n  elseif a ==\
    \ b * 29 then return b\n  elseif a == b * 30 then return a\n  elseif a == b *\
    \ 31 then return b\n  elseif a == b * 32 then return a\n  elseif a == b * 33 then\
    \ return b\n  elseif a == b * 34 then return a\n  elseif a == b * 35 then return\
    \ b\n  elseif a == b * 36 then return a\n  elseif a == b * 37 then return b\n\
    \  elseif a == b * 38 then return a\n  elseif a == b * 39 then return b\n  elseif\
    \ a == b * 40 then return a\n  elseif a == b * 41 then return b\n  else", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return a\n\
    \  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  -- If the numbers are equal,\
    \ return 1\n  if a == b then return 1 end\n  -- If the numbers are odd, return\
    \ b\n  if a % 2 == 1 then return b end\n  -- Otherwise, return a\n  return a\n\
    end", "  if a == 0 then return b end\n  if b == 0 then return a end\n  if a >\
    \ b then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n \
    \   b = c\n  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif\
    \ b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n   \
    \ return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end", "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    local gcd = math.gcd(a, b)\n    return greatest_common_divisor(b , gcd)\n\
    \  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a,\
    \ b = b, a end\n  local div = math.floor((a % b) / b)\n  if div == 0 then return\
    \ b end\n  return greatest_common_divisor(b, div)\nend", "  if b == 0 then return\
    \ a\n  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  return greatest_common_divisor(b, a / b) + 1\nend", "  if b ==\
    \ 0 then return a\n  elseif b == 1 then return a\n  elseif a == 0 then return\
    \ b\n  elseif a == 1 then return b\n  elseif a == b then return a\n  elseif a\
    \ % b == 0 then return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend", "  local remainder\n  local i = 1\n  while i <= a do\n\
    \    remainder = a % i\n    if remainder == 0 then\n      return i\n    end\n\
    \    i = i + 1\n  end\n  return b\nend", "  if b == 0 then return a\n  elseif\
    \ b == 1 then return a\n  elseif b == a then return b\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  local\
    \ gcd = math.gcd(a, b)\n  if gcd == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ gcd)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n \
    \   return a\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return\
    \ a\n  elseif b == 1 then return a\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b)\n  else return greatest_common_divisor(b, a / b) + 1\n  end\nend", " \
    \ if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b then\
    \ a, b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m == a then return b end\n    if m == b then return a end\n\
    \    if m % a == 0 then a = m end\n    if m % b == 0 then b = m end\n    i = i\
    \ + 1\n  end\n  return a\nend", "  if b == 0 then\n    return a\n  elseif b ==\
    \ 1 then\n    return a\n  elseif b == a then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while b > 0\
    \ do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend", "  local\
    \ gcd = math.gcd(a, b)\n  if gcd == 1 then return b else return gcd end\nend",
  "  -- We use \"a\" and \"b\" as the parameters to avoid confusion with\n  -- local\
    \ variables in \"greatest_common_divisor_helper\".\n  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  -- We\
    \ use \"a\" and \"b\" as the parameters to avoid confusion with\n  -- local variables\
    \ in \"greatest_common_divisor_helper\".\n  if a == 1 then return b end\n  if\
    \ b == 1 then return a end\n  if a > b then a, b = b, a end\n  -- We use \"a\"\
    \ and \"b\" as the parameters to avoid confusion with\n  -- local variables in\
    \ \"greatest_common_divisor_helper\".\n  local d\n  local t = a\n  while t > 0\
    \ do\n    d, t = b, t % b\n  end\n  return d\nend", "  if b == 0 then return a\n\
    \  elseif b == a then return b\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b) end\n  return greatest_common_divisor(b, a % b)\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then\n\
    \    return b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return\
    \ a\n  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  if a == 0 then return b\
    \ end\n  if b == 0 then return a end\n  if a > b then return greatest_common_divisor(b,\
    \ a) end\n  if a < b then return greatest_common_divisor(a, b) end\n  local c\
    \ = a\n  while c > 0 do\n    local d = b\n    while d > 0 do\n      if c % d ==\
    \ 0 then\n        return c\n      end\n      d = d - 1\n    end\n    c = c - 1\n\
    \  end\n  return c\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n    local c = a %\
    \ b\n    a = b\n    b = c\n  end\n  return a\nend", "  if a == 0 then\n    return\
    \ b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return a\n\
    \  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n  \
    \  local div = math.gcd(a, b)\n    return greatest_common_divisor(b, a % div)\n\
    \  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b == 0 then\
    \ return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend", "  -- We use \"a\" and \"b\" as the parameters to avoid confusion\
    \ with\n  -- local variables in \"greatest_common_divisor_helper\".\n  local function\
    \ greatest_common_divisor_helper(a, b)\n    if b == 0 then\n      return a\n \
    \   elseif b == 1 then\n      return b\n    else\n      return greatest_common_divisor_helper(a\
    \ % b, b)\n    end\n  end\n  return greatest_common_divisor_helper(a, b)\nend",
  "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b, a\
    \ % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n \
    \   return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  -- If b is 0, return a\n  if b == 0 then\n    return a\n  end", "  if a == 0\
    \ then return b end\n  if b == 0 then return a end\n  if a > b then a, b = b,\
    \ a end\n  local i = 1\n  while i <= a do\n    local t = b\n    b = a % t\n  \
    \  a = t\n    i = i + 1\n  end\n  return b\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif a\
    \ == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n   \
    \ return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end", "  local gcd = math.gcd(a, b)\n  return math.gcd(a, gcd)\nend", "  if a\
    \ == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b\
    \ = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n\
    \  return a\nend", "  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n\
    \    return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return\
    \ b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  local\
    \ i = 1\n  while i <= a do\n    local t = b\n    b = a % t\n    a = t\n    i =\
    \ i + 1\n  end\n  return b\nend", "  local gcd = math.gcd(a, b)\n  return math.gcd(a,\
    \ gcd)\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return\
    \ b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if\
    \ b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   if i % b == 0 then\n      return i\n    end\n    i = i + 1\n  end\n  return\
    \ a\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  -- We use Lua 5.2's math.gcd\
    \ function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/", "  if b == 0 then return a\n  elseif b\
    \ == 1 then return a\n  else return greatest_common_divisor(b, a % b)\n  end\n\
    end", "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a %\
    \ b == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a / b) + 1\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n  \
    \  return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then return\
    \ a\n  elseif a == 0 then return b\n  elseif a == b then return a\n  elseif a\
    \ > b then return greatest_common_divisor(b, a) end\nend", "  if a == 0 then\n\
    \    return b\n  elseif b == 0 then\n    return a\n  elseif a == b then\n    return\
    \ a\n  else\n    local m = math.floor((a + b) / 2)\n    return greatest_common_divisor(a,\
    \ m) * greatest_common_divisor(b, m)\n  end\nend", "  if b == 0 then\n    return\
    \ a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if b == 1 then\n    return a\n  elseif b == 0 then\n\
    \    return 0\n  elseif b == a then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm", "  if b == 0 then\n \
    \   return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  if a == 0 then return b end\n  if b == 0 then return\
    \ a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while i <= a do\n \
    \   if a % i == 0 then\n      local t = i\n      i = 1\n      while i <= b do\n\
    \        if b % i == 0 then\n          t = i\n          break\n        end\n \
    \       i = i + 1\n      end\n      if t > b then return t end\n    end\n    i\
    \ = i + 1\n  end\n  return a\nend", "  if a == 0 then return b end\n  if b ==\
    \ 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while\
    \ i <= a do\n    local c = a % i\n    if c == 0 then\n      a = i\n    else\n\
    \      i = i\n    end\n  end\n  return a\nend", "  -- If b is 0, then return a\n\
    \  if b == 0 then\n    return a\n  end", "  -- If b is 0, then return a\n  if\
    \ b == 0 then\n    return a\n  end", "  if a == 0 then return b end\n  if b ==\
    \ 0 then return a end\n  if a > b then a, b = b, a end\n  local i = 1\n  while\
    \ i <= a do\n    local t = b\n    b = a % t\n    a = t\n    i = i + 1\n  end\n\
    \  return b\nend", "  if b == 0 then\n    return a\n  elseif b == 1 then\n   \
    \ return b\n  else\n    return greatest_common_divisor(b, a % b)\n  end\nend",
  "  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end", "  if a\
    \ == 0 then return b end\n  if b == 0 then return a end\n  if a > b then a, b\
    \ = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n    b = c\n  end\n\
    \  return a\nend", "  -- If b is 0, then return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif\
    \ a % b == 0 then return greatest_common_divisor(b, a / b) end\n  local c = 1\n\
    \  while a % b == 0 do\n    a = a / b\n    c = c + 1\n  end\n  return c\nend",
  "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n  \
    \  return greatest_common_divisor(b, a % b)\n  end\nend", "  if b == 0 then\n\
    \    return a\n  elseif b == 1 then\n    return b\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend", "  -- If b is 0, return a\n  if b == 0 then\n    return\
    \ a\n  end", "  if a == 0 then return b end\n  if b == 0 then return a end\n \
    \ if a > b then a, b = b, a end\n  while b > 0 do\n    local t = b\n    b = a\
    \ % t\n    a = t\n  end\n  return a\nend", "  if a == 0 then return b end\n  if\
    \ b == 0 then return a end\n  if a > b then a, b = b, a end\n  while b > 0 do\n\
    \    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend", "  if b ==\
    \ 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n    return\
    \ greatest_common_divisor(b, a % b)\n  end\nend", "  if a == 0 then return b end\n\
    \  if b == 0 then return a end\n  if a > b then a, b = b, a end\n  while b > 0\
    \ do\n    local c = a % b\n    a = b\n    b = c\n  end\n  return a\nend", "  --\
    \ Special case: if the divisor is 1, return 1\n  if a == 1 then\n    return 1\n\
    \  end", "  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n\
    \  else\n    return greatest_common_divisor(b, a % b)\n  end\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
