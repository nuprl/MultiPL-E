name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
  \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n\
    \    result = result .. tostring(digit)\n    x = math.floor(x * 100) / 100\n \
    \ end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n  if\
    \ x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n  \
    \  x = x / 10\n    result = result .. digit\n  end\n  if digits > 0 then\n   \
    \ result = result .. circular_shift(x, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local shift = shift or digits\n \
    \ local digits_shifted = math.floor((digits + shift) / shift)\n  local digits_remaining\
    \ = digits - digits_shifted\n  local digits_reversed = digits_shifted .. '0'\n\
    \  local result = string.rep(digits_reversed, digits_remaining)\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^digit))\n    if digit > 0 then\n      result = result\
    \ .. digit\n    end\n  end\n  if digits > 0 then\n    result = result .. math.floor((x\
    \ - math.floor(x)) / (10^digits))\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local result = \"\"\n  local i = math.ceil(digits\
    \ / shift)\n  while i > 0 do\n    local digit = x\n    local carry = 0\n    for\
    \ j = 1, shift do\n      digit = digit * 10 + carry\n      carry = digit / 10\n\
    \      digit = digit % 10\n    end\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    end\n    result = result .. digit\n    i = i - 1\n  end\n  if\
    \ digits > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor(x * 10\
    \ / math.pow(10, digits - digit))\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ shifts = math.pow(10, shift)\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * shifts)\n    local remainder = x % shifts -- remainder is 0 if x is divisible\
    \ by shifts\n    x = x // shifts -- x is now the integer part of x divided by\
    \ shifts\n    if remainder > 0 then\n      result = result .. \"0\" .. digit\n\
    \    else\n      result = result .. digit\n    end\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x - math.floor(x)) * (10\
    \ ** i)) / (10 ** i)\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10 ** digit))\n    result = result .. digit\n    x = math.floor((x - digit)\
    \ * (10 ** shift))\n  end\n  if shift > digits then\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** (digits - 1)))\n    result = result .. digit\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local power = math.pow(10, digits)\n  while x > power\
    \ do\n    local digit = math.floor(x / power)\n    local remainder = x % power\n\
    \    x = remainder\n    result = result .. digit\n  end\n  if shift > digits then\n\
    \    local digit = math.floor(x / power)\n    local remainder = x % power\n  \
    \  x = remainder\n    result = result .. digit\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x -\
    \ math.floor(x)) / (math.pow(10, digit)))\n    result = result .. digit\n    x\
    \ = math.floor(x * 10 / math.pow(10, digit - shift))\n  end\n  if digits > 0 then\n\
    \    result = result .. math.floor(x * 10 / math.pow(10, digits))\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 /\
    \ math.pow(10, i))\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local power\
    \ = math.pow(10, shift)\n  while digits > 0 do\n    local digit = math.floor((x\
    \ / power) % 10)\n    result = string.sub(result, 1, digits-1) + digit + result\n\
    \    x = math.floor((x / power) / 10)\n    digits = digits - 1\n  end\n  if digits\
    \ > 0 then\n    result = string.sub(result, 1, digits-1) + result\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local carry = 0\n  local digit\n  for i = 1, digits do\n    digit =\
    \ math.floor((x / 10) * 10 + carry) -- integer division\n    carry = digit - math.floor(digit)\n\
    \    result = string.sub(result, -#digit+1, -#digit+1) + digit\n  end\n  if shift\
    \ > digits then\n    result = string.sub(result, -#digits)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 / math.pow(10,\
    \ i))\n    result = result .. digit\n  end\n  if digits > 0 then\n    result =\
    \ circular_shift(result, digits - shift)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    x = x % 10\n\
    \    result = result .. digit\n  end\n  if x > 0 then\n    result = result ..\
    \ x\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. digit\n    x = x - digit\n  end\n \
    \ if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local remainder = x % 10\n    local carry = 0\n    if remainder > 0 then\n\
    \      carry = 1\n      remainder = math.floor((remainder / 10) * 10)\n    end\n\
    \    local digit = digit + remainder + carry\n    x = x\n    if x > 0 then\n \
    \     x = math.floor(x / 10)\n    end\n    result = result .. digit\n  end\n \
    \ if digits > 0 then\n    result = result .. circular_shift(x, digits - 1)\n \
    \ end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = string.format(\"%c%c\", math.abs(digit - digits),\
    \ result)\n    x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"\
    %c%c\", math.abs(x), result)\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
