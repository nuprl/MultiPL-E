name: HumanEval_65_circular_shift
language: lua
prompt: "-- Circular shift the digits of the integer x, shift the digits right by\
  \ shift\n-- and return the result as a string.\n-- If shift > number of digits,\
  \ return digits reversed.\n-- >>> circular_shift(12, 1)\n-- '21'\n-- >>> circular_shift(12,\
  \ 2)\n-- '12'\nlocal function circular_shift(x, shift)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = circular_shift\n\
  \    lu.assertEquals(candidate(100, 2), '001')\n    lu.assertEquals(candidate(12,\
  \ 2), '12')\n    lu.assertEquals(candidate(97, 8), '79')\n    lu.assertEquals(candidate(12,\
  \ 1), '21')\n    lu.assertEquals(candidate(11, 101), '11')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10) % 10\n\
    \    result = result .. tostring(digit)\n    x = math.floor(x * 100) / 100\n \
    \ end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n  if\
    \ x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n  \
    \  x = x / 10\n    result = result .. digit\n  end\n  if digits > 0 then\n   \
    \ result = result .. circular_shift(x, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local shift = shift or digits\n \
    \ local digits_shifted = math.floor((digits + shift) / shift)\n  local digits_remaining\
    \ = digits - digits_shifted\n  local digits_reversed = digits_shifted .. '0'\n\
    \  local result = string.rep(digits_reversed, digits_remaining)\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10^digit))\n    if digit > 0 then\n      result = result\
    \ .. digit\n    end\n  end\n  if digits > 0 then\n    result = result .. math.floor((x\
    \ - math.floor(x)) / (10^digits))\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local result = \"\"\n  local i = math.ceil(digits\
    \ / shift)\n  while i > 0 do\n    local digit = x\n    local carry = 0\n    for\
    \ j = 1, shift do\n      digit = digit * 10 + carry\n      carry = digit / 10\n\
    \      digit = digit % 10\n    end\n    if carry > 0 then\n      result = result\
    \ .. \"1\"\n    end\n    result = result .. digit\n    i = i - 1\n  end\n  if\
    \ digits > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor(x * 10\
    \ / math.pow(10, digits - digit))\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ shifts = math.pow(10, shift)\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * shifts)\n    local remainder = x % shifts -- remainder is 0 if x is divisible\
    \ by shifts\n    x = x // shifts -- x is now the integer part of x divided by\
    \ shifts\n    if remainder > 0 then\n      result = result .. \"0\" .. digit\n\
    \    else\n      result = result .. digit\n    end\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x - math.floor(x)) * (10\
    \ ** i)) / (10 ** i)\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local digit\n\
    \  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10 ** digit))\n    result = result .. digit\n    x = math.floor((x - digit)\
    \ * (10 ** shift))\n  end\n  if shift > digits then\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** (digits - 1)))\n    result = result .. digit\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local power = math.pow(10, digits)\n  while x > power\
    \ do\n    local digit = math.floor(x / power)\n    local remainder = x % power\n\
    \    x = remainder\n    result = result .. digit\n  end\n  if shift > digits then\n\
    \    local digit = math.floor(x / power)\n    local remainder = x % power\n  \
    \  x = remainder\n    result = result .. digit\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x -\
    \ math.floor(x)) / (math.pow(10, digit)))\n    result = result .. digit\n    x\
    \ = math.floor(x * 10 / math.pow(10, digit - shift))\n  end\n  if digits > 0 then\n\
    \    result = result .. math.floor(x * 10 / math.pow(10, digits))\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 /\
    \ math.pow(10, i))\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - 1)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local power\
    \ = math.pow(10, shift)\n  while digits > 0 do\n    local digit = math.floor((x\
    \ / power) % 10)\n    result = string.sub(result, 1, digits-1) + digit + result\n\
    \    x = math.floor((x / power) / 10)\n    digits = digits - 1\n  end\n  if digits\
    \ > 0 then\n    result = string.sub(result, 1, digits-1) + result\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local carry = 0\n  local digit\n  for i = 1, digits do\n    digit =\
    \ math.floor((x / 10) * 10 + carry) -- integer division\n    carry = digit - math.floor(digit)\n\
    \    result = string.sub(result, -#digit+1, -#digit+1) + digit\n  end\n  if shift\
    \ > digits then\n    result = string.sub(result, -#digits)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 / math.pow(10,\
    \ i))\n    result = result .. digit\n  end\n  if digits > 0 then\n    result =\
    \ circular_shift(result, digits - shift)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    x = x % 10\n\
    \    result = result .. digit\n  end\n  if x > 0 then\n    result = result ..\
    \ x\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. digit\n    x = x - digit\n  end\n \
    \ if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    local remainder = x % 10\n    local carry = 0\n    if remainder > 0 then\n\
    \      carry = 1\n      remainder = math.floor((remainder / 10) * 10)\n    end\n\
    \    local digit = digit + remainder + carry\n    x = x\n    if x > 0 then\n \
    \     x = math.floor(x / 10)\n    end\n    result = result .. digit\n  end\n \
    \ if digits > 0 then\n    result = result .. circular_shift(x, digits - 1)\n \
    \ end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = string.format(\"%c%c\", math.abs(digit - digits),\
    \ result)\n    x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"\
    %c%c\", math.abs(x), result)\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10)\n    local remainder\
    \ = x % 10\n    x = remainder\n    result = result .. digit\n    if x > 0 then\n\
    \      result = result .. \"0\"\n    end\n  end\n  if digits > 0 then\n    result\
    \ = result .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits\
    \ - 1) / 3)\n    local remainder = digits % 3\n    digits = digits - digit\n \
    \   result = string.sub(tostring(x), digit, digit+1) + result\n    if remainder\
    \ == 0 then\n      break\n    end\n  end\n  if digits > 0 then\n    result = string.sub(tostring(x),\
    \ digit, digit+1) + result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = math.floor(digits / 2)\n  while\
    \ i > 0 do\n    local digit = math.floor(x * 10 + 0.5) / 10\n    local remainder\
    \ = x - digit * 10\n    local result = result .. digit\n    x = remainder\n  \
    \  i = i - 1\n  end\n  if digits > 0 then\n    result = result .. math.floor(x\
    \ * 10 + 0.5) / 10\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) * 10 / math.pow(10, i))\n    if digit > 9 then\n      result\
    \ = result .. string.char(digit - 10)\n    else\n      result = result .. string.char(digit)\n\
    \    end\n  end\n  if digits > 0 then\n    result = circular_shift(result, digits\
    \ - shift)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) + 0.5)\n    x = x / 10\n    result = result .. tostring(digit)\n  end\n\
    \  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. digit\n  end\n  if x\
    \ > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n\
    \    result = string.format(\"%s%s\", result, digit)\n  end\n  if digits > 0 then\n\
    \    result = string.format(\"%s%s\", result, circular_shift(math.floor(x * 10\
    \ / math.pow(10, digits)), shift + 1))\n  end\n  return result\nend", "  local\
    \ digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\
    \ + shift\n  local shift_digits_str = string.format(\"%0*d\", shift_digits, digits)\n\
    \  for i = 1, shift_digits do\n    local digit = shift_digits_str:sub(i, i)\n\
    \    result = result .. digit\n  end\n  if shift_digits > 0 then\n    result =\
    \ result:reverse()\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) / (10 ** i))\n    result = result .. digit\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local\
    \ shifts = math.pow(10, shift)\n  local digit\n  while digits > 0 do\n    digit\
    \ = math.floor((digits - 1) / shifts)\n    result = string.format(\"%s%s\", result,\
    \ string.format(\"%0*d\", shift, math.floor((digits - 1) % shifts)))\n    digits\
    \ = digits - shift\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    result = string.format(\"%d%s\", digit, result)\n    x = x - digit\n  end\n\
    \  if x > 0 then\n    result = string.format(\"%d%s\", x, result)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local carry = 0\n  local digit\n  for digit = 1, digits do\n    local\
    \ digit = math.floor((x / 10) * 10)\n    local digit = math.floor(digit + carry)\n\
    \    carry = digit - digit\n    digit = math.floor(digit / 10)\n    result = result\
    \ .. digit\n  end\n  if shift > digits then\n    result = result .. carry\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local power = math.pow(10, digits)\n  while x > power\
    \ do\n    local digit = math.floor(x/power)\n    local remainder = x - digit *\
    \ power\n    result = result .. digit\n    x = remainder\n    power = math.pow(10,\
    \ digits)\n  end\n  return result .. tostring(x)\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    local remainder = x - digit * 10\n    if remainder > 0\
    \ then\n      result = result .. \"0\" .. digit\n    else\n      result = result\
    \ .. digit\n    end\n    x = remainder\n  end\n  if digits > 0 then\n    result\
    \ = result .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5) / 10\n    result = result .. tostring(digit)\n  end\n  if digits\
    \ > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) /\
    \ 10\n    local digitstr = tostring(digit)\n    if digit > 0 then\n      result\
    \ = digitstr .. result\n    end\n  end\n  if digits > 0 then\n    result = tostring(math.floor(x\
    \ / 10)) .. result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor(x * 10 / math.pow(10, digit))\n    result = result\
    \ .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result ..\
    \ \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.pow(10, shift)) + digits)\n\
    \  local digits_shifted_reversed = math.floor(math.log10(math.pow(10, -shift))\
    \ + digits)\n  local digits_shifted_reversed_str = string.rep(\"0\", digits_shifted_reversed)\n\
    \  local digits_shifted_reversed_str = string.reverse(digits_shifted_reversed_str)\n\
    \  local digits_shifted_str = string.rep(\"0\", digits_shifted)\n  local digits_shifted_str\
    \ = string.reverse(digits_shifted_str)\n  local digits_str = string.rep(\"0\"\
    , digits)\n  local digits_str = string.reverse(digits_str)\n  local digits_reversed_str\
    \ = string.rep(\"0\", digits_shifted_reversed)\n  local digits_reversed_str =\
    \ string.reverse(digits_reversed_str)\n  local digits_reversed_str = string.reverse(digits_reversed_str)\n\
    \  local digits_reversed_str = string.reverse(digits_reversed_str)\n  local digits_reversed_str\
    \ = string.reverse(digits_reversed_str)\n  local digits_reversed_str = string.reverse(digits_reversed_str)\n\
    \  local digits_reversed_str = string.reverse(digits_reversed_str)\n  local digits_reversed_str\
    \ = string.reverse(digits_reversed_str)\n  local digits_reversed_str = string.reverse(digits_reversed_str)\n\
    \  local digits_reversed_str = string.reverse(digits_reversed_str)\n  local digits_reversed_str\
    \ = string.reverse(digits_reversed_str)\n  local digits_reversed_str = string.reverse(digits_reversed_str)\n\
    \  local digits_reversed_str = string.reverse(digits_reversed_str)\n  local digits_reversed_str\
    \ = string.reverse(digits_reversed_str)\n  local digits_reversed_str = string.reverse(digits_reversed_str)\n\
    \  local digits_reversed_str = string.reverse(digits_reversed_str)\n  local digits_reversed_str\
    \ = string.reverse(digits_reversed_str)\n  local digits_reversed_str = string.reverse(digits_reversed_str)\n\
    \  local digits_reversed_str = string.reverse(digits_reversed_str)\n  local digits_reversed_str\
    \ = string.reverse(digits_reversed_str)\n  local digits_reversed_str = string.reverse(digits_reversed_str)\n\
    \  local digits_reversed_str = string.reverse(digits_reversed_str)\n  ", "  local\
    \ digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n  local\
    \ digits_reversed = {}\n  local digits_shifted = {}\n  for i = 1, shift do\n \
    \   digits_reversed[i] = digits[#digits]\n    digits_shifted[i] = digits[#digits-i-1]\n\
    \  end\n  return table.concat(digits_shifted, '.')\nend", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = digits[1]\n  for i = 2, #digits do\n    result\
    \ = result .. digits[i] .. digits[i - shift]\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.log10(math.pow(10,\
    \ shift + 1)))\n  local digits_shift_reversed = math.floor(math.log10(math.pow(10,\
    \ shift + 2)))\n  local digits_shift_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ shift + 3)))\n  local digits_shift_reversed_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ shift + 4)))\n  local digits_shift_reversed_reversed_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ shift + 5)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 6)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 7)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 8)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 9)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 10)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 11)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 12)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 13)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 14)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + 15)))\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + ", "  local digits = tostring(x).\n\
    \    split('.')\n  local result = digits[1]\n  local shift = shift or 1\n  local\
    \ shift_digits = tostring(shift).\n    split('.')\n  local shift_digit = shift_digits[1]\n\
    \  while shift > 0 do\n    shift_digit = shift_digit .. shift_digit\n    shift\
    \ = shift - 1\n  end\n  result = result .. shift_digit\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local shifts\
    \ = math.pow(10, shift)\n  while digits > shift do\n    local digit = math.floor((digits\
    \ - shift) / shifts)\n    result = result .. string.format(\"%0*d\", shift, digit)\n\
    \    digits = digits - shift * digits\n  end\n  if digits > 0 then\n    result\
    \ = result .. string.format(\"%0*d\", shift, digits)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n   \
    \ result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local digits_shifted = math.floor(math.log10(math.abs(x)))\n\
    \  local digits_shifted_reversed = math.floor(math.log10(math.abs(x)))\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_reversed = digits_shifted_reversed - digits_shifted + 1\n  local\
    \ digits_shifted_", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - shift)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local digit\n  local shift\n  while digits > shift do\n    digit = x\
    \ % 10\n    x = x / 10\n    result = string.format(\"%d%s\", digit, result)\n\
    \  end\n  if digits > shift then\n    digit = x % 10\n    x = x / 10\n    result\
    \ = string.format(\"%d%s\", digit, result)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(x/math.pow(10,shift))\n  x = x - math.floor(digits*math.pow(10,shift))\n\
    \  return string.format(\"%0*d\", shift, x)\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = string.format(\"%d%s\", digit, result)\n    x\
    \ = math.floor((x / 10) * 10)\n  end\n  if x > 0 then\n    result = string.format(\"\
    %d%s\", x, result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    x = x / 10\n    result = result .. tostring(digit)\n \
    \ end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n  x = x -\
    \ math.floor(digits*math.pow(10, shift))\n  return string.format(\"%0*d\", shift,\
    \ x)\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 +\
    \ 0.5) / 10\n    result = string.format(\"%0.*d\", digits, digit) + result\n \
    \ end\n  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.floor(digits*math.pow(10, shift))\n  return string.format(\"%0*d\"\
    , shift, digits)\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  while digits > 0 do\n    local digit = math.floor(x/10)\
    \ % 10\n    local digits = digits - 1\n    result = string.sub(result, 1, digits-1)\
    \ + digit\n    x = math.floor(x/10)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  while digits\
    \ > 0 do\n    local digit = math.floor((digits - 1) / 10)\n    local remainder\
    \ = digits % 10\n    digits = digits / 10\n    result = string.sub(result, 1,\
    \ digit-1) + remainder + result\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local result = \"\"\n  local carry = 0\n  local\
    \ digit\n  for digit = 1, digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10 ** digit))\n    carry = math.floor((x - math.floor(x) * (10 ** digit))\
    \ / (10 ** (digits - 1)))\n    if carry > 0 then\n      result = string.format(\"\
    %s%+d\", result, carry)\n    end\n    result = string.format(\"%s%d\", result,\
    \ digit)\n  end\n  if shift > digits then\n    result = string.format(\"%s%+d\"\
    , result, carry)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.pow(10, shift)) + digits)\n\
    \  local digits_shifted_reversed = math.floor(math.log10(math.pow(10, -shift))\
    \ + digits)\n  local digits_shifted_reversed_str = string.rep('0', digits_shifted_reversed)\n\
    \  local digits_shifted_reversed_str = digits_shifted_reversed_str:gsub('.', function(digit)\n\
    \    return string.format('%0*d', digits_shifted, digit)\n  end)\n  local digits_shifted_reversed_str\
    \ = digits_shifted_reversed_str:gsub('%0*d', digits_shifted, digits)\n  return\
    \ string.format('%0*d', digits_shifted_reversed_str, x:reverse())\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n    local\
    \ digit = math.floor(digit)\n    if digit > 9 then\n      digit = digit - 9\n\
    \    end\n    result = result .. digit\n  end\n  if digits > 0 then\n    result\
    \ = circular_shift(result, digits - shift)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    result =\
    \ result .. tostring(digit)\n    x = x - digit\n  end\n  if x > 0 then\n    result\
    \ = result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local carry = digit > math.floor(digit / 10)\n    if carry\
    \ then\n      digit = digit - math.floor(digit / 10)\n    end\n    result = result\
    \ .. string.char(digit + math.floor(digit / 10) * 10)\n    if carry then\n   \
    \   result = result .. \"1\"\n    end\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n    result = string.format(\"\
    %0*d\", digits, digit) + result\n    x = x - digit * 10\n  end\n  if x > 0 then\n\
    \    result = string.format(\"%0*d\", digits, x) + result\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = result .. digit\n    x = x - digit\n  end\n  if x\
    \ > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.pow(10,\
    \ shift)) - 1\n  local digits_shift_reversed = digits_shift + digits\n  local\
    \ digits_shift_reversed_str = string.rep(\"0\", digits_shift_reversed)\n  local\
    \ digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"1\", digits\
    \ - digits_shift)\n  local result = string.rep(\"0\", digits_shift_reversed_str)\n\
    \  local i = digits - shift\n  while i > 0 do\n    local remainder = x % 10\n\
    \    local digit = math.floor(remainder / digits_shift_reversed)\n    result =\
    \ result .. string.rep(\"0\", digits_shift_reversed) .. digit\n    x = x // 10\n\
    \    i = i - 1\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) % 10)\n    result = string.format(\"%s%0*d\", result, math.abs(shift),\
    \ digit)\n    x = math.floor((x / 10) / 10)\n  end\n  if x > 0 then\n    result\
    \ = string.format(\"%s%0*d\", result, math.abs(shift), x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local digits_shifted = math.floor(math.pow(10,\
    \ shift)) * math.pow(10, digits - shift)\n  local digits_reversed = digits_shifted\
    \ / math.pow(10, shift)\n  local digits_shifted_reversed = digits_shifted % math.pow(10,\
    \ shift)\n  local result = math.floor(x / digits_shifted_reversed)\n  return result\
    \ .. string.reverse(string.sub(digits_reversed, 1, digits))\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x / 10) * 10)\n    x = x - digit\n\
    \    result = result .. digit\n  end\n  if x > 0 then\n    result = result ..\
    \ \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 0\n  while digits > 0 do\n    local\
    \ digit = math.floor(x * 10 / math.pow(10, digits))\n    digit = digit + math.floor((digits\
    \ - i) * math.pow(10, -digits))\n    result = result .. digit\n    i = i + 1\n\
    \    digits = digits - 1\n  end\n  if digits > 0 then\n    result = result ..\
    \ math.pow(10, -digits)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 1\n  while i <= digits do\n    local\
    \ digit = math.floor((x - math.floor(x)) * 10 / math.pow(10, i))\n    result =\
    \ result .. string.format(\"%d\", digit)\n    i = i + 1\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x - math.floor(x)) * (10 **\
    \ i))\n    result = result .. tostring(digit)\n  end\n  if shift > digits then\n\
    \    local digits = math.floor(math.log10(math.abs(x)))\n    for i = 1, digits\
    \ do\n      local digit = math.floor((math.abs(x) - math.floor(x)) * (10 ** i))\n\
    \      result = result .. tostring(digit)\n    end\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.log10(math.pow(10,\
    \ shift)) + 1)\n  local digits_shift = digits_shift - digits + 1\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_shift - shift % digits_shift\n  local digits_shift\
    \ = digits_shift - shift % digits_shift\n  local digits_shift = digits_shift -\
    \ shift % digits_shift\n  local digits_shift = digits_shift - shift % digits_shift\n\
    \  local digits_shift = digits_", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local remainder = x - digit * 10\n    if remainder > 0 then\n\
    \      result = result .. \"0\" .. tostring(remainder)\n    else\n      result\
    \ = result .. tostring(digit)\n    end\n  end\n  if digits > 0 then\n    result\
    \ = result .. tostring(math.floor(x * 10 + 0.5))\n  end\n  return result\nend",
  "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\
    \ + shift\n  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_power_reversed\
    \ = math.floor(shift_digits_power * 10) % 10\n  local shift_digits_power_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed * 10) % 10\n  local\
    \ shift_digits_power_reversed_reversed_reversed_reversed_reversed = math.floor(shift_digits_power_reversed_reversed_reversed_reversed\
    \ * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ * 10) % 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(shift_digits_power_reversed_reversed_reversed_reversed * 10) %\
    \ 10\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x -\
    \ math.floor(x)) / (10^digit))\n    if digit > 0 then\n      result = result ..\
    \ digit\n    end\n  end\n  if digits > 0 then\n    result = result .. math.floor((x\
    \ - math.floor(x)) / (10^digits))\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local i =\
    \ 1\n  while i <= digits do\n    local digit = math.floor((x - math.floor(x))\
    \ / (10^i))\n    local remainder = x - math.floor(x) / (10^i)\n    if remainder\
    \ > 0 then\n      result = result .. \"0\" .. digit\n    else\n      result =\
    \ result .. digit\n    end\n    i = i + 1\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n \
    \   result = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 1\n  while i <= digits do\n    local\
    \ digit = math.floor(x * 10 + 0.5) / 10\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit =\
    \ math.floor(digit)\n    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n\
    \    local digit = math.floor(digit)\n    local digit = math.floor(digit)\n  \
    \  local digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local\
    \ digit = math.floor(digit)\n    local digit = math.floor(digit)\n    local digit\
    \ = math.floor(digit)\n", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local digit = digit % 10\n    result = result .. digit\n  \
    \  x = x / 10\n  end\n  if digits > 0 then\n    result = result .. math.floor(x\
    \ * 10)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + 1\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i))) % 10\n    local carry = digit > 0 and 1 or 0\n    local\
    \ digit = digit + carry\n    local digit = math.floor(digit / 10) * 10\n    result\
    \ = result .. digit\n  end\n  if shift > digits then\n    shift = digits - shift\n\
    \  end\n  if shift > 0 then\n    result = circular_shift(result, shift)\n  end\n\
    \  return result\nend", "  local digits = math.floor(x/math.pow(10, shift))\n\
    \  x = x - math.pow(10, shift) * digits\n  local result = \"\"\n  for i = 1, digits\
    \ do\n    result = result .. string.format(\"%d\", math.floor(x/math.pow(10, shift)))\n\
    \    x = x - math.pow(10, shift) * math.pow(10, shift)\n  end\n  if x > 0 then\n\
    \    result = result .. string.format(\"%d\", math.floor(x))\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shift\
    \ = math.floor(math.log10(math.pow(10, shift)) + digits)\n  local digits_shift_reversed\
    \ = math.pow(10, digits_shift)\n  local digits_shift_reversed_reversed = math.pow(10,\
    \ digits_shift_reversed)\n  local digits_shift_reversed_reversed_reversed = math.pow(10,\
    \ digits_shift_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed)\n  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local digits_shift_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reverse",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n   \
    \ local remainder = x - digit * 10\n    x = remainder\n    result = result ..\
    \ string.format(\"%d\", digit)\n  end\n  if digits > 0 then\n    result = result\
    \ .. string.format(\"%d\", math.floor(x * 10 + 0.5))\n  end\n  return result\n\
    end", "  local digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n\
    \  local digits_reversed = {}\n  for i = 1, digits_len do\n    digits_reversed[#digits_reversed\
    \ + 1] = tonumber(digits[i])\n  end\n  local digits_shifted = {}\n  for i = 1,\
    \ shift do\n    digits_shifted[#digits_shifted + 1] = digits_reversed[digits_len\
    \ - i - 1]\n  end\n  return table.concat(digits_shifted, '.')\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n    x = x - digit\n\
    \    result = result .. tostring(digit)\n  end\n  if x > 0 then\n    result =\
    \ result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(digits)) + shift\n  local shift_digits_power = math.pow(10,\
    \ shift_digits)\n  local shift_digits_power_2 = math.pow(10, shift_digits - 1)\n\
    \  local shift_digits_power_3 = math.pow(10, shift_digits - 2)\n  local shift_digits_power_4\
    \ = math.pow(10, shift_digits - 3)\n  local shift_digits_power_5 = math.pow(10,\
    \ shift_digits - 4)\n  local shift_digits_power_6 = math.pow(10, shift_digits\
    \ - 5)\n  local shift_digits_power_7 = math.pow(10, shift_digits - 6)\n  local\
    \ shift_digits_power_8 = math.pow(10, shift_digits - 7)\n  local shift_digits_power_9\
    \ = math.pow(10, shift_digits - 8)\n  local shift_digits_power_10 = math.pow(10,\
    \ shift_digits - 9)\n  local shift_digits_power_11 = math.pow(10, shift_digits\
    \ - 10)\n  local shift_digits_power_12 = math.pow(10, shift_digits - 11)\n  local\
    \ shift_digits_power_13 = math.pow(10, shift_digits - 12)\n  local shift_digits_power_14\
    \ = math.pow(10, shift_digits - 13)\n  local shift_digits_power_15 = math.pow(10,\
    \ shift_digits - 14)\n  local shift_digits_power_16 = math.pow(10, shift_digits\
    \ - 15)\n  local shift_digits_power_17 = math.pow(10, shift_digits - 16)\n  local\
    \ shift_digits_power_18 = math.pow(10, shift_digits - 17)\n  local shift_digits_power_19\
    \ = math.pow(10, shift_digits - 18)\n  local shift_digits_power_20 = math.pow(10,\
    \ shift_digits - 19)\n  local shift_digits_power_21 = math.pow(10, shift_digits\
    \ - 20)\n  local shift_digits_power_22 = math.pow(10, shift_digits - 21)\n  local\
    \ shift_digits_power_23 = math.pow(10, shift_digits - 22)\n  local shift_digits_power_24\
    \ = math.pow(10, shift_digits - 23)\n  local shift_digits_power_25 = math.pow(10,\
    \ shift_digits - 24)\n  local shift_digits_power_26 = math.pow(10, shift_digits\
    \ - 25)\n  local shift_digits_power_27 = math.pow(10, shift_digits - 26)\n  local\
    \ shift_digits_power_28 = math.pow(10, shift_digits - 27)\n  local shift_digits_power_29\
    \ = math.pow(10, shift_digits - 28)\n  local shift_digits_power_30 = math.pow(10,\
    \ shift_digits - 29)\n  local shift_digits_power_31 = math.pow(10, ", "  local\
    \ digits = math.floor(math.log10(x))\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(shift))\n  -- Shift digits by shift_digits times\n \
    \ for i = 1, shift_digits do\n    local digit = math.floor((x / math.pow(10, shift_digits))\
    \ * 10)\n    local remainder = x % math.pow(10, shift_digits)\n    x = math.floor(x\
    \ / math.pow(10, shift_digits))\n    -- Shift digits by shift_digits times\n \
    \   for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_digits times\n\
    \    for j = 1, shift_digits do\n      result = result .. digit\n      x = x %\
    \ math.pow(10, shift_digits)\n    end\n    -- Shift digits by shift_", "  local\
    \ digits = tostring(x).\n    split('.')\n  local digits_len = #digits\n  local\
    \ digits_reversed = {}\n  for i = 1, digits_len do\n    digits_reversed[#digits_reversed\
    \ + 1] = tonumber(digits[i])\n  end\n  local digits_shifted = {}\n  for i = 1,\
    \ shift do\n    digits_shifted[#digits_shifted + 1] = digits_reversed[digits_len\
    \ - 1 - i]\n  end\n  return table.concat(digits_shifted, '.')\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n    x =\
    \ x - (digit * 10)\n    result = result .. tostring(digit)\n  end\n  if digits\
    \ > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n    result\
    \ = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = result .. digit\n    x = x % 10\n  end\n  if\
    \ x > 0 then\n    result = result .. x\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n    x =\
    \ x - (digit / 10)\n    result = result .. tostring(digit)\n  end\n  if digits\
    \ > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n    result\
    \ = string.format(\"%0*d\", math.abs(digits), result) .. digit\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10)\
    \ % 10\n    result = string.format(\"%s%d\", result, digit)\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%s%d\"\
    , result, x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - shift)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 +\
    \ 0.5) / 10\n    local remainder = x - digit * 10\n    if remainder > 0 then\n\
    \      result = result .. \"0\" .. tostring(remainder)\n    else\n      result\
    \ = result .. tostring(digit)\n    end\n  end\n  if digits > 0 then\n    result\
    \ = result .. tostring(math.floor(x * 10 + 0.5) / 10)\n  end\n  return result\n\
    end", "  local digits = tostring(x)\n  local result = \"\"\n  local shifts = math.floor(math.log(digits,\
    \ shift))\n  local shifts_remaining = shifts - 1\n  local shifts_mask = 1 << (shifts_remaining\
    \ - 1)\n  local mask = (1 << (shift + 1)) - 1\n  local shifts_mask = shifts_mask\
    \ & mask\n  local digits_length = math.floor(math.log(digits, 2))\n  local digits_remaining\
    \ = digits_length - shifts_remaining\n  local digits_mask = 1 << (digits_remaining\
    \ - 1)\n  local digits_mask = digits_mask & mask\n  local digits_mask = digits_mask\
    \ >> shifts_remaining\n  local digits_mask = digits_mask & shifts_mask\n  local\
    \ digits_mask = (digits_mask * digits_mask) >> 1\n  local digits_mask = digits_mask\
    \ & digits_mask\n  local digits_mask = (digits_mask * digits_mask) >> 1\n  local\
    \ digits_mask = digits_mask & digits_mask\n  local digits_mask = (digits_mask\
    \ * digits_mask) >> 1\n  local digits_mask = digits_mask & digits_mask\n  local\
    \ digits_mask = (digits_mask * digits_mask) >> 1\n  local digits_mask = digits_mask\
    \ & digits_mask\n  local digits_mask = (digits_mask * digits_mask) >> 1\n  local\
    \ digits_mask = digits_mask & digits_mask\n  local digits_mask = (digits_mask\
    \ * digits_mask) >> 1\n  local digits_mask = digits_mask & digits_mask\n  local\
    \ digits_mask = (digits_mask * digits_mask) >> 1\n  local digits_mask = digits_mask\
    \ & digits_mask\n  local digits_mask = (digits_mask * digits_mask) >> 1\n  local\
    \ digits_mask = digits_mask & digits_mask\n  local digits_mask = (digits_mask\
    \ * digits_mask) >> 1\n  local digits_mask = digits_mask & digits_mask\n  local\
    \ digits_mask = (digits_mask * digits_mask) >> 1\n  local digits_mask = digits_mask\
    \ & digits_mask\n  local digits_mask = (digits_mask * digits_mask) >> 1\n  local\
    \ digits_mask = digits_mask & digits_mask\n  local digits_mask = (digits_mask\
    \ * digits_mask) >> 1\n  local digits_mask = digits_mask & digits_mask\n  local\
    \ digits_mask = (digits_mask * digits_mask) >> 1\n  local digit", "  local digits\
    \ = math.floor(math.log10(x))\n  local result = \"\"\n  local carry = 0\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10^i) * 10^shift)\n    local\
    \ digit2 = digit + carry\n    carry = digit2 > 10\n    digit2 = digit2 - 10\n\
    \    digit = digit + digit2\n    result = result .. digit\n  end\n  if carry then\n\
    \    result = result .. \"1\"\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor((x - math.floor(x)) / (10^i))\n    if\
    \ digit > 9 then\n      result = result .. \"0\"\n    end\n    result = result\
    \ .. tostring(digit)\n  end\n  if digits > 0 then\n    result = result .. \"0\"\
    \n  end\n  return result\nend", "  local digits = tostring(x)\n  local result\
    \ = \"\"\n  local shifts = math.floor(math.log(digits, shift))\n  local shift\
    \ = shifts - math.floor(shifts)\n  local digits_len = #digits\n  for i = 1, shifts\
    \ do\n    local digit = tonumber(string.sub(digits, math.floor(i * digits_len\
    \ / shifts) + 1, math.floor(i * digits_len / shifts) + 1))\n    result = result\
    \ .. tostring(digit) .. tostring(digit % 10)\n  end\n  if shift > 0 then\n   \
    \ local digits_len = #digits\n    for i = 1, shift - 1 do\n      local digit =\
    \ tonumber(string.sub(digits, math.floor(i * digits_len / shifts) + 1, math.floor(i\
    \ * digits_len / shifts) + 1))\n      result = result .. tostring(digit) .. tostring(digit\
    \ % 10)\n    end\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = math.floor(digits / 2)\n  while\
    \ i > 0 do\n    local digit = math.floor((digits % 2) * 10)\n    result = string.sub(result,\
    \ 1, i) + string.sub(result, i + 1, i + 1) + digit\n    digits = digits / 2\n\
    \    i = i - 1\n  end\n  if digits > 0 then\n    result = string.sub(result, 1,\
    \ digits)\n  end\n  return result\nend", "  local digits = tostring(x)\n  local\
    \ result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\n  local\
    \ shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_power_2\
    \ = math.pow(10, shift_digits - 1)\n  local shift_digits_power_3 = math.pow(10,\
    \ shift_digits - 2)\n  local shift_digits_power_4 = math.pow(10, shift_digits\
    \ - 3)\n  local shift_digits_power_5 = math.pow(10, shift_digits - 4)\n  local\
    \ shift_digits_power_6 = math.pow(10, shift_digits - 5)\n  local shift_digits_power_7\
    \ = math.pow(10, shift_digits - 6)\n  local shift_digits_power_8 = math.pow(10,\
    \ shift_digits - 7)\n  local shift_digits_power_9 = math.pow(10, shift_digits\
    \ - 8)\n  local shift_digits_power_10 = math.pow(10, shift_digits - 9)\n  local\
    \ shift_digits_power_11 = math.pow(10, shift_digits - 10)\n  local shift_digits_power_12\
    \ = math.pow(10, shift_digits - 11)\n  local shift_digits_power_13 = math.pow(10,\
    \ shift_digits - 12)\n  local shift_digits_power_14 = math.pow(10, shift_digits\
    \ - 13)\n  local shift_digits_power_15 = math.pow(10, shift_digits - 14)\n  local\
    \ shift_digits_power_16 = math.pow(10, shift_digits - 15)\n  local shift_digits_power_17\
    \ = math.pow(10, shift_digits - 16)\n  local shift_digits_power_18 = math.pow(10,\
    \ shift_digits - 17)\n  local shift_digits_power_19 = math.pow(10, shift_digits\
    \ - 18)\n  local shift_digits_power_20 = math.pow(10, shift_digits - 19)\n  local\
    \ shift_digits_power_21 = math.pow(10, shift_digits - 20)\n  local shift_digits_power_22\
    \ = math.pow(10, shift_digits - 21)\n  local shift_digits_power_23 = math.pow(10,\
    \ shift_digits - 22)\n  local shift_digits_power_24 = math.pow(10, shift_digits\
    \ - 23)\n  local shift_digits_power_25 = math.pow(10, shift_digits - 24)\n  local\
    \ shift_digits_power_26 = math.pow(10, shift_digits - 25)\n  local shift_digits_power_27\
    \ = math.pow(10, shift_digits - 26)\n  local shift_digits_power_28 = math.pow(10,\
    \ shift_digits - 27)\n  local shift_digits_power_29 = math.pow(10, shift_digits\
    \ - 28)\n  local shift_digits_power_30 = math.pow(10, shift_digits - 29)\n  local\
    \ shift_digits_power_31 = math.pow(10, shift_digits ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = result .. digit\n    x = x // 10\n  end\n  if\
    \ x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x % 10) + 0.5)\n    x =\
    \ x / 10\n    result = result .. digit\n  end\n  if digits > 0 then\n    result\
    \ = result .. circular_shift(x, digits - 1)\n  end\n  return result\nend", " \
    \ if shift > math.floor(x:len()) then\n    return x:reverse()\n  end\n  local\
    \ digits = x:sub(1, math.floor(x:len()) - shift)\n  x = x:sub(math.floor(x:len())\
    \ - shift, x:len())\n  return digits .. x\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local shift = shift - digits + 1\n  local result = \"\"\n  local digit\n  while\
    \ shift > 0 do\n    digit = x % 10\n    x = x / 10\n    result = digit .. result\n\
    \    shift = shift - 1\n  end\n  if shift > 0 then\n    digit = x % 10\n    x\
    \ = x / 10\n    result = digit .. result\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for\
    \ i = 1, digits do\n    local digit = math.floor((x / 10) * 10) % 10\n    result\
    \ = string.sub(result, -shift, -1) + digit\n    x = math.floor(x / 10)\n  end\n\
    \  if x > 0 then\n    result = string.sub(result, -shift, -1) + x\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  local power = math.pow(10, digits)\n  local digit, carry\n\
    \  for i = 1, digits do\n    digit = math.floor(x * power) % 10\n    carry = digit\
    \ > 0 and 1 or 0\n    result = string.format(\"%s%0*d\", result, digits, carry)\
    \ + string.format(\"%0*d\", digits, digit)\n    power = math.pow(10, digits)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ - math.floor(x)) * (10 ** i)) / (10 ** i)\n    if digit > 9 then\n      digit\
    \ = digit - 9\n    end\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = result .. circular_shift(math.floor(x), digits - 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shifted\
    \ = math.floor((digits + shift) / shift)\n  local digits_shifted_reversed = math.floor((digits\
    \ - digits_shifted) / shift)\n  local result = string.format(\"%0*d\", digits_shifted,\
    \ x)\n  if digits_shifted_reversed > 0 then\n    result = string.format(\"%0*d\"\
    , digits_shifted_reversed, x)\n  end\n  return result\nend", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local power\
    \ = math.pow(10, digits)\n  while x > power do\n    local digit = math.floor(x\
    \ / power)\n    local remainder = x % power\n    local result = result .. digit\n\
    \    x = remainder\n  end\n  if shift > digits then\n    return result .. tostring(math.floor(x\
    \ / power))\n  else\n    return result .. tostring(x % power)\n  end\nend", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5) / 10\n  \
    \  if digit > 9 then\n      digit = digit - 9\n    end\n    result = result ..\
    \ string.char(digit)\n  end\n  if digits > 0 then\n    result = result .. string.char(digits\
    \ - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) + 0.5)\n    x = x / 10\n    result = string.sub(result, 1, i - 1) .. digit\n\
    \  end\n  if digits > 0 then\n    result = string.sub(result, 1, digits)\n  end\n\
    \  return result\nend", "  local digits = tostring(x)\n  local result = \"\"\n\
    \  local shiftbits = math.pow(10, shift)\n  for i = 1, #digits do\n    local digit\
    \ = tonumber(digits:sub(i, i))\n    digit = digit + math.floor(digit / shiftbits)\n\
    \    digit = digit % shiftbits\n    result = result .. tostring(digit)\n  end\n\
    \  return result\nend", "  local digits = tostring(x).\n    split('.')\n  local\
    \ digits_length = #digits\n  local digits_reversed = {}\n  local digits_shifted\
    \ = {}\n  for i = 1, shift do\n    digits_shifted[#digits_shifted + 1] = digits[#digits_shifted\
    \ - i]\n  end\n  for i = 1, digits_length do\n    digits_reversed[#digits_reversed\
    \ + 1] = digits_shifted[#digits_shifted - i]\n  end\n  return table.concat(digits_reversed,\
    \ \"\")\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    result = string.format(\"%s%s\", tostring(digit), result)\n    x\
    \ = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%s%s\", tostring(x),\
    \ result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local shift = shift or digits\n  local digits_shift = digits - shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift + shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift + shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift + shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift + shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift + shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift + shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift + shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift + shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift + shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift + shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift + shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift + shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift + shift\n", " \
    \ local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\
    \n  local digit\n  for digit = 1, digits do\n    local digit = math.floor((x %\
    \ 10) * math.pow(10, digit))\n    result = string.format(\"%0*d\", digits, digit)\
    \ + result\n    x = x / 10\n  end\n  if digits > 0 then\n    result = string.format(\"\
    %0*d\", digits, x) + result\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shiftDigits = tostring(shift)\n  local shiftDigitLen\
    \ = #shiftDigits\n  local digitLen = #digits\n  local digit\n  local carry\n \
    \ local carryLen", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  local power = math.pow(10, digits)\n  while x > power\
    \ do\n    local digit = math.floor(x / power)\n    local remainder = x % power\n\
    \    x = remainder\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = result .. math.pow(10, digits)\n  end\n  return result\nend", " \
    \ local digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.log10(math.pow(10,\
    \ shift)) + 1)\n  local digits_shift = digits_shift > digits ? digits_shift :\
    \ digits\n  local digits_shift = digits_shift - digits_shift % 2\n  local digits_shift\
    \ = digits_shift > 0 and digits_shift or 0\n  local digits_shift = digits_shift\
    \ == 0 and 1 or digits_shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift == 0 and 1 or digits_shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift == 0 and 1 or digits_shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift == 0 and 1 or\
    \ digits_shift\n  local digits_shift = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift = digits_shift == 0 and 1 or digits_shift\n  local digits_shift\
    \ = digits_shift > 0 and digits_shift or 0\n  local digits_shift = digits_shift\
    \ == 0 and 1 or digits_shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift == 0 and 1 or digits_shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift == 0 and 1 or digits_shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift == 0 and 1 or\
    \ digits_shift\n  local digits_shift = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift = digits_shift == 0 and 1 or digits_shift\n  local digits_shift\
    \ = digits_shift > 0 and digits_shift or 0\n  local digits_shift = digits_shift\
    \ == 0 and 1 or digits_shift\n  local digits_shift = digits_shift > 0 and digits_shift\
    \ or 0\n  local digits_shift = digits_shift == 0 and 1 or digits_shift\n  local\
    \ digits_shift = digits_shift > 0 and digits_shift or 0\n  local digits_shift\
    \ = digits_shift == 0 and 1 or digits_shift\n  local digits_shift = digits_shift\
    \ > 0 and digits_shift or 0\n  local digits_shift = digits_shift == 0 and 1 or\
    \ digits_shift\n  local digits_shift = digits_shift > 0 and digits_shift or 0\n\
    \  local ", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(digits)) + shift\n  local shift_digits_power = math.pow(10,\
    \ shift_digits)\n  local shift_digits_power_reversed = shift_digits_power - 1\n\
    \  local shift_digits_power_reversed_reversed = shift_digits_power_reversed -\
    \ 1\n  local shift_digits_power_reversed_reversed_reversed = shift_digits_power_reversed_reversed\
    \ - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed = shift_digits_power_reversed_reversed_reversed\
    \ - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power_reversed_reversed_reversed_reversed - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power_reversed_reversed_reversed_reversed_reversed - 1\n  local\
    \ shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power_reversed_reversed_reversed_reversed_reversed - 1\n  local\
    \ shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power_reversed_reversed_reversed_reversed - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power_reversed_reversed_reversed - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power_reversed_reversed - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power_reversed - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = shift_digits_power - 1\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = ", "  local digits = tostring(x)\n  local result = \"\"\n  local shift_digits\
    \ = math.floor(math.log10(digits)) + shift\n  local shift_digits_power = math.pow(10,\
    \ shift_digits)\n  local shift_digits_power_reversed = shift_digits_power / 10\n\
    \  local shift_digits_power_reversed_reversed = math.pow(10, shift_digits_power_reversed)\n\
    \  local shift_digits_power_reversed_reversed_reversed = math.pow(10, shift_digits_power_reversed_reversed)\n\
    \  local shift_digits_power_reversed_reversed_reversed_reversed = math.pow(10,\
    \ shift_digits_power_reversed_reversed_reversed)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits_power_reversed_reversed_reversed_reversed)\n  local\
    \ shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed = math.pow(10,\
    \ shift_digits_power_reversed_reversed_reversed_reversed_reversed)\n  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)\n\
    \  local shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.pow(10, shift_digits_power_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "  local digits = math.floor(math.log10(x))\n  local shift = shift - digits + 1\n\
    \  local result = \"\"\n  local digit\n  for digit = 1, digits do\n    local digit\
    \ = math.floor((x / 10) * 10)\n    local digit = math.floor(digit + shift)\n \
    \   result = result .. digit\n    x = x - digit\n  end\n  if shift > digits then\n\
    \    result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.pow(10,\
    \ shift)) - 1\n  local digits_shift_right = math.floor(math.pow(10, shift + digits))\
    \ - 1\n  local digits_shift_left = math.floor(math.pow(10, shift - digits)) -\
    \ 1\n  local digits_shift_left_right = math.floor(math.pow(10, shift - digits\
    \ + digits)) - 1\n  local digits_shift_left_right_shift = math.floor(math.pow(10,\
    \ shift - digits - digits)) - 1\n  local digits_shift_left_right_shift_right =\
    \ math.floor(math.pow(10, shift - digits - digits + digits)) - 1\n  local digits_shift_left_right_shift_right_shift\
    \ = math.floor(math.pow(10, shift - digits - digits - digits)) - 1\n  local digits_shift_left_right_shift_right_shift_right\
    \ = math.floor(math.pow(10, shift - digits - digits - digits + digits)) - 1\n\
    \  local digits_shift_left_right_shift_right_shift_right_shift = math.floor(math.pow(10,\
    \ shift - digits - digits - digits - digits)) - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits + digits))\
    \ - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right_shift\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits - digits))\
    \ - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right_shift_right\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits - digits\
    \ + digits)) - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right_shift_right_shift\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits - digits\
    \ - digits)) - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right_shift_right_shift_right\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits - digits\
    \ - digits + digits)) - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right_shift_right_shift_right_shift\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits - digits\
    \ - digits - digits)) - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right_shift_right_shift_right_shift_right\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits - digits\
    \ - digits - digits)) - 1\n  local digits_shift_left_right_shift_right_shift_right_shift_right_shift_right_shift_right_shift_right_shift\
    \ = math.floor(math.pow(10, shift - digits - digits - digits - digits - digits\
    \ - digits - digits)) - 1\n  local digit", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = string.format(\"%d%s\", digit, result)\n    x\
    \ = math.floor((x / 10) * 10)\n  end\n  if x > 0 then\n    result = string.format(\"\
    %d%s\", x, result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i)) % 10)\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - shift)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local digits_shifted\
    \ = math.floor(math.log10(math.pow(10, shift)) + digits)\n  local digits_reversed\
    \ = math.pow(10, digits_shifted) - math.pow(10, digits)\n  local result = math.floor(x\
    \ / math.pow(10, digits_shifted))\n  result = result * math.pow(10, digits_reversed)\n\
    \  return tostring(result)\nend", "  local digits = tostring(x)\n  local result\
    \ = \"\"\n  local shift = shift or 0\n  assert(shift >= 0 and shift <= #digits,\
    \ \"shift must be between 0 and \" .. #digits)\n  local pos = 1\n  while pos <=\
    \ #digits do\n    local digit = digits[pos]\n    pos = pos + 1\n    if shift >\
    \ 0 then\n      digit = digit:sub(1, -shift)\n    end\n    result = result ..\
    \ digit\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10) % 10\n    result = string.format(\"%d%s\", digit, result)\n    x = math.floor(x\
    \ * 100) / 100\n  end\n  if digits > 0 then\n    result = string.format(\"%d%s\"\
    , x, result)\n  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10,shift))\n\
    \  x = x - math.pow(10,shift) * digits\n  return string.format(\"%0*d\", shift,\
    \ x)\nend", "  local digits = math.floor(math.log10(x))\n  local shift = shift\
    \ - digits + 1\n  local result = \"\"\n  local digit\n  for digit = 1, digits\
    \ do\n    local digit = math.floor((x - math.floor(x)) / (10^shift))\n    result\
    \ = result .. digit\n    x = x - digit * 10^shift\n    shift = shift - 1\n  end\n\
    \  if shift > digits then\n    result = result .. circular_shift(x, shift)\n \
    \ end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = string.format(\"%c%c\", digit, result)\n    x = x\
    \ - digit\n  end\n  if x > 0 then\n    result = string.format(\"%c%c\", x, result)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) + 0.5)\n    x = x / 10\n    result = result .. tostring(digit)\n  end\n\
    \  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.log10(math.pow(10,\
    \ shift + 1)))\n  local digits_shift_right = math.floor(math.log10(math.pow(10,\
    \ shift + 2)))\n  local digits_shift_left = math.floor(math.log10(math.pow(10,\
    \ shift + 3)))\n  local digits_shift_left_right = math.floor(math.log10(math.pow(10,\
    \ shift + 4)))\n  local digits_shift_left_right_shift = math.floor(math.log10(math.pow(10,\
    \ shift + 5)))\n  local digits_shift_left_right_shift_shift = math.floor(math.log10(math.pow(10,\
    \ shift + 6)))\n  local digits_shift_left_right_shift_shift_shift = math.floor(math.log10(math.pow(10,\
    \ shift + 7)))\n  local digits_shift_left_right_shift_shift_shift_shift = math.floor(math.log10(math.pow(10,\
    \ shift + 8)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 9)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 10)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 11)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 12)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 13)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 14)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 15)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 16)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 17)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 18)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift_shift\
    \ = math.floor(math.log10(math.pow(10, shift + 19)))\n  local digits_shift_left_right_shift_shift_shift_shift_shift_shift_shift_shift_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local digit\n  for digit = 1, digits do\n    local digit = math.floor(x * 10\
    \ + digit)\n    result = result .. tostring(digit)\n  end\n  if digits > 0 then\n\
    \    result = result .. tostring(math.floor(x * 10 - digits))\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  while digits > 0 do\n    local digit = math.floor((digits -\
    \ 1) / 3)\n    local remainder = digits % 3\n    digits = digits - digit\n   \
    \ result = result .. string.format(\"%d\", math.floor(x * 10^digit))\n    if remainder\
    \ == 0 then\n      break\n    end\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local digits_shifted = math.floor((digits + shift)\
    \ / shift)\n  local digits_shifted_reversed = math.floor((digits - digits_shifted)\
    \ / shift)\n  local result = string.format(\"%0*d\", digits_shifted, x)\n  if\
    \ digits_shifted_reversed > 0 then\n    result = string.format(\"%0*d\", digits_shifted_reversed,\
    \ x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local shift = shift or digits\n  local digits_shifted = math.floor((digits\
    \ + shift) / shift)\n  local digits_shifted_reversed = math.floor((digits - digits_shifted)\
    \ / shift)\n  local digits_shifted_reversed_str = string.rep('0', digits_shifted_reversed)\
    \ .. string.rep('9', digits)\n  return string.format('%0*d', digits_shifted_reversed_str,\
    \ x:sub(1, digits_shifted_reversed))\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift_str\
    \ = string.format(\"%0*d\", digits_shift, digits)\n  local digits_shift_reversed\
    \ = string.reverse(digits_shift_str)\n  local digits_shift_reversed_str = string.format(\"\
    %0*d\", digits_shift, digits_reversed)\n  local digits_shift_reversed_reversed\
    \ = string.reverse(digits_shift_reversed_str)\n  return string.format(\"%0*d\"\
    , digits_shift, digits_shift_reversed)\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    local digits = math.floor(math.log10(abs(digit))) - shift\n\
    \    if digits > 0 then\n      result = result .. \"0\"\n    end\n    result =\
    \ result .. tostring(digit)\n  end\n  if digits > 0 then\n    result = result\
    \ .. \"0\"\n  end\n  return result\nend", "  local digits = math.floor(x/math.pow(10,\
    \ shift))\n  local result = math.mod(x, math.pow(10, shift))\n  if shift > math.floor(digits)\
    \ then\n    digits = math.floor(digits)\n    result = result * math.pow(10, shift)\n\
    \  end\n  return string.format(\"%0*d\", digits, result)\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10) % 10\n    result = result ..\
    \ digit\n    x = math.floor(x * 10) / 10\n  end\n  if digits > 0 then\n    result\
    \ = result .. tostring(x)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    result = result .. tostring(digit)\n    x = x - digit\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = tostring(x).\n    split('.')\n  local result = digits[1]\n\
    \  for i = 2, #digits do\n    local digit = tonumber(digits[i])\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    digit = digit - digit % 10\n    digit = digit + digit % 10\n    digit = digit\
    \ - digit % 10\n    digit = digit + digit % 10\n    digit = digit - digit % 10\n\
    \    digit = digit + digit % 10\n    digit = digit - digit % 10\n    digit = digit\
    \ + digit % 10\n    digit = digit - digit % 10\n    digit = digit + digit % 10\n\
    \    ", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) % 10)\n\
    \    result = string.format(\"%d%s\", digit, result)\n    x = math.floor((x /\
    \ 10) / 10)\n  end\n  if x > 0 then\n    result = string.format(\"%d%s\", x, result)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = result .. digit\n    x = x - digit\n  end\n  if x\
    \ > 0 then\n    result = result .. tostring(x)\n  end\n  return result\nend",
  "  local digits = math.floor(math.log10(x))\n  local result = \"\"\n  local carry\
    \ = 0\n  local digit\n  for i = 1, digits do\n    digit = math.floor((x / 10)\
    \ * 10 + 0.5)\n    carry = digit + carry\n    x = math.floor(x / 10)\n    if carry\
    \ > 0 then\n      result = string.format(\"%s%0*d\", result, shift, carry)\n \
    \   end\n    if x > 0 then\n      result = string.format(\"%s%0*d\", result, shift,\
    \ x)\n    end\n  end\n  if carry > 0 then\n    result = string.format(\"%s%0*d\"\
    , result, shift, carry)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. digit\n  end\n  if x\
    \ > 0 then\n    result = result .. \"0\"\n  end\n  return result\nend", "  local\
    \ digits = math.floor(math.log10(x))\n  local digits_shift = math.floor(math.pow(10,\
    \ shift)) - 1\n  local digits_shift = digits_shift > 0 and digits_shift or 0\n\
    \  local digits_shift = digits_shift < digits and digits_shift or digits\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < 0 and digits_shift + digits or 0\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < 0 and digits_shift + digits or 0\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < 0 and digits_shift + digits or 0\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < 0 and digits_shift + digits or 0\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < 0 and digits_shift + digits or 0\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < 0 and digits_shift + digits or 0\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < 0 and digits_shift + digits or 0\n  local\
    \ digits_shift = digits_shift - digits\n  local digits_shift = digits_shift <\
    \ 0 and digits_shift + digits or 0\n  local digits_shift = digits_shift - digits\n\
    \  local digits_shift = digits_shift < ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ % 10) * 10 / 10)\n    result = string.format(\"%d%s\", digit, result)\n    x\
    \ = math.floor(x / 10)\n  end\n  if digits > 0 then\n    result = string.format(\"\
    %d%s\", x, result)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = tostring(x).\n    split('.')\n  local result = digits[1].\n\
    \    ..digits[2]\n  local digits_count = #digits\n  local digits_shift = #digits\
    \ - shift\n  local digits_shift = digits_shift > 0 and digits_shift or 0\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift + digits_count + digits_shift\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits_count\
    \ + digits_shift\n  local digits_shift = digits_shift < 0 and -digits_shift or\
    \ 0\n  local digits_shift = digits_shift + digits_count + digits_shift\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift + digits_count + digits_shift\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits_count\
    \ + digits_shift\n  local digits_shift = digits_shift < 0 and -digits_shift or\
    \ 0\n  local digits_shift = digits_shift + digits_count + digits_shift\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift + digits_count + digits_shift\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits_count\
    \ + digits_shift\n  local digits_shift = digits_shift < 0 and -digits_shift or\
    \ 0\n  local digits_shift = digits_shift + digits_count + digits_shift\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift + digits_count + digits_shift\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift or 0\n  local digits_shift = digits_shift + digits_count\
    \ + digits_shift\n  local digits_shift = digits_shift < 0 and -digits_shift or\
    \ 0\n  local digits_shift = digits_shift + digits_count + digits_shift\n  local\
    \ digits_shift = digits_shift < 0 and -digits_shift or 0\n  local digits_shift\
    \ = digits_shift + digits_count + digits_shift\n  local digits_shift = digits_shift\
    \ < 0 and -digits_shift ", "  local digits = math.floor(math.log10(x))\n  local\
    \ result = \"\"\n  local digit\n  local i\n  \n  for i = 1, digits do\n    digit\
    \ = math.floor((x / 10) % 10)\n    x = x - (digit * 10)\n    result = result ..\
    \ digit\n  end\n  \n  if shift > digits then\n    for i = shift, digits do\n \
    \     digit = math.floor((x / 10) % 10)\n      x = x - (digit * 10)\n      result\
    \ = result .. digit\n    end\n  else\n    for i = 1, shift do\n      digit = math.floor((x\
    \ / 10) % 10)\n      x = x - (digit * 10)\n      result = result .. digit\n  \
    \  end\n  end\n  \n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local shift = shift or digits\n  local digit, carry\n\
    \  for i = 1, digits do\n    digit, carry = math.modf(x * 10 + i)\n    if carry\
    \ > 0 then\n      result = result .. \"1\"\n    else\n      result = result ..\
    \ \"0\"\n    end\n  end\n  if shift > digits then\n    local reversed = circular_shift(result,\
    \ shift - digits)\n    return reversed:reverse()\n  else\n    return result\n\
    \  end\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 /\
    \ math.pow(10, i))\n    result = result .. digit\n  end\n  if digits > 0 then\n\
    \    result = circular_shift(result, digits - shift)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n\
    \    result = string.format(\"%0*d\", math.max(digits - i, 0), digit) + result\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n \
    \ local result = \"\"\n  local i = math.ceil(digits / shift)\n  while i > 0 do\n\
    \    local digit = math.floor((x - math.floor(x) / math.pow(10, shift)) * math.pow(10,\
    \ shift))\n    local remainder = x - math.floor(x) / math.pow(10, shift)\n   \
    \ x = math.floor(x) - math.floor(digit) * math.pow(10, shift)\n    if x >= 1 then\n\
    \      x = math.floor(x) + math.pow(10, shift)\n    end\n    result = result ..\
    \ tostring(digit) .. tostring(remainder)\n    i = i - 1\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x * 10 / math.pow(10,\
    \ i))\n    result = string.format(\"%0*d\", math.max(digits - i, 0), digit) +\
    \ result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. tostring(digit)\n  end\n  if\
    \ digits > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    result = result .. digit\n    x = x - digit\n  end\n  if x > 0 then\n\
    \    result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n    result\
    \ = result .. tostring(digit)\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x - digit\n    result = result .. tostring(digit)\n  end\n\
    \  if x > 0 then\n    result = result .. tostring(x)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  local power = math.pow(10, digits)\n  local digit\n  for digit = 1,\
    \ digits do\n    local tmp = math.floor(x / power)\n    result = result .. tostring(tmp)\n\
    \    x = x - tmp * power\n    power = power * 10\n  end\n  if x > 0 then\n   \
    \ result = result .. tostring(x)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local i =\
    \ math.floor(digits / 2)\n  while i > 0 do\n    result = result .. string.format(\"\
    %d\", math.floor(x * 10 + 0.5))\n    x = math.floor(x * 10 / 10)\n    i = i -\
    \ 1\n  end\n  if digits > 0 then\n    result = result .. string.format(\"%d\"\
    , math.floor(x * 10))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.pow(10, shift)) * math.pow(10, digits\
    \ - shift)\n  local result = math.floor(x / digits_shifted)\n  local remainder\
    \ = x % digits_shifted\n  if remainder > 0 then\n    local digits_shifted_2 =\
    \ math.floor(math.pow(10, shift)) * math.pow(10, digits - shift)\n    local remainder_2\
    \ = remainder % digits_shifted_2\n    local remainder_shifted = math.floor(math.pow(10,\
    \ shift)) * math.pow(10, digits - shift)\n    result = result .. math.floor(remainder_shifted\
    \ / digits_shifted_2)\n    result = result .. math.floor(remainder_shifted % digits_shifted_2)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    local digit2 = math.floor((x / 10) * 10)\n    local digit3\
    \ = math.floor((x / 10) * 10)\n    local digit4 = math.floor((x / 10) * 10)\n\
    \    local digit5 = math.floor((x / 10) * 10)\n    local digit6 = math.floor((x\
    \ / 10) * 10)\n    local digit7 = math.floor((x / 10) * 10)\n    local digit8\
    \ = math.floor((x / 10) * 10)\n    local digit9 = math.floor((x / 10) * 10)\n\
    \    local digit10 = math.floor((x / 10) * 10)\n    local digit11 = math.floor((x\
    \ / 10) * 10)\n    local digit12 = math.floor((x / 10) * 10)\n    local digit13\
    \ = math.floor((x / 10) * 10)\n    local digit14 = math.floor((x / 10) * 10)\n\
    \    local digit15 = math.floor((x / 10) * 10)\n    local digit16 = math.floor((x\
    \ / 10) * 10)\n    local digit17 = math.floor((x / 10) * 10)\n    local digit18\
    \ = math.floor((x / 10) * 10)\n    local digit19 = math.floor((x / 10) * 10)\n\
    \    local digit20 = math.floor((x / 10) * 10)\n    local digit21 = math.floor((x\
    \ / 10) * 10)\n    local digit22 = math.floor((x / 10) * 10)\n    local digit23\
    \ = math.floor((x / 10) * 10)\n    local digit24 = math.floor((x / 10) * 10)\n\
    \    local digit25 = math.floor((x / 10) * 10)\n    local digit26 = math.floor((x\
    \ / 10) * 10)\n    local digit27 = math.floor((x / 10) * 10)\n    local digit28\
    \ = math.floor((x / 10) * 10)\n    local digit29 = math.floor((x / 10) * 10)\n\
    \    local digit30 = math.floor((x / 10) * 10)\n    local digit31 = math.floor((x\
    \ / 10) * 10)\n    local digit32 = math.floor((x / 10) * 10)\n    local digit33\
    \ = math.floor((x / 10) * 10)\n    local digit34 = math.floor((x / 10) * 10)\n\
    \    local digit35 = math.floor((x / 10) * 10)\n    local digit36 = math.floor((x\
    \ / 10) * 10)\n    local digit37 = math.floor((x / 10) * 10)\n    local digit38\
    \ = math.floor((x / 10) * 10)\n    local digit39 = ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = string.format(\"%0*d\", digits, digit) + result\n\
    \    x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%0*d\"\
    , digits, x) + result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) % 10) + digit\n    x = x / (10 * 10)\n\
    \    result = result .. digit\n  end\n  if digits > 0 then\n    result = result\
    \ .. math.floor((x / 10) % 10)\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(x))\n  local result = \"\"\n  for i = 1, digits do\n\
    \    local digit = math.floor(x/10^i)\n    local remainder = x % 10^i\n    local\
    \ carry = 0\n    if remainder > 0 then\n      carry = 1\n      remainder = math.floor(remainder/10^i)\n\
    \    end\n    result = result .. string.format(\"%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  local power = math.pow(10, digits)\n  local digit, carry\n  for i = 1, digits\
    \ do\n    digit = math.floor((x / power) * 10)\n    carry = digit > 0 and 1 or\
    \ 0\n    digit = digit + carry\n    result = result .. digit\n    power = math.pow(10,\
    \ digits)\n  end\n  if shift > digits then\n    result = result .. tostring(math.floor((x\
    \ / power) * 10))\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local digit\n  for digit = 1, digits do\n\
    \    local digit = math.floor((x / 10) % 10)\n    result = result .. digit\n \
    \   x = x // 10\n  end\n  if x > 0 then\n    result = result .. digit\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n\
    \  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10)\n    x = x % 10\n    result = result .. tostring(digit) .. tostring(x)\n\
    \  end\n  if digits > 0 then\n    result = result .. tostring(x)\n  end\n  return\
    \ result\nend", "  local digits = tostring(x).\n    split('.')\n  local digits_len\
    \ = #digits\n  local digits_reversed = {}\n  local digits_shifted = {}\n  local\
    \ digits_shifted_len = 0\n  local digits_shifted_reversed = {}\n  local digits_shifted_reversed_len\
    \ = 0\n  for i = 1, shift do\n    digits_shifted_len = digits_shifted_len + 1\n\
    \    digits_shifted_reversed_len = digits_shifted_reversed_len + 1\n    digits_shifted[digits_shifted_len]\
    \ = digits[i]\n    digits_shifted_reversed[digits_shifted_reversed_len] = digits[#digits]\n\
    \  end\n  for i = 1, digits_len do\n    digits_reversed[digits_len + i] = digits[i]\n\
    \  end\n  for i = 1, digits_reversed_len do\n    digits_reversed[digits_reversed_len\
    \ + i] = digits_reversed[digits_reversed_len + i - 1]\n  end\n  for i = 1, digits_shifted_len\
    \ do\n    digits_reversed[digits_shifted_len + i] = digits_shifted[digits_shifted_len\
    \ + i - 1]\n  end\n  return table.concat(digits_reversed)\nend", "  if shift >\
    \ math.floor(x:len()) then\n    return x:reverse():reverse()\n  end\n  local digits\
    \ = x:reverse():reverse():sub(1, math.floor(x:len()) - shift)\n  return digits:reverse()\n\
    end", "  local digits = math.floor(x/math.pow(10, shift))\n  x = x - digits*math.pow(10,\
    \ shift)\n  return string.format('%0*d', shift, x)\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift_reversed\
    \ = digits_shift ~= 0 and digits_shift or 0\n  local digits_shift_reversed_str\
    \ = string.rep(\"0\", digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits-digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits-digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    1\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"0\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits-digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digits-digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    1\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"0\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits-digits_shift_reversed)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str = digits_shift_reversed_str\
    \ .. string.rep(\"1\", digits-digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"0\", digit", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shift = math.floor(math.pow(10, shift)) - 1\n  local digits_shift_reversed\
    \ = digits_shift ~= 0 and digits_shift or 0\n  local digits_shift_reversed_str\
    \ = string.rep(\"0\", digits_shift_reversed)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed - digits_shift)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed - digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed - digits_shift)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed - digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed - digits_shift)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed - digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed - digits_shift)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed - digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed - digits_shift)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed - digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed - digits_shift)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed - digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_shift_reversed - digits_shift)\n\
    \  local digits_shift_reversed_str = digits_shift_reversed_str .. string.rep(\"\
    0\", digits_shift_reversed - digits_shift)\n  local digits_shift_reversed_str\
    \ = digits_shift_reversed_str .. string.rep(\"1\", digits_", "  local digits =\
    \ math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  local power\
    \ = math.pow(10, digits)\n  local digit, carry\n  for i = 1, digits do\n    digit\
    \ = math.floor((x / power) * 10)\n    carry = digit > 0 and 1 or 0\n    digit\
    \ = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n\
    \    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit\
    \ > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n\
    \    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit\
    \ + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry\
    \ = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and\
    \ 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit\
    \ = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n\
    \    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit\
    \ > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n\
    \    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit\
    \ + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry\
    \ = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and\
    \ 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit\
    \ = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n\
    \    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit\
    \ > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n\
    \    digit = digit + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit\
    \ + carry\n    carry = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry\
    \ = digit > 0 and 1 or 0\n    digit = digit + carry\n    carry = digit > 0 and\
    \ 1 or 0\n    digit = digit + carry\n    ", "  local digits = math.floor(math.log10(x))\n\
    \  local result = \"\"\n  local power = math.pow(10, shift)\n  local digits_shifted\
    \ = math.floor(x / power)\n  local digits_shifted_reversed = digits_shifted %\
    \ 10\n  local digits_shifted_reversed_reversed = math.floor(digits_shifted_reversed\
    \ / 10)\n  local digits_shifted_reversed_reversed_reversed = math.floor(digits_shifted_reversed_reversed\
    \ / 10)\n  local digits_shifted_reversed_reversed_reversed_reversed = math.floor(digits_shifted_reversed_reversed_reversed\
    \ / 10)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed =\
    \ math.floor(digits_shifted_reversed_reversed_reversed_reversed / 10)\n  local\
    \ digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed\
    \ / 10)\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / 10)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / 10)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / 10)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / 10)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / 10)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / 10)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(digits_shifted_reversed_reversed_reversed_reversed_reversed / 10)\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor(x * 10 + 0.5)\n    local\
    \ digit = digit - math.floor(digit / 10) * 10\n    result = result .. digit\n\
    \  end\n  if digits > 0 then\n    result = circular_shift(result, digits - 1)\n\
    \  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 + 0.5)\n    result = string.format(\"%0*d\", digits, digit) + result\n\
    \    x = x - digit\n  end\n  if x > 0 then\n    result = string.format(\"%0*d\"\
    , digits, x) + result\n  end\n  return result\nend", "  local digits = tostring(x)\n\
    \  local result = \"\"\n  local shift_digits = math.floor(math.log10(digits))\n\
    \  local shift_digits_power = math.pow(10, shift_digits)\n  local shift_digits_power_2\
    \ = math.pow(10, shift_digits - 1)\n  local shift_digits_power_3 = math.pow(10,\
    \ shift_digits - 2)\n  local shift_digits_power_4 = math.pow(10, shift_digits\
    \ - 3)\n  local shift_digits_power_5 = math.pow(10, shift_digits - 4)\n  local\
    \ shift_digits_power_6 = math.pow(10, shift_digits - 5)\n  local shift_digits_power_7\
    \ = math.pow(10, shift_digits - 6)\n  local shift_digits_power_8 = math.pow(10,\
    \ shift_digits - 7)\n  local shift_digits_power_9 = math.pow(10, shift_digits\
    \ - 8)\n  local shift_digits_power_10 = math.pow(10, shift_digits - 9)\n  local\
    \ shift_digits_power_11 = math.pow(10, shift_digits - 10)\n  local shift_digits_power_12\
    \ = math.pow(10, shift_digits - 11)\n  local shift_digits_power_13 = math.pow(10,\
    \ shift_digits - 12)\n  local shift_digits_power_14 = math.pow(10, shift_digits\
    \ - 13)\n  local shift_digits_power_15 = math.pow(10, shift_digits - 14)\n  local\
    \ shift_digits_power_16 = math.pow(10, shift_digits - 15)\n  local shift_digits_power_17\
    \ = math.pow(10, shift_digits - 16)\n  local shift_digits_power_18 = math.pow(10,\
    \ shift_digits - 17)\n  local shift_digits_power_19 = math.pow(10, shift_digits\
    \ - 18)\n  local shift_digits_power_20 = math.pow(10, shift_digits - 19)\n  local\
    \ shift_digits_power_21 = math.pow(10, shift_digits - 20)\n  local shift_digits_power_22\
    \ = math.pow(10, shift_digits - 21)\n  local shift_digits_power_23 = math.pow(10,\
    \ shift_digits - 22)\n  local shift_digits_power_24 = math.pow(10, shift_digits\
    \ - 23)\n  local shift_digits_power_25 = math.pow(10, shift_digits - 24)\n  local\
    \ shift_digits_power_26 = math.pow(10, shift_digits - 25)\n  local shift_digits_power_27\
    \ = math.pow(10, shift_digits - 26)\n  local shift_digits_power_28 = math.pow(10,\
    \ shift_digits - 27)\n  local shift_digits_power_29 = math.pow(10, shift_digits\
    \ - 28)\n  local shift_digits_power_30 = math.pow(10, shift_digits - 29)\n  local\
    \ shift_digits_power_31 = math.pow(10, shift_digits ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / 10) * 10) % 10\n    result = result .. digit\n    x = x - (digit * 10)\n \
    \ end\n  if x > 0 then\n    result = result .. math.floor(x) % 10\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local shift = shift\
    \ or digits\n  local digits_shifted = math.floor((digits + shift) / shift)\n \
    \ local digits_remaining = digits - digits_shifted\n  local digits_reversed =\
    \ digits_shifted .. '0'\n  local result = string.rep(digits_reversed, digits_remaining)\n\
    \  local reversed_result = string.gsub(result, digits_reversed, digits_shifted\
    \ .. '0')\n  return reversed_result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. digit\n  end\n  if digits >\
    \ 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result\
    \ = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10) * 10)\n\
    \    x = x - digit\n    result = result .. tostring(digit)\n  end\n  if x > 0\
    \ then\n    result = result .. tostring(x)\n  end\n  return result\nend", "  local\
    \ digits = math.floor(x/math.pow(10,shift))\n  x = x - digits*math.pow(10,shift)\n\
    \  local result = \"\"\n  while x > 0 do\n    local digit = math.floor(x/10)\n\
    \    x = x - digit*10\n    result = result .. digit\n  end\n  return result\n\
    end", "  local digits = math.floor(math.log10(x))\n  local shift = shift - digits\
    \ + 1\n  local digits_reversed = math.floor(x/10^shift)\n  x = x - digits_reversed\
    \ * 10^shift\n  local result = \"\"\n  while x > 0 do\n    local digit = math.floor(x/10)\n\
    \    x = x - digit*10\n    result = digit .. result\n  end\n  if shift > digits\
    \ then\n    return result .. digits_reversed:reverse()\n  else\n    return result\
    \ .. digits_reversed\n  end\nend", "  local digits = math.floor(math.log10(x))\n\
    \  local digits_shifted = math.floor(math.log10(math.pow(10, shift + digits)))\n\
    \  local digits_shifted_reversed = math.floor(math.log10(math.pow(10, shift +\
    \ digits_shifted)))\n  local digits_shifted_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ shift + digits_shifted_reversed)))\n  local digits_shifted_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed = math.floor(math.log10(math.pow(10,\
    \ shift + digits_shifted_reversed_reversed_reversed)))\n  local digits_shifted_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed_reversed_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed\
    \ = math.floor(math.log10(math.pow(10, shift + digits_shifted_reversed_reversed_reversed_reversed_reversed_reversed_reversed_reversed)))\n\
    \  local digits_shifted_reversed_reversed_reversed_", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x\
    \ / math.pow(10, i)) % 10)\n    result = string.format(\"%s%c\", result, digit)\n\
    \  end\n  if digits > 0 then\n    result = string.format(\"%s%c\", result, math.floor((x\
    \ / math.pow(10, digits)) % 10))\n  end\n  return result\nend", "  local digits\
    \ = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n  for i = 1,\
    \ digits do\n    local digit = math.floor(x * 10 / math.pow(10, i))\n    result\
    \ = result .. digit\n  end\n  if digits > 0 then\n    result = circular_shift(result,\
    \ digits - 1)\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  local i = 0\n  while i < digits do\n    local\
    \ digit = math.floor((x / 10) * 10)\n    local remainder = x % 10\n    x = remainder\n\
    \    result = result .. digit\n    if x > 0 then\n      x = 10\n      result =\
    \ result .. \"0\"\n    end\n    i = i + 1\n  end\n  if shift > digits then\n \
    \   result = result .. \"0\"\n  end\n  return result\nend", "  local digits =\
    \ tostring(x)\n  local result = \"\"\n  local shiftbits = math.floor(math.log(shift,\
    \ 2))\n  local shiftbit = math.pow(10, shiftbits)\n  local digits_length = #digits\n\
    \  local digits_length = math.floor(digits_length / shiftbit)\n  local digits_length\
    \ = math.max(digits_length, 1)\n  local shiftbits_length = shiftbits * 2\n  local\
    \ shiftbits_length = math.floor(shiftbits_length)\n  local shiftbits_length =\
    \ math.max(shiftbits_length, 1)\n  local shiftbits_length = shiftbits_length +\
    \ 1\n  local shiftbits_length = shiftbits_length + 1\n  local shiftbits_length\
    \ = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length + 1\n  local\
    \ shiftbits_length = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length\
    \ + 1\n  local shiftbits_length = shiftbits_length + 1\n  local shiftbits_length\
    \ = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length + 1\n  local\
    \ shiftbits_length = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length\
    \ + 1\n  local shiftbits_length = shiftbits_length + 1\n  local shiftbits_length\
    \ = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length + 1\n  local\
    \ shiftbits_length = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length\
    \ + 1\n  local shiftbits_length = shiftbits_length + 1\n  local shiftbits_length\
    \ = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length + 1\n  local\
    \ shiftbits_length = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length\
    \ + 1\n  local shiftbits_length = shiftbits_length + 1\n  local shiftbits_length\
    \ = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length + 1\n  local\
    \ shiftbits_length = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length\
    \ + 1\n  local shiftbits_length = shiftbits_length + 1\n  local shiftbits_length\
    \ = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length + 1\n  local\
    \ shiftbits_length = shiftbits_length + 1\n  local shiftbits_length = shiftbits_length\
    \ + 1\n  local shiftbits_length = shiftbits_length + 1\n  local shiftbits_length\
    \ = shiftbits_length + 1\n  local shiftbits_length = ", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = string.format(\"%0*d\", math.max(digits\
    \ - i, 0), digit) + result\n  end\n  return result\nend", "  local digits = math.floor(math.log10(abs(x)))\
    \ + shift\n  local result = \"\"\n  for i = 1, digits do\n    local digit = math.floor(x\
    \ * 10 / math.pow(10, i))\n    result = result .. tostring(digit)\n  end\n  if\
    \ digits > 0 then\n    result = circular_shift(result, digits - 1)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(x))\n  local result =\
    \ \"\"\n  local shift_digits = math.floor(math.log10(shift))\n  -- Shift digits\
    \ by shift_digits, starting from the right\n  -- >>> circular_shift(12, shift_digits)\n\
    \  -- 12\n  -- >>> circular_shift(12, shift_digits + 1)\n  -- 21\n  -- >>> circular_shift(12,\
    \ shift_digits + 2)\n  -- 12\n  -- >>> circular_shift(12, shift_digits + 3)\n\
    \  -- 21\n  -- >>> circular_shift(12, shift_digits + 4)\n  -- 12\n  -- >>> circular_shift(12,\
    \ shift_digits + 5)\n  -- 21\n  -- >>> circular_shift(12, shift_digits + 6)\n\
    \  -- 12\n  -- >>> circular_shift(12, shift_digits + 7)\n  -- 21\n  -- >>> circular_shift(12,\
    \ shift_digits + 8)\n  -- 12\n  -- >>> circular_shift(12, shift_digits + 9)\n\
    \  -- 21\n  -- >>> circular_shift(12, shift_digits + 10)\n  -- 12\n  -- >>> circular_shift(12,\
    \ shift_digits + 11)\n  -- 21\n  -- >>> circular_shift(12, shift_digits + 12)\n\
    \  -- 12\n  -- >>> circular_shift(12, shift_digits + 13)\n  -- 21\n  -- >>> circular_shift(12,\
    \ shift_digits + 14)\n  -- 12\n  -- >>> circular_shift(12, shift_digits + 15)\n\
    \  -- 21\n  -- >>> circular_shift(12, shift_digits + 16)\n  -- 12\n  -- >>> circular_shift(12,\
    \ shift_digits + 17)\n  -- 21\n  -- >>> circular_shift(12, shift_digits + 18)\n\
    \  -- 12\n  -- >>> circular_shift(12, shift_digits + 19)\n  -- 21\n  -- >>> circular_shift(12,\
    \ shift_digits + 20)\n  -- 12\n  -- >>> circular_shift(12, shift_digits + 21)\n\
    \  -- 21\n  -- >>> circular_shift(12, shift_digits + 22)\n  -- 12\n  -- >>> circular_shift(12,\
    \ shift_digits + 23)\n  -- 21\n  -- >>> circular_shift(12, shift_digits + 24)\n\
    \  -- 12\n  -- >>> circular_shift(12, shift_digits + 25)\n  -- 21\n  -- >>> circular_shift(12,\
    \ shift_digits + 26)\n  -- 12\n  -- >>> circular_shift(12, shift_digits + 27)\n\
    \  -- 21\n  -- >>> circular_shift(12, shift_digits + 28)\n  -- 12\n  -- >>> cir",
  "  local digits = math.floor(math.log10(abs(x))) + shift\n  local result = \"\"\n\
    \  for i = 1, digits do\n    local digit = math.floor((x % 10) * 10 / 10)\n  \
    \  result = string.sub(result, 1, i - 1) + digit\n    x = x // 10\n  end\n  if\
    \ digits > 0 then\n    result = string.sub(result, 1, digits)\n  end\n  return\
    \ result\nend", "  local digits = math.floor(math.log10(abs(x))) + shift\n  local\
    \ result = \"\"\n  for i = 1, digits do\n    local digit = math.floor((x / 10)\
    \ * 10)\n    x = x - digit\n    if x > 0 then\n      result = result .. digit\n\
    \    end\n  end\n  if x > 0 then\n    result = result .. math.floor(x)\n  end\n\
    \  return result\nend", "  local digits = math.floor(math.log10(x))\n  local result\
    \ = \"\"\n  local i = math.max(0, digits - shift)\n  while i > 0 do\n    local\
    \ digit = math.floor((x / 10) % 10)\n    local remainder = x % 10\n    x = math.floor(x\
    \ / 10)\n    result = string.sub(result, 1, i - 1) + digit .. remainder\n    i\
    \ = i - 1\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
