name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
  \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal\
    \ ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac or math.abs(b - c) < math.abs(a\
    \ - c))\nend", "  local ab = a - b\n  local bc = b - c\n  local cb = c - b\n \
    \ local det = ab * cb - bc * ab\n  if det < 0 then\n    return false\n  elseif\
    \ det > 0 then\n    return true\n  else\n    return bc < 0\n  end\nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and (ab > ac or math.abs(a - c) > math.abs(b - c))\n\
    end", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det\
    \ = ab * cb - bc * ab\n\treturn det > 0\nend", "  local ab = a - b\n  local bc\
    \ = b - c\n  local ac = c - a\n  return (ab > 0 and bc > 0 and ac > 0) or (ab\
    \ > 0 and bc > 0 and ac < 0)\nend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\n\
    end", "\t-- Check that the sides are all positive\n\tif a < 0 or b < 0 or c <\
    \ 0 then\n\t\treturn false\n\tend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab >= bc and ab >=\
    \ ac\nend", "  local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  local\
    \ ab_sqr = ab * ab\n  local bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local\
    \ ab_ac = ab * ac\n  local ab_bc = ab * bc\n  local bc_ac = bc * ac\n  local ab_ab\
    \ = ab * ab\n  local bc_bc = bc * bc \n  local ab_bc = ab * bc\n  local bc_ab\
    \ = bc * ab\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local ab_ab =\
    \ ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc\
    \ * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab *\
    \ ac\n  local bc_ab = bc * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n\
    \  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local ab_ab = ab * ab\n \
    \ local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local\
    \ ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab\
    \ = bc * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac =\
    \ ab * ac\n  local bc_ab = bc * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc\
    \ * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local ab_ab = ab *\
    \ ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n\
    \  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n \
    \ local bc_ab = bc * ab\n  local ab_ab = ab * ab\n  local b", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ + bc == ac)\nend", "  return (b - a) * (c - b) <= 0\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc) and (ab > ac)\nend",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = a - b\n\tlocal bc =\
    \ b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\
    \tlocal cb_sq = cb * cb\n\tlocal det = ab_sq * bc_sq - bc_sq * cb_sq\n\t\n\tif\
    \ det < 0 then\n\t\treturn false\n\telseif det > 0 then\n\t\treturn true\n\telse\n\
    \t\treturn ((ab_sq * cb) - (bc_sq * ab)) > 0\n\tend\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "  local ab = a - b\n  local bc = b - c\n  local cb\
    \ = c - b\n  return ab == bc and ab == cb\nend", "  local ab = math.abs(b - a)\n\
    \  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab >= bc\
    \ and ab >= ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c -\
    \ b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\tlocal\
    \ ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab * ab\n\
    \tlocal bc_2 = bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\t\
    local bc_3 = bc_2 * bc \n\tlocal ac_3 = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\t\
    local bc_4 = bc_3 * bc \n\tlocal ac_4 = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\t\
    local bc_5 = bc_4 * bc \n\tlocal ac_5 = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\t\
    local bc_6 = bc_5 * bc \n\tlocal ac_6 = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\t\
    local bc_7 = bc_6 * bc \n\tlocal ac_7 = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\t\
    local bc_8 = bc_7 * bc \n\tlocal ac_8 = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\t\
    local bc_9 = bc_8 * bc \n\tlocal ac_9 = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\
    \tlocal bc_10 = bc_9 * bc \n\tlocal ac_10 = ac_9 * ac\n\tlocal ab_11 = ab_10 *\
    \ ab\n\tlocal bc_11 = bc_10 * bc \n\tlocal ac_11 = ac_10 * ac\n\tlocal ab_12 =\
    \ ab_11 * ab\n\tlocal bc_12 = bc_11 * bc \n\tlocal ac_12 = ac_11 * ac\n\tlocal\
    \ ab_13 = ab_12 * ab\n\tlocal bc_13 = bc_12 * bc \n\tlocal ac_13 = ac_12 * ac\n\
    \tlocal ab_14 = ab_13 * ab\n\tlocal bc_14 = bc_13 * bc \n\tlocal ac_14 = ac_13\
    \ * ac\n\tlocal ab_15 = ab_14 * ab\n\tlocal bc_15 = bc_14 * bc \n\tlocal ac_15\
    \ = ac_14 * ac\n\tlocal ab_16 = ab_15 * ab\n\tlocal bc_16 = bc_15 * bc \n\tlocal\
    \ ac_16 = ac_15 * ac\n\tlocal ab_17 = ab_16 * ab\n\tlocal bc_17 = bc_16 * bc \n\
    \tlocal ac_17 = ac_16 * ac\n\t", "   local ab = a - b\n   local bc = b - c\n \
    \  local ac = c - a\n   return ab == bc and ab == ac\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ad = math.abs(d - a)\n\tlocal cd\
    \ = math.abs(d - c)\n\treturn ab > bc and ab > cd \nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend", "  local ab = math.abs(b - a)\n\
    \  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc\
    \ and ab > ac\nend", "  return (b - a) * (c - b) <= 0\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "  local ab = a - b\n  local bc = b - c\n  local cb\
    \ = c - b\n  local ab_sq = ab * ab\n  local bc_sq = bc * bc\n  local cb_sq = cb\
    \ * cb\n  local det = ab_sq * bc_sq - cb_sq * ab_sq\n  \n  return det > 0\nend",
  "  local ab = a - b\n  local bc = b - c\n  local cb = c - b\n  local ab_sq = ab\
    \ * ab\n  local bc_sq = bc * bc\n  local cb_sq = cb * cb\n  local det = ab_sq\
    \ * bc_sq - cb_sq * ab_sq\n  \n  return det > 0\nend", "\tlocal ab = a - b\n\t\
    local bc = b - c\n\tlocal ac = c - a\n\treturn ab == bc and ab == ac\nend", "\t\
    local a = math.abs(a)\n\tlocal b = math.abs(b)\n\tlocal c = math.abs(c)\n\tlocal\
    \ ab = math.abs(a + b)\n\tlocal bc = math.abs(b + c)\n\tlocal ac = math.abs(a\
    \ + c)\n\treturn ab > bc and (ab > ac or bc > ac)\nend", "\tlocal ab = a - b\n\
    \tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab >= 0 and bc >= 0 and ac >=\
    \ 0\nend", "\tlocal a = a or 0\n\tlocal b = b or 0\n\tlocal c = c or 0\n\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab\
    \ > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  return b^2\
    \ + c^2 == a^2 + b^2 \nend", "  local ab = a - b\n  local bc = b - c\n  local\
    \ ac = c - a\n  return ab > 0 and bc > 0 and ac > 0 and (ab + bc + ac) == 3\n\
    end", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac\
    \ = math.abs(c - a)\n  return ab > bc and (ab > ac or math.abs(a - b) > math.abs(a\
    \ - c))\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\t\
    local ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  local ab =\
    \ math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n\
    \  return ab > bc and ab > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\
    \tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal\
    \ cb_sq = cb * cb\n\tlocal ab_ab = ab_sq + bc_sq\n\tlocal ab_cb = ab_sq + cb_sq\n\
    \tlocal bc_cb = bc_sq + cb_sq\n\treturn ab_ab == ab_cb and ab_ab == bc_cb\nend",
  "\tlocal ab = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\
    \treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ad = math.abs(d - a)\n\tlocal cd = math.abs(d - c)\n\
    \tlocal abc = ab + bc\n\tlocal abd = ab + ad\n\tlocal bcd = bc + cd\n\tlocal abdc\
    \ = ab + bd + c\n\treturn abc <= abd and\n\t\tabc <= bcd and\n\t\tabc <= abdc\n\
    end", "\tlocal ab = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\
    \treturn ab == bc and ac == bc\nend", "\t-- Check that the sides are non-zero\n\
    \tif a < 0 or b < 0 or c < 0 then return false end\n\t-- Check that the sides\
    \ are equal\n\tif a == b and b == c then return true end\n\t-- Check that the\
    \ sides are equal\n\tif a == c then return true end\n\t-- Check that the sides\
    \ are equal\n\tif b == c then return true end\n\t-- Check that the sides are equal\n\
    \tif a == b then return true end\n\t-- Check that the sides are equal\n\tif a\
    \ == c then return true end\n\t-- Check that the sides are equal\n\tif b == c\
    \ then return true end\n\t-- Check that the sides are equal\n\tif a == b then\
    \ return true end\n\t-- Check that the sides are equal\n\tif a == c then return\
    \ true end\n\t-- Check that the sides are equal\n\tif b == c then return true\
    \ end\n\t-- Check that the sides are equal\n\tif a == b then return true end\n\
    \t-- Check that the sides are equal\n\tif a == c then return true end\n\t-- Check\
    \ that the sides are equal\n\tif b == c then return true end\n\t-- Check that\
    \ the sides are equal\n\tif a == b then return true end\n\t-- Check that the sides\
    \ are equal\n\tif a == c then return true end\n\t-- Check that the sides are equal\n\
    \tif b == c then return true end\n\t-- Check that the sides are equal\n\tif a\
    \ == b then return true end\n\t-- Check that the sides are equal\n\tif a == c\
    \ then return true end\n\t-- Check that the sides are equal\n\tif b == c then\
    \ return true end\n\t-- Check that the sides are equal\n\tif a == b then return\
    \ true end\n\t-- Check that the sides are equal\n\tif a == c then return true\
    \ end\n\t-- Check that the sides are equal\n\tif b == c then return true end\n\
    \t-- Check that the sides are equal\n\tif a == b then return true end\n\t-- Check\
    \ that the sides are equal\n\tif a == c then return true end\n\t-- Check that\
    \ the sides are equal\n\tif b == c then return true end\n\t-- Check that the sides\
    \ are equal\n\tif a == b then return true end\n\t-- Check that the sides are equal\n\
    \tif a == c then return true end\n\t-- Check that the sides are equal\n\tif b\
    \ == c then return true end\n\t-- Check that the sides are equal\n\tif a == b\
    \ then return true end\n\t-- Check that the sides are equal\n\tif a == c then\
    \ return true end\n\t-- Check that the sides are equal\n\tif b == ", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab > bc and ab > ac)\nend", "\tlocal ab = a - b\n\tlocal bc\
    \ = b - c\n\tlocal ac = c - a\n\treturn ab * bc * ac >= 0\nend", "  return b ==\
    \ c and a * a + c * c == b * b \nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab\
    \ > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\t\
    return ab == bc and ab == ac\nend", "  local ab = a - b\n  local bc = b - c\n\
    \  local ac = c - a\n  return (ab + bc == ac)\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ > bc and ab > ac)\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and\n         ab > ac and\n\
    \         bc > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\tlocal abc = ab + bc\n\tif abc > ab then\n\
    \t\treturn true\n\telseif abc < ab then\n\t\treturn false\n\telseif ac > bc then\n\
    \t\treturn true\n\telseif ac < bc then\n\t\treturn false\n\telse\n\t\treturn math.abs(math.atan2(b\
    \ - a, c - b)) < math.pi/180\n\tend\nend", "  return ((b - a) * (c - b)) - ((c\
    \ - a) * (b - a)) > 0\nend", "\tlocal a, b, c = math.abs(a), math.abs(b), math.abs(c)\n\
    \tif a == b and a == c then return true end\n\tif a == c then return false end\n\
    \tif b == c then return false end\n\tif a > b and a > c then return true end\n\
    \tif b > c then return false end\n\treturn false\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb\
    \ = c - b\n\tlocal ab_sqr = ab * ab\n\tlocal bc_sqr = bc * bc \n\tlocal cb_sqr\
    \ = cb * cb\n\tlocal det = ab_sqr + bc_sqr - cb_sqr\n\treturn det >= 0\nend",
  "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab *\
    \ cb - bc * ab\n\treturn det > 0\nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab\
    \ > ac) or (bc > ab and bc > ac) or (ac > ab and ac > bc)\nend", "  return (b\
    \ - c) * (a + b + c) <= 0\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab >= bc and\
    \ ab >= ac)\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\t\
    local ca = math.abs(c-a)\n\t\n\tif ab > bc then\n\t\tif ab > ca then\n\t\t\treturn\
    \ true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif bc > ca then\n\t\
    \t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\tend\nend", "\tlocal\
    \ a, b, c = math.abs(a), math.abs(b), math.abs(c)\n\tif a == b and a == c then\
    \ return true end\n\tif a == c then return b == c end\n\tif b == c then return\
    \ b == a end\n\treturn false\nend", "  return (b - c) * (a + b) > 0 or (b - c)\
    \ * (c - a) > 0\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\t\
    local ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn (ab > 0 and\
    \ bc > 0 and ac > 0) or (ab > 0 and bc > 0 and ac < 0)\nend", "\tlocal ab = a\
    \ - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_ac = ab * ac\n\tlocal\
    \ bc_ac = bc * ac\n\treturn ab_ac > 0 and bc_ac > 0 and ab_ac + bc_ac == ab *\
    \ bc\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local\
    \ ac = math.abs(c - a)\n  return ab == bc and ab == ac\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or bc > ac)\nend", "\t-- The sides are a, b, c\n\t-- The angles\
    \ are the sides' angles\n\t-- The angles are in radians\n\t-- The angles are in\
    \ degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\t\
    -- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radians\n\t-- The angles are in degrees\n\t-- The angles\
    \ are in radians\n\t-- The angles are in degrees\n\t-- The angles are in radians\n\
    \t-- The angles are in degrees\n\t-- The angles are in radians\n\t-- The angles\
    \ are in degrees\n\t-- The angles are in radians\n\t-- The angles are in degrees\n\
    \t-- The angles are in radian", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal\
    \ cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal cb_sq\
    \ = cb * cb\n\tlocal ab_ab = ab_sq + bc_sq\n\tlocal bc_bc = bc_sq + cb_sq\n\t\
    local ab_bc = ab_sq + bc_bc\n\treturn ab_ab == ab_bc and ab_ab == bc_bc\nend",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab > bc) and (ab > ac)\nend", "\t-- Check that the sides are\
    \ non-zero\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\tend", "\t\
    local ab = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac_ab = math.abs(c-a)\n\
    \tlocal ab_ac = math.abs(b-a)\n\treturn ab == bc and ab_ac == ac_ab\nend", "\t\
    local ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab *\
    \ ab\n\tlocal bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal det = ab_sq +\
    \ bc_sq - cb_sq\n\tif det < 0 then\n\t\treturn false\n\telse\n\t\tlocal inv_det\
    \ = 1 / det\n\t\tlocal inv_ab = inv_det * ab\n\t\tlocal inv_bc = inv_det * bc\n\
    \t\tlocal inv_cb = inv_det * cb\n\t\tlocal det = ab_sq + bc_sq - cb_sq\n\t\tif\
    \ det > 0 then\n\t\t\treturn (inv_ab * inv_bc - inv_cb * inv_ab) ~= 0\n\t\telse\n\
    \t\t\treturn (inv_ab * inv_cb - inv_bc * inv_ab) ~= 0\n\t\tend\n\tend\nend", " \
    \ local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and (ab > ac or math.abs(b - c) < math.abs(a - c))\n\
    end", "\tlocal ab = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\
    \treturn (ab > bc and ab > ac)\nend", "\tlocal ab = math.abs(b-a)\n\tlocal bc\
    \ = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\treturn ab >= bc and ab >= ac\n\
    end", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab\
    \ == bc and ab == ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", " \
    \ local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  return ab * bc *\
    \ ac >= 0\nend", "  local ab = math.sqrt(math.pow(a, 2) + math.pow(b, 2))\n  local\
    \ bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n  local ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n  return ab > bc and ab > ac\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "  return (b - c) * (a + b) > 0 and\n         (b - c)\
    \ * (c - a) > 0 and\n         (b - c) * (b + a) > 0 and\n         (b - c) * (c\
    \ + a) > 0\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n\
    \  local ac = math.abs(c - a)\n  return ab >= bc and ab >= ac\nend", "\tlocal\
    \ ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab > 0 and bc >\
    \ 0 and ac > 0 and (ab + bc + ac) == 3\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab >= bc and\
    \ ab >= ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac or bc > ac)\nend",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "\t-- Check that the sides are non-zero\n\
    \tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\tend", "\tlocal ab =\
    \ a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc *\
    \ ab\n\treturn det > 0\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", " \
    \ local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and\n         ab > ac and\n         math.abs(b - c) >\
    \ math.abs(a - c)\nend", "  local ab = a - b\n  local bc = b - c\n  local ac =\
    \ c - a\n  return ab == bc and ab == ac\nend", "\tlocal ab = a - b\n\tlocal bc\
    \ = b - c\n\tlocal cb = c - b\n\tlocal det = ab * cb - bc * ab\n\treturn det >\
    \ 0\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local\
    \ ac = math.abs(c - a)\n  return ab > bc and\n         ab > ac and\n         bc\
    \ > ac\nend", "  local ab = math.abs(a-b)\n  local bc = math.abs(b-c)\n  local\
    \ cb = math.abs(c-b)\n  return ab > bc and ab > cb\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab >= bc and ab >= ac\nend", "  local ab = math.abs(b - a)\n\
    \  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc\
    \ and (ab > ac or bc > ac)\nend", "  local ab = math.abs(b - a)\n  local bc =\
    \ math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn ab > bc and\n\t\tab > ac and\n\t\tbc > ac\nend",
  "  local ab = math.abs(a-b)\n  local bc = math.abs(b-c)\n  local ac = math.abs(c-a)\n\
    \  return ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\n\
    end", "\t-- Check that the sides are all positive\n\tif a < 0 or b < 0 or c <\
    \ 0 then\n\t\treturn false\n\tend", "\tlocal ab = math.abs(b - a)\n\tlocal bc\
    \ = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\n\
    end", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac\
    \ = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "   local ab = math.abs(b\
    \ - a)\n   local bc = math.abs(c - b)\n   local ac = math.abs(c - a)\n   if ab\
    \ > bc then\n      return ab > ac\n   else\n      return bc > ac\n   end\nend",
  "\tlocal ab = math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal ac = math.abs(a-c)\n\
    \treturn ab > bc and ab > ac\nend", "   local ab = math.abs(b - a)\n   local bc\
    \ = math.abs(c - b)\n   local ac = math.abs(c - a)\n   if ab > bc then\n     \
    \ return false\n   elseif ab > ac then\n      return true\n   elseif bc > ac then\n\
    \      return false\n   else\n      return true\n   end\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab = a - b\n\tlocal bc\
    \ = b - c\n\tlocal ac = c - a\n\treturn ab > 0 and bc > 0 and ac > 0\nend", "\t\
    local ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\treturn ab > 0 and\
    \ bc > 0 and ac > 0 and ab + bc + ac == 1\nend", "  local ab = math.abs(b - a)\n\
    \  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc\
    \ and ab > ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c -\
    \ b)\n  local ac = math.abs(c - a)\n  return ab > bc and (ab > ac or math.abs(b\
    \ - c) == math.abs(a - c))\nend", "\t-- Check that the sides are non-negative\n\
    \tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", "  local ab = a -\
    \ b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab == ac\n\
    end", "  return ((b - a) * (c - b)) - ((c - a) * (b - a)) > 0\nend", "\t-- Check\
    \ that the sides are all positive\n\tif a < 0 or b < 0 or c < 0 then\n\t\treturn\
    \ false\n\tend\n\t-- Check that the sides are equal\n\tif a == b and a == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or b\
    \ == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\
    \tif a == b or b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides\
    \ are equal\n\tif a == c or c == a then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that\
    \ the sides are equal\n\tif a == b or a == c or b == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == b or a == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif a == b or a == c then\n\
    \t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif a == c or a\
    \ == b then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\tif\
    \ b == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are equal\n\t\
    if a == b or a == c then\n\t\treturn true\n\tend\n\t-- Check that the sides are\
    \ equal\n\tif a == c or a == b then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\t-- Check that the\
    \ sides are equal\n\tif a == b or a == c then\n\t\treturn true\n\tend\n\t-- Check\
    \ that the sides are equal\n\tif a == c or a == b then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif b == c then\n\t\treturn true\n\tend\n\
    \t-- Check that the sides are equal\n\tif a == b or a == c then\n\t\treturn true\n\
    \tend\n\t-- Check that the sides are equal\n\tif a == c or a == b then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif b == c then\n\t\treturn\
    \ true\n\tend\n\t-- Check that the sides are equal\n\tif ", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab == bc or ac ==\
    \ math.pi/2)\nend", "   local ab = math.abs(b - a)\n   local bc = math.abs(c -\
    \ b)\n   local ac = math.abs(c - a)\n   if ab == bc and ab == ac then\n      return\
    \ true\n   elseif ab == bc then\n      return false\n   elseif ab == ac then\n\
    \      return true\n   elseif bc < ab then\n      return false\n   else\n    \
    \  return true\n   end\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc) and (ab > ac)\nend",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab + bc == ac)\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc\
    \ = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\t\n\tif ab > bc then\n\t\tif ab\
    \ > ca then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\
    \t\tif bc > ca then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\
    \tend\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\tlocal\
    \ ac = math.abs(a-c)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = math.abs(a-b)\n\
    \tlocal bc = math.abs(b-c)\n\tlocal ca = math.abs(c-a)\n\tlocal abc = math.abs(ab+bc)\n\
    \tlocal bca = math.abs(bc+ca)\n\tlocal cab = math.abs(ca+b)\n\treturn abc > bca\n\
    end", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\treturn ab\
    \ > 0 and bc > 0 and cb > 0 and ab + bc + cb == ab + bc or ab + bc + cb == ab\
    \ - bc or ab - bc + cb == ab - bc\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab\
    \ > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\t\
    local ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal\
    \ ab_ab = ab_sq + bc_sq\n\tlocal bc_bc = bc_sq + cb_sq\n\tlocal ab_bc = ab_sq\
    \ + bc_bc\n\treturn ab_ab == ab_bc\nend", "\t-- Check that the sides are all positive\n\
    \tif a < 0 or b < 0 or c < 0 then\n\t\treturn false\n\tend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ >= bc and ab >= ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and (ab > ac or bc > ac)\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ >= bc and ab >= ac\nend", "  local ab = math.abs(b-a)\n  local bc = math.abs(c-b)\n\
    \  local ac = math.abs(c-a)\n  return ab > bc and ab > ac\nend", "\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab >= bc and ab >= ac\nend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\n\
    end", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac\
    \ = math.abs(c - a)\n  return ab > bc and (ab == bc or ac == math.pi/2)\nend",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and\n\t\tab > ac and\n\t\tbc > ac\nend", "\tlocal ab\
    \ = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\t\
    local bc_sq = bc * bc\n\tlocal cb_sq = cb * cb\n\tlocal ab_ab = ab_sq + bc_sq\n\
    \tlocal bc_bc = bc_sq - ab_sq\n\tlocal cb_cb = cb_sq - ab_sq\n\treturn ab_ab +\
    \ bc_bc == cb_cb\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac or bc > ac)\n\
    end", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac\
    \ = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\t-- Check that the\
    \ sides are non-zero.\n\tif a ~= 0 or b ~= 0 or c ~= 0 then\n\t\treturn false\n\
    \tend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn ab >= bc and ab >= ac\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac or bc > ac)\n\
    end", "  local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  return ab\
    \ > 0 and bc > 0 and ac > 0 and ab + bc + ac == 1\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and (ab > ac or math.abs(b\
    \ - c) < math.abs(a - c))\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal\
    \ ac = c - a\n\tlocal ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal ac_sq\
    \ = ac * ac\n\tlocal ab_ac = ab * ac\n\tlocal bc_bc = bc * bc \n\tlocal ab_bc\
    \ = ab * bc \n\treturn ab_sq + bc_sq + ac_sq - ab_ac - bc_bc - ab_bc < 0\nend",
  "\t-- Check that the sides are non-zero\n\tif a == 0 or b == 0 or c == 0 then\n\t\
    \treturn false\n\tend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac =\
    \ a - c\n\treturn (ab + bc == ac)\nend", "\tlocal ab = math.abs(a-b)\n\tlocal\
    \ bc = math.abs(b-c)\n\tlocal ac = math.abs(c-a)\n\treturn (ab > bc and ab > ac)\n\
    end", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac\
    \ = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and (ab > ac or bc > ac)\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and (ab\
    \ > ac or bc > ac)\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab >= bc and ab >= ac\nend", "\t\
    local ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab *\
    \ ab\n\tlocal bc_2 = bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\
    \tlocal bc_3 = bc_2 * bc \n\tlocal ac_3 = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\
    \tlocal bc_4 = bc_3 * bc \n\tlocal ac_4 = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\
    \tlocal bc_5 = bc_4 * bc \n\tlocal ac_5 = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\
    \tlocal bc_6 = bc_5 * bc \n\tlocal ac_6 = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\
    \tlocal bc_7 = bc_6 * bc \n\tlocal ac_7 = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\
    \tlocal bc_8 = bc_7 * bc \n\tlocal ac_8 = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\
    \tlocal bc_9 = bc_8 * bc \n\tlocal ac_9 = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\
    \tlocal bc_10 = bc_9 * bc \n\tlocal ac_10 = ac_9 * ac\n\tlocal ab_11 = ab_10 *\
    \ ab\n\tlocal bc_11 = bc_10 * bc \n\tlocal ac_11 = ac_10 * ac\n\tlocal ab_12 =\
    \ ab_11 * ab\n\tlocal bc_12 = bc_11 * bc \n\tlocal ac_12 = ac_11 * ac\n\tlocal\
    \ ab_13 = ab_12 * ab\n\tlocal bc_13 = bc_12 * bc \n\tlocal ac_13 = ac_12 * ac\n\
    \tlocal ab_14 = ab_13 * ab\n\tlocal bc_14 = bc_13 * bc \n\tlocal ac_14 = ac_13\
    \ * ac\n\tlocal ab_15 = ab_14 * ab\n\tlocal bc_15 = bc_14 * bc \n\tlocal ac_15\
    \ = ac_14 * ac\n\tlocal ab_16 = ab_15 * ab\n\tlocal bc_16 = bc_15 * bc \n\tlocal\
    \ ac_16 = ac_15 * ac\n\tlocal ab_17 = ab_16 * ab\n\tlocal bc_17 = bc_16 * bc \n\
    \tlocal ac_17 = ac_16 * ac\n\t", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab\
    \ = math.abs(b-a)\n\tlocal bc = math.abs(c-b)\n\tlocal ac = math.abs(c-a)\n\t\
    return ab > bc and ab > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\t\
    local cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal cb_sq\
    \ = cb * cb\n\tlocal det = ab_sq + bc_sq - cb_sq\n\treturn det > 0\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and (ab == bc or ac == math.pi/2)\nend", "\tlocal ab\
    \ = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab >= bc and ab >= ac\nend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and\n    \
    \     ab > ac and\n         bc > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal\
    \ bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and (ab\
    \ > ac or bc > ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab + bc == ac)\nend", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab > bc and ab > ac)\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc and\
    \ ab > ac)\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\treturn (ab > bc and ab > ac)\nend", "  local ab\
    \ = math.abs(b-a)\n  local bc = math.abs(c-b)\n  local ac = math.abs(c-a)\n  return\
    \ ab > bc and ab > ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c\
    \ - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\t\
    local ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and (ab > ac or bc > ac)\nend", "  local ab = a - b\n\
    \  local bc = b - c\n  local ac = c - a\n  return ab > 0 and bc > 0 and ac > 0\
    \ and ab + bc + ac == b\nend", "\tlocal a, b, c = math.abs(a), math.abs(b), math.abs(c)\n\
    \tif a == b and a == c then return true end\n\tif a == b or a == c then return\
    \ false end\n\tif b == c then return false end\n\tif a < b and a < c then return\
    \ true end\n\tif b < c then return true end\n\treturn false\nend", "  local ab\
    \ = a - b\n  local bc = b - c\n  local ac = c - a\n  return ab == bc and ab ==\
    \ ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local\
    \ ac = math.abs(c - a)\n  return ab >= bc and (ab >= ac or math.abs(b - c) >=\
    \ math.abs(a - c))\nend", "  local ab = a - b\n  local bc = b - c\n  local ac\
    \ = c - a\n  local ab_ac = ab * ac\n  local bc_ac = bc * ac\n  return ab_ac +\
    \ bc_ac == 0 \nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c -\
    \ b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and  ab > ac\nend", "\tlocal\
    \ a, b, c = math.abs(a), math.abs(b), math.abs(c)\n\tif a == b and b == c then\
    \ return true end\n\tif a == c then return false end\n\tif b == c then return\
    \ false end\n\tif a == b or b == c then return false end\n\tif a == c then return\
    \ true end\n\treturn false\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc = math.abs(b-c)\n\
    \tlocal ca = math.abs(c-a)\n\treturn ab > bc and ab > ca \nend", "\tlocal ab =\
    \ math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\
    \treturn ab > bc and ab > ac\nend", "  local ab = math.sqrt(math.pow(a, 2) + math.pow(b,\
    \ 2))\n  local bc = math.sqrt(math.pow(b, 2) + math.pow(c, 2))\n  local ac = math.sqrt(math.pow(a,\
    \ 2) + math.pow(c, 2))\n  return ab > bc and ab > ac\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and\n\
    \t\tab > ac and\n\t\tbc > ac\nend", "\tlocal ab = math.abs(a-b)\n\tlocal bc =\
    \ math.abs(b-c)\n\tlocal cb = math.abs(c-b)\n\t\n\tif ab == bc then\n\t\tif ab\
    \ == cb then\n\t\t\treturn true\n\t\telse\n\t\t\treturn false\n\t\tend\n\telse\n\
    \t\treturn ab > bc or ab > cb\n\tend\nend", "  local ab = math.abs(b - a)\n  local\
    \ bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab\
    \ > ac\nend", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\t\
    local ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\tlocal ac_sq = ac * ac\n\tlocal\
    \ ab_ac = ab * ac\n\tlocal ab_ab = ab * ab\n\tlocal bc_bc = bc * bc\n\tlocal bc_ab\
    \ = bc * ab\n\tlocal ac_ac = ac * ac\n\tlocal ab_ac_bc = ab_ac * bc\n\tlocal ab_ac_bc_ac\
    \ = ab_ac * bc_ac\n\tlocal ab_ac_bc_ab = ab_ac * bc_ab\n\tlocal bc_ab_ac = bc_ab\
    \ * ac\n\tlocal bc_ab_ac_bc = bc_ab * ac_bc\n\tlocal bc_ab_ac_bc_ac = bc_ab *\
    \ ac_bc_ac\n\tlocal bc_ab_ac_bc_ab = bc_ab * ac_bc_ab\n\tlocal ab_ac_bc_ab_ac\
    \ = ab_ac_bc * ab\n\tlocal ab_ac_bc_ab_ac_bc = ab_ac_bc * ab_ac\n\tlocal ab_ac_bc_ab_ac_bc_ac\
    \ = ab_ac_bc * ab_ac_bc\n\tlocal ab_ac_bc_ab_ac_bc_ab = ab_ac_bc * ab_ac_bc_ab\n\
    \tlocal ab_ac_bc_ab_ac_bc_ab_ac = ab_ac_bc * ab_ac_bc_ab_ac\n\tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc\
    \ = ab_ac_bc * ab_ac_bc_ab_ac_bc\n\tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc_ac = ab_ac_bc\
    \ * ab_ac_bc_ab_ac_bc_ac\n\tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc_ab = ab_ac_bc * ab_ac_bc_ab_ac_bc_ab_ac\n\
    \tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac = ab_ac_bc * ab_ac_bc_ab_ac_bc_ab_ac_bc\n\
    \tlocal ab_ac_bc_ab_ac_bc_ab_ac_bc_ab_ac_b", "  local ab = math.abs(b - a)\n \
    \ local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and\n\
    \         ab > ac and\n         bc > ac\nend", "\tlocal ab = math.abs(b - a)\n\
    \tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab >= bc\
    \ and ab >= ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c -\
    \ b)\n\tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend", "\tlocal\
    \ ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn (ab > bc and ab > ac)\nend", "\tlocal ab = math.abs(b - a)\n\t\
    local bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab >= bc and\
    \ ab >= ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\
    \tlocal ac = math.abs(c - a)\n\treturn ab > bc and ab > ac\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
