name: HumanEval_157_right_angle_triangle
language: lua
prompt: "-- Given the lengths of the three sides of a triangle. Return true if the\
  \ three\n-- sides form a right-angled triangle, false otherwise.\n-- A right-angled\
  \ triangle is a triangle in which one angle is right angle or \n-- 90 degree.\n\
  -- Example:\n-- >>> right_angle_triangle(3, 4, 5)\n-- true\n-- >>> right_angle_triangle(1,\
  \ 2, 3)\n-- false\nlocal function right_angle_triangle(a, b, c)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = right_angle_triangle\n\
  \    lu.assertEquals(candidate(3, 4, 5), true)\n    lu.assertEquals(candidate(1,\
  \ 2, 3), false)\n    lu.assertEquals(candidate(10, 6, 8), true)\n    lu.assertEquals(candidate(2,\
  \ 2, 2), false)\n    lu.assertEquals(candidate(7, 24, 25), true)\n    lu.assertEquals(candidate(10,\
  \ 5, 7), false)\n    lu.assertEquals(candidate(5, 12, 13), true)\n    lu.assertEquals(candidate(15,\
  \ 8, 17), true)\n    lu.assertEquals(candidate(48, 55, 73), true)\n    lu.assertEquals(candidate(1,\
  \ 1, 1), false)\n    lu.assertEquals(candidate(2, 2, 10), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal\
    \ ac = math.abs(c - a)\n\treturn ab > bc and (ab > ac or math.abs(b - c) < math.abs(a\
    \ - c))\nend", "  local ab = a - b\n  local bc = b - c\n  local cb = c - b\n \
    \ local det = ab * cb - bc * ab\n  if det < 0 then\n    return false\n  elseif\
    \ det > 0 then\n    return true\n  else\n    return bc < 0\n  end\nend", "  local\
    \ ab = math.abs(b - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c\
    \ - a)\n  return ab > bc and (ab > ac or math.abs(a - c) > math.abs(b - c))\n\
    end", "\tlocal ab = a - b\n\tlocal bc = b - c\n\tlocal cb = c - b\n\tlocal det\
    \ = ab * cb - bc * ab\n\treturn det > 0\nend", "  local ab = a - b\n  local bc\
    \ = b - c\n  local ac = c - a\n  return (ab > 0 and bc > 0 and ac > 0) or (ab\
    \ > 0 and bc > 0 and ac < 0)\nend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\n\
    end", "\t-- Check that the sides are all positive\n\tif a < 0 or b < 0 or c <\
    \ 0 then\n\t\treturn false\n\tend", "  local ab = math.abs(b - a)\n  local bc\
    \ = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab >= bc and ab >=\
    \ ac\nend", "  local ab = a - b\n  local bc = b - c\n  local ac = c - a\n  local\
    \ ab_sqr = ab * ab\n  local bc_sqr = bc * bc \n  local ac_sqr = ac * ac\n  local\
    \ ab_ac = ab * ac\n  local ab_bc = ab * bc\n  local bc_ac = bc * ac\n  local ab_ab\
    \ = ab * ab\n  local bc_bc = bc * bc \n  local ab_bc = ab * bc\n  local bc_ab\
    \ = bc * ab\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local ab_ab =\
    \ ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc\
    \ * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab *\
    \ ac\n  local bc_ab = bc * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n\
    \  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local ab_ab = ab * ab\n \
    \ local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local\
    \ ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab\
    \ = bc * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac =\
    \ ab * ac\n  local bc_ab = bc * ab\n  local ab_ab = ab * ab\n  local bc_ac = bc\
    \ * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n  local ab_ab = ab *\
    \ ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n  local bc_ab = bc * ab\n\
    \  local ab_ab = ab * ab\n  local bc_ac = bc * ac\n  local ab_ac = ab * ac\n \
    \ local bc_ab = bc * ab\n  local ab_ab = ab * ab\n  local b", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab\
    \ + bc == ac)\nend", "  return (b - a) * (c - b) <= 0\nend", "  local ab = math.abs(b\
    \ - a)\n  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab\
    \ > bc and ab > ac\nend", "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c\
    \ - b)\n\tlocal ac = math.abs(c - a)\n\treturn (ab > bc) and (ab > ac)\nend",
  "\tlocal ab = math.abs(b - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c\
    \ - a)\n\treturn ab > bc and ab > ac\nend", "\tlocal ab = a - b\n\tlocal bc =\
    \ b - c\n\tlocal cb = c - b\n\tlocal ab_sq = ab * ab\n\tlocal bc_sq = bc * bc\n\
    \tlocal cb_sq = cb * cb\n\tlocal det = ab_sq * bc_sq - bc_sq * cb_sq\n\t\n\tif\
    \ det < 0 then\n\t\treturn false\n\telseif det > 0 then\n\t\treturn true\n\telse\n\
    \t\treturn ((ab_sq * cb) - (bc_sq * ab)) > 0\n\tend\nend", "\tlocal ab = math.abs(b\
    \ - a)\n\tlocal bc = math.abs(c - b)\n\tlocal ac = math.abs(c - a)\n\treturn ab\
    \ > bc and ab > ac\nend", "  local ab = a - b\n  local bc = b - c\n  local cb\
    \ = c - b\n  return ab == bc and ab == cb\nend", "  local ab = math.abs(b - a)\n\
    \  local bc = math.abs(c - b)\n  local ac = math.abs(c - a)\n  return ab >= bc\
    \ and ab >= ac\nend", "  local ab = math.abs(b - a)\n  local bc = math.abs(c -\
    \ b)\n  local ac = math.abs(c - a)\n  return ab > bc and ab > ac\nend", "\tlocal\
    \ ab = a - b\n\tlocal bc = b - c\n\tlocal ac = c - a\n\tlocal ab_2 = ab * ab\n\
    \tlocal bc_2 = bc * bc \n\tlocal ac_2 = ac * ac\n\tlocal ab_3 = ab_2 * ab\n\t\
    local bc_3 = bc_2 * bc \n\tlocal ac_3 = ac_2 * ac\n\tlocal ab_4 = ab_3 * ab\n\t\
    local bc_4 = bc_3 * bc \n\tlocal ac_4 = ac_3 * ac\n\tlocal ab_5 = ab_4 * ab\n\t\
    local bc_5 = bc_4 * bc \n\tlocal ac_5 = ac_4 * ac\n\tlocal ab_6 = ab_5 * ab\n\t\
    local bc_6 = bc_5 * bc \n\tlocal ac_6 = ac_5 * ac\n\tlocal ab_7 = ab_6 * ab\n\t\
    local bc_7 = bc_6 * bc \n\tlocal ac_7 = ac_6 * ac\n\tlocal ab_8 = ab_7 * ab\n\t\
    local bc_8 = bc_7 * bc \n\tlocal ac_8 = ac_7 * ac\n\tlocal ab_9 = ab_8 * ab\n\t\
    local bc_9 = bc_8 * bc \n\tlocal ac_9 = ac_8 * ac\n\tlocal ab_10 = ab_9 * ab\n\
    \tlocal bc_10 = bc_9 * bc \n\tlocal ac_10 = ac_9 * ac\n\tlocal ab_11 = ab_10 *\
    \ ab\n\tlocal bc_11 = bc_10 * bc \n\tlocal ac_11 = ac_10 * ac\n\tlocal ab_12 =\
    \ ab_11 * ab\n\tlocal bc_12 = bc_11 * bc \n\tlocal ac_12 = ac_11 * ac\n\tlocal\
    \ ab_13 = ab_12 * ab\n\tlocal bc_13 = bc_12 * bc \n\tlocal ac_13 = ac_12 * ac\n\
    \tlocal ab_14 = ab_13 * ab\n\tlocal bc_14 = bc_13 * bc \n\tlocal ac_14 = ac_13\
    \ * ac\n\tlocal ab_15 = ab_14 * ab\n\tlocal bc_15 = bc_14 * bc \n\tlocal ac_15\
    \ = ac_14 * ac\n\tlocal ab_16 = ab_15 * ab\n\tlocal bc_16 = bc_15 * bc \n\tlocal\
    \ ac_16 = ac_15 * ac\n\tlocal ab_17 = ab_16 * ab\n\tlocal bc_17 = bc_16 * bc \n\
    \tlocal ac_17 = ac_16 * ac\n\t"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
