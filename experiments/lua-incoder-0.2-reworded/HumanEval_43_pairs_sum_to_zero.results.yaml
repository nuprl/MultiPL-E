language: lua
name: HumanEval_43_pairs_sum_to_zero
results:
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local one\
    \ = {}\n  for i, v in ipairs(l) do\n    if v == 0 then\n      zero[i] = true\n\
    \    elseif v == 1 then\n      one[i] = true\n    end\n  end\n  return #one ==\
    \ 0 and #zero == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedhfb1da.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpedhfb1da.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zeros = {}\n  for k, v\
    \ in pairs(l) do\n    if v == 0 then\n      table.insert(zeros, k)\n    end\n\
    \  end\n  return #zeros == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxpaaeg7v.lua:30:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxpaaeg7v.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    table.insert(pairs, {k, v, 0})\n  end\n  table.sort(pairs,\
    \ function(a, b) return a[2] > b[2] end)\n  local i = 1\n  local j = 1\n  while\
    \ i <= #pairs do\n    local k = pairs[i][1]\n    local v = pairs[i][2]\n    if\
    \ v == 0 then\n      if j > i then\n        pairs[j] = nil\n      end\n      j\
    \ = j + 1\n    else\n      pairs[j][2] = pairs[j][2] + v\n      if pairs[j][2]\
    \ > 0 then\n        pairs[j][3] = pairs[j][3] - v\n      end\n    end\n    i =\
    \ i + 1\n  end\n  local pair = pairs[i]\n  if pair and pair[3] ~= 0 then\n   \
    \ return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9my14r85.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp9my14r85.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp9my14r85.lua:48: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ sum = 0\n  for _, v in pairs do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ox8jf_.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpn0ox8jf_.lua:17: in function 'candidate'\n\t/tmp/tmpn0ox8jf_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i, v in ipairs(l) do\n    pairs[i] = v\n    zero = zero + v\n  end\n\
    \  local pairs_sorted = pairs.sorted()\n  local last_pair = pairs_sorted[1]\n\
    \  for i, v in pairs_sorted do\n    if v == 0 then\n      return false\n    end\n\
    \    if v == last_pair then\n      return false\n    end\n    last_pair = v\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkrs3hlyn.lua:21:\
    \ attempt to call field 'sorted' (a nil value)\nstack traceback:\n\t/tmp/tmpkrs3hlyn.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpkrs3hlyn.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for k, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh6blmqz.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplh6blmqz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local zeros\
    \ = setmetatable({}, {__mode = \"kv\"})\n  zeros[zero] = true\n  for k, v in pairs(pairs)\
    \ do\n    if zeros[k] then\n      return false\n    end\n    zeros[k] = true\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf4uvx8hz.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpf4uvx8hz.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpf4uvx8hz.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i, v in ipairs(l) do\n    pairs[i] = v + zero\n  end\n  for i, v\
    \ in ipairs(pairs) do\n    if v == zero then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwy7brbdi.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpwy7brbdi.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local v = l[i]\n    pairs[v] = true\n    zero\
    \ = zero + v\n  end\n  for i = 1, #pairs do\n    if pairs[i] then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphnox_cwp.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphnox_cwp.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local zeroes\
    \ = {}\n  for k, v in pairs(l) do\n    zero = zero + v\n    table.insert(zeroes,\
    \ zero)\n  end\n  local zeroes_list = table.concat(zeroes, \",\")\n  local zeroes_string\
    \ = string.format(\"{%s}\", zeroes_list)\n  return zeroes_string == \"{0,}\" or\
    \ zeroes_string == \"{0}\"\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3yklu4dh.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3yklu4dh.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ thirty = 21\n  local forty = 22\n  local fifty = 23\n  local sixty = 24\n  local\
    \ seventy = 25\n  local eighty = 26\n  local ninety = 27\n  local hundred = 28\n\
    \  local thousand = 29\n  local million = 30\n  local billion = 31\n  local trillion\
    \ = 32\n  local quadrillion = 33\n  local quintillion = 34\n  local sextillion\
    \ = 35\n  local septillion = 36\n  local octillion = 37\n  local nonillion = 38\n\
    \  local decillion = 39\n  local undecillion = 40\n  local duodecillion = 41\n\
    \  local tredecillion = 42\n  local quattuordecillion = 43\n  local quindecillion\
    \ = 44\n  local sexdecillion = 45\n  local septendecillion = 46\n  local octodecillion\
    \ = 47\n  local novemdecillion = 48\n  local vigintillion = 49\n  local unvigintillion\
    \ = 50\n  local duovigintillion = 51\n  local trevigintillion = 52\n  local quattuorvigintillion\
    \ = 53\n  local quinvigintillion = 54\n  local sexvigintillion = 55\n  local septenvigintillion\
    \ = 56\n  local octovigintillion = 57\n  local novemvigintillion = 58\n  local\
    \ vigintillions = 59\n  local unvigintillions = 60\n  local duovigintillions =\
    \ 61\n  local trevigintillions = 62\n  local qu\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexolw8rf.lua:94: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgxueuin.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbgxueuin.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  for i = 1, #l do\n    local v = l[i]\n    if\
    \ v > 0 then\n      zero[#zero + 1] = v\n    end\n  end\n  for i = 1, #zero do\n\
    \    if zero[i] ~= 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnx3dpigw.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpnx3dpigw.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for k, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh6blmqz.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplh6blmqz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    zero[k] = v\n  end\n  local zeros = {}\n  for k, v in pairs(zero)\
    \ do\n    zeros[k] = v\n  end\n  local zeros_set = setmetatable({}, {__mode =\
    \ \"v\"})\n  for k, v in pairs(zeros) do\n    zeros_set[k] = v\n  end\n  local\
    \ zeros_set_size = #zeros_set\n  local zeros_set_sorted = table.sort(zeros_set)\n\
    \  local zeros_set_sorted_size = #zeros_set_sorted\n  local zeros_set_sorted_size\
    \ = zeros_set_sorted_size - 1\n  local zeros_set_sorted_last = zeros_set_sorted[zeros_set_sorted_size]\n\
    \  local zeros_set_sorted_last_key = zeros_set_sorted[zeros_set_sorted_size -\
    \ 1]\n  local zeros_set_sorted_last_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 2]\n  local zeros_set_sorted_last_key_value = zeros_set_sorted[zeros_set_sorted_size\
    \ - 1]\n  local zeros_set_sorted_last_key_value = zeros_set_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1zog410b.lua:65: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  for k, v\
    \ in pairs(pairs) do\n    if v == zero then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf60dus1q.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpf60dus1q.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpf60dus1q.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zeros = {}\n  for i = 1,\
    \ #l do\n    zeros[i] = 0\n  end\n  for i = 1, #l do\n    for j = 1, #l do\n \
    \     if l[i] + l[j] == 0 then\n        zeros[i] = true\n        zeros[j] = true\n\
    \      end\n    end\n  end\n  return #zeros == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmufndjq4.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmufndjq4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    if v == 0 then\n      table.insert(zero,\
    \ k)\n    else\n      table.insert(pairs, {k, v})\n    end\n  end\n  local count\
    \ = 0\n  for _, v in pairs(zero) do\n    count = count + 1\n  end\n  if count\
    \ == 1 then\n    return true\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_2eoqq0u.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp_2eoqq0u.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp_2eoqq0u.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local zeros\
    \ = pairs:map(function(pair)\n    return pair[1]\n  end)\n  return #zeros == 0\
    \ and pairs[#pairs] > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzhho4fer.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpzhho4fer.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpzhho4fer.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local zeros\
    \ = {}\n  for k, v in pairs(l) do\n    if v == 0 then\n      zero[k] = true\n\
    \    elseif zero[k] then\n      zeros[k] = true\n    end\n  end\n  return #zeros\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbhce1ye.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplbhce1ye.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for k, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh6blmqz.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplh6blmqz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local zeros\
    \ = {}\n  for k, v in pairs(l) do\n    if v == 0 then\n      zero[k] = true\n\
    \    elseif zero[k] then\n      zeros[k] = true\n    end\n  end\n  return #zeros\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplbhce1ye.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplbhce1ye.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgxueuin.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbgxueuin.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ twenty_one = 21\n  local twenty_two = 22\n  local twenty_three = 23\n  local\
    \ twenty_four = 24\n  local twenty_five = 25\n  local twenty_six = 26\n  local\
    \ twenty_seven = 27\n  local twenty_eight = 28\n  local twenty_nine = 29\n  local\
    \ thirty = 30\n  local thirty_one = 31\n  local thirty_two = 32\n  local thirty_three\
    \ = 33\n  local thirty_four = 34\n  local thirty_five = 35\n  local thirty_six\
    \ = 36\n  local thirty_seven = 37\n  local thirty_eight = 38\n  local thirty_nine\
    \ = 39\n  local forty = 40\n  local forty_one = 41\n  local forty_two = 42\n \
    \ local forty_three = 43\n  local forty_four = 44\n  local forty_five = 45\n \
    \ local forty_six = 46\n  local forty_seven = 47\n  local forty_eight = 48\n \
    \ local forty_nine = 49\n  local fifty = 50\n  local fifty_one = 51\n  local fifty_two\
    \ = 52\n  local fifty_three = 53\n  local fifty_four = 54\n  local fifty_five\
    \ = 55\n  local fifty_six = 56\n  local fifty_seven = 57\n  local fifty_eight\
    \ = 58\n  local fifty_nine = 59\n  local sixty = 60\n  local sixty_one = 61\n\
    \  local sixty_two = 62\n  local sixty_three = 63\n  local sixty_four = 64\n \
    \ local sixty_fi\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcki1fkq4.lua:96: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ sum = 0\n  for _, v in pairs do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ox8jf_.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpn0ox8jf_.lua:17: in function 'candidate'\n\t/tmp/tmpn0ox8jf_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zeros = 0\n  local zeros_found\
    \ = false\n  for k, v in pairs(pairs) do\n    zeros = zeros + v\n    if zeros\
    \ == 0 then\n      zeros_found = true\n    end\n  end\n  return not zeros_found\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjijlew53.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpjijlew53.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpjijlew53.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    if v == 0 then\n      zero[k] = true\n    end\n  end\n  for\
    \ k, v in pairs(l) do\n    if zero[k] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fo4jj8p.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6fo4jj8p.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 0\n  for i, v in ipairs(l) do\n    local vv = v\n    if v < zero then\n    \
    \  zero = v\n    elseif v > zero then\n      one = one + v\n    end\n  end\n \
    \ return one == zero\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoxk0d8ve.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpoxk0d8ve.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local one\
    \ = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v == 0 then\n      zero[i]\
    \ = true\n    elseif v == 1 then\n      one[i] = true\n    end\n  end\n  return\
    \ #one == 0 and #zero == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd71vxmxc.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd71vxmxc.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = setmetatable({},\
    \ {__mode=\"k\"})\n  for k,v in pairs(l) do\n    zero[k] = zero[k] or 0\n    zero[k]\
    \ = zero[k] + v\n    if zero[k] == 0 then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiip92lgu.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpiip92lgu.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5p_j4f9.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv5p_j4f9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    table.insert(pairs, v)\n  end\n  local zero = 0\n  local\
    \ pair\n  for _, pair in ipairs(pairs) do\n    zero = zero + pair\n  end\n  return\
    \ zero == 0 and pairs == {} or #pairs == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmmapzg7t.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpmmapzg7t.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpmmapzg7t.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    pairs[v] = pairs[v] or 0\n    pairs[v] = pairs[v]\
    \ + 1\n  end\n  for i = 1, #pairs do\n    if pairs[i] > 1 then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxr8536ma.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxr8536ma.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ thirty = 21\n  local forty = 22\n  local fifty = 23\n  local sixty = 24\n  local\
    \ seventy = 25\n  local eighty = 26\n  local ninety = 27\n  local hundred = 28\n\
    \  local thousand = 29\n  local million = 30\n  local billion = 31\n  local trillion\
    \ = 32\n  local quadrillion = 33\n  local quintillion = 34\n  local sextillion\
    \ = 35\n  local septillion = 36\n  local octillion = 37\n  local nonillion = 38\n\
    \  local decillion = 39\n  local undecillion = 40\n  local duodecillion = 41\n\
    \  local tredecillion = 42\n  local quattuordecillion = 43\n  local sexdecillion\
    \ = 44\n  local septendecillion = 45\n  local octodecillion = 46\n  local novemdecillion\
    \ = 47\n  local vigintillion = 48\n  local unvigintillion = 49\n  local duovigintillion\
    \ = 50\n  local trevigintillion = 51\n  local quattuorvigintillion = 52\n  local\
    \ sexvigintillion = 53\n  local septenvigintillion = 54\n  local octovigintillion\
    \ = 55\n  local novemvigintillion = 56\n  local vigintillions = 57\n  local unvigintillions\
    \ = 58\n  local duovigintillions = 59\n  local trevigintillions = 60\n  local\
    \ quattuorvigintillions = 61\n  local sexvigintillions = \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpz4ctonuk.lua:78: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    local pairs = pairs(v)\n    if pairs == nil\
    \ then\n      pairs = {v}\n    end\n    for _, v2 in ipairs(pairs) do\n      if\
    \ v2 == zero or v2 == one then\n        return false\n      end\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjrb5z3x1.lua:18:\
    \ bad argument #1 to 'pairs' (table expected, got number)\nstack traceback:\n\t\
    /tmp/tmpjrb5z3x1.lua:18: in function 'candidate'\n\t/tmp/tmpjrb5z3x1.lua:34: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for k, v in pairs(l) do\n    zero = zero + v\n    one = one - v\n    if\
    \ zero > one then return false end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb_fc3s5s.lua:31:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpb_fc3s5s.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  for k, v\
    \ in pairs(pairs) do\n    if v == zero then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf60dus1q.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpf60dus1q.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpf60dus1q.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local sum = 0\n  for k, v in pairs(pairs)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_s5oyop.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpv_s5oyop.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpv_s5oyop.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ thirty = 21\n  local forty = 22\n  local fifty = 23\n  local sixty = 24\n  local\
    \ seventy = 25\n  local eighty = 26\n  local ninety = 27\n  local hundred = 28\n\
    \  local thousand = 29\n  local million = 30\n  local billion = 31\n  local trillion\
    \ = 32\n  local quadrillion = 33\n  local quintillion = 34\n  local sextillion\
    \ = 35\n  local septillion = 36\n  local octillion = 37\n  local nonillion = 38\n\
    \  local decillion = 39\n  local undecillion = 40\n  local duodecillion = 41\n\
    \  local tredecillion = 42\n  local quattuordecillion = 43\n  local quindecillion\
    \ = 44\n  local sexdecillion = 45\n  local septendecillion = 46\n  local octodecillion\
    \ = 47\n  local novemdecillion = 48\n  local vigintillion = 49\n  local unvigintillion\
    \ = 50\n  local duovigintillion = 51\n  local trevigintillion = 52\n  local quattuorvigintillion\
    \ = 53\n  local quinvigintillion = 54\n  local sexvigintillion = 55\n  local septenvigintillion\
    \ = 56\n  local octovigintillion = 57\n  local novemvigintillion = 58\n  local\
    \ vigintillions = 59\n  local unvigintillions = 60\n  local duovigintillions =\
    \ 61\n  local trevigintillions = 62\n  local qu\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexolw8rf.lua:94: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    zero[k] = v\n  end\n  local sum = 0\n  for k, v in pairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0 and pairs(zero) == nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8yr3ki9.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy8yr3ki9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = setmetatable({},\
    \ {__mode=\"k\"})\n  for k, v in pairs(l) do\n    zero[k] = zero[k] or 0\n   \
    \ zero[k] = zero[k] + v\n    if zero[k] == 0 then\n      return true\n    end\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuzqnkv2t.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpuzqnkv2t.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgxueuin.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbgxueuin.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v > zero then\n      pairs[v]\
    \ = true\n      zero = zero + v\n    end\n  end\n  return #pairs == 0\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyk2sp76.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmyk2sp76.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local one\
    \ = {}\n  for k, v in pairs(l) do\n    if v == 0 then\n      zero[k] = true\n\
    \    elseif v == 1 then\n      one[k] = true\n    end\n  end\n  return #one ==\
    \ 0 and #zero == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9n30pv83.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9n30pv83.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zeros = 0\n  for k, v in pairs(pairs)\
    \ do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros\
    \ == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpug6_au82.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpug6_au82.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpug6_au82.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local result = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v ==\
    \ zero then\n      table.insert(result, one)\n    elseif v == one then\n     \
    \ table.insert(result, zero)\n    else\n      local sum = 0\n      for j = 1,\
    \ #l do\n        sum = sum + l[j]\n      end\n      if sum == 0 then\n       \
    \ table.insert(result, zero)\n      else\n        table.insert(result, one)\n\
    \      end\n    end\n  end\n  return #result == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpob4vdakb.lua:45:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpob4vdakb.lua:45:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in ipairs(l) do\n    pairs[v] = true\n  end\n  local sum = 0\n  for _, v in\
    \ pairs do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpevj4oykz.lua:20:\
    \ attempt to call a table value\nstack traceback:\n\t/tmp/tmpevj4oykz.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpevj4oykz.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  local zero = true\n  for _, v\
    \ in pairs(l) do\n    if not pairs[v] then\n      zero = false\n    end\n  end\n\
    \  return zero\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe8i3d7pt.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpe8i3d7pt.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpe8i3d7pt.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    zero[k] = v\n  end\n  local zeros = zero\n  local sum = 0\n\
    \  local found = false\n  for k, v in pairs(l) do\n    sum = sum + v\n    if sum\
    \ == 0 then\n      found = true\n    end\n  end\n  return found and pairs(zeros)\
    \ == pairs(l)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3rxtn4qx.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3rxtn4qx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for _, v in ipairs(l) do\n    pairs[v] = pairs[v] + 1 if pairs[v] ~=\
    \ nil then pairs[v] else 1 end\n    if pairs[v] == 0 then\n      zero = zero +\
    \ 1\n    end\n  end\n  return zero == #pairs\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp96smlka8.lua:18: ''='' expected near ''else''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in ipairs(l) do\n    pairs[v] = true\n  end\n  for _, v in ipairs(l) do\n  \
    \  if pairs[v] then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1e1mop6.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph1e1mop6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    zero = zero + v\n    if v > zero then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3w6_u5w9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3w6_u5w9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ sum = 0\n  for _, v in pairs do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ox8jf_.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpn0ox8jf_.lua:17: in function 'candidate'\n\t/tmp/tmpn0ox8jf_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    local pairs = pairs(v)\n    if pairs == nil\
    \ then\n      pairs = {}\n    end\n    local count = 0\n    for _, v2 in pairs\
    \ do\n      count = count + v2\n    end\n    if count > zero then\n      return\
    \ false\n    end\n    zero = zero + count\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17a64qmo.lua:18:\
    \ bad argument #1 to 'pairs' (table expected, got number)\nstack traceback:\n\t\
    /tmp/tmp17a64qmo.lua:18: in function 'candidate'\n\t/tmp/tmp17a64qmo.lua:37: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i = 1, #l do\n    local v = l[i]\n    zero = zero + v\n    if zero\
    \ > one then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjiz3uhnp.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjiz3uhnp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    local n = v + zero\n    if n >= zero then\n\
    \      zero = n\n    else\n      one = one + n\n    end\n  end\n  return one ==\
    \ zero\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzpfuhe1.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkzpfuhe1.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for k, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh6blmqz.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplh6blmqz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    if v == 0 then\n      zero[k] = true\n    end\n  end\n  local\
    \ sum = 0\n  for k, v in pairs(l) do\n    if zero[k] then\n      return false\n\
    \    end\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnxuj5qx.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptnxuj5qx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = setmetatable({},\
    \ {__mode=\"k\"})\n  local zeros = {}\n  for k, v in pairs(l) do\n    zeros[k]\
    \ = zeros[k] or 0\n    zeros[k] = zeros[k] + v\n  end\n  for k, v in pairs(zeros)\
    \ do\n    if v == 0 then\n      return true\n    end\n  end\n  return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg6xgsvg4.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpg6xgsvg4.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  for\
    \ _, v in pairs(pairs) do\n    zeros = zeros + v\n  end\n  return zeros == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpnig1nsfn.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpnig1nsfn.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpnig1nsfn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i, v\
    \ in ipairs(l) do\n    pairs[i] = v\n  end\n  local zeros = 0\n  for i, v in ipairs(pairs)\
    \ do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros\
    \ == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4lyqq96t.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4lyqq96t.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    zero[k] = v\n  end\n  local zeros = {}\n  for k, v in pairs(zero)\
    \ do\n    zeros[k] = v\n  end\n  local zeros_set = setmetatable({}, {__index =\
    \ zeros_set})\n  for k, v in pairs(zeros) do\n    zeros_set[k] = v\n  end\n  local\
    \ zeros_keys = pairs(zeros_set)\n  local zeros_values = pairs(zeros_set)\n  local\
    \ zeros_keys_sorted = table.sort(zeros_keys)\n  local zeros_values_sorted = table.sort(zeros_values)\n\
    \  local zeros_keys_sorted_last = zeros_keys_sorted[#zeros_keys_sorted]\n  local\
    \ zeros_values_sorted_last = zeros_values_sorted[#zeros_values_sorted]\n  local\
    \ zeros_keys_last_index = zeros_keys_sorted.length - 1\n  local zeros_values_last_index\
    \ = zeros_values_sorted.length - 1\n  local zeros_keys_last_value = zeros_keys_sorted[zeros_keys_last_index]\n\
    \  local zeros_values_last_value = zeros_values_sorted[zeros_values_last_index]\n\
    \  local zeros_keys_last_value_is_zero = zeros_keys_last_value == 0\n  local zeros_values_last_value_is_zero\
    \ = zeros_values_last_value == 0\n  local zeros_keys_last_value_is_zero_index\
    \ = zeros_keys_last_value == zeros_keys_last_value_is_zero\n  local zeros_values_last_value_is_zero_index\
    \ = zeros_values_last_value == zeros_values_last_value_is_zero\n  local zeros_keys_last_value_is_zero_index_in_pairs\
    \ = zeros_keys_last_value == zeros_keys_last_value_is_zero and zeros_keys_last_value_is_zero_index\n\
    \  local zeros_values_last_value_is_zero_index_in_pairs = zeros_values_last_value\
    \ == zeros_values_last_value_is_zero and zeros_values_last_value_is_zero_index\n\
    \  local zeros_keys_last_value_is_zero_index_in_pairs_index = zeros_keys_last_value\
    \ == zeros_keys_last_value_is_zero and zeros_keys_last_value_is_zero_index_in_pairs\n\
    \  local zeros_values_last_value_is_zero_index_in_pairs_index = zeros_values_last_value\
    \ == zeros_values_last_value_is_zero and zeros_values_last_value_is_zero_index_in_pairs\n\
    \  local zeros_keys_last_value_is_zero_index_in_pairs_index_in_pairs = zeros_keys_last_value\
    \ == zeros_keys_last_value_is_zero and zeros_keys_last_value_is_zero_index_in_pairs\
    \ and zeros_values_last_value == zeros_values_last_value_is_zero and zeros_values_last_value_is_zero\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe2yb1ya2.lua:61: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local one\
    \ = {}\n  for i, v in ipairs(l) do\n    if v == 0 then\n      zero[i] = true\n\
    \    elseif v == 1 then\n      one[i] = true\n    end\n  end\n  return #one ==\
    \ 0 and #zero == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedhfb1da.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpedhfb1da.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zero = 0\n  local count = 0\n\
    \  for k, v in pairs(pairs) do\n    count = count + 1\n    zero = zero + v\n \
    \   if zero > 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdvsx7dg6.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpdvsx7dg6.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpdvsx7dg6.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local one\
    \ = {}\n  for k, v in pairs(l) do\n    zero[k] = v\n    one[k] = v\n  end\n  local\
    \ zeros = zero:keys()\n  local ones = one:keys()\n  for i = 1, #zeros do\n   \
    \ local zero = zeros[i]\n    local one = ones[i]\n    if zero ~= one then\n  \
    \    return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsvvn0nrj.lua:21:\
    \ attempt to call method 'keys' (a nil value)\nstack traceback:\n\t/tmp/tmpsvvn0nrj.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpsvvn0nrj.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i, v in ipairs(l) do\n    pairs[i] = v\n    zero = zero + v\n  end\n\
    \  local pairs_len = #pairs\n  local zeros = pairs:map(function(pair)\n    return\
    \ pair[1] - pair[2]\n  end)\n  local zeros_len = #zeros\n  return pairs_len ==\
    \ zeros_len and zeros:reduce(function(acc, zero)\n    return acc and zero\n  end)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwo_4tjoj.lua:22:\
    \ attempt to call method 'map' (a nil value)\nstack traceback:\n\t/tmp/tmpwo_4tjoj.lua:22:\
    \ in function 'candidate'\n\t/tmp/tmpwo_4tjoj.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  local pairs = {}\n  for i = 1, #l do\n    local\
    \ value = l[i]\n    if value ~= 0 then\n      pairs[value] = true\n    end\n \
    \ end\n  for i = 1, #l do\n    local value = l[i]\n    if pairs[value] then\n\
    \      pairs[value] = false\n    end\n  end\n  local result = true\n  for i =\
    \ 1, #pairs do\n    if pairs[i] then\n      result = false\n    end\n  end\n \
    \ return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu7pg20br.lua:44:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpu7pg20br.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ zeros = 0\n  for _, v in pairs do\n    if v == 0 then zeros = zeros + 1 end\n\
    \  end\n  return zeros == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0tuqxrbh.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmp0tuqxrbh.lua:17: in function 'candidate'\n\t/tmp/tmp0tuqxrbh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for _, v in ipairs(l) do\n    zero = zero + v\n    one = one - v\n    if\
    \ zero == one then\n      return true\n    end\n  end\n  return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyy7p_h39.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyy7p_h39.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  local\
    \ sum = 0\n  local i = 0\n  while i < #pairs do\n    sum = sum + pairs[i].first\n\
    \    if sum == 0 then\n      return false\n    end\n    i = i + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two table values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zeros = 0\n  for k, v in pairs(pairs)\
    \ do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros\
    \ == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpug6_au82.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpug6_au82.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpug6_au82.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  local\
    \ pair\n  for _, v in ipairs(pairs) do\n    if v == 0 then\n      zeros = zeros\
    \ + 1\n    else\n      pair = pair\n      break\n    end\n  end\n  return zeros\
    \ == 2 and pair[1] == pairs[2] and pair[2] == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpamvn8ovp.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpamvn8ovp.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local keys\
    \ = {}\n  for k, v in pairs(pairs) do\n    if v == zero then\n      keys[k] =\
    \ true\n    end\n  end\n  return #keys == 0\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjv2nvcfv.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpjv2nvcfv.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpjv2nvcfv.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  local\
    \ pair\n  for _, pair in ipairs(pairs) do\n    zeros = zeros + pair\n  end\n \
    \ return zeros == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7d_5a7fn.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp7d_5a7fn.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp7d_5a7fn.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  local sum = 0\n  for _, v in pairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0mb6yok.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpj0mb6yok.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpj0mb6yok.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zeros = 0\n  for k, v in pairs(pairs)\
    \ do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros\
    \ == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpug6_au82.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpug6_au82.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpug6_au82.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ sum = 0\n  for _, v in pairs do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ox8jf_.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpn0ox8jf_.lua:17: in function 'candidate'\n\t/tmp/tmpn0ox8jf_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for k, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh6blmqz.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplh6blmqz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local result\
    \ = true\n  for k, v in pairs(pairs) do\n    if v == zero then\n      result =\
    \ false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppyzgnv4y.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmppyzgnv4y.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmppyzgnv4y.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zeros = 0\n  for k, v in pairs(pairs)\
    \ do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n  end\n  return zeros\
    \ == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpug6_au82.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpug6_au82.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpug6_au82.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local result\
    \ = true\n  for k, v in pairs(pairs) do\n    if v > zero then\n      result =\
    \ false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28enszjg.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp28enszjg.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp28enszjg.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  for k, v\
    \ in pairs(pairs) do\n    if v == zero then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf60dus1q.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpf60dus1q.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpf60dus1q.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  local pairs = {}\n  for i = 1, #l do\n    pairs[i]\
    \ = l[i]\n  end\n  local i = 1\n  local j = 1\n  while i <= #pairs do\n    local\
    \ k = i\n    while k < #pairs and pairs[k] == pairs[i] do\n      k = k + 1\n \
    \   end\n    if k > #pairs then\n      return false\n    end\n    if pairs[k]\
    \ == 0 then\n      zero[j] = pairs[i]\n      j = j + 1\n    end\n    i = i + 1\n\
    \  end\n  return j == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3n_tm8lq.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp3n_tm8lq.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  local zeros = 0\n  for _, v in\
    \ pairs(l) do\n    if pairs[v] then\n      zeros = zeros + 1\n    end\n  end\n\
    \  return zeros == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq3cxz06r.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpq3cxz06r.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpq3cxz06r.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  local i = 1\n  local j = 1\n  while i < #l\
    \ do\n    local k = i\n    while k < #l and l[k] == 0 do\n      k = k + 1\n  \
    \  end\n    if k > i then\n      local v = l[i]\n      l[i] = l[k]\n      l[k]\
    \ = v\n    end\n    i = i + 1\n  end\n  local k = 1\n  while k < #l do\n    if\
    \ l[k] == 0 then\n      return false\n    end\n    k = k + 1\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph2vf3a7p.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph2vf3a7p.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    if v == 0 then\n      zero[k] = true\n    end\n  end\n  local\
    \ sum = 0\n  for k, v in pairs(l) do\n    if zero[k] then\n      return false\n\
    \    end\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnxuj5qx.lua:37:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptnxuj5qx.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  for k, v\
    \ in pairs(pairs) do\n    if v == zero then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf60dus1q.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpf60dus1q.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpf60dus1q.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  local\
    \ pair\n  for _, pair in ipairs(pairs) do\n    zeros = zeros + pair\n  end\n \
    \ return zeros == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv866r73.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjv866r73.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    zero[k] = v\n  end\n  local zeros = setmetatable({}, {__mode=\"\
    k\"})\n  zeros[zero] = true\n  for k, v in pairs(l) do\n    if zeros[k] then\n\
    \      return false\n    end\n    zeros[k] = v\n  end\n  return true\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo1xz3k03.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo1xz3k03.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i, v in ipairs(l) do\n    pairs[i] = v\n    zero = zero + v\n  end\n\
    \  local i = 1\n  while i <= #pairs do\n    local j = i\n    while j <= #pairs\
    \ do\n      if pairs[i] + pairs[j] == zero then\n        return true\n      end\n\
    \      j = j + 1\n    end\n    i = i + 1\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp79l1zmyr.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp79l1zmyr.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = setmetatable({},\
    \ {__mode=\"k\"})\n  for k,v in pairs(l) do\n    zero[k] = zero[k] or 0\n    zero[k]\
    \ = zero[k] + v\n    if zero[k] == 0 then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxw56_yk7.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxw56_yk7.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  local pairs = {}\n  for i = 1, #l do\n    pairs[i]\
    \ = l[i]\n  end\n  local sum = 0\n  for i = 1, #pairs do\n    sum = sum + pairs[i]\n\
    \  end\n  for i = 1, #pairs do\n    if pairs[i] > 0 then\n      pairs[i] = pairs[i]\
    \ - sum\n      if pairs[i] < 0 then\n        pairs[i] = pairs[i] + sum\n     \
    \ end\n    end\n  end\n  for i = 1, #pairs do\n    if pairs[i] == 0 then\n   \
    \   return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblg37ts3.lua:46:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpblg37ts3.lua:46:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zeros = {}\n  for i = 1,\
    \ #l do\n    zeros[i] = 0\n  end\n  for i = 1, #l do\n    local v = l[i]\n   \
    \ if v > 0 then\n      zeros[v] = zeros[v] + 1\n    end\n  end\n  for i = 1, #l\
    \ do\n    if zeros[i] ~= 1 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxjnk0tg.lua:22:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpdxjnk0tg.lua:22: in function 'candidate'\n\t/tmp/tmpdxjnk0tg.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local one\
    \ = {}\n  for i, v in ipairs(l) do\n    if v == 0 then\n      zero[i] = true\n\
    \    elseif v == 1 then\n      one[i] = true\n    end\n  end\n  return #one ==\
    \ 0 and #zero == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpedhfb1da.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpedhfb1da.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ zeros = 0\n  for _, v in pairs do\n    zeros = zeros + v\n  end\n  return zeros\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptglg3ph5.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmptglg3ph5.lua:17: in function 'candidate'\n\t/tmp/tmptglg3ph5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local result = {}\n  for k, v in pairs(l) do\n    local sum = 0\n    for\
    \ i = 1, k do\n      sum = sum + l[i]\n    end\n    if sum == zero then\n    \
    \  result[#result + 1] = k\n    end\n  end\n  return #result == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprqd4_if8.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprqd4_if8.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  local zero = false\n  for k, v\
    \ in pairs(pairs) do\n    if k == 0 then\n      zero = true\n    end\n  end\n\
    \  return zero\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7jpe8x8z.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp7jpe8x8z.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp7jpe8x8z.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    if value == zero then\n\
    \      pairs[i] = true\n    else\n      pairs[i] = false\n    end\n  end\n  local\
    \ result = true\n  for i = 1, #pairs do\n    if pairs[i] and pairs[i - 1] then\n\
    \      result = false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibm90jc9.lua:37:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpibm90jc9.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local result = {}\n  for _, v\
    \ in ipairs(l) do\n    local sum = 0\n    for _, v2 in ipairs(l) do\n      sum\
    \ = sum + v\n      if sum == 0 then\n        return false\n      end\n    end\n\
    \    result[#result + 1] = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c_j97qg.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2c_j97qg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for k, v in pairs(l) do\n    local sum = zero + v\n    if sum == zero then\n\
    \      return false\n    end\n    zero = sum\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplt49y1hw.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplt49y1hw.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v > zero then\n      pairs[v]\
    \ = true\n    end\n    zero = zero + v\n  end\n  for i = 1, #pairs do\n    if\
    \ pairs[i] then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqf5yrflr.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqf5yrflr.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    zero[k] = v\n  end\n  local sum = 0\n  for k, v in pairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0 and pairs(zero) == {}\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptr330f2e.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptr330f2e.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local result = {}\n  for k, v\
    \ in pairs(l) do\n    if v > 0 then\n      result[#result + 1] = k\n    end\n\
    \  end\n  if #result == 1 then\n    return true\n  else\n    return false\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptc4d1zs6.lua:34:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmptc4d1zs6.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v == zero then\n      pairs[i]\
    \ = true\n    else\n      pairs[i] = false\n    end\n  end\n  local result = true\n\
    \  for i = 1, #pairs do\n    if pairs[i] ~= pairs[i - 1] or pairs[i] ~= pairs[i\
    \ + 1] then\n      result = false\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg5den_fd.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpg5den_fd.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ zeros = 0\n  for _, v in pairs do\n    if v == 0 then zeros = zeros + 1 end\n\
    \  end\n  return zeros == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0tuqxrbh.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmp0tuqxrbh.lua:17: in function 'candidate'\n\t/tmp/tmp0tuqxrbh.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i, v\
    \ in ipairs(l) do\n    table.insert(pairs, {v, i})\n  end\n  table.sort(pairs)\n\
    \  local last = 0\n  local sum = 0\n  for _, p in ipairs(pairs) do\n    sum =\
    \ sum + p[1]\n    if sum == 0 then\n      return true\n    end\n    last = last\
    \ * p[1] + p[1]\n  end\n  return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two table values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  local\
    \ pair\n  for _, pair in ipairs(pairs) do\n    zeros = zeros + pair\n  end\n \
    \ return zeros == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjv866r73.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpjv866r73.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  for i = 1, #l do\n    for j = 1, #l do\n  \
    \    if i == j then\n        zero[i] = 0\n      elseif l[i] + l[j] > 0 then\n\
    \        zero[i] = 0\n      else\n        zero[i] = 1\n      end\n    end\n  end\n\
    \  return #zero == 0 and false or true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprc58703f.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmprc58703f.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ sum = 0\n  for _, v in pairs do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ox8jf_.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpn0ox8jf_.lua:17: in function 'candidate'\n\t/tmp/tmpn0ox8jf_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  for _, v in pairs(l) do\n    if\
    \ pairs[v] then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8msfe1pg.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp8msfe1pg.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp8msfe1pg.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    if v == 0 then\n      table.insert(zero, k)\n    end\n  end\n\
    \  return #zero ~= 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp09bsd1fk.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp09bsd1fk.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  for _, v in\
    \ pairs(l) do\n    zero = zero + v\n  end\n  local count = 0\n  for _, v in pairs(l)\
    \ do\n    count = count + v\n    if zero == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpww9b1op6.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpww9b1op6.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i, v\
    \ in ipairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  local\
    \ pair\n  for _, pair in ipairs(pairs) do\n    zeros = zeros + pair\n  end\n \
    \ return zeros == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7n8fo2u.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpn7n8fo2u.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for k, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplh6blmqz.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmplh6blmqz.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local result\
    \ = true\n  for k, v in pairs(pairs) do\n    if v > zero then\n      result =\
    \ false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28enszjg.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp28enszjg.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp28enszjg.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ zeros = 0\n  for _, v in pairs do\n    zeros = zeros + v\n  end\n  return zeros\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptglg3ph5.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmptglg3ph5.lua:17: in function 'candidate'\n\t/tmp/tmptglg3ph5.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local result\
    \ = true\n  for k, v in pairs(pairs) do\n    if v > zero then\n      result =\
    \ false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28enszjg.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp28enszjg.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp28enszjg.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local has_pairs\
    \ = false\n  for k, v in pairs(pairs) do\n    if v == zero then\n      has_pairs\
    \ = true\n    end\n  end\n  return not has_pairs\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph31tj_tl.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmph31tj_tl.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmph31tj_tl.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local result = {}\n  for k, v\
    \ in pairs(l) do\n    local sum = 0\n    for _, v2 in pairs(l) do\n      sum =\
    \ sum + v + v2\n    end\n    if sum == 0 then\n      result[#result + 1] = k\n\
    \    end\n  end\n  return #result == 0\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6s5pg79.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpa6s5pg79.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    if value == zero then\n\
    \      pairs[i] = true\n    elseif value == -zero then\n      pairs[i] = false\n\
    \    else\n      pairs[i] = true\n    end\n  end\n  return #pairs == 0\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz34grsu4.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpz34grsu4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local zeros\
    \ = pairs:map(function(pair)\n    return pair[1] == zero\n  end)\n  return #zeros\
    \ == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3zmog9b_.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp3zmog9b_.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp3zmog9b_.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  for _, v in pairs(l) do\n    if\
    \ pairs[v] then\n      return false\n    end\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8msfe1pg.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp8msfe1pg.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp8msfe1pg.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zeros = {}\n  for i = 1,\
    \ #l do\n    zeros[i] = 0\n  end\n  for i = 1, #l do\n    local v = l[i]\n   \
    \ if v > 0 then\n      zeros[v] = zeros[v] + 1\n    end\n  end\n  for i = 1, #l\
    \ do\n    if zeros[i] ~= 1 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdxjnk0tg.lua:22:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpdxjnk0tg.lua:22: in function 'candidate'\n\t/tmp/tmpdxjnk0tg.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  for k, v in pairs(l) do\n    if\
    \ pairs[k] and v ~= 0 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4wcjisub.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp4wcjisub.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp4wcjisub.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    local sum = 0\n    for j = 1, #l do\n   \
    \   sum = sum + l[j]\n    end\n    if sum == zero then\n      return false\n \
    \   end\n    if sum == one then\n      zero = zero + 1\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2_5_8dj.lua:35:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpo2_5_8dj.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local result = {}\n  for _, v\
    \ in ipairs(l) do\n    local sum = 0\n    for _, v2 in ipairs(l) do\n      sum\
    \ = sum + v\n      if sum == 0 then\n        return false\n      end\n    end\n\
    \    result[v] = true\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyrl9we4y.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyrl9we4y.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i, v in ipairs(l) do\n    pairs[i] = v + zero\n  end\n  local result\
    \ = true\n  for i, v in ipairs(pairs) do\n    if v > zero then\n      result =\
    \ false\n      break\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8eet7znl.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8eet7znl.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    table.insert(pairs, {l[i], i})\n  end\n  table.sort(pairs)\n  local\
    \ i = 1\n  local j = 1\n  while i < #pairs do\n    if pairs[i].first + pairs[j].first\
    \ == 0 then\n      return true\n    end\n    i = pairs[i].second\n    j = pairs[j].second\n\
    \  end\n  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: 'E

    Tests with errors:

    ------------------

    1) test_humaneval

    attempt to compare two table values

    stack traceback:


    Ran 1 tests in 0.000 seconds, 0 successes, 1 error

    '
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    zero = zero + v\n    if v > zero then\n \
    \     one = one + v\n    end\n  end\n  if one == zero then\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp0mrjd8.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpsp0mrjd8.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ thirty = 21\n  local forty = 22\n  local fifty = 23\n  local sixty = 24\n  local\
    \ seventy = 25\n  local eighty = 26\n  local ninety = 27\n  local hundred = 28\n\
    \  local thousand = 29\n  local lakh = 30\n  local crore = 31\n  local zero =\
    \ zero\n  local one = one\n  local two = two\n  local three = three\n  local four\
    \ = four\n  local five = five\n  local six = six\n  local seven = seven\n  local\
    \ eight = eight\n  local nine = nine\n  local ten = ten\n  local eleven = eleven\n\
    \  local twelve = twelve\n  local thirteen = thirteen\n  local fourteen = fourteen\n\
    \  local fifteen = fifteen\n  local sixteen = sixteen\n  local seventeen = seventeen\n\
    \  local eighteen = eighteen\n  local nineteen = nineteen\n  local twenty = twenty\n\
    \  local thirty = thirty\n  local forty = forty\n  local fifty = fifty\n  local\
    \ sixty = sixty\n  local seventy = seventy\n  local eighty = eighty\n  local ninety\
    \ = ninety\n  local hundred = hundred\n  local thousand = thousand\n  local lakh\
    \ = lakh\n  local crore = crore\n  local zero = zero\n  local one = one\n  local\
    \ two = two\n  local three = three\n  local four = four\n  local five = five\n\
    \  local six = six\n  local seven = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaohm3dp9.lua:87: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zeros = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    if v == 0 then\n      zeros = zeros + 1\n\
    \    else\n      table.insert(pairs, {k, v})\n    end\n  end\n  if zeros == 2\
    \ then\n    return true\n  else\n    return false\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwejdoc_z.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpwejdoc_z.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpwejdoc_z.lua:34: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    local pairs = pairs(v)\n    if pairs == nil\
    \ then return false end\n    local count = 0\n    for _, p in ipairs(pairs) do\n\
    \      count = count + p\n    end\n    if count == 0 then\n      zero = zero +\
    \ 1\n    elseif count == 1 then\n      one = one + 1\n    end\n  end\n  return\
    \ zero == 1 and one == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnm1hy6q.lua:18:\
    \ bad argument #1 to 'pairs' (table expected, got number)\nstack traceback:\n\t\
    /tmp/tmpxnm1hy6q.lua:18: in function 'candidate'\n\t/tmp/tmpxnm1hy6q.lua:36: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  for i = 1, #l do\n    local v = l[i]\n    if\
    \ v > 0 then\n      zero[v] = zero[v] + 1\n    end\n  end\n  for i = 1, #l do\n\
    \    if zero[i] > 1 then\n      return false\n    end\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1p2rsi8q.lua:22:\
    \ attempt to perform arithmetic on field '?' (a nil value)\nstack traceback:\n\
    \t/tmp/tmp1p2rsi8q.lua:22: in function 'candidate'\n\t/tmp/tmp1p2rsi8q.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local result = {}\n  for _, v\
    \ in ipairs(l) do\n    if v > 0 then\n      result[#result + 1] = v\n    end\n\
    \  end\n  local zeros = #result\n  if zeros == 0 then\n    return true\n  end\n\
    \  local zero = result[1]\n  for i = 2, zeros do\n    zero = zero + result[i]\n\
    \    if zero ~= 0 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68oj4v1v.lua:41:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp68oj4v1v.lua:41:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zero = 0\n  local zeroes =\
    \ {}\n  for k, v in pairs(pairs) do\n    zero = zero + v\n    zeroes[zero] = k\n\
    \  end\n  for k, v in pairs(l) do\n    if zeroes[zero] == k then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpl0agiuos.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpl0agiuos.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpl0agiuos.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local one\
    \ = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v == 0 then\n      zero[i]\
    \ = true\n    elseif v == 1 then\n      one[i] = true\n    end\n  end\n  return\
    \ #one == 0 and #zero == 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd71vxmxc.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd71vxmxc.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ thirty = 21\n  local forty = 22\n  local fifty = 23\n  local sixty = 24\n  local\
    \ seventy = 25\n  local eighty = 26\n  local ninety = 27\n  local hundred = 28\n\
    \  local thousand = 29\n  local million = 30\n  local billion = 31\n  local trillion\
    \ = 32\n  local quadrillion = 33\n  local quintillion = 34\n  local sextillion\
    \ = 35\n  local septillion = 36\n  local octillion = 37\n  local nonillion = 38\n\
    \  local decillion = 39\n  local undecillion = 40\n  local duodecillion = 41\n\
    \  local tredecillion = 42\n  local quattuordecillion = 43\n  local quindecillion\
    \ = 44\n  local sexdecillion = 45\n  local septendecillion = 46\n  local octodecillion\
    \ = 47\n  local novemdecillion = 48\n  local vigintillion = 49\n  local unvigintillion\
    \ = 50\n  local duovigintillion = 51\n  local trevigintillion = 52\n  local quattuorvigintillion\
    \ = 53\n  local quinvigintillion = 54\n  local sexvigintillion = 55\n  local septenvigintillion\
    \ = 56\n  local octovigintillion = 57\n  local novemvigintillion = 58\n  local\
    \ vigintillions = 59\n  local unvigintillions = 60\n  local duovigintillions =\
    \ 61\n  local trevigintillions = 62\n  local qu\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpexolw8rf.lua:94: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for i = 1,\
    \ #l do\n    zero[i] = 0\n  end\n  local pairs = {}\n  for i = 1, #l do\n    pairs[i]\
    \ = l[i]\n  end\n  local pair\n  local sum\n  for i = 1, #pairs do\n    pair =\
    \ pairs[i]\n    sum = zero[pair]\n    for j = i + 1, #pairs do\n      pairs[j]\
    \ = pairs[j]\n    end\n    zero[pair] = sum + 1\n  end\n  for i = 1, #pairs do\n\
    \    if zero[pairs[i]] > 0 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n \
    \   lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqxcx8lfc.lua:31:\
    \ attempt to perform arithmetic on local 'sum' (a nil value)\nstack traceback:\n\
    \t/tmp/tmpqxcx8lfc.lua:31: in function 'candidate'\n\t/tmp/tmpqxcx8lfc.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local sum\
    \ = 0\n  for i, v in ipairs(l) do\n    sum = sum + v\n    if sum == 0 then\n \
    \     zero[i] = true\n    end\n  end\n  return #zero == 0 and false or true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66o1nhdi.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp66o1nhdi.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    if value == 0 then\n \
    \     table.insert(zero, i)\n    else\n      table.insert(pairs, value)\n    end\n\
    \  end\n  if #pairs == 1 then\n    return false\n  end\n  local result = true\n\
    \  for i = #pairs, 1, -1 do\n    local value = pairs[i]\n    if value == 0 then\n\
    \      result = false\n      break\n    end\n  end\n  return result\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv_gxhewz.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv_gxhewz.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i, v in ipairs(l) do\n    pairs[i] = v + zero\n  end\n  local pairs_sorted\
    \ = pairs.sorted()\n  for i, v in pairs_sorted do\n    if v == pairs_sorted[i\
    \ + 1] then\n      return true\n    end\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1dbyv5r2.lua:20:\
    \ attempt to call field 'sorted' (a nil value)\nstack traceback:\n\t/tmp/tmp1dbyv5r2.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp1dbyv5r2.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local result\
    \ = true\n  for k, v in pairs(pairs) do\n    if v > zero then\n      result =\
    \ false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28enszjg.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp28enszjg.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp28enszjg.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  local result\
    \ = true\n  for k, v in pairs(pairs) do\n    if v > zero then\n      result =\
    \ false\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp28enszjg.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp28enszjg.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmp28enszjg.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 0\n  for i, v in ipairs(l) do\n    local v = v + zero\n    if v > zero then\n\
    \      one = one + 1\n      if v == zero then\n        return true\n      end\n\
    \    end\n    zero = zero + v\n  end\n  return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsxpt_pl.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvsxpt_pl.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  local zeros = 0\n  for _, v in\
    \ pairs(l) do\n    if pairs[v] then\n      zeros = zeros + 1\n    end\n  end\n\
    \  return zeros == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv5g22hl8.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpv5g22hl8.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpv5g22hl8.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5p_j4f9.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv5p_j4f9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zero = 0\n  local zeroes =\
    \ {}\n  for k, v in pairs(pairs) do\n    if v == zero then\n      table.insert(zeroes,\
    \ k)\n    end\n  end\n  if #zeroes == 1 then\n    return false\n  end\n  for k,\
    \ v in pairs(pairs) do\n    if v == zero then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpt4s9to42.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpt4s9to42.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpt4s9to42.lua:40: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local pair = l[i]\n    pairs[pair] = pairs[pair] or 0\n    pairs[pair]\
    \ = pairs[pair] + 1\n  end\n  for i = 1, #pairs do\n    if pairs[i] == 2 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hmmbtug.lua:32:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9hmmbtug.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zeros = {}\n  for i = 1,\
    \ #l do\n    zeros[i] = 0\n  end\n  for i = 1, #l do\n    for j = 1, #l do\n \
    \     if l[i] + l[j] == 0 then\n        zeros[i] = zeros[i] + 1\n        zeros[j]\
    \ = zeros[j] + 1\n      end\n    end\n  end\n  return #zeros == 2\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6pl8rcn4.lua:36:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6pl8rcn4.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  for\
    \ _, v in pairs(pairs) do\n    if v == 0 then\n      zeros = zeros + 1\n    end\n\
    \  end\n  return zeros == 2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqt515vw2.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpqt515vw2.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpqt515vw2.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    if v == 0 then\n      zero[k] = true\n    end\n  end\n  for\
    \ k, v in pairs(l) do\n    if zero[k] then\n      return false\n    end\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6fo4jj8p.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp6fo4jj8p.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for k, v\
    \ in pairs(l) do\n    pairs[k] = v\n  end\n  local zeros = 0\n  for k, v in pairs(pairs)\
    \ do\n    zeros = zeros + v\n  end\n  return zeros == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpviwue_k4.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpviwue_k4.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpviwue_k4.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  local zeros\
    \ = {}\n  for k,v in pairs(l) do\n    if v == 0 then\n      zero[k] = true\n \
    \     zeros[v] = true\n    elseif v > 0 then\n      zero[k] = false\n      zeros[v]\
    \ = false\n    end\n  end\n  return #zero == 0 and #zeros == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5se8st0.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm5se8st0.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ thirty = 21\n  local forty = 22\n  local fifty = 23\n  local sixty = 24\n  local\
    \ seventy = 25\n  local eighty = 26\n  local ninety = 27\n  local hundred = 28\n\
    \  local thousand = 29\n  local million = 30\n  local billion = 31\n  local trillion\
    \ = 32\n  local quadrillion = 33\n  local quintillion = 34\n  local sextillion\
    \ = 35\n  local septillion = 36\n  local octillion = 37\n  local nonillion = 38\n\
    \  local decillion = 39\n  local undecillion = 40\n  local duodecillion = 41\n\
    \  local tredecillion = 42\n  local quattuordecillion = 43\n  local quindecillion\
    \ = 44\n  local sexdecillion = 45\n  local septendecillion = 46\n  local octodecillion\
    \ = 47\n  local novemdecillion = 48\n  local vigintillion = 49\n  local unvigintillion\
    \ = 50\n  local duovigintillion = 51\n  local trevigintillion = 52\n  local quattuorvigintillion\
    \ = 53\n  local quinvigintillion = 54\n  local sexvigintillion = 55\n  local septenvigintillion\
    \ = 56\n  local octovigintillion = 57\n  local novemvigintillion = 58\n  local\
    \ vexillion = 59\n  local unvexillion = 60\n  local duovexillion = 61\n  local\
    \ trevexillion = 62\n  local quattuortrevexillion = 63\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpou191htn.lua:95: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local v = l[i]\n    if v == zero then\n      pairs[i]\
    \ = true\n    else\n      pairs[i] = false\n    end\n  end\n  local result = true\n\
    \  for i = 1, #pairs do\n    if pairs[i] then\n      result = result and false\n\
    \    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaho266we.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaho266we.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ sum = 0\n  for _, v in pairs do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ox8jf_.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpn0ox8jf_.lua:17: in function 'candidate'\n\t/tmp/tmpn0ox8jf_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  local\
    \ sum = 0\n  for _, v in pairs do\n    sum = sum + v\n  end\n  return sum == 0\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpn0ox8jf_.lua:17:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpn0ox8jf_.lua:17: in function 'candidate'\n\t/tmp/tmpn0ox8jf_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(pairs, v)\n  end\n  local zeros = 0\n  local\
    \ pair\n  for _, v in ipairs(pairs) do\n    pair = pairs[v]\n    if pair == 0\
    \ then\n      zeros = zeros + 1\n    else\n      pairs[v] = nil\n    end\n  end\n\
    \  return zeros == 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp253au3pi.lua:38:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp253au3pi.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local result = {}\n  for _, v\
    \ in ipairs(l) do\n    local sum = 0\n    for _, v2 in ipairs(l) do\n      sum\
    \ = sum + v\n      if sum == 0 then\n        return false\n      end\n    end\n\
    \    result[#result + 1] = v\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2c_j97qg.lua:33:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2c_j97qg.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  for k, v in\
    \ ipairs(l) do\n    zero = zero + v\n  end\n  local pairs = {}\n  for k, v in\
    \ ipairs(l) do\n    pairs[k] = v\n  end\n  local pairs_sorted = pairs.sorted\n\
    \  local pairs_sorted = pairs_sorted:gmatch(\n    function(x)\n      local s =\
    \ x[2]\n      if s == zero then\n        return true\n      else\n        return\
    \ false\n      end\n    end)\n  if #pairs_sorted == 1 then\n    return false\n\
    \  else\n    return true\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3mpcha2c.lua:24:\
    \ attempt to index local 'pairs_sorted' (a nil value)\nstack traceback:\n\t/tmp/tmp3mpcha2c.lua:24:\
    \ in function 'candidate'\n\t/tmp/tmp3mpcha2c.lua:43: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = {}\n  for k, v in\
    \ pairs(l) do\n    zero[k] = v\n  end\n  local sum = 0\n  for k, v in pairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0 and pairs(zero) == nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy8yr3ki9.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy8yr3ki9.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = pairs(l)\n  for\
    \ _, v in pairs do\n    local sum = 0\n    for _, v2 in pairs(l) do\n      sum\
    \ = sum + v + v2\n    end\n    if sum == 0 then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz5psiwd3.lua:16:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpz5psiwd3.lua:16: in function 'candidate'\n\t/tmp/tmpz5psiwd3.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  local two = 2\n  local three = 3\n  local four = 4\n  local five = 5\n\
    \  local six = 6\n  local seven = 7\n  local eight = 8\n  local nine = 9\n  local\
    \ ten = 10\n  local eleven = 11\n  local twelve = 12\n  local thirteen = 13\n\
    \  local fourteen = 14\n  local fifteen = 15\n  local sixteen = 16\n  local seventeen\
    \ = 17\n  local eighteen = 18\n  local nineteen = 19\n  local twenty = 20\n  local\
    \ thirty = 21\n  local forty = 22\n  local fifty = 23\n  local sixty = 24\n  local\
    \ seventy = 25\n  local eighty = 26\n  local ninety = 27\n  local hundred = 28\n\
    \  local thousand = 29\n  local million = 30\n  local billion = 31\n  local trillion\
    \ = 32\n  local quadrillion = 33\n  local quintillion = 34\n  local sextillion\
    \ = 35\n  local septillion = 36\n  local octillion = 37\n  local nonillion = 38\n\
    \  local decillion = 39\n  local undecillion = 40\n  local duodecillion = 41\n\
    \  local tredecillion = 42\n  local quattuordecillion = 43\n  local quindecillion\
    \ = 44\n  local sexdecillion = 45\n  local septendecillion = 46\n  local octodecillion\
    \ = 47\n  local novemdecillion = 48\n  local vigintillion = 49\n  local unvigintillion\
    \ = 50\n  local duovigintillion = 51\n  local trevigintillion = 52\n  local quattuorvigintillion\
    \ = 53\n  local quinvigintillion = 54\n  local sexvigintillion = 55\n  local septenvigintillion\
    \ = 56\n  local octovigintillion = 57\n  local novemvigintillion = 58\n  local\
    \ vexillion = 59\n  local unvexillion = 60\n  local duovexillion = 61\n  local\
    \ trevexillion = 62\n  local quattuorvexillion = 63\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprgd9vu26.lua:95: ''end'' expected (to close ''function'' at
    line 14) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for i = 1, #l do\n    local value = l[i]\n    if value == zero then\n\
    \      pairs[i] = true\n    else\n      pairs[i] = false\n    end\n  end\n  local\
    \ result = true\n  for i = 1, #pairs do\n    if pairs[i] ~= pairs[i - 1] or pairs[i]\
    \ == false then\n      result = false\n    end\n  end\n  return result\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi6_kjii.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxi6_kjii.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    zero = zero + v\n    one = one - v\n    if\
    \ one == 0 then\n      return true\n    end\n  end\n  return false\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcto8wz00.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcto8wz00.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  local zero = true\n  for _, v\
    \ in pairs(l) do\n    if pairs[v] then\n      zero = false\n    end\n  end\n \
    \ return zero\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5twlvb51.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp5twlvb51.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp5twlvb51.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local pairs\
    \ = {}\n  for k, v in pairs(l) do\n    pairs[k] = v + zero\n  end\n  for k, v\
    \ in pairs(pairs) do\n    if v == zero then\n      return true\n    end\n  end\n\
    \  return false\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf60dus1q.lua:17:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmpf60dus1q.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpf60dus1q.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbgxueuin.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpbgxueuin.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = setmetatable({},\
    \ {__mode=\"k\"})\n  for i, v in ipairs(l) do\n    zero[v] = true\n  end\n  local\
    \ zeros = {}\n  for k, v in pairs(zero) do\n    zeros[k] = v\n  end\n  local pairs\
    \ = pairs(l)\n  local count = 0\n  for _, v in pairs do\n    count = count + 1\n\
    \    if zeros[v] then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsq3qvans.lua:25:\
    \ bad argument #1 to '(for generator)' (table expected, got nil)\nstack traceback:\n\
    \t/tmp/tmpsq3qvans.lua:25: in function 'candidate'\n\t/tmp/tmpsq3qvans.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local sum = 0\n  for _, v in\
    \ pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpscy_w3pt.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpscy_w3pt.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750492
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for i = 1,\
    \ #l do\n    local v = l[i]\n    if pairs[v] then return false end\n    pairs[v]\
    \ = true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv5p_j4f9.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv5p_j4f9.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in pairs(l) do\n    pairs[v] = true\n  end\n  local zero = true\n  for _, v\
    \ in pairs(l) do\n    if pairs[v] then\n      zero = false\n    end\n  end\n \
    \ return zero\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1, 3, 5, 0}),\
    \ false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n\
    \    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5twlvb51.lua:16:\
    \ attempt to call local 'pairs' (a table value)\nstack traceback:\n\t/tmp/tmp5twlvb51.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp5twlvb51.lua:31: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zeros = {}\n  for k, v\
    \ in pairs(l) do\n    zeros[k] = v\n  end\n  local zero = zeros[1]\n  for k, v\
    \ in pairs(l) do\n    if zeros[k] ~= zero then\n      return false\n    end\n\
    \    zero = zeros[k]\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpawn4y1xz.lua:35:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpawn4y1xz.lua:35:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local zero = 0\n  local one =\
    \ 1\n  for i, v in ipairs(l) do\n    local v2 = zero + v\n    if v2 < one then\n\
    \      return false\n    end\n    zero = v2\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n    lu.assertEquals(candidate({1,\
    \ 3, 5, 0}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), false)\n  \
    \  lu.assertEquals(candidate({1, 2, 3, 7}), false)\n    lu.assertEquals(candidate({2,\
    \ 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 31}),\
    \ true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}), false)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 4, 2, 31}), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpndhu6o7v.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpndhu6o7v.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
- exit_code: 1
  program: "-- pairs_sum_to_zero takes a table of integers as an input.\n-- it returns\
    \ true if there are two distinct elements in the table that\n-- sum to zero, and\
    \ false otherwise.\n-- >>> pairs_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> pairs_sum_to_zero({1,\
    \ 3, -2, 1})\n-- false\n-- >>> pairs_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
    \ pairs_sum_to_zero({2, 4, -5, 3, 5, 7})\n-- true\n-- >>> pairs_sum_to_zero({1})\n\
    -- false\nlocal function pairs_sum_to_zero(l)\n  local pairs = {}\n  for _, v\
    \ in ipairs(l) do\n    pairs[v] = true\n  end\n  for _, v in ipairs(l) do\n  \
    \  if pairs[v] then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = pairs_sum_to_zero\n\
    \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
    \ 3, -2, 1}), false)\n    lu.assertEquals(candidate({1, 2, 3, 7}), false)\n  \
    \  lu.assertEquals(candidate({2, 4, -5, 3, 5, 7}), true)\n    lu.assertEquals(candidate({1}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 3, 2, 30}), true)\n    lu.assertEquals(candidate({-3,\
    \ 9, -1, 3, 2, 31}), true)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 30}),\
    \ false)\n    lu.assertEquals(candidate({-3, 9, -1, 4, 2, 31}), false)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph1e1mop6.lua:33:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmph1e1mop6.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750493
