language: lua
name: HumanEval_104_unique_digits
results:
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret,\
    \ i)\n    elseif digit == 1 then\n      table.insert(seen, digit)\n    end\n \
    \ end\n  for i = 1, #seen do\n    if seen[i] % 2 == 0 then\n      table.insert(ret,\
    \ i)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6qzbel5.lua:31:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpv6qzbel5.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] =\
    \ digit\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb7p5id7.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjb7p5id7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local result = {}\n  for\
    \ i = 1, #x do\n    local digit = x[i]\n    if seen[digit] then\n      result[#result\
    \ + 1] = digit\n    else\n      seen[digit] = true\n    end\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9bcuulug.lua:26:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp9bcuulug.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = 1, i do\n      if\
    \ x[j] == 0 then\n        found = true\n        break\n      end\n    end\n  \
    \  if not found then\n      table.insert(ret, digit)\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvy2_p5o7.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result\
    \ + 1] = digit\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75gozu0k.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp75gozu0k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] =\
    \ digit\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb7p5id7.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjb7p5id7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq07_y_by.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq07_y_by.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphup3kyei.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphup3kyei.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret,\
    \ i)\n    elseif digit % 2 == 0 then\n      table.insert(seen, digit)\n    end\n\
    \  end\n  for i = #seen, 1, -1 do\n    table.insert(ret, seen[i])\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfhzenag.lua:29:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgfhzenag.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_even(n)\n    return n % 2\
    \ == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local\
    \ function is_unique_digit(n)\n    return not x[math.floor(n)]\n  end\n  local\
    \ function is_unique_digit_in_range(n)\n    return not x[math.floor(n)]\n  end\n\
    \  local function is_unique_digit_in_range_in_range(n)\n    return not x[math.floor(n)]\n\
    \  end\n  local function is_unique_digit_in_range_in_range_in_range(n)\n    return\
    \ not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range(n)\n\
    \    return not x[math.floor(n)]\n  end\n  local function is_unique_digit_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_range_in_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpifjakxk9.lua:65: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_even(i)\n    return i ~=\
    \ 0 and i % 2 == 0\n  end\n  local function is_odd(i)\n    return i ~= 0 and i\
    \ % 2 ~= 0\n  end\n  local function is_digit(i)\n    return i ~= 0 and i % 10\
    \ == 0\n  end\n  local function is_zero(i)\n    return i ~= 0 and i % 10 == 0\n\
    \  end\n  local function is_negative(i)\n    return i ~= 0 and i % 10 < 0\n  end\n\
    \  local function is_positive(i)\n    return i ~= 0 and i % 10 > 0\n  end\n  local\
    \ function is_negative(i)\n    return i ~= 0 and i % 10 < 0\n  end\n  local function\
    \ is_positive(i)\n    return i ~= 0 and i % 10 > 0\n  end\n  local function is_even(i)\n\
    \    return i ~= 0 and i % 2 == 0\n  end\n  local function is_odd(i)\n    return\
    \ i ~= 0 and i % 2 ~= 0\n  end\n  local function is_digit(i)\n    return i ~=\
    \ 0 and i % 10 == 0\n  end\n  local function is_zero(i)\n    return i ~= 0 and\
    \ i % 10 == 0\n  end\n  local function is_negative(i)\n    return i ~= 0 and i\
    \ % 10 < 0\n  end\n  local function is_positive(i)\n    return i ~= 0 and i %\
    \ 10 > 0\n  end\n  local function is_negative(i)\n    return i ~= 0 and i % 10\
    \ < 0\n  end\n  local function is_positive(i)\n    return i ~= 0 and i % 10 >\
    \ 0\n  end\n  local function is_even(i)\n    return i ~= 0 and i % 2 == 0\n  end\n\
    \  local function is_odd(i)\n    return i ~= 0 and i % 2 ~= 0\n  end\n  local\
    \ function is_digit(i)\n    return i ~= 0 and i % 10 == 0\n  end\n  local function\
    \ is_zero(i)\n    return i ~= 0 and i % 10 == 0\n  end\n  local function is_negative(i)\n\
    \    return i ~= 0 and i % 10 < 0\n  end\n  local function is_positive(i)\n  \
    \  return i ~= 0 and i % 10 > 0\n  end\n  local function is_negative(i)\n    return\
    \ i ~= 0 and i % 10 < 0\n  end\n  local function is_positive(i)\n    return i\
    \ ~= 0 and i % 10 > 0\n  end\n  local function is_even(i)\n    return i ~= 0 and\
    \ i % 2 == 0\n  end\n  local function is_odd(i)\n    return i ~= 0 and i % 2 ~=\
    \ 0\n  end\n  local function is_digit(i)\n    return i ~= 0 and i % 10 == 0\n\
    \  end\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwmq8xvlv.lua:102: ''end'' expected (to close ''function''
    at line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      result[#result + 1] = x[i]\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm812c_vh.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpm812c_vh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4n6ilcc.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpn4n6ilcc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret,\
    \ i)\n    elseif digit == 1 then\n      table.insert(ret, i)\n      table.insert(seen,\
    \ i)\n    end\n  end\n  for i = #seen, 1, -1 do\n    table.insert(ret, seen[i])\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsp0sbclv.lua:30:\
    \ expected: {1, 15, 33}\nactual: {4, 4}\nstack traceback:\n\t/tmp/tmpsp0sbclv.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret,\
    \ i)\n    elseif digit % 2 == 0 then\n      table.insert(ret, i)\n      table.insert(seen,\
    \ digit)\n    end\n  end\n  for i = #seen, 1, -1 do\n    table.insert(ret, seen[i])\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa7a6n6d7.lua:30:\
    \ expected: {1, 15, 33}\nactual: {3, 1422}\nstack traceback:\n\t/tmp/tmpa7a6n6d7.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n\
    \      continue\n    end\n    local found = false\n    for j = 1, i do\n     \
    \ if x[j] == 0 then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(result, digit)\n    end\n    i = i\
    \ + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr6ynwvx3.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4n6ilcc.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpn4n6ilcc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      local digit = x[i]\n        if digit == 0 then\n            table.insert(ret,\
    \ digit)\n        else\n            local count = 0\n            for j = 1, #ret\
    \ do\n                if ret[j] == digit then\n                    count = count\
    \ + 1\n                end\n            end\n            if count == 0 then\n\
    \                table.insert(ret, digit)\n            end\n        end\n    end\n\
    \    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsruwiwjs.lua:33:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpsruwiwjs.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = 1, #ret do\n     \
    \ if ret[j] == digit then\n        found = true\n        break\n      end\n  \
    \  end\n    if not found then\n      table.insert(ret, digit)\n    end\n    i\
    \ = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbe1x8z29.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxhvzeko.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnxhvzeko.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(t, x[i])\n    end\n  end\n  table.sort(t)\n\
    \  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxt_efgut.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxt_efgut.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxhvzeko.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnxhvzeko.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxhvzeko.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnxhvzeko.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result+1]\
    \ = digit\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvnnfbeya.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpvnnfbeya.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_even(n)\n    return n and\
    \ ((n % 2) == 0)\n  end\n  local function is_odd(n)\n    return n and ((n % 2)\
    \ == 1)\n  end\n  local function is_zero(n)\n    return n == 0\n  end\n  local\
    \ function is_negative(n)\n    return n < 0\n  end\n  local function is_positive(n)\n\
    \    return n > 0\n  end\n  local function is_negative(n)\n    return n < 0\n\
    \  end\n  local function is_positive(n)\n    return n > 0\n  end\n  local function\
    \ is_even(n)\n    return n and ((n % 2) == 0)\n  end\n  local function is_odd(n)\n\
    \    return n and ((n % 2) == 1)\n  end\n  local function is_zero(n)\n    return\
    \ n == 0\n  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local\
    \ function is_positive(n)\n    return n > 0\n  end\n  local function is_negative(n)\n\
    \    return n < 0\n  end\n  local function is_positive(n)\n    return n > 0\n\
    \  end\n  local function is_even(n)\n    return n and ((n % 2) == 0)\n  end\n\
    \  local function is_odd(n)\n    return n and ((n % 2) == 1)\n  end\n  local function\
    \ is_zero(n)\n    return n == 0\n  end\n  local function is_negative(n)\n    return\
    \ n < 0\n  end\n  local function is_positive(n)\n    return n > 0\n  end\n  local\
    \ function is_negative(n)\n    return n < 0\n  end\n  local function is_positive(n)\n\
    \    return n > 0\n  end\n  local function is_even(n)\n    return n and ((n %\
    \ 2) == 0)\n  end\n  local function is_odd(n)\n    return n and ((n % 2) == 1)\n\
    \  end\n  local function is_zero(n)\n    return n == 0\n  end\n  local function\
    \ is_negative(n)\n    return n < 0\n  end\n  local function is_positive(n)\n \
    \   return n > 0\n  end\n  local function is_negative(n)\n    return n < 0\n \
    \ end\n  local function is_positive(n)\n    return n > 0\n  end\n  local function\
    \ is_even(n)\n    return n and ((n % 2) == 0)\n  end\n  local function is_odd(n)\n\
    \    return n and ((n % 2) == 1)\n  end\n  local function is_zero(n)\n    return\
    \ n == 0\n  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local\
    \ function is_positive(n)\n    return n > 0\n  end\n  local function is_negative(n)\n\
    \    return n < 0\n  end\n  local function is_positive\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6c654ukf.lua:113: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71y9_g0p.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp71y9_g0p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = 1, i do\n      if\
    \ x[j] == 0 then\n        found = true\n        break\n      end\n    end\n  \
    \  if not found then\n      table.insert(ret, digit)\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvy2_p5o7.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(t, x[i])\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vvzc0a8.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2vvzc0a8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function helper(y)\n    if y == nil then\n\
    \      return nil\n    end\n    local z = {}\n    for i = 1, #y do\n      if y[i]\
    \ % 2 == 0 then\n        table.insert(z, y[i])\n      end\n    end\n    return\
    \ helper(table.sort(z))\n  end\n  return helper(x)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdz_oh24p.lua:28:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpdz_oh24p.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      table.insert(table, digit)\n   \
    \ end\n  end\n  table.sort(function(a, b) return a < b end)\n  return table\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw608wnpz.lua:17:\
    \ attempt to call field 'sort' (a nil value)\nstack traceback:\n\t/tmp/tmpw608wnpz.lua:17:\
    \ in function 'candidate'\n\t/tmp/tmpw608wnpz.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      local digit = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret,\
    \ digit)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45hqw3p0.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp45hqw3p0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      table.insert(ret, i)\n    else\n\
    \      local count = 0\n      for j = 1, #ret do\n        if ret[j] == digit then\n\
    \          count = count + 1\n        end\n      end\n      if count == 0 then\n\
    \        table.insert(ret, digit)\n      end\n    end\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmdmdjg_d.lua:33:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmpmdmdjg_d.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] =\
    \ digit\n    end\n  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyvwa1_4.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpyyvwa1_4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function helper(y)\n    local i = 1\n\
    \    while i <= y do\n      if x[i] % 2 == 0 then\n        table.insert(result,\
    \ x[i])\n      end\n      i = i + 1\n    end\n  end\n  local result = {}\n  helper(1)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy72kz_lv.lua:27:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpy72kz_lv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(table, digit)\n\
    \    end\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebeodvz3.lua:14:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpebeodvz3.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpebeodvz3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = 1, i do\n      if\
    \ x[j] == 0 then\n        found = true\n        break\n      end\n    end\n  \
    \  if not found then\n      table.insert(ret, digit)\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvy2_p5o7.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    local\
    \ n = x[i]\n    if n ~= 0 then\n      local digits = math.floor(math.log10(n))\n\
    \      for j = 1, digits do\n        table.insert(t, n % 10)\n        n = n /\
    \ 10\n      end\n    end\n  end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzvk0r4fv.lua:27:\
    \ expected: {1, 15, 33}\nactual: {5, 3, 2, 2.2, 4.22}\nstack traceback:\n\t/tmp/tmpzvk0r4fv.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp71y9_g0p.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp71y9_g0p.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphup3kyei.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphup3kyei.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret +\
    \ 1] = digit\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ffwvjg.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl0ffwvjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0lon2d.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2o0lon2d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq07_y_by.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq07_y_by.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      break\n    end\n    if digit % 2\
    \ == 0 then\n      table.insert(ret, digit)\n    end\n  end\n  return ret\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1rk7c0e.lua:26:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmps1rk7c0e.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret,\
    \ i)\n    elseif digit % 2 == 0 then\n      table.insert(seen, digit)\n    end\n\
    \  end\n  for i = #seen, 1, -1 do\n    table.insert(ret, seen[i])\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgfhzenag.lua:29:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgfhzenag.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  local i = 1\n  for v in\
    \ pairs(x) do\n    if v ~= 0 then\n      table.insert(table, v)\n      i = i +\
    \ 1\n    end\n  end\n  table.sort(function(a,b) return a < b end)\n  local j =\
    \ 1\n  for v in pairs(x) do\n    if v ~= 0 then\n      while j <= #table and table[j]\
    \ == v do\n        j = j + 1\n      end\n      if j <= #table then\n        table.insert(table,\
    \ v)\n      end\n    end\n  end\n  return table\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbjti0x2r.lua:14:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpbjti0x2r.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpbjti0x2r.lua:36: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    local found = false\n    for j = 1, #table do\n      if digit\
    \ == table[j] then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(table, digit)\n    end\n  end\n  return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvlj4q015.lua:21:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpvlj4q015.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpvlj4q015.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq07_y_by.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq07_y_by.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  local i = 1\n  while i <= #x\
    \ do\n    if x[i] % 2 == 0 then\n      table.insert(t, x[i])\n    end\n    i =\
    \ i + 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpeo4zryc6.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpeo4zryc6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_even(n)\n    return n % 2\
    \ == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local\
    \ function is_odd_or_even(n)\n    return is_odd(n) or is_even(n)\n  end\n  local\
    \ function is_unique_digit(n)\n    return not x[math.floor(n)]\n  end\n  local\
    \ function is_unique_digit_or_zero(n)\n    return not is_unique_digit(n) or n\
    \ == 0\n  end\n  local function is_unique_digit_or_zero2(n)\n    return not is_unique_digit(n)\
    \ or n == 0\n  end\n  local function is_unique_digit_or_zero3(n)\n    return not\
    \ is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero4(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero5(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero6(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero7(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero8(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero9(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero10(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero11(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero12(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero13(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero14(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero15(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero16(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero17(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero18(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_zero19(n)\n\
    \    return not is_unique_digit(n) or n == 0\n  end\n  local function is_unique_digit_or_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr0njcggf.lua:80: ''('' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp2pjwcb.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgp2pjwcb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(ret,\
    \ i)\n    elseif digit == 1 then\n      table.insert(ret, i)\n      table.insert(seen,\
    \ i)\n    end\n  end\n  table.sort(ret)\n  table.sort(seen)\n  for i = 1, #seen\
    \ do\n    if seen[i] ~= ret[i] then\n      table.insert(ret, seen[i])\n    end\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd43bvtrq.lua:34:\
    \ expected: {1, 15, 33}\nactual: {4}\nstack traceback:\n\t/tmp/tmpd43bvtrq.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq07_y_by.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq07_y_by.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  table.sort(ret)\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}),\
    \ {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n   \
    \ lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq07_y_by.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpq07_y_by.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    local found = false\n    for j = 1, #table do\n      if digit\
    \ == table[j] then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(table, digit)\n    end\n  end\n  return\
    \ table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvlj4q015.lua:21:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpvlj4q015.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpvlj4q015.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] =\
    \ digit\n    end\n  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyvwa1_4.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpyyvwa1_4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = i + 1, #x do\n   \
    \   if x[j] % digit ~= 0 then\n        found = true\n        break\n      end\n\
    \    end\n    if not found then\n      table.insert(ret, digit)\n    end\n   \
    \ i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp75j08r__.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp2pjwcb.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgp2pjwcb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      result[#result + 1] = x[i]\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm812c_vh.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpm812c_vh.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4n6ilcc.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpn4n6ilcc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = i+1, #x do\n     \
    \ if x[j] == 0 then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(ret, digit)\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa0kxapz7.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result\
    \ + 1] = digit\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75gozu0k.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp75gozu0k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then break end\n    if\
    \ seen[digit] then\n      table.insert(ret, digit)\n    else\n      table.insert(seen,\
    \ digit)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn9j7pl53.lua:27:\
    \ expected: {1, 15, 33}\nactual: {1}\nstack traceback:\n\t/tmp/tmpn9j7pl53.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_even(n)\n    return n % 2\
    \ == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local\
    \ function is_zero(n)\n    return n == 0\n  end\n  local function is_negative(n)\n\
    \    return n < 0\n  end\n  local function is_positive(n)\n    return n > 0\n\
    \  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local function\
    \ is_positive(n)\n    return n > 0\n  end\n  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n\
    \  local function is_zero(n)\n    return n == 0\n  end\n  local function is_negative(n)\n\
    \    return n < 0\n  end\n  local function is_positive(n)\n    return n > 0\n\
    \  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local function\
    \ is_positive(n)\n    return n > 0\n  end\n  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n\
    \  local function is_zero(n)\n    return n == 0\n  end\n  local function is_negative(n)\n\
    \    return n < 0\n  end\n  local function is_positive(n)\n    return n > 0\n\
    \  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local function\
    \ is_positive(n)\n    return n > 0\n  end\n  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n\
    \  local function is_zero(n)\n    return n == 0\n  end\n  local function is_negative(n)\n\
    \    return n < 0\n  end\n  local function is_positive(n)\n    return n > 0\n\
    \  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local function\
    \ is_positive(n)\n    return n > 0\n  end\n  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n\
    \  local function is_zero(n)\n    return n == 0\n  end\n  local function is_negative(n)\n\
    \    return n < 0\n  end\n  local function is_positive(n)\n    return n > 0\n\
    \  end\n  local function is_negative(n)\n    return n < 0\n  end\n  local function\
    \ is_positive(n)\n    return n > 0\n  end\n  local function is_even(n)\n    return\
    \ n % 2 == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n\
    \  local function is_zero(n)\n    return n == 0\n  end\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu9gbzupl.lua:135: ''end'' expected (to close ''function''
    at line 9) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(t, x[i])\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vvzc0a8.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2vvzc0a8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret + 1] = digit\n    end\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvszy41_.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwvszy41_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = 1, #ret do\n     \
    \ if ret[j] == digit then\n        found = true\n        break\n      end\n  \
    \  end\n    if not found then\n      table.insert(ret, digit)\n    end\n    i\
    \ = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbe1x8z29.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  table.sort(ret)\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgp2pjwcb.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpgp2pjwcb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphup3kyei.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphup3kyei.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function helper(y)\n    local z = {}\n\
    \    for i = 1, y do\n      local v = math.floor((x / 10) * 10)\n      if v %\
    \ 2 == 0 then\n        table.insert(z, v)\n      end\n    end\n    return z\n\
    \  end\n  return helper(#x)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6kuxx_38.lua:13:\
    \ attempt to perform arithmetic on upvalue 'x' (a table value)\nstack traceback:\n\
    \t/tmp/tmp6kuxx_38.lua:13: in function </tmp/tmp6kuxx_38.lua:10>\n\t(tail call):\
    \ ?\n\t/tmp/tmp6kuxx_38.lua:26: in function 'test_humaneval'\n\nRan 1 tests in\
    \ 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(t, x[i])\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vvzc0a8.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2vvzc0a8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = 1, i do\n      if\
    \ x[j] == 0 then\n        found = true\n        break\n      end\n    end\n  \
    \  if not found then\n      table.insert(ret, digit)\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvy2_p5o7.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphup3kyei.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphup3kyei.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      local digit = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret,\
    \ digit)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45hqw3p0.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp45hqw3p0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ret = {}\n  for i\
    \ = 1, #x do\n    if seen[x[i]] then\n      table.insert(ret, x[i])\n    else\n\
    \      seen[x[i]] = true\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiafjceik.lua:25:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmpiafjceik.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphup3kyei.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmphup3kyei.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local ans = {}\n  for i\
    \ = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(ans,\
    \ 0)\n    else\n      local found = false\n      for j = 1, #seen do\n       \
    \ if digit == seen[j] then\n          found = true\n          break\n        end\n\
    \      end\n      if not found then\n        table.insert(ans, digit)\n      \
    \  table.insert(seen, digit)\n      end\n    end\n  end\n  return ans\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7o09kd52.lua:36:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmp7o09kd52.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result\
    \ + 1] = digit\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75gozu0k.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp75gozu0k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      table.insert(ret, i)\n    else\n\
    \      local count = 0\n      for j = 1, #ret do\n        if ret[j] == digit then\n\
    \          count = count + 1\n        elseif count == 0 then\n          table.insert(ret,\
    \ i)\n          break\n        end\n      end\n    end\n  end\n  return ret\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp27_wbslp.lua:33:\
    \ expected: {1, 15, 33}\nactual: {}\nstack traceback:\n\t/tmp/tmp27_wbslp.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n   \
    \   continue\n    end\n    local found = false\n    for j = i + 1, #x do\n   \
    \   if x[j] ~= 0 then\n        found = true\n        break\n      end\n    end\n\
    \    if not found then\n      table.insert(ret, digit)\n    end\n    i = i + 1\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvm0afnr1.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret + 1] = digit\n    end\n\
    \  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvszy41_.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwvszy41_.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0lon2d.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2o0lon2d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit == 0 then\n      i = i + 1\n\
    \      continue\n    end\n    local found = false\n    for j = 1, #result do\n\
    \      if result[j] == digit then\n        found = true\n        break\n     \
    \ end\n    end\n    if not found then\n      table.insert(result, digit)\n   \
    \ end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3zyngoj0.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4n6ilcc.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpn4n6ilcc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  for i = 1, #x do\n    if x[i]\
    \ % 2 == 0 then\n      table.insert(t, x[i])\n    end\n  end\n  return t\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2vvzc0a8.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2vvzc0a8.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      result[#result + 1] = x[i]\n    end\n  end\n  return\
    \ result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwe4topio.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwe4topio.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(table, digit)\n\
    \    end\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebeodvz3.lua:14:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpebeodvz3.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpebeodvz3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n\
    \    end\n    return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnxhvzeko.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpnxhvzeko.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local t = {}\n  local i = 1\n  while i <= #x\
    \ do\n    if x[i] % 2 == 0 then\n      t[#t + 1] = x[i]\n    end\n    i = i +\
    \ 1\n  end\n  return t\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxv_r9t9k.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpxv_r9t9k.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret +\
    \ 1] = digit\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ffwvjg.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl0ffwvjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      local digit = x[i]\n        if digit % 2 == 0 then\n            table.insert(ret,\
    \ digit)\n        end\n    end\n    return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp45hqw3p0.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp45hqw3p0.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local seen = {}\n  local result = {}\n  for\
    \ i = 1, #x do\n    local digit = x[i]\n    if digit == 0 then\n      table.insert(result,\
    \ 0)\n      continue\n    end\n    if seen[digit] then\n      table.insert(result,\
    \ digit)\n      continue\n    end\n    seen[digit] = true\n  end\n  return result\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpncf4w7eq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret +\
    \ 1] = digit\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ffwvjg.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl0ffwvjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result\
    \ + 1] = digit\n    end\n    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp75gozu0k.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp75gozu0k.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret +\
    \ 1] = digit\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ffwvjg.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl0ffwvjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n  end\n  table.sort(result)\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2o0lon2d.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmp2o0lon2d.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(table, x[i])\n    end\n\
    \    i = i + 1\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph46ppoou.lua:14:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmph46ppoou.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmph46ppoou.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret +\
    \ 1] = digit\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ffwvjg.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl0ffwvjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local function is_even(n)\n    return n % 2\
    \ == 0\n  end\n  local function is_odd(n)\n    return n % 2 == 1\n  end\n  local\
    \ function is_zero(n)\n    return n == 0\n  end\n  local function is_one(n)\n\
    \    return n == 1\n  end\n  local function is_odd_or_zero(n)\n    return is_odd(n)\
    \ or is_zero(n)\n  end\n  local function is_even_or_one(n)\n    return is_even(n)\
    \ or is_one(n)\n  end\n  local function is_odd_or_one(n)\n    return is_odd(n)\
    \ or is_one(n)\n  end\n  local function is_even_or_odd_or_zero(n)\n    return\
    \ is_even_or_one(n) or is_odd_or_zero(n)\n  end\n  local function is_even_or_odd_or_one(n)\n\
    \    return is_even_or_one(n) or is_odd_or_one(n)\n  end\n  local function is_even_or_odd_or_one_or_zero(n)\n\
    \    return is_even_or_odd_or_one(n) or is_zero(n)\n  end\n  local function is_even_or_odd_or_one_or_one(n)\n\
    \    return is_even_or_odd_or_one(n) or is_one(n)\n  end\n  local function is_even_or_odd_or_one_or_one_or_zero(n)\n\
    \    return is_even_or_odd_or_one_or_one(n) or is_zero(n)\n  end\n  local function\
    \ is_even_or_odd_or_one_or_one_or_one(n)\n    return is_even_or_odd_or_one_or_one(n)\
    \ or is_one(n)\n  end\n  local function is_even_or_odd_or_one_or_one_or_one_or_zero(n)\n\
    \    return is_even_or_odd_or_one_or_one_or_one(n) or is_zero(n)\n  end\n  local\
    \ function is_even_or_odd_or_one_or_one_or_one_or_one(n)\n    return is_even_or_odd_or_one_or_one_or_one(n)\
    \ or is_one(n)\n  end\n  local function is_even_or_odd_or_one_or_one_or_one_or_one_or_zero(n)\n\
    \    return is_even_or_odd_or_one_or_one_or_one_or_one(n) or is_zero(n)\n  end\n\
    \  local function is_even_or_odd_or_one_or_one_or_one_or_one_or_one(n)\n    return\
    \ is_even_or_odd_or_one_or_one_or_one_or_one(n) or is_one(n)\n  end\n  local function\
    \ is_even_or_odd_or_one_or_one_or_one_or_one_or_one_or_zero(n)\n    return is_even_or_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique_digits\n\
    \    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152,\
    \ 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}),\
    \ {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp81fd290f.lua:63: ''end'' expected (to close ''function'' at
    line 61) near ''lu''

    '
  stdout: ''
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local table = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(table, digit)\n\
    \    end\n  end\n  return table\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpebeodvz3.lua:14:\
    \ attempt to call field 'insert' (a nil value)\nstack traceback:\n\t/tmp/tmpebeodvz3.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpebeodvz3.lua:23: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] =\
    \ digit\n    end\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjb7p5id7.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpjb7p5id7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    if x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n \
    \   i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpko4y4kpt.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpko4y4kpt.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit % 2 == 0 then\n      table.insert(ret, digit)\n \
    \   end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422,\
    \ 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n\
    \    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135,\
    \ 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwfjsi_4x.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpwfjsi_4x.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  for i = 1, #x do\n   \
    \ local digit = x[i]\n    if digit % 2 == 0 then\n      result[#result + 1] =\
    \ digit\n    end\n  end\n  return table.sort(result)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyyvwa1_4.lua:23:\
    \ expected: {1, 15, 33}\nactual: nil\nstack traceback:\n\t/tmp/tmpyyvwa1_4.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret +\
    \ 1] = digit\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ffwvjg.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl0ffwvjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  local i = 1\n  while i <=\
    \ #x do\n    local digit = x[i]\n    if digit % 2 == 0 then\n      ret[#ret +\
    \ 1] = digit\n    end\n    i = i + 1\n  end\n  return ret\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0ffwvjg.lua:25:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpl0ffwvjg.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    local\
    \ digit = x[i]\n    if digit == 0 then\n      break\n    end\n    local found\
    \ = false\n    for j = 1, #ret do\n      if ret[j] == digit then\n        found\
    \ = true\n        break\n      end\n    end\n    if not found then\n      table.insert(ret,\
    \ digit)\n    end\n  end\n  return ret\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmproths4ui.lua:33:\
    \ expected: {1, 15, 33}\nactual: {15, 33, 1422, 1}\nstack traceback:\n\t/tmp/tmproths4ui.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      result[#result+1] = x[i]\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv3itdygk.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpv3itdygk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local result = {}\n  local i = 1\n  while i\
    \ <= #x do\n    if x[i] % 2 == 0 then\n      table.insert(result, x[i])\n    end\n\
    \    i = i + 1\n  end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn4n6ilcc.lua:24:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpn4n6ilcc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n    local ret = {}\n    for i = 1, #x do\n  \
    \      if x[i] % 2 == 0 then\n            table.insert(ret, x[i])\n        end\n\
    \    end\n    table.sort(ret)\n    return ret\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique_digits\n    lu.assertEquals(candidate({15,\
    \ 33, 1422, 1}), {1, 15, 33})\n    lu.assertEquals(candidate({152, 323, 1422,\
    \ 10}), {})\n    lu.assertEquals(candidate({12345, 2033, 111, 151}), {111, 151})\n\
    \    lu.assertEquals(candidate({135, 103, 31}), {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpevjcupho.lua:23:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpevjcupho.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
- exit_code: 1
  program: "-- Given a table of positive integers x. return a sorted table of all\
    \ \n-- elements that hasn't any even digit.\n-- Note: Returned table should be\
    \ sorted in increasing order.\n-- For example:\n-- >>> unique_digits({15, 33,\
    \ 1422, 1})\n-- {1, 15, 33}\n-- >>> unique_digits({152, 323, 1422, 10})\n-- {}\n\
    local function unique_digits(x)\n  local ret = {}\n  for i = 1, #x do\n    if\
    \ x[i] % 2 == 0 then\n      table.insert(ret, x[i])\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique_digits\n    lu.assertEquals(candidate({15, 33, 1422, 1}), {1, 15, 33})\n\
    \    lu.assertEquals(candidate({152, 323, 1422, 10}), {})\n    lu.assertEquals(candidate({12345,\
    \ 2033, 111, 151}), {111, 151})\n    lu.assertEquals(candidate({135, 103, 31}),\
    \ {31, 135})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg567b8r_.lua:22:\
    \ expected: {1, 15, 33}\nactual: {1422}\nstack traceback:\n\t/tmp/tmpg567b8r_.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750246
