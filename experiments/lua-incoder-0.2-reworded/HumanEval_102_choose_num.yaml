name: HumanEval_102_choose_num
language: lua
prompt: "-- This function takes two positive numbers x and y and returns the\n-- biggest\
  \ even integer number that is in the range [x, y] inclusive. If \n-- there's no\
  \ such number, then the function should return -1.\n-- For example:\n-- >>> choose_num(12,\
  \ 15)\n-- 14\n-- >>> choose_num(13, 12)\n-- -1\nlocal function choose_num(x, y)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = choose_num\n\
  \    lu.assertEquals(candidate(12, 15), 14)\n    lu.assertEquals(candidate(13, 12),\
  \ -1)\n    lu.assertEquals(candidate(33, 12354), 12354)\n    lu.assertEquals(candidate(5234,\
  \ 5233), -1)\n    lu.assertEquals(candidate(6, 29), 28)\n    lu.assertEquals(candidate(27,\
  \ 10), -1)\n    lu.assertEquals(candidate(7, 7), -1)\n    lu.assertEquals(candidate(546,\
  \ 546), 546)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local function is_even(n)\n    return n % 2 == 0\n  end\n  \n  local\
    \ function is_odd(n)\n    return n % 2 == 1\n  end\n  \n  local function is_between(n,\
    \ x, y)\n    return n >= x and n <= y\n  end\n  \n  local function is_in_range(n,\
    \ x, y)\n    return is_between(n, x, y) or is_even(n) or is_odd(n)\n  end\n  \n\
    \  local function choose_num_in_range(n, x, y)\n    if is_in_range(n, x, y) then\n\
    \      return n\n    end\n    if is_even(n) then\n      return choose_num_in_range(2\
    \ * n, x, y)\n    end\n    if is_odd(n) then\n      return choose_num_in_range(2\
    \ * n + 1, x, y)\n    end\n    return -1\n  end\n  \n  return choose_num_in_range(x,\
    \ y, x)\nend", "    if x < y then\n        local x_even = x % 2\n        local\
    \ y_even = y % 2\n        if x_even and y_even then\n            local max_even\
    \ = x_even * y_even\n            if max_even > x and max_even > y then\n     \
    \           return max_even\n            end\n        end\n    end\n    return\
    \ -1\nend", "   if x < y then\n      x, y = y, x\n   end\n   local max_num = x\n\
    \   for i = y, 1, -1 do\n      if max_num % i == 0 then\n         max_num = max_num\
    \ / i\n      else\n         return -1\n      end\n   end\n   return max_num\n\
    end", "    if x < y then\n        x, y = y, x\n    end\n    if x == y then\n \
    \       return x\n    end\n    if x % 2 == 0 then\n        return choose_num(x\
    \ / 2, y)\n    else\n        return choose_num(3 * x + 1, y)\n    end\nend", " \
    \ if x < y then\n    return choose_num(y, x)\n  end\n  if x == y then\n    return\
    \ x\n  end\n  if x % 2 == 0 and y % 2 == 0 then\n    return choose_num(x / 2,\
    \ y / 2)\n  end\n  if x % 2 == 0 and y % 2 != 0 then\n    return choose_num(x\
    \ / 2, y)\n  end\n  if x % 2 != 0 and y % 2 == 0 then\n    return choose_num(x,\
    \ y / 2)\n  end\n  if x % 2 != 0 and y % 2 != 0 then\n    return choose_num(x,\
    \ y)\n  end\n  return -1\nend", "  local x_even = x % 2\n  local x_odd = x % 2\
    \ + 1\n  local y_even = y % 2\n  local y_odd = y % 2 + 1\n  if x_even > y_even\
    \ then\n    return x_even\n  elseif x_odd > y_odd then\n    return x_odd\n  else\n\
    \    return -1\n  end\nend", "   if x < y then\n      local m = math.max(x, y)\n\
    \      return m % 2 == 0 and m or -1\n   end\n   if x > y then\n      local m\
    \ = math.min(x, y)\n      return m % 2 == 0 and m or -1\n   end\n   return -1\n\
    end", "    local function is_even(n)\n        return n % 2 == 0\n    end\n   \
    \ local function is_odd(n)\n        return n % 2 == 1\n    end\n    local function\
    \ is_between(lower, upper)\n        return lower <= upper and lower >= 0 and upper\
    \ <= x\n    end\n    local function is_in_range(n)\n        return is_between(n,\
    \ x) and is_between(n + 1, y)\n    end\n    local function is_in_range_even(n)\n\
    \        return is_between(n, x) and is_even(n + 1)\n    end\n    local function\
    \ is_in_range_odd(n)\n        return is_between(n, x) and is_odd(n + 1)\n    end\n\
    \    local function is_in_range_odd_even(n)\n        return is_between(n, x) and\
    \ is_odd(n) and is_even(n + 1)\n    end\n    local function is_in_range_odd_odd(n)\n\
    \        return is_between(n, x) and is_odd(n) and is_odd(n + 1)\n    end\n  \
    \  local function is_in_range_odd_even_even(n)\n        return is_between(n, x)\
    \ and is_odd(n) and is_even(n) and is_even(n + 1)\n    end\n    local function\
    \ is_in_range_odd_even_odd(n)\n        return is_between(n, x) and is_odd(n) and\
    \ is_odd(n) and is_odd(n + 1)\n    end\n    local function is_in_range_odd_even_even_even(n)\n\
    \        return is_between(n, x) and is_odd(n) and is_even(n) and is_even(n) and\
    \ is_even(n + 1)\n    end\n    local function is_in_range_odd_even_even_odd(n)\n\
    \        return is_between(n, x) and is_odd(n) and is_odd(n) and is_even(n) and\
    \ is_odd(n + 1)\n    end\n    local function is_in_range_odd_even_odd_even(n)\n\
    \        return is_between(n, x) and is_odd(n) and is_odd(n) and is_even(n) and\
    \ is_odd(n) and is_even(n + 1)\n    end\n    local function is_in_range_odd_even_odd_odd(n)\n\
    \        return is_between(n, x) and is_odd(n) and is_odd(n) and is_even(n) and\
    \ is_odd(n) and is_odd(n + 1)\n    end\n    local function is_in_range_odd_even_odd_even_even(n)\n\
    \        return is_between(n, x) and is_odd(n) and is_odd(n) and is_even(n) and\
    \ is_odd(n) and is_even(n) and is_even(n + 1)\n    end\n    local function is_in_range_odd_even_odd_even_odd(n)\n\
    \        return is_between(n, x", "   if x < y then\n      local m = x\n     \
    \ x = y\n      y = m\n   end\n   if x < 1 then\n      return -1\n   end\n   if\
    \ y < 1 then\n      return -1\n   end\n   if x == 1 then\n      return y\n   end\n\
    \   if y == 1 then\n      return x\n   end\n   local m = math.floor((x + y) /\
    \ 2)\n   return choose_num(x, m) + choose_num(m, y)\nend", "\tlocal function is_even(n)\n\
    \t\treturn n % 2 == 0\n\tend", "  if x < y then\n    return choose_num(y, x)\n\
    \  end\n  if x > y then\n    return choose_num(x, y)\n  end\n  if x == y then\n\
    \    return x\n  end\n  if x % 2 == 0 then\n    return choose_num(x / 2, y)\n\
    \  end\n  if y % 2 == 0 then\n    return choose_num(x, y / 2)\n  end\n  return\
    \ -1\nend", "  if x < y then\n    x, y = y, x\n  end\n  local max_num = x\n  local\
    \ max_num2 = y\n  local i = 1\n  while i <= max_num2 do\n    local num = max_num\
    \ + i\n    if num % 2 == 0 then\n      max_num = num\n    end\n    i = i + 1\n\
    \  end\n  if max_num == x then\n    return -1\n  end\n  return max_num\nend",
  "    local max_num = x\n    local min_num = y\n    local i = x\n    local j = y\n\
    \    while i <= j do\n        if ((i ^ y) % 2) == 0 then\n            i = i +\
    \ 1\n        else\n            j = j - 1\n        end\n        if ((i ^ y) % 2)\
    \ == 0 then\n            max_num = i\n            min_num = j\n        end\n \
    \   end\n    return max_num\nend", "\tlocal x_even = x % 2\n\tlocal y_even = y\
    \ % 2\n\tif x_even and y_even then\n\t\tlocal x_odd = x % 2 - x_even\n\t\tlocal\
    \ y_odd = y % 2 - y_even\n\t\tif x_odd > y_odd then\n\t\t\treturn x_even + y_even\n\
    \t\telse\n\t\t\treturn x_even - y_even\n\t\tend\n\telse\n\t\treturn -1\n\tend\n\
    end", "  if x < y then\n    return choose_num(y, x)\n  elseif x == y then\n  \
    \  return x\n  else\n    return choose_num(y - 1, x + 1)\n  end\nend", "    if\
    \ x < y then\n        x, y = y, x\n    end\n    for i = x, y + 1 do\n        if\
    \ i % 2 == 0 then\n            return i\n        end\n    end\n    return -1\n\
    end", "  if x < y then\n    return choose_num(y, x)\n  end\n  local even = 1\n\
    \  local odd = 0\n  while even < y do\n    even = even + 2\n  end\n  while odd\
    \ < y do\n    odd = odd + 2\n  end\n  if even > y then\n    return even\n  else\n\
    \    return odd\n  end\nend", "  if x < y then\n    return choose_num(y, x)\n\
    \  end\n  if x == y then\n    return x\n  end\n  if x % 2 == 0 then\n    return\
    \ choose_num(x / 2, y)\n  end\n  if y % 2 == 0 then\n    return choose_num(x,\
    \ y / 2)\n  end\n  local m = math.floor(x/2) + math.floor(y/2)\n  if m <= y then\n\
    \    return choose_num(m, y)\n  end\n  return choose_num(x, y)\nend", "  if x\
    \ > y then\n    x, y = y, x\n  end\n  local max_num = x\n  local max_num2 = y\n\
    \  local i = 1\n  while i <= y do\n    if max_num2 % 2 == 0 then\n      max_num\
    \ = max_num2\n    else\n      max_num2 = max_num / 2\n    end\n    i = i + 1\n\
    \  end\n  return max_num\nend", "\tlocal function is_even(n)\n\t\treturn n % 2\
    \ == 0\n\tend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
