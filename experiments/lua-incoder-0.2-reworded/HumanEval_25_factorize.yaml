name: HumanEval_25_factorize
language: lua
prompt: "-- Return table of prime factors of given integer in the order from smallest\
  \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
  \ to how many times it appeares in factorization.\n-- Input number should be equal\
  \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
  -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
  \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n\
  \    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
  \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
  \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
  \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factors = {}\n    for i = 2, n do\n        local factor =\
    \ 1\n        for j = 1, i do\n            if n % i == 0 then\n               \
    \ factor = factor * i\n                n = n / i\n                break\n    \
    \        end\n        end\n        if n ~= 1 then\n            table.insert(factors,\
    \ factor)\n        end\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        factor = factor\
    \ + 1\n        factors[factor] = factors[factor] or 1\n        factors[factor]\
    \ = factors[factor] + factors[factor - 1]\n    end\n    return factors\nend",
  "  -- Base case\n  if n < 2 then return {} end", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor] +\
    \ 1 if factors[factor] ~= nil then factors[factor] else 1 end\n    factor = factor\
    \ * 2\n  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n \
    \ while i <= n do\n    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i]\
    \ = 1\n      n = n - 1\n    else\n      factors[i] = p\n      n = n - p\n    end\n\
    \    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end\n  -- Recursive case\n  local factors = {}\n  local i =\
    \ 1\n  while i <= n do\n    local p = i\n    while p * p <= n do\n      p = p\
    \ * i\n    end\n    factors[i] = p\n    i = i + 1\n  end\n  return factors\nend",
  "    local factors = {}\n    local factor = 1\n    local i = 1\n    while i <= n\
    \ do\n        if n % i == 0 then\n            factor = factor * i\n          \
    \  i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n        if p\
    \ == 1 then\n            factors[i] = 1\n        else\n            factors[i]\
    \ = factors[p] + 1\n        end\n        i = i + 1\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    while\
    \ n ~= factor do\n      factors[#factors + 1] = factor\n      factor = factor\
    \ * 2\n    end\n    n = n / factor\n    factor = factor + 1\n  end\n  return factors\n\
    end", "  -- Base case\n  if n < 2 then return {} end\n  -- If n is prime then\
    \ return its factors\n  if primes[n] then return {n} end\n  -- If n is divisible\
    \ by 2 then return its factors\n  if n % 2 == 0 then return {2} end\n  -- If n\
    \ is divisible by 3 then return its factors\n  if n % 3 == 0 then return {3} end\n\
    \  -- If n is divisible by 5 then return its factors\n  if n % 5 == 0 then return\
    \ {5} end\n  -- If n is divisible by 7 then return its factors\n  if n % 7 ==\
    \ 0 then return {7} end\n  -- If n is divisible by 11 then return its factors\n\
    \  if n % 11 == 0 then return {11} end\n  -- If n is divisible by 13 then return\
    \ its factors\n  if n % 13 == 0 then return {13} end\n  -- If n is divisible by\
    \ 17 then return its factors\n  if n % 17 == 0 then return {17} end\n  -- If n\
    \ is divisible by 19 then return its factors\n  if n % 19 == 0 then return {19}\
    \ end\n  -- If n is divisible by 23 then return its factors\n  if n % 23 == 0\
    \ then return {23} end\n  -- If n is divisible by 29 then return its factors\n\
    \  if n % 29 == 0 then return {29} end\n  -- If n is divisible by 31 then return\
    \ its factors\n  if n % 31 == 0 then return {31} end\n  -- If n is divisible by\
    \ 37 then return its factors\n  if n % 37 == 0 then return {37} end\n  -- If n\
    \ is divisible by 41 then return its factors\n  if n % 41 == 0 then return {41}\
    \ end\n  -- If n is divisible by 43 then return its factors\n  if n % 43 == 0\
    \ then return {43} end\n  -- If n is divisible by 47 then return its factors\n\
    \  if n % 47 == 0 then return {47} end\n  -- If n is divisible by 53 then return\
    \ its factors\n  if n % 53 == 0 then return {53} end\n  -- If n is divisible by\
    \ 59 then return its factors\n  if n % 59 == 0 then return {59} end\n  -- If n\
    \ is divisible by 61 then return its factors\n  if n % 61 == 0 then return {61}\
    \ end\n  -- If n is di", "  -- Base case\n  if n == 1 then\n    return {}\n  end",
  "  -- Base case\n  if n < 2 then return {} end\n  -- If n is prime, return its prime\
    \ factors\n  if primes[n] then return {n} end\n  -- If n is divisible by 2, return\
    \ its prime factors\n  if n % 2 == 0 then return {2} end\n  -- If n is divisible\
    \ by 3, return its prime factors\n  if n % 3 == 0 then return {3} end\n  -- If\
    \ n is divisible by 5, return its prime factors\n  if n % 5 == 0 then return {5}\
    \ end\n  -- If n is divisible by 7, return its prime factors\n  if n % 7 == 0\
    \ then return {7} end\n  -- If n is divisible by 11, return its prime factors\n\
    \  if n % 11 == 0 then return {11} end\n  -- If n is divisible by 13, return its\
    \ prime factors\n  if n % 13 == 0 then return {13} end\n  -- If n is divisible\
    \ by 17, return its prime factors\n  if n % 17 == 0 then return {17} end\n  --\
    \ If n is divisible by 19, return its prime factors\n  if n % 19 == 0 then return\
    \ {19} end\n  -- If n is divisible by 23, return its prime factors\n  if n % 23\
    \ == 0 then return {23} end\n  -- If n is divisible by 29, return its prime factors\n\
    \  if n % 29 == 0 then return {29} end\n  -- If n is divisible by 31, return its\
    \ prime factors\n  if n % 31 == 0 then return {31} end\n  -- If n is divisible\
    \ by 37, return its prime factors\n  if n % 37 == 0 then return {37} end\n  --\
    \ If n is divisible by 41, return its prime factors\n  if n % 41 == 0 then return\
    \ {41} end\n  -- If n is divisible by 43, return its prime factors\n  if n % 43\
    \ == 0 then return {43} end\n  -- If n is divisible by 47, return its prime factors\n\
    \  if n % 47 == 0 then return {47} end\n  -- If n is divisible by 53, return its\
    \ prime factors\n  if n % 53 == 0 then return {53} end\n  -- If n is divisible\
    \ by 59, return its prime factors\n  if n % 59 == 0 then return {59} end\n  --\
    \ If n is divisible by 61, return its prime factors\n  if n % 61 == 0 then return\
    \ {61} end\n  -- If n is divisible by 67, ", "  -- Base case\n  if n < 2 then\
    \ return {} end\n  -- If n is prime then return its prime factors\n  if primes[n]\
    \ then return {n} end\n  -- If n is divisible by 2 then return its prime factors\n\
    \  if n % 2 == 0 then return {2} end\n  -- If n is divisible by 3 then return\
    \ its prime factors\n  if n % 3 == 0 then return {3} end\n  -- If n is divisible\
    \ by 5 then return its prime factors\n  if n % 5 == 0 then return {5} end\n  --\
    \ If n is divisible by 7 then return its prime factors\n  if n % 7 == 0 then return\
    \ {7} end\n  -- If n is divisible by 11 then return its prime factors\n  if n\
    \ % 11 == 0 then return {11} end\n  -- If n is divisible by 13 then return its\
    \ prime factors\n  if n % 13 == 0 then return {13} end\n  -- If n is divisible\
    \ by 17 then return its prime factors\n  if n % 17 == 0 then return {17} end\n\
    \  -- If n is divisible by 19 then return its prime factors\n  if n % 19 == 0\
    \ then return {19} end\n  -- If n is divisible by 23 then return its prime factors\n\
    \  if n % 23 == 0 then return {23} end\n  -- If n is divisible by 29 then return\
    \ its prime factors\n  if n % 29 == 0 then return {29} end\n  -- If n is divisible\
    \ by 31 then return its prime factors\n  if n % 31 == 0 then return {31} end\n\
    \  -- If n is divisible by 37 then return its prime factors\n  if n % 37 == 0\
    \ then return {37} end\n  -- If n is divisible by 41 then return its prime factors\n\
    \  if n % 41 == 0 then return {41} end\n  -- If n is divisible by 43 then return\
    \ its prime factors\n  if n % 43 == 0 then return {43} end\n  -- If n is divisible\
    \ by 47 then return its prime factors\n  if n % 47 == 0 then return {47} end\n\
    \  -- If n is divisible by 53 then return its prime factors\n  if n % 53 == 0\
    \ then return {53} end\n  -- If n is divisible by 59 then return its prime factors\n\
    \  if n % 59 == 0 then return {59} end\n  -- If n is divisible by 61 then return\
    \ its prime factor", "    local factors = {}\n    local factor = 1\n    local\
    \ i = 1\n    while i <= n do\n        factor = factor * i\n        if factor >\
    \ n then\n            factors[#factors + 1] = factor\n            factor = 1\n\
    \        end\n        i = i + 1\n    end\n    factors[#factors + 1] = factor\n\
    \    return factors\nend", "  -- Base case\n  if n < 2 then return {} end", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p == 1 then\n            factors[i] = 1\n    \
    \    else\n            factors[i] = factors[p] + 1\n        end\n        i = i\
    \ + 1\n    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n\
    \  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      factors[#factors+1]\
    \ = i\n      n = n / i\n    end\n    i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1]\
    \ = n\n  end\n  return factors\nend", "  local factors = {}\n  local factor =\
    \ 1\n  while factor <= n do\n    factors[factor] = factors[factor] + 1 if factors[factor]\
    \ ~= nil then factors[factor] else 1 end\n    factor = factor + 1\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return {n}\n  end\n  --\
    \ Recursive case\n  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n\
    \    for _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n\
    \  return factors\nend", "  -- Base case\n  if n < 2 then return {n} end\n  --\
    \ Recursive case\n  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n\
    \    for _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n\
    \  return factors\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
