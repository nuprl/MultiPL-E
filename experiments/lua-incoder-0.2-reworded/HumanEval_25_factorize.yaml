name: HumanEval_25_factorize
language: lua
prompt: "-- Return table of prime factors of given integer in the order from smallest\
  \ to largest.\n-- Each of the factors should be tableed number of times corresponding\
  \ to how many times it appeares in factorization.\n-- Input number should be equal\
  \ to the product of all factors\n-- >>> factorize(8)\n-- {2, 2, 2}\n-- >>> factorize(25)\n\
  -- {5, 5}\n-- >>> factorize(70)\n-- {2, 5, 7}\nlocal function factorize(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = factorize\n\
  \    lu.assertEquals(candidate(2), {2})\n    lu.assertEquals(candidate(4), {2, 2})\n\
  \    lu.assertEquals(candidate(8), {2, 2, 2})\n    lu.assertEquals(candidate(57),\
  \ {3, 19})\n    lu.assertEquals(candidate(3249), {3, 3, 19, 19})\n    lu.assertEquals(candidate(185193),\
  \ {3, 3, 3, 19, 19, 19})\n    lu.assertEquals(candidate(20577), {3, 19, 19, 19})\n\
  \    lu.assertEquals(candidate(18), {2, 3, 3})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local factors = {}\n    for i = 2, n do\n        local factor =\
    \ 1\n        for j = 1, i do\n            if n % i == 0 then\n               \
    \ factor = factor * i\n                n = n / i\n                break\n    \
    \        end\n        end\n        if n ~= 1 then\n            table.insert(factors,\
    \ factor)\n        end\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        factor = factor\
    \ + 1\n        factors[factor] = factors[factor] or 1\n        factors[factor]\
    \ = factors[factor] + factors[factor - 1]\n    end\n    return factors\nend",
  "  -- Base case\n  if n < 2 then return {} end", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor] +\
    \ 1 if factors[factor] ~= nil then factors[factor] else 1 end\n    factor = factor\
    \ * 2\n  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n \
    \ while i <= n do\n    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i]\
    \ = 1\n      n = n - 1\n    else\n      factors[i] = p\n      n = n - p\n    end\n\
    \    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end\n  -- Recursive case\n  local factors = {}\n  local i =\
    \ 1\n  while i <= n do\n    local p = i\n    while p * p <= n do\n      p = p\
    \ * i\n    end\n    factors[i] = p\n    i = i + 1\n  end\n  return factors\nend",
  "    local factors = {}\n    local factor = 1\n    local i = 1\n    while i <= n\
    \ do\n        if n % i == 0 then\n            factor = factor * i\n          \
    \  i = i + 1\n        else\n            i = i + 1\n        end\n    end\n    factors[#factors\
    \ + 1] = factor\n    return factors\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n        if p\
    \ == 1 then\n            factors[i] = 1\n        else\n            factors[i]\
    \ = factors[p] + 1\n        end\n        i = i + 1\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    while\
    \ n ~= factor do\n      factors[#factors + 1] = factor\n      factor = factor\
    \ * 2\n    end\n    n = n / factor\n    factor = factor + 1\n  end\n  return factors\n\
    end", "  -- Base case\n  if n < 2 then return {} end\n  -- If n is prime then\
    \ return its factors\n  if primes[n] then return {n} end\n  -- If n is divisible\
    \ by 2 then return its factors\n  if n % 2 == 0 then return {2} end\n  -- If n\
    \ is divisible by 3 then return its factors\n  if n % 3 == 0 then return {3} end\n\
    \  -- If n is divisible by 5 then return its factors\n  if n % 5 == 0 then return\
    \ {5} end\n  -- If n is divisible by 7 then return its factors\n  if n % 7 ==\
    \ 0 then return {7} end\n  -- If n is divisible by 11 then return its factors\n\
    \  if n % 11 == 0 then return {11} end\n  -- If n is divisible by 13 then return\
    \ its factors\n  if n % 13 == 0 then return {13} end\n  -- If n is divisible by\
    \ 17 then return its factors\n  if n % 17 == 0 then return {17} end\n  -- If n\
    \ is divisible by 19 then return its factors\n  if n % 19 == 0 then return {19}\
    \ end\n  -- If n is divisible by 23 then return its factors\n  if n % 23 == 0\
    \ then return {23} end\n  -- If n is divisible by 29 then return its factors\n\
    \  if n % 29 == 0 then return {29} end\n  -- If n is divisible by 31 then return\
    \ its factors\n  if n % 31 == 0 then return {31} end\n  -- If n is divisible by\
    \ 37 then return its factors\n  if n % 37 == 0 then return {37} end\n  -- If n\
    \ is divisible by 41 then return its factors\n  if n % 41 == 0 then return {41}\
    \ end\n  -- If n is divisible by 43 then return its factors\n  if n % 43 == 0\
    \ then return {43} end\n  -- If n is divisible by 47 then return its factors\n\
    \  if n % 47 == 0 then return {47} end\n  -- If n is divisible by 53 then return\
    \ its factors\n  if n % 53 == 0 then return {53} end\n  -- If n is divisible by\
    \ 59 then return its factors\n  if n % 59 == 0 then return {59} end\n  -- If n\
    \ is divisible by 61 then return its factors\n  if n % 61 == 0 then return {61}\
    \ end\n  -- If n is di", "  -- Base case\n  if n == 1 then\n    return {}\n  end",
  "  -- Base case\n  if n < 2 then return {} end\n  -- If n is prime, return its prime\
    \ factors\n  if primes[n] then return {n} end\n  -- If n is divisible by 2, return\
    \ its prime factors\n  if n % 2 == 0 then return {2} end\n  -- If n is divisible\
    \ by 3, return its prime factors\n  if n % 3 == 0 then return {3} end\n  -- If\
    \ n is divisible by 5, return its prime factors\n  if n % 5 == 0 then return {5}\
    \ end\n  -- If n is divisible by 7, return its prime factors\n  if n % 7 == 0\
    \ then return {7} end\n  -- If n is divisible by 11, return its prime factors\n\
    \  if n % 11 == 0 then return {11} end\n  -- If n is divisible by 13, return its\
    \ prime factors\n  if n % 13 == 0 then return {13} end\n  -- If n is divisible\
    \ by 17, return its prime factors\n  if n % 17 == 0 then return {17} end\n  --\
    \ If n is divisible by 19, return its prime factors\n  if n % 19 == 0 then return\
    \ {19} end\n  -- If n is divisible by 23, return its prime factors\n  if n % 23\
    \ == 0 then return {23} end\n  -- If n is divisible by 29, return its prime factors\n\
    \  if n % 29 == 0 then return {29} end\n  -- If n is divisible by 31, return its\
    \ prime factors\n  if n % 31 == 0 then return {31} end\n  -- If n is divisible\
    \ by 37, return its prime factors\n  if n % 37 == 0 then return {37} end\n  --\
    \ If n is divisible by 41, return its prime factors\n  if n % 41 == 0 then return\
    \ {41} end\n  -- If n is divisible by 43, return its prime factors\n  if n % 43\
    \ == 0 then return {43} end\n  -- If n is divisible by 47, return its prime factors\n\
    \  if n % 47 == 0 then return {47} end\n  -- If n is divisible by 53, return its\
    \ prime factors\n  if n % 53 == 0 then return {53} end\n  -- If n is divisible\
    \ by 59, return its prime factors\n  if n % 59 == 0 then return {59} end\n  --\
    \ If n is divisible by 61, return its prime factors\n  if n % 61 == 0 then return\
    \ {61} end\n  -- If n is divisible by 67, ", "  -- Base case\n  if n < 2 then\
    \ return {} end\n  -- If n is prime then return its prime factors\n  if primes[n]\
    \ then return {n} end\n  -- If n is divisible by 2 then return its prime factors\n\
    \  if n % 2 == 0 then return {2} end\n  -- If n is divisible by 3 then return\
    \ its prime factors\n  if n % 3 == 0 then return {3} end\n  -- If n is divisible\
    \ by 5 then return its prime factors\n  if n % 5 == 0 then return {5} end\n  --\
    \ If n is divisible by 7 then return its prime factors\n  if n % 7 == 0 then return\
    \ {7} end\n  -- If n is divisible by 11 then return its prime factors\n  if n\
    \ % 11 == 0 then return {11} end\n  -- If n is divisible by 13 then return its\
    \ prime factors\n  if n % 13 == 0 then return {13} end\n  -- If n is divisible\
    \ by 17 then return its prime factors\n  if n % 17 == 0 then return {17} end\n\
    \  -- If n is divisible by 19 then return its prime factors\n  if n % 19 == 0\
    \ then return {19} end\n  -- If n is divisible by 23 then return its prime factors\n\
    \  if n % 23 == 0 then return {23} end\n  -- If n is divisible by 29 then return\
    \ its prime factors\n  if n % 29 == 0 then return {29} end\n  -- If n is divisible\
    \ by 31 then return its prime factors\n  if n % 31 == 0 then return {31} end\n\
    \  -- If n is divisible by 37 then return its prime factors\n  if n % 37 == 0\
    \ then return {37} end\n  -- If n is divisible by 41 then return its prime factors\n\
    \  if n % 41 == 0 then return {41} end\n  -- If n is divisible by 43 then return\
    \ its prime factors\n  if n % 43 == 0 then return {43} end\n  -- If n is divisible\
    \ by 47 then return its prime factors\n  if n % 47 == 0 then return {47} end\n\
    \  -- If n is divisible by 53 then return its prime factors\n  if n % 53 == 0\
    \ then return {53} end\n  -- If n is divisible by 59 then return its prime factors\n\
    \  if n % 59 == 0 then return {59} end\n  -- If n is divisible by 61 then return\
    \ its prime factor", "    local factors = {}\n    local factor = 1\n    local\
    \ i = 1\n    while i <= n do\n        factor = factor * i\n        if factor >\
    \ n then\n            factors[#factors + 1] = factor\n            factor = 1\n\
    \        end\n        i = i + 1\n    end\n    factors[#factors + 1] = factor\n\
    \    return factors\nend", "  -- Base case\n  if n < 2 then return {} end", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p == 1 then\n            factors[i] = 1\n    \
    \    else\n            factors[i] = factors[p] + 1\n        end\n        i = i\
    \ + 1\n    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n\
    \  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      factors[#factors+1]\
    \ = i\n      n = n / i\n    end\n    i = i + 1\n  end\n  if n ~= 1 then\n    factors[#factors+1]\
    \ = n\n  end\n  return factors\nend", "  local factors = {}\n  local factor =\
    \ 1\n  while factor <= n do\n    factors[factor] = factors[factor] + 1 if factors[factor]\
    \ ~= nil then factors[factor] else 1 end\n    factor = factor + 1\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return {n}\n  end\n  --\
    \ Recursive case\n  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n\
    \    for _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n\
    \  return factors\nend", "  -- Base case\n  if n < 2 then return {n} end\n  --\
    \ Recursive case\n  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n\
    \    for _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n\
    \  return factors\nend", "    local factors = {}\n    local i = 1\n    while i\
    \ <= n do\n        local p = i\n        while n % p == 0 do\n            n = n\
    \ / p\n            i = i + 1\n        end\n        factors[i] = n\n        i =\
    \ i + 1\n    end\n    return factors\nend", "  local factors = {}\n  local i =\
    \ 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if p == 1 then\n  \
    \    factors[i] = 1\n      n = math.floor(n/i)\n    else\n      factors[i] = p\n\
    \      n = math.floor(n/p)\n    end\n    i = i + 1\n  end\n  return factors\n\
    end", "    local factors = {}\n    local factor = 1\n    local i = 1\n    while\
    \ i <= n do\n        if n % i == 0 then\n            factor = factor * i\n   \
    \         i = i + 1\n        else\n            i = i + 1\n        end\n    end\n\
    \    factors[#factors + 1] = factor\n    return factors\nend", "  -- Base case\n\
    \  if n < 2 then return {n} end\n  -- Recursive case\n  local factors = {}\n \
    \ for i = 2, n do\n    local f = factorize(i)\n    for _, v in ipairs(f) do\n\
    \      table.insert(factors, v)\n    end\n  end\n  return factors\nend", "   \
    \ local factors = {}\n    local i = 1\n    while i <= n do\n        if n % i ==\
    \ 0 then\n            factors[#factors+1] = i\n            n = n / i\n       \
    \ else\n            i = i + 1\n        end\n    end\n    return factors\nend",
  "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n  \
    \  factor = factor * i\n    if factor > n then\n      break\n    end\n    i =\
    \ i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\nend", " \
    \ -- Base case\n  if n == 1 then\n    return {n}\n  end\n  -- Recursive case\n\
    \  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n    for\
    \ _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n  return\
    \ factors\nend", "  local factors = {}\n  local i = 1\n  while i <= n do\n   \
    \ local p = i\n    while n % i == 0 do\n      p = p * i\n    end\n    i = i +\
    \ 1\n    factors[#factors + 1] = i\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor\
    \ * i\n    if factor > n then\n      break\n    end\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i\
    \ = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\nend",
  "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i\
    \ == 0 then\n      factors[i] = factors[i] or 1\n      factors[i] = factors[i]\
    \ * i\n    end\n    i = i + 1\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  while factor <= n do\n    local i = 1\n    while\
    \ i * factor <= n do\n      if n % i == 0 then\n        factor = factor * i\n\
    \      else\n        i = i + 1\n      end\n    end\n    table.insert(factors,\
    \ factor)\n    factor = factor + 1\n  end\n  return factors\nend", "  -- Base\
    \ case\n  if n == 1 then\n    return {}\n  end", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor] or\
    \ 1\n    factor = factor * 2\n  end\n  local factor = 1\n  while factor <= n do\n\
    \    factor = factor * 2\n    factors[factor] = factors[factor] + 1\n  end\n \
    \ return factors\nend", "  local factors = {}\n  local factor = 1\n  while factor\
    \ <= n do\n    factor = factor * 2\n    factors[factor] = factors[factor] + 1\
    \ or 1\n  end\n  table.sort(factors)\n  local result = {}\n  for i = 1, n do\n\
    \    table.insert(result, factors[factor])\n  end\n  return result\nend", "  \
    \  local factors = {}\n    local factor = 1\n    while factor <= n do\n      \
    \  if n % factor == 0 then\n            table.insert(factors, factor)\n      \
    \      n = n / factor\n        else\n            factor = factor + 1\n       \
    \ end\n    end\n    return factors\nend", "    local factors = {}\n    local i\
    \ = 1\n    while i * i <= n do\n        if n % i == 0 then\n            i = i\
    \ + 1\n            factors[i] = i\n        end\n    end\n    return factors\n\
    end", "  -- Base case\n  if n == 1 then\n    return {1}\n  end", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    if n % i ==\
    \ 0 then\n      factor = factor * i\n      i = i + 1\n      factors[#factors +\
    \ 1] = factor\n    end\n    i = i + 1\n  end\n  return factors\nend", "  -- Base\
    \ case\n  if n < 2 then return {} end", "    local factors = {}\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            table.insert(factors, i)\n   \
    \         n = n / i\n        end\n    end\n    if n ~= 1 then\n        table.insert(factors,\
    \ n)\n    end\n    return factors\nend", "  local factors = {}\n  local i = 1\n\
    \  while i <= n do\n    local p = i\n    while i * p <= n do\n      p = p * i\n\
    \    end\n    i = i + 1\n    table.insert(factors, p)\n  end\n  return factors\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    if p == 1 then\n      factors[i] = 1\n      n = n-1\n    else\n      factors[i]\
    \ = p\n      n = n - p * i\n    end\n    i = i + 1\n  end\n  return factors\n\
    end", "    local factors = {}\n    local primes = {}\n    local factorization\
    \ = {}\n    local prime_factorization = {}\n    local prime_factors = {}\n   \
    \ local prime_factors_count = 0\n    local prime_factors_count_max = 0\n    local\
    \ prime_factors_count_min = 0\n    local prime_factors_count_min_index = 0\n \
    \   local prime_factors_count_max_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index = 0\n    local prime_factors_count_max_index\
    \ = 0\n    local prime_factors_count_min_index", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i\
    \ = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\nend",
  "  -- Base case\n  if n == 1 then\n    return {1}\n  end\n  -- Recursive case\n\
    \  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n    for\
    \ _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n  return\
    \ factors\nend", "    local factors = {}\n    local i = 1\n    while i <= n do\n\
    \        if n % i == 0 then\n            factors[i] = factors[i] or 1\n      \
    \      factors[i] = factors[i] + 1\n            n = n / i\n        else\n    \
    \        i = i + 1\n        end\n    end\n    return factors\nend", "    local\
    \ factors = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "  local factors\
    \ = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p*i > n then\n      break\n    end\n    factors[p] = factors[p] or {}\n    factors[p][#factors[p]+1]\
    \ = p\n    i = i*p\n  end\n  return factors\nend", "  -- Base case\n  if n < 2\
    \ then return {} end", "  local factors = {}\n  local factor = 1\n  local i =\
    \ 1\n  while n ~= 1 do\n    while n ~= factor do\n      factors[#factors + 1]\
    \ = factor\n      factor = factor * i\n    end\n    i = i + 1\n    n = n / factor\n\
    \  end\n  factors[#factors + 1] = factor\n  return factors\nend", "  local factors\
    \ = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if\
    \ p == 1 then\n      factors[i] = 1\n    else\n      factors[i] = factors[p] +\
    \ 1\n    end\n    i = i + 1\n  end\n  return factors\nend", "  local factors =\
    \ {}\n  local i = 1\n  while i <= n do\n    local p = i\n    while n % p == 0\
    \ do\n      p = p * i\n    end\n    i = i + 1\n    factors[#factors + 1] = p --\
    \ Add new factor to factors table\n  end\n  return factors\nend", "  -- Initialize\
    \ table of factors\n  local factors = {}\n  -- Initialize table of factorization\n\
    \  local factorization = {}\n  -- Initialize table of prime factors\n  local primes\
    \ = {}\n  -- Initialize table of prime factors\n  local prime_factorization =\
    \ {}\n  -- Initialize table of prime factors\n  local prime_factors = {}\n  --\
    \ Initialize table of prime factors\n  local prime_factors_table = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_2 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_3 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_4 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_5 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_6 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_7 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_8 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_9 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_10 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_11 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_12 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_13 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_14 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_15 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_16 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_17 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_18 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_19 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_20 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_21 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_22 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_23 = {}\n  -- Initialize\
    \ table of prime factors\n  local prime_factors_table_24 = {}\n  -- Initialize\
    \ table of prime factors", "  local factors = {}\n  local i = 1\n  while i <=\
    \ n do\n    local p = i\n    while i * p <= n do\n      p = p * i\n    end\n \
    \   i = i + 1\n    factors[#factors + 1] = p\n  end\n  return factors\nend", " \
    \ local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n \
    \   if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n      factors[#factors\
    \ + 1] = factor\n    end\n    i = i + 1\n  end\n  return factors\nend", "  local\
    \ factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    if p == 1 then\n      factors[i] = 1\n      n = n-1\n    else\n      factors[i]\
    \ = p\n      n = p*i\n    end\n    i = i + 1\n  end\n  return factors\nend", " \
    \ -- Base case\n  if n == 1 then\n    return {n}\n  end", "    local factors =\
    \ {}\n    local factor = 1\n    while n > 1 do\n        factor = factor * n\n\
    \        factors[factor] = factors[factor] + 1 or 1\n        n = n / factor\n\
    \    end\n    return factors\nend", "  local factors = {}\n  local factor = 1\n\
    \  local i = 1\n  while i <= n do\n    factor = factor * i\n    i = i + 1\n  \
    \  factors[#factors + 1] = factor\n  end\n  return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            table.insert(factors, factor)\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while\
    \ i <= n do\n    factor = factor * i\n    i = i + 1\n    if factor > n then\n\
    \      break\n    end\n    factors[#factors + 1] = factor\n  end\n  return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor]\
    \ = factors[factor] or 0\n    factor = factor * 2\n  end\n  local i = 1\n  while\
    \ i <= n do\n    local p = i\n    while p <= n do\n      if n % p == 0 then\n\
    \        factors[p] = factors[p] + 1\n        n = n / p\n        break\n     \
    \ end\n      p = p * 2\n    end\n    i = i + 1\n  end\n  return factors\nend",
  "  -- Base case\n  if n < 2 then\n    return {}\n  end", "  local factors = {}\n\
    \  local factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor]\
    \ + 1 or 1\n    factor = factor * 2\n  end\n  table.sort(factors, function(a,\
    \ b) return a < b end)\n  local result = {}\n  for i = 1, n do\n    table.insert(result,\
    \ factors[i])\n  end\n  return result\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i <= n do\n        if n % i == 0 then\n            factors[#factors+1]\
    \ = i\n            n = n / i\n        end\n        i = i + 1\n    end\n    return\
    \ factors\nend", "  -- If n is prime, return its prime factors\n  if primes[n]\
    \ then\n    return primes[n]\n  end", "  -- Initialize factorization table\n \
    \ local factors = {}\n  -- Initialize prime factorization table\n  local primes\
    \ = {}\n  -- Initialize prime factorization table with only prime factors\n  local\
    \ primes_only = {}\n  -- Initialize prime factorization table with only factors\n\
    \  local factors_only = {}\n  -- Initialize prime factorization table with only\
    \ factors and primes\n  local factors_and_primes = {}\n  -- Initialize prime factorization\
    \ table with only factors and primes\n  local factors_and_primes_only = {}\n \
    \ -- Initialize prime factorization table with only factors and primes\n  local\
    \ factors_and_primes_only_primes = {}\n  -- Initialize prime factorization table\
    \ with only factors and primes\n  local factors_and_primes_only_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes = {}\n  -- Initialize prime\
    \ factorization table with only factors and primes\n  local factors_and_primes_only_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes_primes_primes = {}\n  --\
    \ Initialize prime factorization table with only factors and primes\n  local factors_and_primes_only_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table with only factors and primes\n\
    \  local factors_and_primes_only_primes_primes_primes_primes_primes_primes_prime",
  "  local factors = {}\n  local i = 1\n  while i <= math.sqrt(n) do\n    local p\
    \ = math.floor(n/i)\n    if p*i > n then\n      break\n    end\n    factors[#factors+1]\
    \ = p\n    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n  if n ==\
    \ 1 then\n    return {n}\n  end", "  local factors = {}\n  local factor = 1\n\
    \  while factor <= n do\n    factors[factor] = factors[factor] + 1 or 1\n    factor\
    \ = factor * 2\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    factor = factor + 1\n    factors[factor]\
    \ = factors[factor] or 1\n    factors[factor] = factors[factor] + 1\n  end\n \
    \ return factors\nend", "  local factors = {}\n  local i = 1\n  while i <= n do\n\
    \    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i] = 1\n   \
    \   n = math.floor(n/i)\n    else\n      factors[i] = p\n      n = math.floor(n/p)\n\
    \    end\n    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n  if\
    \ n == 1 then\n    return {}\n  end", "  local factors = {}\n  local factor =\
    \ 1\n  local i = 1\n  while i <= n do\n    while n % i == 0 do\n      factor =\
    \ factor * i\n      i = i + 1\n    end\n    i = i + 1\n    factors[#factors +\
    \ 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i = i +\
    \ 1\n    factors[#factors + 1] = factor\n  end\n  return factors\nend", "  local\
    \ factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    local q = n - p*i\n    if p > 1 then\n      factors[p] = factors[p] or {}\n\
    \      factors[p][q] = factors[p][q] or 1\n    end\n    i = i + 1\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return {n}\n  end", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p ~= i then\n            factors[p] = factors[p]\
    \ or {}\n            factors[p][#factors[p]+1] = p\n        end\n        i = i\
    \ + 1\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i = i +\
    \ 1\n    factors[#factors + 1] = factor\n  end\n  return factors\nend", "  local\
    \ factors = {}\n  local factor = 1\n  while n ~= 1 do\n    while n % factor ==\
    \ 0 do\n      factors[#factors + 1] = factor\n      n = n / factor\n    end\n\
    \    factor = factor + 1\n  end\n  return factors\nend", "  -- Base case\n  if\
    \ n < 2 then return {} end", "  local factors = {}\n  local factor = 1\n  while\
    \ factor <= n do\n    factors[factor] = factors[factor] + 1 or 1\n    factor =\
    \ factor + factors[factor]\n  end\n  return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    local i = 1\n    while i <= n do\n        factor\
    \ = factor * i\n        if factor > n then\n            break\n        end\n \
    \       factors[#factors + 1] = factor\n        i = i + 1\n    end\n    return\
    \ factors\nend", "    local factors = {}\n    for i = 2, n do\n        local f\
    \ = math.floor(n/i)\n        if f == i then\n            factors[#factors+1] =\
    \ i\n        end\n    end\n    return factors\nend", "  -- Base case\n  if n <\
    \ 2 then\n    return {}\n  end\n  -- Recursive case\n  local factors = {}\n  for\
    \ i = 2, n do\n    local f = factorize(i)\n    for _, v in pairs(f) do\n     \
    \ table.insert(factors, v)\n    end\n  end\n  return factors\nend", "  -- Base\
    \ case\n  if n < 2 then return {} end\n  -- If n is prime then return its factors\n\
    \  if primes[n] then return {n} end\n  -- If n is divisible by 2 then return its\
    \ factors\n  if n % 2 == 0 then return {2} end\n  -- If n is divisible by 3 then\
    \ return its factors\n  if n % 3 == 0 then return {3} end\n  -- If n is divisible\
    \ by 5 then return its factors\n  if n % 5 == 0 then return {5} end\n  -- If n\
    \ is divisible by 7 then return its factors\n  if n % 7 == 0 then return {7} end\n\
    \  -- If n is divisible by 11 then return its factors\n  if n % 11 == 0 then return\
    \ {11} end\n  -- If n is divisible by 13 then return its factors\n  if n % 13\
    \ == 0 then return {13} end\n  -- If n is divisible by 17 then return its factors\n\
    \  if n % 17 == 0 then return {17} end\n  -- If n is divisible by 19 then return\
    \ its factors\n  if n % 19 == 0 then return {19} end\n  -- If n is divisible by\
    \ 23 then return its factors\n  if n % 23 == 0 then return {23} end\n  -- If n\
    \ is divisible by 29 then return its factors\n  if n % 29 == 0 then return {29}\
    \ end\n  -- If n is divisible by 31 then return its factors\n  if n % 31 == 0\
    \ then return {31} end\n  -- If n is divisible by 37 then return its factors\n\
    \  if n % 37 == 0 then return {37} end\n  -- If n is divisible by 41 then return\
    \ its factors\n  if n % 41 == 0 then return {41} end\n  -- If n is divisible by\
    \ 43 then return its factors\n  if n % 43 == 0 then return {43} end\n  -- If n\
    \ is divisible by 47 then return its factors\n  if n % 47 == 0 then return {47}\
    \ end\n  -- If n is divisible by 53 then return its factors\n  if n % 53 == 0\
    \ then return {53} end\n  -- If n is divisible by 59 then return its factors\n\
    \  if n % 59 == 0 then return {59} end\n  -- If n is divisible by 61 then return\
    \ its factors\n  if n % 61 == 0 then return {61} end\n  -- If n is di", "  local\
    \ factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    if p == 1 then\n      factors[i] = 1\n      n = math.floor(n/i)\n    else\n\
    \      factors[i] = p\n      n = math.floor(n/p)\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend", "    local factors = {}\n    local factor = 1\n    local\
    \ i = 1\n    while i <= n do\n        if n % i == 0 then\n            factor =\
    \ factor * i\n            i = i + 1\n        else\n            i = i + 1\n   \
    \     end\n    end\n    if factor > 1 then\n        table.insert(factors, factor)\n\
    \    end\n    return factors\nend", "    local factors = {}\n    local i = 1\n\
    \    while i <= n do\n        local p = math.floor(n/i)\n        if p == 1 then\n\
    \            factors[i] = 1\n        else\n            factors[i] = factors[p]\
    \ + 1\n        end\n        i = i + 1\n    end\n    return factors\nend", "  --\
    \ Base case\n  if n == 1 then\n    return {n}\n  end", "  -- Base case\n  if n\
    \ == 1 then\n    return {}\n  end", "  -- Initialize factorization\n  local factors\
    \ = {}\n  -- Initialize prime factorization\n  local primes = {}\n  -- Initialize\
    \ prime factorization with factors less than n\n  local primes_less = {}\n  --\
    \ Initialize prime factorization with factors less than n and factors greater\
    \ than n\n  local primes_less_less = {}\n  -- Initialize prime factorization with\
    \ factors less than n and factors greater than n\n  local primes_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less = {}\n  -- Initialize prime\
    \ factorization with factors less than n and factors greater than n\n  local primes_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less = {}\n  -- Initialize\
    \ prime factorization with factors less than n and factors greater than n\n  local\
    \ primes_less_less_less_less_less_less_less = {}\n  -- Initialize prime factorization\
    \ with factors less than n and factors greater than n\n  local primes_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_less_less_less_less_less_less_less_less_less_less_less_less_less\
    \ = {}\n  -- Initialize prime factorization with factors less than n and factors\
    \ greater than n\n  local primes_less_less_", "    local factors = {}\n    local\
    \ factor = 1\n    while factor <= n do\n        factors[factor] = factors[factor]\
    \ + 1 or 1\n        factor = factor + 1\n    end\n    return factors\nend", " \
    \ local factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    local f = factors[p]\n    if not f then\n      factors[p] = i\n      i =\
    \ p + 1\n    else\n      i = f + 1\n    end\n  end\n  return factors\nend", " \
    \   local factors = {}\n    local factor = 1\n    local i = 1\n    while i <=\
    \ n do\n        if n % i == 0 then\n            factor = factor * i\n        \
    \    i = i + 1\n        else\n            i = i + 1\n        end\n    end\n  \
    \  factors[#factors+1] = factor\n    return factors\nend", "  local factors =\
    \ {}\n  local i = 1\n  while i <= n do\n    local p = i\n    while i * p <= n\
    \ do\n      p = p * i\n    end\n    factors[#factors + 1] = i\n    i = p\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local factor = 1\n  local i\
    \ = 1\n  while i <= n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ i = 1\n  while i <= n do\n    local p = i\n    while i * p <= n do\n      p\
    \ = p * i\n    end\n    i = i + 1\n    factors[#factors + 1] = p\n  end\n  return\
    \ factors\nend", "  local factors = {}\n  local i = 1\n  while i <= n do\n   \
    \ local p = math.floor(n/i)\n    if p == 1 then\n      factors[i] = 1\n      n\
    \ = math.floor(n/i)\n    else\n      factors[i] = p\n      n = math.floor(n/p)\n\
    \    end\n    i = i + 1\n  end\n  return factors\nend", "  local factors = {}\n\
    \  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n\
    \    i = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while factor <= n do\n    factor\
    \ = factor + 1\n    factors[factor] = factors[factor] or 1\n    factors[factor]\
    \ = factors[factor] + factors[factor - 1]\n  end\n  return factors\nend", "  --\
    \ Initialize result table\n  local factors = {}\n  -- Initialize prime table\n\
    \  local primes = {}\n  -- Initialize factorization table\n  local factorization\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table\n  local prime_factorization_table_primes_primes_primes_primes_primes_primes_primes_primes_",
  "  local factors = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor]\
    \ = factors[factor] + 1 or 1\n    factor = factor * 2\n  end\n  table.sort(factors)\n\
    \  local primes = {}\n  local prime = 1\n  local prime_factor = 1\n  while prime_factor\
    \ <= n do\n    primes[prime] = primes[prime] + 1 or 1\n    prime_factor = prime_factor\
    \ * 2\n  end\n  table.sort(primes)\n  local prime_table = {}\n  for i = 1, n do\n\
    \    prime_table[i] = primes[prime]\n    prime = prime + 1\n  end\n  return prime_table\n\
    end", "  -- Base case\n  if n == 1 then\n    return {n}\n  end\n  -- Recursive\
    \ case\n  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n\
    \    for _, v in ipairs(f) do\n      table.insert(factors, v)\n    end\n  end\n\
    \  return factors\nend", "  -- Base case\n  if n < 2 then\n    return {}\n  end\n\
    \  -- Recursive case\n  local factors = {}\n  for i = 2, n do\n    local f = factorize(i)\n\
    \    for _, v in pairs(f) do\n      table.insert(factors, v)\n    end\n  end\n\
    \  return factors\nend", "  -- Base case\n  if n == 1 then\n    return {}\n  end",
  "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n  \
    \  factor = factor * i\n    i = i + 1\n    factors[#factors + 1] = factor\n  end\n\
    \  return factors\nend", "  -- Base case\n  if n < 2 then return { n = 1 } end\n\
    \  -- Recursive case\n  if n % 2 == 0 then\n    local factors = factorize(n /\
    \ 2)\n    factors.n = factors.n * 2\n    return factors\n  end\n  -- Recursive\
    \ case\n  local factors = factorize(n / 2)\n  factors.n = factors.n * 2\n  return\
    \ factors\nend", "    local factors = {}\n    local factor = 1\n    while factor\
    \ <= n do\n        if n % factor == 0 then\n            table.insert(factors,\
    \ factor)\n            n = n / factor\n        else\n            factor = factor\
    \ + 1\n        end\n    end\n    return factors\nend", "  local factors = {}\n\
    \  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if p ==\
    \ i then\n      factors[i] = 1\n      n = n - p * i\n    else\n      factors[i]\
    \ = factors[p] + 1\n    end\n    i = i + 1\n  end\n  return factors\nend", " \
    \ local factors = {}\n  local i = 1\n  while i <= n do\n    local p = i\n    while\
    \ i * p <= n do\n      p = p * i\n    end\n    i = i + 1\n    factors[#factors\
    \ + 1] = i\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end", "  local factors = {}\n  local factor = 1\n  local i\
    \ = 1\n  while i <= n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors\
    \ + 1] = factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    factors[factor] = factors[factor] +\
    \ 1 or 1\n    factor = factor * 2\n  end\n  return factors\nend", "  local factors\
    \ = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor\
    \ * i\n    i = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\n\
    end", "  -- Initialize factorization table\n  local factors = {}\n  -- Initialize\
    \ prime factorization table\n  local primes = {}\n  -- Initialize prime factorization\
    \ table of primes\n  local primes_primes = {}\n  -- Initialize factorization table\
    \ of primes\n  local primes_primes_primes = {}\n  -- Initialize prime factorization\
    \ table of primes\n  local primes_primes_primes_primes = {}\n  -- Initialize prime\
    \ factorization table of primes\n  local primes_primes_primes_primes_primes =\
    \ {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes_primes\
    \ = {}\n  -- Initialize prime factorization table of primes\n  local primes_primes_primes_primes_primes_primes_primes_primes_prime",
  "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    while n % factor\
    \ == 0 do\n      factors[#factors + 1] = factor\n      n = n / factor\n    end\n\
    \    factor = factor + 1\n  end\n  factors[#factors + 1] = factor\n  return factors\n\
    end", "  local factors = {}\n  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n\
    \    local f = factors[p]\n    if not f then\n      factors[p] = i\n      i =\
    \ p + 1\n    else\n      i = f + 1\n    end\n  end\n  return factors\nend", " \
    \ local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n \
    \   while n % i == 0 do\n      n = n / i\n      factor = factor+1\n    end\n \
    \   i = i + 1\n    factors[factor] = factors[factor] or {}\n    factors[factor][n]\
    \ = factors[factor][n] or 1\n  end\n  return factors\nend", "  -- Base case\n\
    \  if n < 2 then\n    return {}\n  end", "    local factors = {}\n    local factor\
    \ = 1\n    local i = 1\n    while i <= n do\n        factor = factor * i\n   \
    \     if factor > n then\n            break\n        end\n        factors[#factors\
    \ + 1] = factor\n        i = i + 1\n    end\n    return factors\nend", "  local\
    \ factors = {}\n  local i = 1\n  while i <= n do\n    local p = i\n    while i\
    \ * p <= n do\n      p = p * i\n    end\n    factors[i] = p\n    i = i + 1\n \
    \ end\n  return factors\nend", "  local factors = {}\n  local factor = 1\n  local\
    \ i = 1\n  while i <= n do\n    while n % i == 0 do\n      n = n / i\n      table.insert(factors,\
    \ i)\n    end\n    i = i + 1\n  end\n  if n ~= 1 then\n    table.insert(factors,\
    \ n)\n  end\n  return factors\nend", "  local factors = {}\n  local i = 1\n  while\
    \ i <= n do\n    local p = math.floor(n/i)\n    if p == 1 then\n      factors[i]\
    \ = 1\n      n = math.floor(n/i)\n    else\n      factors[i] = p\n      n = math.floor(n/p)\n\
    \    end\n    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n  if\
    \ n == 1 then\n    return {1}\n  end", "  -- If n is prime then return its prime\
    \ factors\n  if primes[n] then\n    return primes[n]\n  end", "  -- Base case\n\
    \  if n == 1 then\n    return {n}\n  end", "  -- Base case\n  if n < 2 then return\
    \ {} end\n  -- Recursive case\n  local factors = {}\n  for i = 2, n do\n    local\
    \ p = math.floor(n/i)\n    if p > 1 then\n      factors[#factors+1] = p\n    \
    \  n = math.floor(n/p)\n    end\n  end\n  if n > 1 then\n    factors[#factors+1]\
    \ = n\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n    return\
    \ {1}\n  end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while\
    \ i <= n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors + 1]\
    \ = factor\n  end\n  return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i = i +\
    \ 1\n    factors[factor] = factors[factor] + 1 or 1\n  end\n  return factors\n\
    end", "  -- Base case\n  if n == 1 then\n    return {n}\n  end", "    local factors\
    \ = {}\n    local i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n\
    \        if p == 1 then\n            factors[#factors+1] = i\n        else\n \
    \           local q = math.floor((n - p*i)/p)\n            if q == 1 then\n  \
    \              factors[#factors+1] = i\n            else\n                factors[#factors+1]\
    \ = q\n            end\n        end\n        i = i + 1\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while n ~= 1 do\n    factor\
    \ = factor * n % factor\n    factors[factor] = factors[factor] + 1 or 1\n    n\
    \ = n / factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    local i = 2\n    while i * factor <=\
    \ n do\n      if n % i == 0 then\n        factor = factor * i\n        break\n\
    \      end\n      i = i + 1\n    end\n    table.insert(factors, factor)\n    n\
    \ = n / factor\n  end\n  return factors\nend", "    local factors = {}\n    local\
    \ i = 1\n    while i <= n do\n        local p = math.floor(n/i)\n        if p\
    \ ~= i then\n            factors[#factors+1] = p\n        end\n        i = i +\
    \ 1\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while n ~= 1 do\n    factor = factor * n\n    factors[#factors + 1] =\
    \ factor\n    factor = n\n  end\n  return factors\nend", "  local factors = {}\n\
    \  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if p ==\
    \ 1 then\n      factors[i] = 1\n      n = math.floor(n/i)\n    else\n      factors[i]\
    \ = p\n      n = math.floor(n/p)\n    end\n    i = i + 1\n  end\n  return factors\n\
    end", "    local factors = {}\n    local i = 1\n    while i <= n do\n        local\
    \ p = math.floor(n/i)\n        if p == 1 then\n            factors[i] = 1\n  \
    \      else\n            factors[i] = factors[p] + 1\n        end\n        i =\
    \ i + 1\n    end\n    return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end", "    local factors = {}\n    local factor = 1\n    while\
    \ factor <= n do\n        factors[factor] = factors[factor] + 1 or 1\n       \
    \ factor = factor + 1\n    end\n    local primes = {}\n    for i = 2, n do\n \
    \       if factors[i] ~= 0 then\n            primes[#primes + 1] = i\n       \
    \ end\n    end\n    return primes\nend", "  -- Base case\n  if n < 2 then return\
    \ {} end\n  -- If n is prime then return its factors\n  if primes[n] then return\
    \ {n} end\n  -- If n is divisible by 2 then return its factors\n  if n % 2 ==\
    \ 0 then return {2} end\n  -- If n is divisible by 3 then return its factors\n\
    \  if n % 3 == 0 then return {3} end\n  -- If n is divisible by 5 then return\
    \ its factors\n  if n % 5 == 0 then return {5} end\n  -- If n is divisible by\
    \ 7 then return its factors\n  if n % 7 == 0 then return {7} end\n  -- If n is\
    \ divisible by 11 then return its factors\n  if n % 11 == 0 then return {11} end\n\
    \  -- If n is divisible by 13 then return its factors\n  if n % 13 == 0 then return\
    \ {13} end\n  -- If n is divisible by 17 then return its factors\n  if n % 17\
    \ == 0 then return {17} end\n  -- If n is divisible by 19 then return its factors\n\
    \  if n % 19 == 0 then return {19} end\n  -- If n is divisible by 23 then return\
    \ its factors\n  if n % 23 == 0 then return {23} end\n  -- If n is divisible by\
    \ 29 then return its factors\n  if n % 29 == 0 then return {29} end\n  -- If n\
    \ is divisible by 31 then return its factors\n  if n % 31 == 0 then return {31}\
    \ end\n  -- If n is divisible by 37 then return its factors\n  if n % 37 == 0\
    \ then return {37} end\n  -- If n is divisible by 41 then return its factors\n\
    \  if n % 41 == 0 then return {41} end\n  -- If n is divisible by 43 then return\
    \ its factors\n  if n % 43 == 0 then return {43} end\n  -- If n is divisible by\
    \ 47 then return its factors\n  if n % 47 == 0 then return {47} end\n  -- If n\
    \ is divisible by 53 then return its factors\n  if n % 53 == 0 then return {53}\
    \ end\n  -- If n is divisible by 59 then return its factors\n  if n % 59 == 0\
    \ then return {59} end\n  -- If n is divisible by 61 then return its factors\n\
    \  if n % 61 == 0 then return {61} end\n  -- If n is di", "  local factors = {}\n\
    \  local i = 1\n  while i <= n do\n    local p = math.floor(n/i)\n    if p ==\
    \ 1 then\n      factors[i] = 1\n      n = n - i * i\n    else\n      factors[i]\
    \ = p\n      n = n - p * i\n    end\n    i = i + 1\n  end\n  return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n\
    \ do\n    factor = factor * i\n    if factor > n then\n      break\n    end\n\
    \    i = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n\
    \ do\n    if n % i == 0 then\n      factor = factor * i\n      i = i + 1\n   \
    \   factors[#factors + 1] = factor\n    end\n    i = i + 1\n  end\n  return factors\n\
    end", "    local factors = {}\n    local p = 2\n    while p <= n do\n        if\
    \ n % p == 0 then\n            factors[#factors + 1] = n\n            n = n /\
    \ p\n        else\n            p = p + 1\n        end\n    end\n    return factors\n\
    end", "  -- If n is prime then return its factors\n  if primes[n] then\n    return\
    \ primes[n]\n  end", "  local factors = {}\n  local factor = 1\n  while n > 1\
    \ do\n    factor = factor * n\n    factors[#factors + 1] = factor\n    n = n /\
    \ factor\n  end\n  return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while n > 1 do\n    factor = factor * n\n    factors[#factors + 1] =\
    \ factor\n    n = n / factor\n  end\n  return factors\nend", "  -- Base case\n\
    \  if n == 1 then\n    return {n}\n  end\n  -- Recursive case\n  local factors\
    \ = {}\n  for i = 2, n do\n    local f = factorize(i)\n    for _, v in ipairs(f)\
    \ do\n      table.insert(factors, v)\n    end\n  end\n  return factors\nend",
  "  -- If n is prime, return its prime factors\n  if n <= 1 then return end\n  --\
    \ If n is even, return its prime factors\n  if n % 2 == 0 then return factorize(n/2)\
    \ end\n  -- If n is odd, return its prime factors\n  local factors = {}\n  for\
    \ i = 2, n do\n    if n % i == 0 then\n      table.insert(factors, i)\n      n\
    \ = n / i\n    end\n  end\n  -- If n is prime and has no factors, return its prime\
    \ factors\n  if n == 1 then return factors end\n  -- If n is prime and has factors,\
    \ return its prime factors\n  if #factors == 0 then return factors end\n  -- If\
    \ n is prime and has factors, return its prime factors\n  return factors\nend",
  "  -- Base case\n  if n < 2 then\n    return {}\n  end", "    local factors = {}\n\
    \    local factor = 1\n    while n > 1 do\n        if n % factor == 0 then\n \
    \           factors[#factors + 1] = factor\n            n = n / factor\n     \
    \   else\n            factor = factor + 1\n        end\n    end\n    if n > 1\
    \ then\n        factors[#factors + 1] = n\n    end\n    return factors\nend",
  "  -- Base case\n  if n == 1 then\n    return {n}\n  end", "  -- Base case\n  if\
    \ n == 1 then\n    return {}\n  end\n  -- Recursive case\n  local factors = {}\n\
    \  for i = 2, n do\n    local f = factorize(i)\n    for _, v in ipairs(f) do\n\
    \      table.insert(factors, v)\n    end\n  end\n  return factors\nend", "  local\
    \ factors = {}\n  local factor = 1\n  local i = 1\n  while n ~= 1 do\n    while\
    \ n % factor == 0 do\n      factors[#factors + 1] = factor\n      n = n / factor\n\
    \    end\n    factor = factor + 1\n  end\n  if n ~= 1 then\n    factors[#factors\
    \ + 1] = n\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end", "    local factors = {}\n    for i = 2, n do\n      \
    \  local factor = 1\n        for j = 1, i do\n            if n % i == 0 then\n\
    \                factor = factor * j\n            end\n        end\n        table.insert(factors,\
    \ factor)\n    end\n    return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while factor <= n do\n    local count = 0\n    for i = 1, factor do\n\
    \      if n % i == 0 then\n        count = count + 1\n      end\n    end\n   \
    \ if count > 0 then\n      table.insert(factors, factor)\n      factor = factor\
    \ + 1\n    end\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while i <= n do\n    factor = factor * i\n    i\
    \ = i + 1\n    factors[#factors + 1] = factor\n  end\n  return factors\nend",
  "  -- If n is prime then return its factors\n  if n==1 then return {} end\n  --\
    \ If n is even then return its factors\n  if n%2==0 then return {n} end\n  --\
    \ If n is odd then return its factors\n  local factors = {}\n  local i = 1\n \
    \ while i*i <= n do\n    -- If n is divisible by i then add i to factors\n   \
    \ if n%i==0 then\n      table.insert(factors, i)\n      n = n/i\n    end\n   \
    \ -- If n is divisible by i then add i to factors\n    if n%i==0 then\n      table.insert(factors,\
    \ i)\n      n = n/i\n    end\n    i = i+1\n  end\n  return factors\nend", "  --\
    \ Base case\n  if n == 1 then\n    return {n}\n  end", "    local factors = {}\n\
    \    local i = 1\n    while i <= n do\n        if n % i == 0 then\n          \
    \  factors[#factors+1] = i\n            n = n / i\n        else\n            i\
    \ = i + 1\n        end\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    for i = 2, n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        end\n    end\n    if n ~= 1 then\n      \
    \  table.insert(factors, n)\n    end\n    return factors\nend", "    local factors\
    \ = {}\n    local factor = 1\n    while factor <= n do\n        if n % factor\
    \ == 0 then\n            table.insert(factors, factor)\n            n = n / factor\n\
    \        else\n            factor = factor + 1\n        end\n    end\n    return\
    \ factors\nend", "  -- Initialize factorization table\n  local factors = {}\n\
    \  -- Initialize prime table\n  local primes = {}\n  -- Initialize prime table\n\
    \  local primes_table = {}\n  -- Initialize prime table\n  local primes_table_2\
    \ = {}\n  -- Initialize prime table\n  local primes_table_3 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_4 = {}\n  -- Initialize prime table\n  local\
    \ primes_table_5 = {}\n  -- Initialize prime table\n  local primes_table_6 = {}\n\
    \  -- Initialize prime table\n  local primes_table_7 = {}\n  -- Initialize prime\
    \ table\n  local primes_table_8 = {}\n  -- Initialize prime table\n  local primes_table_9\
    \ = {}\n  -- Initialize prime table\n  local primes_table_10 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_11 = {}\n  -- Initialize prime table\n  local\
    \ primes_table_12 = {}\n  -- Initialize prime table\n  local primes_table_13 =\
    \ {}\n  -- Initialize prime table\n  local primes_table_14 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_15 = {}\n  -- Initialize prime table\n  local\
    \ primes_table_16 = {}\n  -- Initialize prime table\n  local primes_table_17 =\
    \ {}\n  -- Initialize prime table\n  local primes_table_18 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_19 = {}\n  -- Initialize prime table\n  local\
    \ primes_table_20 = {}\n  -- Initialize prime table\n  local primes_table_21 =\
    \ {}\n  -- Initialize prime table\n  local primes_table_22 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_23 = {}\n  -- Initialize prime table\n  local\
    \ primes_table_24 = {}\n  -- Initialize prime table\n  local primes_table_25 =\
    \ {}\n  -- Initialize prime table\n  local primes_table_26 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_27 = {}\n  -- Initialize prime table\n  local\
    \ primes_table_28 = {}\n  -- Initialize prime table\n  local primes_table_29 =\
    \ {}\n  -- Initialize prime table\n  local primes_table_30 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_31 = {}\n  -- Initialize prime table\n  local\
    \ primes_table_32 = {}\n  -- Initialize prime table\n  local primes_table_33 =\
    \ {}\n  -- Initialize prime table\n  local primes_table_34 = {}\n  -- Initialize\
    \ prime table\n  local primes_table_35", "  local factors = {}\n  local factor\
    \ = 1\n  while factor <= n do\n    factors[factor] = factors[factor] + 1 or 1\n\
    \    factor = factor + 1\n  end\n  local primes = {}\n  for i = 2, n do\n    if\
    \ factors[i] <= n then\n      primes[factors[i]] = primes[factors[i]] + 1 or 1\n\
    \    end\n  end\n  return primes\nend", "  -- Base case\n  if n == 1 then\n  \
    \  return {1}\n  end", "    local factors = {}\n    local factor = 1\n    while\
    \ n > 1 do\n        while n % factor == 0 do\n            factors[#factors + 1]\
    \ = factor\n            n = n / factor\n        end\n        factor = factor +\
    \ 1\n    end\n    factors[#factors + 1] = n\n    return factors\nend", "  local\
    \ factors = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor]\
    \ = factors[factor] + 1 or 1\n    factor = factor * 2\n  end\n  local primes =\
    \ {}\n  for i = 2, n do\n    if factors[i] ~= 0 then\n      primes[factors[i]]\
    \ = primes[factors[i]] + 1 or 1\n    end\n  end\n  return primes\nend", "    local\
    \ factors = {}\n    local factor = 1\n    while n ~= 1 do\n        while n % factor\
    \ == 0 do\n            factors[#factors + 1] = factor\n            n = n / factor\n\
    \        end\n        factor = factor + 1\n    end\n    return factors\nend",
  "    local factors = {}\n    local factor = 1\n    while n ~= 1 do\n        while\
    \ n % factor == 0 do\n            n = n / factor\n            table.insert(factors,\
    \ factor)\n        end\n        factor = factor + 1\n    end\n    return factors\n\
    end", "  local factors = {}\n  local factor = 1\n  while factor <= n do\n    factors[factor]\
    \ = factors[factor] + 1 or 1\n    factor = factor * 2\n  end\n  table.sort(factors)\n\
    \  local factor = 1\n  local prime = 1\n  local prime_factors = {}\n  while factor\
    \ <= n do\n    if factors[factor] == 1 then\n      prime_factors[prime] = factor\n\
    \      prime = prime + 1\n    end\n    factor = factor * 2\n  end\n  return prime_factors\n\
    end", "    local factors = {}\n    local primes = {}\n    local i = 1\n    while\
    \ i <= n do\n        local p = primes[i]\n        if p == nil then\n         \
    \   primes[i] = 1\n            factors[i] = 1\n        else\n            primes[i]\
    \ = primes[i] + 1\n            factors[i] = factors[i] + 1\n        end\n    \
    \    i = i + 1\n    end\n    local factor = 1\n    for i = 2, n do\n        factor\
    \ = factor * i\n    end\n    return factors, primes\nend", "  local factors =\
    \ {}\n  local i = 1\n  while i <= n do\n    local p = i\n    while i * p <= n\
    \ do\n      p = p * i\n    end\n    factors[i] = p\n    i = i + 1\n  end\n  return\
    \ factors\nend", "  -- Base case\n  if n == 1 then\n    return {n}\n  end", " \
    \ -- Base case\n  if n < 2 then return {n} end", "  local factors = {}\n  local\
    \ factor = 1\n  local i = 1\n  while n ~= 1 do\n    while n % factor == 0 do\n\
    \      factors[#factors + 1] = factor\n      n = n / factor\n    end\n    factor\
    \ = factor + 1\n  end\n  factors[#factors + 1] = factor\n  return factors\nend",
  "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n  \
    \  factor = factor * i\n    if factor > n then\n      break\n    end\n    factors[#factors\
    \ + 1] = factor\n    i = i + 1\n  end\n  return factors\nend", "  -- Base case\n\
    \  if n == 1 then\n    return {n}\n  end\n  -- Recursive case\n  local factors\
    \ = {}\n  for i = 2, n do\n    local p = n / i\n    if p > 1 then\n      table.insert(factors,\
    \ p)\n    end\n  end\n  return factors\nend", "  local factors = {}\n  local factor\
    \ = 1\n  while n ~= 1 do\n    while n ~= factor do\n      factors[#factors + 1]\
    \ = factor\n      factor = factor * n\n    end\n    factor = factor / n\n    n\
    \ = n / factor\n  end\n  return factors\nend", "  local factors = {}\n  local\
    \ factor = 1\n  while factor <= n do\n    factor = factor + 1\n    factors[factor]\
    \ = factors[factor] or 1\n    factors[factor] = factors[factor] + 1\n  end\n \
    \ table.sort(factors, function(a, b) return a < b end)\n  local factorization\
    \ = {}\n  for i = 1, n do\n    factorization[i] = factors[i]\n  end\n  return\
    \ factorization\nend", "  local factors = {}\n  local primes = {}\n  local i =\
    \ 2\n  while i <= n do\n    local p = primes[i]\n    if p == nil then\n      primes[i]\
    \ = 1\n      factors[i] = 1\n      i = i + 1\n      while i <= n do\n        local\
    \ q = n / i\n        if q == i then\n          factors[i] = factors[i] + 1\n \
    \       else\n          primes[i] = p\n          factors[i] = factors[i] + 1\n\
    \          n = q\n        end\n        i = i + 1\n      end\n    else\n      primes[i]\
    \ = p\n      factors[i] = factors[i] + 1\n    end\n  end\n  return factors\nend",
  "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <= n do\n  \
    \  factor = factor * i\n    if factor > n then\n      break\n    end\n    i =\
    \ i + 1\n  end\n  i = 2\n  while i <= n do\n    if n % i == 0 then\n      factors[i]\
    \ = factor\n      n = n / i\n      i = i + 1\n    end\n    i = i + 1\n  end\n\
    \  return factors\nend", "  local factors = {}\n  local factor = 1\n  while factor\
    \ <= n do\n    local count = 0\n    for i = 1, factor do\n      if n % i == 0\
    \ then\n        count = count + 1\n      end\n    end\n    if count == factor\
    \ then\n      table.insert(factors, factor)\n    end\n    factor = factor + 1\n\
    \  end\n  return factors\nend", "  -- Base case\n  if n < 2 then\n    return {}\n\
    \  end", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while i <=\
    \ n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors + 1] = factor\n\
    \  end\n  return factors\nend", "    local factors = {}\n    local i = 1\n   \
    \ while i <= n do\n        if n % i == 0 then\n            table.insert(factors,\
    \ i)\n            n = n / i\n        else\n            i = i + 1\n        end\n\
    \    end\n    return factors\nend", "  local factors = {}\n  local factor = 1\n\
    \  local i = 1\n  while n ~= 1 do\n    while n ~= factor do\n      factors[#factors\
    \ + 1] = factor\n      factor = factor * i\n    end\n    i = i + 1\n    n = n\
    \ / factor\n  end\n  factors[#factors + 1] = factor\n  return factors\nend", " \
    \   local factors = {}\n    local i = 1\n    while i <= n do\n        local p\
    \ = math.floor(n/i)\n        if p ~= i then\n            factors[#factors+1] =\
    \ p\n        end\n        i = i + 1\n    end\n    return factors\nend", "  --\
    \ Base case\n  if n == 1 then\n    return {}\n  end", "    local factors = {}\n\
    \    local factor = 1\n    local i = 1\n    while i <= n do\n        if n % i\
    \ == 0 then\n            factor = factor * i\n            i = i + 1\n        else\n\
    \            i = i + 1\n        end\n    end\n    factors[#factors + 1] = factor\n\
    \    return factors\nend", "  local factors = {}\n  local factor = 1\n  local\
    \ i = 1\n  while i <= n do\n    factor = factor * i\n    if factor > n then\n\
    \      break\n    end\n    i = i + 1\n    factors[#factors + 1] = factor\n  end\n\
    \  return factors\nend", "    local factors = {}\n    for i = 2, n do\n      \
    \  local f = n % i\n        if f == 0 then\n            factors[i] = 1\n     \
    \   else\n            factors[i] = factors[f] + 1\n        end\n        n = n\
    \ / i\n    end\n    return factors\nend", "    local factors = {}\n    local factor\
    \ = 1\n    while factor <= n do\n        if n % factor == 0 then\n           \
    \ table.insert(factors, factor)\n            n = n / factor\n        else\n  \
    \          factor = factor + 1\n        end\n    end\n    return factors\nend",
  "  -- Base case\n  if n < 2 then return {} end\n  -- If n is prime then return its\
    \ factors\n  if primes[n] then return {n} end\n  -- If n is divisible by 2 then\
    \ return its factors\n  if n % 2 == 0 then return {2} end\n  -- If n is divisible\
    \ by 3 then return its factors\n  if n % 3 == 0 then return {3} end\n  -- If n\
    \ is divisible by 5 then return its factors\n  if n % 5 == 0 then return {5} end\n\
    \  -- If n is divisible by 7 then return its factors\n  if n % 7 == 0 then return\
    \ {7} end\n  -- If n is divisible by 11 then return its factors\n  if n % 11 ==\
    \ 0 then return {11} end\n  -- If n is divisible by 13 then return its factors\n\
    \  if n % 13 == 0 then return {13} end\n  -- If n is divisible by 17 then return\
    \ its factors\n  if n % 17 == 0 then return {17} end\n  -- If n is divisible by\
    \ 19 then return its factors\n  if n % 19 == 0 then return {19} end\n  -- If n\
    \ is divisible by 23 then return its factors\n  if n % 23 == 0 then return {23}\
    \ end\n  -- If n is divisible by 29 then return its factors\n  if n % 29 == 0\
    \ then return {29} end\n  -- If n is divisible by 31 then return its factors\n\
    \  if n % 31 == 0 then return {31} end\n  -- If n is divisible by 37 then return\
    \ its factors\n  if n % 37 == 0 then return {37} end\n  -- If n is divisible by\
    \ 41 then return its factors\n  if n % 41 == 0 then return {41} end\n  -- If n\
    \ is divisible by 43 then return its factors\n  if n % 43 == 0 then return {43}\
    \ end\n  -- If n is divisible by 47 then return its factors\n  if n % 47 == 0\
    \ then return {47} end\n  -- If n is divisible by 53 then return its factors\n\
    \  if n % 53 == 0 then return {53} end\n  -- If n is divisible by 59 then return\
    \ its factors\n  if n % 59 == 0 then return {59} end\n  -- If n is divisible by\
    \ 61 then return its factors\n  if n % 61 == 0 then return {61} end\n  -- If n\
    \ is di", "    local factors = {}\n    for i = 2, n do\n        if n % i == 0\
    \ then\n            table.insert(factors, i)\n            n = n / i\n        end\n\
    \    end\n    if n ~= 1 then\n        table.insert(factors, n)\n    end\n    return\
    \ factors\nend", "  local factors = {}\n  local factor = 1\n  local i = 1\n  while\
    \ i <= n do\n    factor = factor * i\n    i = i + 1\n    factors[#factors + 1]\
    \ = factor\n  end\n  return factors\nend", "  -- Base case\n  if n == 1 then\n\
    \    return {n}\n  end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
