language: lua
name: HumanEval_124_valid_date
results:
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplqqq0qjm.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = 1,\n    [3] = 1,\n   \
    \ [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [1] = 1,\n    [31] = 31,\n    [59] = 30,\n    [91] = 31,\n  }\n\
    \  local months_count = months[month]\n  local days_count = days[day]\n  if months_count\
    \ < 1 or months_count > 12 then\n    return false\n  end\n  if days_count < 1\
    \ or days_count > 31 then\n    return false\n  end\n  if month == 2 then\n   \
    \ if day < 1 or day > 29 then\n      return false\n    end\n  else\n    if day\
    \ < 1 or day > 31 then\n      return false\n    end\n  end\n  if month == 2 then\n\
    \    if year < 1 or year > 2020 then\n      return false\n    end\n  else\n  \
    \  if year < 1 or year > 2020 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjmps_7ip.lua:37:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpjmps_7ip.lua:37:\
    \ in function 'candidate'\n\t/tmp/tmpjmps_7ip.lua:67: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 3 and\
    \ day > 31 then\n        return false\n    end\n    if month == 3 and day < 31\
    \ then\n        return false\n    end\n    if month == 3 and day > 30 then\n \
    \       return false\n    end\n    if month == 3 and day < 30 then\n        return\
    \ false\n    end\n    if month == 3 and day > 29 then\n        return false\n\
    \    end\n    if month == 3 and day < 29 then\n        return false\n    end\n\
    \    if month == 3 and day > 28 then\n        return false\n    end\n    if month\
    \ == 3 and day < 28 then\n        return false\n    end\n    if month == 3 and\
    \ day > 31 then\n        return false\n    end\n    if month == 3 and day < 31\
    \ then\n        return false\n    end\n    if month == 3 and day > 30 then\n \
    \       return false\n    end\n    if month == 3 and day < 30 then\n        return\
    \ false\n    end\n    if month == 3 and day > 31 then\n        return false\n\
    \    end\n    if month == 3 and day < 31 then\n        return false\n    end\n\
    \    if month == 4 and day > 31 then\n        return false\n    end\n    if month\
    \ == 4 and day < 31 then\n        return false\n    end\n    if month == 4 and\
    \ day > 30 then\n        return false\n    end\n    if month == 4 and day < 30\
    \ then\n        return false\n    end\n    if month == 4 and day > 29 then\n \
    \       return false\n    end\n    if month == 4 and day < 29 then\n        return\
    \ false\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvy7smuc4.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if month < 1 or month > 12 then\n        return false\n    end\n  \
    \  if day == nil then\n        return false\n    end\n    if day < 1 or day >\
    \ 31 then\n        return false\n    end\n    if year == nil then\n        return\
    \ false\n    end\n    if year < 1 or year > 9999 then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfshad1k.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpbfshad1k.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpbfshad1k.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local months = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n    [7]\
    \ = '07',\n    [8] = '08',\n    [10] = '10',\n    [12] = '12'\n  }\n  local days\
    \ = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n    [7] = '07',\n  \
    \  [8] = '08',\n    [10] = '10',\n    [12] = '12',\n    [14] = '14',\n    [16]\
    \ = '16',\n    [18] = '18',\n    [20] = '20',\n    [21] = '21',\n    [23] = '23',\n\
    \    [25] = '25',\n    [27] = '27',\n    [29] = '29',\n    [31] = '31'\n  }\n\
    \  local months_count = #months\n  local days_count = #days\n  local months_count_valid\
    \ = months_count >= 1 and months_count <= 12\n  local days_count_valid = days_count\
    \ >= 1 and days_count <= 31\n  local months_count_invalid = months_count < 1 or\
    \ months_count > 12\n  local days_count_invalid = days_count < 1 or days_count\
    \ > 31\n  local months_count_invalid = months_count < 1 or months_count > 12\n\
    \  local days_count_invalid = days_count < 1 or days_count > 31\n  local months_count_invalid\
    \ = months_count < 1 or months_count > 12\n  local days_count_invalid = days_count\
    \ < 1 or days_count > 31\n  local months_count_invalid = months_count < 1 or months_count\
    \ > 12\n  local days_count_invalid = days_count < 1 or days_count > 31\n  local\
    \ months_count_invalid = months_count < 1 or months_count > 12\n  local days_count_invalid\
    \ = days_count < 1 or days_count > 31\n  local months_count_invalid = months_count\
    \ < 1 or months_count > 12\n  local days_count_invalid = days_count < 1 or days_count\
    \ > 31\n  local months_count_invalid = months_count < 1 or months_count > 12\n\
    \  local days_count_invalid = days_count < 1 or days_count > 31\n  local months_count_invalid\
    \ = months_count < 1 or months_count > \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1ks9vj6z.lua:70: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local months = {\n      [1] = '01',\n      [3]\
    \ = '03',\n      [5] = '05',\n      [7] = '07',\n      [8] = '08',\n      [10]\
    \ = '10',\n      [12] = '12'\n   }\n   local day = tonumber(date:sub(1,2))\n \
    \  local month = tonumber(date:sub(2,3))\n   local year = tonumber(date:sub(4,5))\n\
    \   if month < 1 or month > 12 then\n      return false\n   end\n   if day < 1\
    \ or day > 31 then\n      return false\n   end\n   if months[month] ~= date then\n\
    \      return false\n   end\n   if year < 1900 then\n      return false\n   end\n\
    \   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzmwu9s8h.lua:49:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpzmwu9s8h.lua:49:\
    \ in function 'candidate'\n\t/tmp/tmpzmwu9s8h.lua:67: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if year < 1000 or year > 9999\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6ybcrrkk.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp6ybcrrkk.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp6ybcrrkk.lua:38: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\tmonth = tonumber(month)\n\tday = tonumber(day)\n\t\
    year = tonumber(year)\n\tif month == nil or day == nil or year == nil then\n\t\
    \treturn false\n\tend\n\tif month < 1 or month > 12 then\n\t\treturn false\n\t\
    end\n\tif day < 1 or day > 31 then\n\t\treturn false\n\tend\n\tif month == 2 and\
    \ day > 29 then\n\t\treturn false\n\tend\n\tif month == 2 and day < 29 then\n\t\
    \treturn true\n\tend\n\tif month == 1 and day > 30 then\n\t\treturn false\n\t\
    end\n\tif month == 1 and day < 30 then\n\t\treturn true\n\tend\n\tif month ==\
    \ 3 and day > 31 then\n\t\treturn false\n\tend\n\tif month == 3 and day < 31 then\n\
    \t\treturn true\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqsdl9e19.lua:63:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqsdl9e19.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  month = tonumber(month)\n  day = tonumber(day)\n  year\
    \ = tonumber(year)\n  if month == nil or day == nil or year == nil then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if day < 1 or day > 31 then\n    return false\n  end\n  if month == 2 and day\
    \ > 29 then\n    return false\n  end\n  if month > 12 or month < 1 then\n    return\
    \ false\n  end\n  if year < 1000 or year > 9999 then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbqgk4mb0.lua:54:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbqgk4mb0.lua:54:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)') -- mm-dd-yyyy\n  local months = {\n    [1] = '01',\n  \
    \  [3] = '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] =\
    \ '10',\n    [12] = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12',\n    [14] = '14',\n    [16] = '16',\n    [18] = '18',\n    [20] = '20',\n\
    \    [22] = '22',\n    [24] = '24',\n    [26] = '26',\n    [28] = '28',\n    [30]\
    \ = '30',\n    [32] = '32',\n    [34] = '34',\n    [36] = '36',\n    [38] = '38',\n\
    \    [40] = '40',\n    [42] = '42',\n    [44] = '44',\n    [46] = '46',\n    [48]\
    \ = '48',\n    [50] = '50',\n    [52] = '52',\n    [54] = '54',\n    [56] = '56',\n\
    \    [58] = '58',\n    [60] = '60',\n    [62] = '62',\n    [64] = '64',\n    [66]\
    \ = '66',\n    [68] = '68',\n    [70] = '70',\n    [72] = '72',\n    [74] = '74',\n\
    \    [76] = '76',\n    [78] = '78',\n    [80] = '80',\n    [82] = '82',\n    [84]\
    \ = '84',\n    [86] = '86',\n    [88] = '88',\n    [90] = '90',\n    [92] = '92',\n\
    \    [94] = '94',\n    [96] = '96',\n    [98] = '98',\n    [100] = '100',\n  \
    \  [102] = '102',\n    [104] = '104',\n    [106] = '106',\n    [108] = '108',\n\
    \    [110] = '110',\n    [112] = '112',\n    [114] = '114',\n    [116] = '116',\n\
    \    [118] = '118',\n    [120] = '120',\n    [122] = '122',\n    [124] = '124',\n\
    \    [126] = '126',\n    [128] = '128',\n    [130] = '130',\n    [132] = '132',\n\
    \    [134] = '134',\n    [136] = '136',\n    [138] = '138',\n    [14\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8wt1vfcd.lua:101: '']'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if day == nil then\n        return false\n    end\n    if year == nil\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 4 and day > 30 then\n        return false\n    end\n\
    \    if month == 6 and day > 30 then\n        return false\n    end\n    if month\
    \ == 9 and day > 30 then\n        return false\n    end\n    if month == 11 and\
    \ day > 30 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbpfxhi7m.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpbpfxhi7m.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpbpfxhi7m.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    if\
    \ date_year and date_month and date_day then\n        if date_month < 1 or date_month\
    \ > 12 then\n            return false\n        end\n        if date_day < 1 or\
    \ date_day > 31 then\n            return false\n        end\n        if date_month\
    \ == 2 and date_day == 29 then\n            return false\n        end\n      \
    \  if date_month == 2 and date_day == 30 then\n            return false\n    \
    \    end\n        if date_month == 3 and date_day == 31 then\n            return\
    \ false\n        end\n        if date_month == 4 and date_day == 30 then\n   \
    \         return false\n        end\n        if date_month == 4 and date_day ==\
    \ 31 then\n            return false\n        end\n        if date_month == 5 and\
    \ date_day == 31 then\n            return false\n        end\n        if date_month\
    \ == 7 and date_day == 31 then\n            return false\n        end\n      \
    \  if date_month == 8 and date_day == 31 then\n            return false\n    \
    \    end\n        if date_month == 9 and date_day == 31 then\n            return\
    \ false\n        end\n        if date_month == 10 and date_day == 31 then\n  \
    \          return false\n        end\n        if date_month == 11 and date_day\
    \ == 31 then\n            return false\n        end\n        if date_month ==\
    \ 12 and date_day == 31 then\n            return false\n        end\n        if\
    \ date_month == 12 and date_day == 30 then\n            return false\n       \
    \ end\n        if date_month == 12 and date_day == 29 then\n            return\
    \ false\n        end\n        if date_month == 1 and date_day == 31 then\n   \
    \         return false\n        end\n        if date_month == 1 and date_day ==\
    \ 30 then\n            return false\n        end\n        if date_month == 2 and\
    \ date_day == 31 then\n            return false\n        end\n        if date_month\
    \ == 3 and date_day == 31 then\n            return false\n        end\n      \
    \  if date_month == 4 and date_day == 31 then\n            return false\n    \
    \    end\n        if date_month == 5 and date_day == 31 then\n            return\
    \ false\n        end\n        if date_month == 6 and date_day == 31 then\n   \
    \         return false\n        end\n        if date_month == 7 and date_day ==\
    \ 31 then\n            return false\n        end\n        if date_month == 8 and\
    \ date_day == 31 then\n            return false\n        end\n        if date_month\
    \ == 9 and date_day == 31 then\n            return false\n        end\n      \
    \  if date_month == 10 and date_day == 31 then\n            return false\n   \
    \     end\n        if date_month == 11 and date_day == 31 then\n            return\
    \ false\n        end\n        if date_month == 12 and date_day == 31 then\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl5sg9q37.lua:131: ''end'' expected (to close ''if'' at line
    108) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local year = tonumber(date_split[3])\n    if day and month and year then\n\
    \        if day < 1 or day > 31 then\n            return false\n        end\n\
    \        if month < 1 or month > 12 then\n            return false\n        end\n\
    \        if year < 1 or year > 9999 then\n            return false\n        end\n\
    \        return true\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjvgm79vh.lua:19:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpjvgm79vh.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpjvgm79vh.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  else\n    if day\
    \ > 30 then\n      return false\n    end\n  end\n  if year < 1900 then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj7b9ynew.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpj7b9ynew.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpj7b9ynew.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 8 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 10 then\n        if day > 29 then\n            return\
    \ false\n        end\n    end\n    if month == 12 then\n        if day > 30 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 4 and day > 30 then\n        return false\n    end\n    if month == 6 and\
    \ day > 30 then\n        return false\n    end\n    if month == 9 and day > 30\
    \ then\n        return false\n    end\n    if month == 11 and day > 30 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 4 then\n    if day > 30 then\n      return false\n    end\n  end\n  if month\
    \ == 6 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 1 then\n    if day > 31 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpax7ekxgg.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpax7ekxgg.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpax7ekxgg.lua:55: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local days = {\n        [1]\
    \ = 1,\n        [31] = 31,\n        [59] = 59,\n        [90] = 30,\n        [120]\
    \ = 31\n    }\n    local months_count = months[month]\n    local days_count =\
    \ days[day]\n    local months_count_in_year = months_count / 12\n    local days_count_in_year\
    \ = days_count / 365\n    local year_count = year - 1911\n    local years_count\
    \ = year_count\n    local years_count_in_year = years_count / 12\n    local months_count_in_year\
    \ = months_count / 12\n    local days_count_in_year = days_count / 365\n    local\
    \ months_count_in_year_2 = months_count_in_year + months_count_in_year\n    local\
    \ days_count_in_year_2 = days_count_in_year + days_count_in_year\n    local years_count_in_year_2\
    \ = years_count_in_year + years_count_in_year\n    local months_count_in_year_3\
    \ = months_count_in_year + months_count_in_year\n    local days_count_in_year_3\
    \ = days_count_in_year + days_count_in_year\n    local years_count_in_year_3 =\
    \ years_count_in_year + years_count_in_year\n    local months_count_in_year_4\
    \ = months_count_in_year + months_count_in_year\n    local days_count_in_year_4\
    \ = days_count_in_year + days_count_in_year\n    local years_count_in_year_4 =\
    \ years_count_in_year + years_count_in_year\n    local months_count_in_year_5\
    \ = months_count_in_year + months_count_in_year\n    local days_count_in_year_5\
    \ = days_count_in_year + days_count_in_year\n    local years_count_in_year_5 =\
    \ years_count_in_year + years_count_in_year\n    local months_count_in_year_6\
    \ = months_count_in_year + months_count_in_year\n    local days_count_in_year_6\
    \ = days_count_in_year + days_count_in_year\n    local years_count_in_year_6 =\
    \ years_count_in_year + years_count_in_year\n    local months_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsm02sk3i.lua:83: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local date_split = string.split(date,\
    \ \"-\")\n  local day = tonumber(date_split[2])\n  local month = tonumber(date_split[1])\n\
    \  local year = tonumber(date_split[3])\n  local days_in_month = { 31, 28, 31,\
    \ 30, 31, 30, 31, 31, 30, 31, 30, 31 }\n  local days_in_month[month] = days_in_month[month]\
    \ - 1\n  local days_in_year = days_in_month[month] + day\n  if day < 1 or day\
    \ > days_in_month[month] or month < 1 or month > 12 then\n    return false\n \
    \ end\n  if year < 1 or year > 9999 then\n    return false\n  end\n  if day >\
    \ days_in_year[month] then\n    return false\n  end\n  return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpkmi56osc.lua:24: unexpected symbol near ''[''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp425rqdpf.lua:44: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdtf8kiia.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpdtf8kiia.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpdtf8kiia.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil then\n        return false\n    end\n\
    \    if day == nil then\n        return false\n    end\n    if year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqq6_k40j.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpqq6_k40j.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpqq6_k40j.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n       \
    \ [7] = '29',\n        [8] = '28',\n        [10] = '31',\n        [12] = '30'\n\
    \    }\n    local months_count = months[month]\n    local days_count = days[day]\n\
    \    local months_count_valid = months_count and months_count > 1 and months_count\
    \ <= 12\n    local days_count_valid = days_count and days_count > 1 and days_count\
    \ <= 31\n    local months_count_valid_2 = months_count and months_count > 4 and\
    \ months_count <= 12\n    local days_count_valid_2 = days_count and days_count\
    \ > 4 and days_count <= 30\n    local months_count_valid_3 = months_count and\
    \ months_count > 6 and months_count <= 12\n    local days_count_valid_3 = days_count\
    \ and days_count > 6 and days_count <= 29\n    local months_count_valid_4 = months_count\
    \ and months_count > 9 and months_count <= 12\n    local days_count_valid_4 =\
    \ days_count and days_count > 9 and days_count <= 28\n    local months_count_valid_5\
    \ = months_count and months_count > 11 and months_count <= 12\n    local days_count_valid_5\
    \ = days_count and days_count > 11 and days_count <= 31\n    local months_count_valid_6\
    \ = months_count and months_count > 12 and months_count <= 12\n    local days_count_valid_6\
    \ = days_count and days_count > 12 and days_count <= 30\n    local months_count_valid_7\
    \ = months_count and months_count > 1 and months_count <= 12\n    local days_count_valid_7\
    \ = days_count and days_count > 1 and days_count <= 31\n    local months_count_valid_8\
    \ = months_count and months_count > 4 and months_count <= 12\n    local days_count_valid_8\
    \ = days_count and days_count > 4 and days_count <= 30\n    local months_count_valid_9\
    \ = months_count and months_count > 6 and months_count <= 12\n    local days_count_valid_9\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe46bozx1.lua:57: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp425rqdpf.lua:44: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 1 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 3 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if month == 5 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    if month == 7 then\n    \
    \    if day > 31 then\n            return false\n        end\n    end\n    if\
    \ month == 8 then\n        if day > 31 then\n            return false\n      \
    \  end\n    end\n    if month == 10 then\n        if day > 31 then\n         \
    \   return false\n        end\n    end\n    if month == 12 then\n        if day\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkns6go8w.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpkns6go8w.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpkns6go8w.lua:85: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 4 or month == 6 or month == 9 or month == 11 and day > 30 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 2 and day > 28 then\n        return false\n    end\n\
    \    if month == 2 and day > 27 then\n        return false\n    end\n    if month\
    \ == 2 and day > 26 then\n        return false\n    end\n    if month == 2 and\
    \ day > 25 then\n        return false\n    end\n    if month == 2 and day > 24\
    \ then\n        return false\n    end\n    if month == 2 and day > 23 then\n \
    \       return false\n    end\n    if month == 2 and day > 22 then\n        return\
    \ false\n    end\n    if month == 2 and day > 21 then\n        return false\n\
    \    end\n    if month == 2 and day > 20 then\n        return false\n    end\n\
    \    if month == 2 and day > 19 then\n        return false\n    end\n    if month\
    \ == 2 and day > 18 then\n        return false\n    end\n    if month == 2 and\
    \ day > 17 then\n        return false\n    end\n    if month == 2 and day > 16\
    \ then\n        return false\n    end\n    if month == 2 and day > 15 then\n \
    \       return false\n    end\n    if month == 2 and day > 14 then\n        return\
    \ false\n    end\n    if month == 2 and day > 13 then\n        return false\n\
    \    end\n    if month == 2 and day > 12 then\n        return false\n    end\n\
    \    if month == 2 and day > 11 then\n        return false\n    end\n    if month\
    \ == 2 and day > 10 then\n        return false\n    end\n    if month == 2 and\
    \ day > 9 then\n        return false\n    end\n    if month == 2 and day > 8 then\n\
    \        return false\n    end\n    if month == 2 and day > 7 then\n        return\
    \ false\n    end\n    if month == 2 and day > 6 then\n        return false\n \
    \   end\n    if month == 2 and day > 5 then\n        return false\n    end\n \
    \   if month == 2 and day > 4 then\n        return false\n    end\n    if month\
    \ == 2 and day > 3 then\n        return false\n    end\n    if month == 2 and\
    \ day > 2 \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjq3izpbe.lua:120: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month < 1 or month > 12 then return false end\n\
    \    if day < 1 or day > 31 then return false end\n    if month == 2 then if day\
    \ > 29 then return false end end\n    if month == 4 then if day > 30 then return\
    \ false end end\n    if month == 6 then if day > 29 then return false end end\n\
    \    if month == 9 or month == 11 and day > 30 then return false end\n    if month\
    \ == 1 or month == 3 then if day > 31 then return false end end\n    if month\
    \ == 5 then if day > 31 then return false end end\n    if month == 7 then if day\
    \ > 31 then return false end end\n    if month == 10 then if day > 31 then return\
    \ false end end\n    if month == 12 then if day > 31 then return false end end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgtt86p5i.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpgtt86p5i.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpgtt86p5i.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local month = tonumber(date_split[1])\n    local day = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    else\n        if day > 30 then\n          \
    \  return false\n        end\n    end\n    if year < 1900 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpedjckl7o.lua:19:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpedjckl7o.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpedjckl7o.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if day > 31 then\n        return false\n    end\n    if year < 1900\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal date_split = string.split(date,\
    \ \"-\")\n\tlocal day = tonumber(date_split[2])\n\tlocal month = tonumber(date_split[1])\n\
    \tlocal year = tonumber(date_split[3])\n\tlocal days_in_month = tonumber(calendar.month(year,\
    \ month))\n\tlocal days_in_year = tonumber(calendar.year(year, month))\n\tlocal\
    \ days_in_century = tonumber(calendar.year(year, year) + 100 - year)\n\tlocal\
    \ days_in_decade = days_in_century * 10\n\tlocal days_in_century_plus_1 = days_in_century\
    \ + 1\n\tlocal days_in_decade_plus_1 = days_in_decade + 1\n\tlocal days_in_century_plus_1_plus_1\
    \ = days_in_century_plus_1 + 1\n\tlocal days_in_decade_plus_1_plus_1 = days_in_decade_plus_1\
    \ + 1\n\tlocal days_in_century_plus_1_plus_1_plus_1 = days_in_century_plus_1_plus_1\
    \ + 1\n\tlocal days_in_decade_plus_1_plus_1_plus_1 = days_in_decade_plus_1_plus_1\
    \ + 1\n\tlocal days_in_century_plus_1_plus_1_plus_1_plus_1 = days_in_century_plus_1_plus_1_plus_1\
    \ + 1\n\tlocal days_in_decade_plus_1_plus_1_plus_1_plus_1 = days_in_decade_plus_1_plus_1_plus_1\
    \ + 1\n\tlocal days_in_century_plus_1_plus_1_plus_1_plus_1_plus_1 = days_in_century_plus_1_plus_1_plus_1_plus_1\
    \ + 1\n\tlocal days_in_decade_plus_1_plus_1_plus_1_plus_1_plus_1 = days_in_decade_plus_1_plus_1_plus_1_plus_1\
    \ + 1\n\tlocal days_in_century_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1 = days_in_century_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ + 1\n\tlocal days_in_decade_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = days_in_decade_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1 + 1\n\tlocal days_in_century_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = days_in_century_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1 + 1\n\tlocal\
    \ days_in_decade_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = days_in_decade_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1 + 1\n\
    \tlocal days_in_century_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1_plus_1\
    \ = days_in_century_\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpojewdvp2.lua:64: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n    return\
    \ false\n  end\n  if year < 1900 then\n    return false\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibwsla_h.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpibwsla_h.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local date_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_array == nil then\n      return false\n   end\n   if date_array[3]\
    \ < 1 then\n      return false\n   end\n   if date_array[3] > 12 then\n      return\
    \ false\n   end\n   if date_array[2] < 1 then\n      return false\n   end\n  \
    \ if date_array[2] > 12 then\n      return false\n   end\n   if date_array[1]\
    \ < 1 then\n      return false\n   end\n   if date_array[1] > 12 then\n      return\
    \ false\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8ylmye4h.lua:41:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmp8ylmye4h.lua:41: in function 'candidate'\n\t/tmp/tmp8ylmye4h.lua:65: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  local months = {\n    [1] = 1,\n    [3] = 1..3,\n\
    \    [5] = 4,\n    [7] = 4,\n    [8] = 4,\n    [10] = 4,\n    [12] = 4,\n  }\n\
    \  local days = {\n    [1] = 1,\n    [2] = 1,\n    [3] = 1..3,\n    [4] = 4,\n\
    \    [6] = 6,\n    [9] = 9,\n    [11] = 11,\n  }\n  local months_count = months[month]\n\
    \  local days_count = days[day]\n  if months_count < 1 or days_count < 1 or months_count\
    \ > 12 or days_count > 31 then\n    return false\n  end\n  if months[month] ==\
    \ months[month+1] then\n    if days[day] == days[day+1] then\n      if year ==\
    \ nil then\n        return false\n      else\n        year = tonumber(year)\n\
    \        if year == nil then\n          return false\n        end\n      end\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphw2bw5r6.lua:25: malformed number near ''1..3''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 31 then\n        return false\n    end\n    if month == 4 and\
    \ day > 30 then\n        return false\n    end\n    if month == 6 and day > 29\
    \ then\n        return false\n    end\n    if month == 9 and day > 31 then\n \
    \       return false\n    end\n    if month == 11 and day > 30 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 1 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 3 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if month == 5 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    if month == 7 then\n    \
    \    if day > 31 then\n            return false\n        end\n    end\n    if\
    \ month == 8 then\n        if day > 31 then\n            return false\n      \
    \  end\n    end\n    if month == 10 then\n        if day > 31 then\n         \
    \   return false\n        end\n    end\n    if month == 12 then\n        if day\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuk9yh1bm.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpuk9yh1bm.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpuk9yh1bm.lua:82: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n    return\
    \ true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46t1w_s3.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp46t1w_s3.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n    return\
    \ true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp46t1w_s3.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp46t1w_s3.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day == 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks86stqt.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpks86stqt.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 12 or month < 1 then\n        return false\n    end\n    if day > 30 then\n\
    \        return false\n    end\n    if day < 1 then\n        return false\n  \
    \  end\n    if year < 1000 or year > 9999 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month == 2 and day < 29 then\n\
    \    return false\n  end\n  if month == 2 and day > 28 then\n    return false\n\
    \  end\n  if month == 2 and day < 28 then\n    return false\n  end\n  if month\
    \ == 2 and day > 31 then\n    return false\n  end\n  if month == 2 and day < 31\
    \ then\n    return false\n  end\n  if month == 2 and day > 30 then\n    return\
    \ false\n  end\n  if month == 2 and day < 30 then\n    return false\n  end\n \
    \ if month == 2 and day > 31 then\n    return false\n  end\n  if month == 2 and\
    \ day < 31 then\n    return false\n  end\n  if month == 2 and day > 30 then\n\
    \    return false\n  end\n  if month == 2 and day < 30 then\n    return false\n\
    \  end\n  if month == 2 and day > 31 then\n    return false\n  end\n  if month\
    \ == 2 and day < 31 then\n    return false\n  end\n  if month == 2 and day > 30\
    \ then\n    return false\n  end\n  if month == 2 and day < 30 then\n    return\
    \ false\n  end\n  if month == 2 and day > 31 then\n    return false\n  end\n \
    \ if month == 2 and day < 31 then\n    return false\n  end\n  if month == 2 and\
    \ day > 30 then\n    return false\n  end\n  if month == 2 and day < 30 then\n\
    \    return false\n  end\n  if month == 2 and day > 31 then\n    return false\n\
    \  end\n  if month == 2 and day < 31 then\n    return false\n  end\n  if month\
    \ == 2 and day > 30 then\n    return false\n  end\n  if month == 2 and day < 30\
    \ then\n    return false\n  end\n  if month == 2 and day > 31 then\n    return\
    \ false\n  end\n  if month == 2 and day < 31 then\n    return false\n  end\n \
    \ if month == 2 and day > 30 then\n    return false\n  end\n  if month == 2 and\
    \ day < 30 then\n    return false\n  end\n  if month == 2 and day > 31 then\n\
    \    return false\n  end\n  if month == 2 and day < 31 then\n    return false\n\
    \  end\n  if month\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsqj6zi25.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal date_split = string.split(date,\
    \ '-')\n\tlocal date_year = tonumber(date_split[2])\n\tlocal date_month = tonumber(date_split[1])\n\
    \tlocal date_day = tonumber(date_split[3])\n\tlocal date_months = { 1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12 }\n\tlocal date_days_1 = { 31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31 }\n\tlocal date_days_2 = { 31, 29, 31, 30, 31, 30, 31,\
    \ 31, 30, 31, 30, 31 }\n\tlocal date_days_3 = { 31, 30, 31, 30, 31, 30, 31, 31,\
    \ 30, 31, 30, 31 }\n\tlocal date_days_4 = { 31, 31, 31, 31, 31, 31, 31, 31, 31,\
    \ 31 }\n\tlocal date_days_5 = { 31, 31, 32, 32, 32, 32, 32, 32, 32, 32, 32 }\n\
    \tlocal date_days_6 = { 31, 31, 33, 33, 33, 33, 33, 33, 33, 33, 33 }\n\tlocal\
    \ date_days_7 = { 31, 31, 34, 34, 34, 34, 34, 34, 34, 34, 34, 34 }\n\tlocal date_days_8\
    \ = { 31, 31, 35, 35, 35, 35, 35, 35, 35, 35, 35 }\n\tlocal date_days_9 = { 31,\
    \ 31, 36, 36, 36, 36, 36, 36, 36, 36, 36 }\n\tlocal date_days_10 = { 31, 31, 37,\
    \ 37, 37, 37, 37, 37, 37, 37, 37 }\n\tlocal date_days_11 = { 31, 31, 38, 38, 38,\
    \ 38, 38, 38, 38, 38, 38 }\n\tlocal date_days_12 = { 31, 31, 39, 39, 39, 39, 39,\
    \ 39, 39, 39, 39 }\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpfo7b7y51.lua:58: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\tlocal months = {\n\t\t[1] = '01',\n\t\t[3] = '03',\n\
    \t\t[5] = '05',\n\t\t[7] = '07',\n\t\t[8] = '08',\n\t\t[10] = '10',\n\t\t[12]\
    \ = '12'\n\t}\n\tlocal days = {\n\t\t[1] = 1,\n\t\t[3] = 1\n\t}\n\tlocal months_count\
    \ = months[month]\n\tlocal days_count = days[day]\n\tlocal months_count_valid\
    \ = months_count and months_count > 1 and months_count <= 12\n\tlocal days_count_valid\
    \ = days_count and days_count > 1 and days_count <= 31\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 31 and days_count <= 30\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 30 and days_count <= 29\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 29 and days_count <= 29\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 29 and days_count <= 29\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 29 and days_count <= 29\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 29 and days_count <= 29\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 29 and days_count <= 29\n\tlocal months_count_invalid\
    \ = months_count and months_count > 12 and months_count <= 12\n\tlocal days_count_invalid\
    \ = days_count and days_count > 29 and days_\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmwygqgyg.lua:75: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil then\n        return false\n    end\n\
    \    if day == nil then\n        return false\n    end\n    if year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1lst6zx9.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp1lst6zx9.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmp1lst6zx9.lua:46: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 2 and day > 29 then\n        return false\n    end\n\
    \    if day > 30 then\n        return false\n    end\n    if day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day > 29 then\n        return\
    \ false\n    end\n    if day > 31 then\n        return false\n    end\n    if\
    \ month == 2 and day > 29 then\n        return false\n    end\n    if day > 30\
    \ then\n        return false\n    end\n    if day > 31 then\n        return false\n\
    \    end\n    if month == 2 and day > 29 then\n        return false\n    end\n\
    \    if day > 31 then\n        return false\n    end\n    if month == 2 and day\
    \ > 29 then\n        return false\n    end\n    if day > 30 then\n        return\
    \ false\n    end\n    if day > 31 then\n        return false\n    end\n    if\
    \ month == 2 and day > 29 then\n        return false\n    end\n    if day > 31\
    \ then\n        return false\n    end\n    if month == 2 and day > 29 then\n \
    \       return false\n    end\n    if day > 30 then\n        return false\n  \
    \  end\n    if day > 31 then\n        return false\n    end\n    if month == 2\
    \ and day > 29 then\n        return false\n    end\n    if day > 31 then\n   \
    \     return false\n    end\n    if month == 2 and day > 29 then\n        return\
    \ false\n    end\n    if day > 30 then\n        return false\n    end\n    if\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day > 29\
    \ then\n        return false\n    end\n    if day > 31 then\n        return false\n\
    \    end\n    if month == 2 and day > 29 then\n        return false\n    end\n\
    \    if day > 30 then\n        return false\n    end\n    if day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day > 29 then\n        return\
    \ false\n    end\n    if day > 31 then\n        return false\n    end\n    if\
    \ month == 2 and day > 29 then\n        return false\n    end\n    if day > 30\
    \ then\n        return false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpd_cmbce8.lua:136: ''end'' expected (to close ''if'' at line
    133) near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if day == nil then\n        return false\n    end\n    if year == nil\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpps2jkxz6.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpps2jkxz6.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpps2jkxz6.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day > 31 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 10 and day > 31 then\n        return false\n\
    \    end\n    if month == 12 and day > 31 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp820o5mlc.lua:69:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp820o5mlc.lua:69:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 1 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 3 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if month == 5 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    if month == 7 then\n    \
    \    if day > 31 then\n            return false\n        end\n    end\n    if\
    \ month == 8 then\n        if day > 31 then\n            return false\n      \
    \  end\n    end\n    if month == 10 then\n        if day > 31 then\n         \
    \   return false\n        end\n    end\n    if month == 12 then\n        if day\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuk9yh1bm.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpuk9yh1bm.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpuk9yh1bm.lua:82: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\tif month < 1 or month > 12 then\n\t\treturn false\n\
    \tend\n\tif day < 1 or day > 31 then\n\t\treturn false\n\tend\n\tif month == 2\
    \ then\n\t\tif day > 29 then\n\t\t\treturn false\n\t\tend\n\telse\n\t\tif day\
    \ > 30 then\n\t\t\treturn false\n\t\tend\n\tend\n\tif year < 1900 then\n\t\treturn\
    \ false\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq26qqzmp.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpq26qqzmp.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpq26qqzmp.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local year = tonumber(date_split[2])\n    local month = tonumber(date_split[1])\n\
    \    local day = tonumber(date_split[3])\n    if year and month and day then\n\
    \        if month < 1 or month > 12 then\n            return false\n        end\n\
    \        if day < 1 or day > 31 then\n            return false\n        end\n\
    \        if month == 2 then\n            if day > 29 then\n                return\
    \ false\n            end\n        end\n        if month == 1 or month == 3 or\
    \ month == 5 or month == 7 or month == 8 or month == 10 or month == 12 or month\
    \ == 4 or month == 6 or month == 9 or month == 11 or month == 0 then\n       \
    \     if day > 30 then\n                return false\n            end\n      \
    \  end\n        if month == 4 or month == 6 or month == 9 or month == 11 or month\
    \ == 0 then\n            if day > 29 then\n                return false\n    \
    \        end\n        end\n        if month == 1 then\n            if day > 28\
    \ then\n                return false\n            end\n        end\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbnge343i.lua:19:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpbnge343i.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpbnge343i.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local months = {\n    [1] = '01',\n\
    \    [3] = '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10]\
    \ = '10',\n    [12] = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] =\
    \ '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n\
    \    [12] = '12',\n    [14] = '14',\n    [15] = '15',\n    [16] = '16',\n    [17]\
    \ = '17',\n    [18] = '18',\n    [19] = '19',\n    [20] = '20',\n    [21] = '21',\n\
    \    [22] = '22',\n    [23] = '23',\n    [24] = '24',\n    [25] = '25',\n    [26]\
    \ = '26',\n    [27] = '27',\n    [28] = '28',\n    [29] = '29',\n    [30] = '30',\n\
    \    [31] = '31'\n  }\n  local years = {\n    [1] = '00',\n    [2] = '01',\n \
    \   [3] = '02',\n    [4] = '03',\n    [5] = '04',\n    [6] = '05',\n    [7] =\
    \ '06',\n    [8] = '07',\n    [9] = '08',\n    [10] = '09',\n    [11] = '10',\n\
    \    [12] = '11',\n    [13] = '12',\n    [14] = '13',\n    [15] = '14',\n    [16]\
    \ = '15',\n    [17] = '16',\n    [18] = '17',\n    [19] = '18',\n    [20] = '19',\n\
    \    [21] = '20',\n    [22] = '21',\n    [23] = '22',\n    [24] = '23',\n    [25]\
    \ = '24',\n    [26] = '25',\n    [27] = '26',\n    [28] = '27',\n    [29] = '28',\n\
    \    [30] = '29',\n    [31] = '30'\n  }\n  local months_length = months[month]\n\
    \  local days_length = days[day]\n  local years_length = years[year]\n  local\
    \ months_length_2 = months[month]\n  local days_length_2 = days[day]\n  local\
    \ years_length_2 = years[year]\n  local months_length_3 = months[month]\n  local\
    \ days_length_3 = days[day]\n  local years_length_3 = years[year]\n  local months_length_4\
    \ = months[month]\n\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphan1dbv3.lua:121: ''end'' expected (to close ''function''
    at line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil then\n        return false\n \
    \   end\n    if day == nil then\n        return false\n    end\n    if year ==\
    \ nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month > 2 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local date_array = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\"\
    )\n   if date_array == nil then\n      return false\n   end\n   if date_array[3]\
    \ < 1 or date_array[3] > 12 then\n      return false\n   end\n   if date_array[2]\
    \ < 1 or date_array[2] > 31 then\n      return false\n   end\n   if date_array[1]\
    \ < 1 or date_array[1] > 12 then\n      return false\n   end\n   return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptvcq4e0q.lua:41:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmptvcq4e0q.lua:41: in function 'candidate'\n\t/tmp/tmptvcq4e0q.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n       \
    \ [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] = '12',\n\
    \        [14] = '14',\n        [15] = '15',\n        [20] = '20',\n        [30]\
    \ = '30',\n        [36] = '36',\n        [46] = '46',\n        [60] = '60',\n\
    \        [90] = '90',\n        [120] = '120'\n    }\n    local years = {\n   \
    \     [1] = '00',\n        [2] = '20',\n        [4] = '40',\n        [6] = '60',\n\
    \        [8] = '80',\n        [10] = '100',\n        [12] = '200',\n        [14]\
    \ = '300',\n        [16] = '400',\n        [18] = '500',\n        [20] = '600',\n\
    \        [30] = '700',\n        [32] = '800',\n        [34] = '900',\n       \
    \ [36] = '1000',\n        [38] = '1100',\n        [40] = '1200',\n        [42]\
    \ = '1300',\n        [44] = '1400',\n        [46] = '1500',\n        [48] = '1600',\n\
    \        [50] = '1700',\n        [52] = '1800',\n        [54] = '1900',\n    \
    \    [56] = '2000',\n        [58] = '2100',\n        [60] = '2200',\n        [62]\
    \ = '2300',\n        [64] = '2400',\n        [66] = '2500',\n        [68] = '2600',\n\
    \        [70] = '2700',\n        [72] = '2800',\n        [74] = '2900',\n    \
    \    [76] = '3000',\n        [78] = '3100',\n        [80] = '3200',\n        [82]\
    \ = '3300',\n        [84] = '3400',\n        [86] = '3500',\n        [88] = '3600',\n\
    \        [90] = '3700',\n        [92] = '3800',\n        [94] = '3900',\n    \
    \    [96] = '4000',\n        [98] = '4100',\n        [100] = '4200',\n       \
    \ [102] = '4300',\n        [104] = '4400',\n        [106] = '4500',\n        [108]\
    \ = '4600',\n        [110] = '4700',\n        [112] = '4800',\n        [114] =\
    \ '49\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6tg2u73w.lua:100: unfinished string near ''''49''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day > 30 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 9 and day > 31 then\n        return false\n\
    \    end\n    if month == 10 and day > 31 then\n        return false\n    end\n\
    \    if month == 11 and day > 30 then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibjc2n23.lua:72:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpibjc2n23.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  local months = {\n    [1] = 1,\n    [3] = 1\n  }\n\
    \  local days = {\n    [4] = 1\n  }\n  local months_count = months[month]\n  if\
    \ months_count == nil then\n    return false\n  end\n  local days_count = days[day]\n\
    \  if days_count == nil then\n    return false\n  end\n  local year_count = year\
    \ - 2000\n  if year_count == nil then\n    return false\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_aqaviuj.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_aqaviuj.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)') -- mm-dd-yyyy\n  local months = {\n    [1] = '01',\n  \
    \  [3] = '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] =\
    \ '10',\n    [12] = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12',\n    [14] = '14',\n    [16] = '16',\n    [18] = '18',\n    [20] = '20',\n\
    \    [21] = '21',\n    [23] = '23',\n    [25] = '25',\n    [27] = '27',\n    [29]\
    \ = '29',\n    [31] = '31'\n  }\n  local months_count = months[month]\n  local\
    \ days_count = days[day]\n  local months_count_valid = months_count and months_count\
    \ > 1 and months_count <= 12\n  local days_count_valid = days_count and days_count\
    \ > 1 and days_count <= 31\n  local months_count_invalid = months_count and months_count\
    \ > 12 and months_count <= 12\n  local days_count_invalid = days_count and days_count\
    \ > 31 and days_count <= 30\n  local months_count_invalid = months_count and months_count\
    \ > 12 and months_count <= 12\n  local days_count_invalid = days_count and days_count\
    \ > 30 and days_count <= 29\n  local months_count_invalid = months_count and months_count\
    \ > 12 and months_count <= 12\n  local days_count_invalid = days_count and days_count\
    \ > 29 and days_count <= 29\n  local months_count_invalid = months_count and months_count\
    \ > 12 and months_count <= 12\n  local days_count_invalid = days_count and days_count\
    \ > 29 and days_count <= 29\n  local months_count_invalid = months_count and months_count\
    \ > 12 and months_count <= 12\n  local days_count_invalid = days_count and days_count\
    \ > 29 and days_count <= 29\n  local months_count_invalid = months_count and months_count\
    \ > 12 and months_count <= 12\n  local days_count_invalid = days_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaa92a1cw.lua:86: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptn6gza0a.lua:45: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = 1,\n    [3] = 1,\n   \
    \ [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [1] = 1,\n    [3] = 1,\n    [5] = 31,\n    [7] = 30,\n    [8]\
    \ = 29,\n    [10] = 29,\n    [12] = 29,\n  }\n  local months_count = months[month]\n\
    \  local days_count = days[month]\n  if month < 1 or month > 12 then\n    return\
    \ false\n  end\n  if day < 1 or day > days_count then\n    return false\n  end\n\
    \  if month == 2 then\n    if day > 29 then\n      return false\n    end\n  else\n\
    \    if day > 31 then\n      return false\n    end\n  end\n  if year < 1000 or\
    \ year > 9999 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyyfgcsdk.lua:40:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpyyfgcsdk.lua:40:\
    \ in function 'candidate'\n\t/tmp/tmpyyfgcsdk.lua:64: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day > 31 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 10 and day > 31 then\n        return false\n\
    \    end\n    if month == 12 and day > 31 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpjoj3ubc7.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpjoj3ubc7.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpjoj3ubc7.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date == 0 then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date < 1 then\n      return false\n   end\n   if #date > 29 then\n\
    \      return false\n   end\n   if #date < 1 then\n      return false\n   end\n\
    \   if #date > 12 then\n      return false\n   end\n   local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n   if date_parts == nil then\n      return false\n \
    \  end\n   if date_parts[1] < 1 or date_parts[1] > 12 then\n      return false\n\
    \   end\n   if date_parts[2] < 1 or date_parts[2] > 31 then\n      return false\n\
    \   end\n   if date_parts[2] < 1 or date_parts[2] > 30 then\n      return false\n\
    \   end\n   if date_parts[2] < 1 or date_parts[2] > 29 then\n      return false\n\
    \   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdflgvm8o.lua:47:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdflgvm8o.lua:47:\
    \ in function 'candidate'\n\t/tmp/tmpdflgvm8o.lua:65: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n       \
    \ [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] = '12',\n\
    \        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n        [17]\
    \ = '17',\n        [18] = '18',\n        [19] = '19',\n        [20] = '20',\n\
    \        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n        [24]\
    \ = '24',\n        [25] = '25',\n        [26] = '26',\n        [27] = '27',\n\
    \        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n        [31]\
    \ = '31'\n    }\n    local months_count = months[month]\n    local days_count\
    \ = days[day]\n    local year_count = years[year]\n    local months_count_valid\
    \ = months_count and months_count > 1 and months_count <= 12\n    local days_count_valid\
    \ = days_count and days_count > 1 and days_count <= 31\n    local year_count_valid\
    \ = year_count and year_count > 1 and year_count <= 12\n    local months_count_valid_years\
    \ = months_count_valid and year_count <= 12\n    local days_count_valid_years\
    \ = days_count_valid and year_count <= 12\n    local year_count_valid_years =\
    \ year_count_valid and year_count <= 12\n    local months_count_valid_months =\
    \ months_count_valid and months_count <= 12\n    local days_count_valid_months\
    \ = days_count_valid and months_count <= 12\n    local year_count_valid_months\
    \ = year_count_valid and months_count <= 12\n    local months_count_valid_days\
    \ = months_count_valid and days_count <= 31\n    local days_count_valid_days =\
    \ days_count_valid and days_count <= 31\n    local year_count_valid_days = year_count_valid\
    \ and days_count <= 31\n    local months_count_valid_years_months = months_count_valid_years\
    \ and months_count <= 12\n    local days_count_valid_years_months = days_count_valid_years\
    \ and months_count <= 12\n    local year_count_valid_years_month\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq10cajrs.lua:95: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local months = string.gsub(date_split[1], \"%+%-\", \"\")\n    local\
    \ days = string.gsub(date_split[2], \"%+%-\", \"\")\n    local year = date_split[3]\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp36fstf0m.lua:45: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local days = {\n        [1]\
    \ = '01',\n        [3] = '31',\n        [5] = '30',\n        [7] = '29'\n    }\n\
    \    local months_count = months[month]\n    local days_count = days[day]\n  \
    \  if months_count < 1 or months_count > 12 then\n        return false\n    end\n\
    \    if days_count < 1 or days_count > 31 then\n        return false\n    end\n\
    \    if months[month] < 1 or months[month] > 12 then\n        return false\n \
    \   end\n    if day < 1 or day > 31 then\n        return false\n    end\n    if\
    \ year < 1 or year > 9999 then\n        return false\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6s4b177a.lua:37:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp6s4b177a.lua:37:\
    \ in function 'candidate'\n\t/tmp/tmp6s4b177a.lua:58: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ '-')\n    local date_year = tonumber(date_split[2])\n    local date_month =\
    \ tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n    if\
    \ date_year == nil or date_month == nil or date_day == nil then\n        return\
    \ false\n    end\n    if date_month < 1 or date_month > 12 then\n        return\
    \ false\n    end\n    if date_day < 1 or date_day > 31 then\n        return false\n\
    \    end\n    if date_month == 1 or date_month == 3 or date_month == 5 or\n  \
    \      date_month == 7 or\n        date_month == 8 or\n        date_month == 10\
    \ or\n        date_month == 12 then\n        if date_day == 1 or\n           \
    \ date_day == 3 or\n            date_day == 5 or\n            date_day == 7 or\n\
    \            date_day == 8 or\n            date_day == 10 or\n            date_day\
    \ == 12 then\n            return true\n        end\n    end\n    if date_month\
    \ == 4 or date_month == 6 or\n        date_month == 9 or date_month == 11 then\n\
    \        if date_day == 4 or\n            date_day == 6 or\n            date_day\
    \ == 9 or\n            date_day == 11 then\n            return true\n        end\n\
    \    end\n    if date_month == 2 then\n        if date_day == 2 then\n       \
    \     return true\n        end\n    end\n    return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv_uhtbog.lua:19:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpv_uhtbog.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpv_uhtbog.lua:67: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day == 29 then\n        return false\n    end\n    if month == 2 and day > 28\
    \ then\n        return false\n    end\n    if month == 2 and day < 28 then\n \
    \       return false\n    end\n    if month == 2 and day == 28 then\n        return\
    \ false\n    end\n    if month == 2 and day > 31 then\n        return false\n\
    \    end\n    if month == 2 and day < 31 then\n        return false\n    end\n\
    \    if month == 2 and day == 31 then\n        return false\n    end\n    if month\
    \ == 2 and day > 30 then\n        return false\n    end\n    if month == 2 and\
    \ day < 30 then\n        return false\n    end\n    if month == 2 and day == 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day == 31 then\n        return false\n\
    \    end\n    if month == 2 and day > 30 then\n        return false\n    end\n\
    \    if month == 2 and day < 30 then\n        return false\n    end\n    if month\
    \ == 2 and day == 30 then\n        return false\n    end\n    if month == 2 and\
    \ day > 31 then\n        return false\n    end\n    if month == 2 and day < 31\
    \ then\n        return false\n    end\n    if month == 2 and day == 31 then\n\
    \        return false\n    end\n    if month == 2 and day > 30 then\n        return\
    \ false\n    end\n    if month == 2 and day < 30 then\n        return false\n\
    \    end\n    if month == 2 and day == 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day == 31 then\n        return false\n    end\n    if month == 2 and day > 30\
    \ then\n        return false\n    end\n    if month == 2 and day < 30 then\n \
    \       return false\n    end\n    if month == 2 and day == 30 then\n        return\
    \ false\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphszfy7kl.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  local months = {\n    [1] = 1,\n    [3] = 1\n  }\n\
    \  local days = {\n    [4] = 1\n  }\n  local months_count = months[month]\n  if\
    \ months_count == nil then\n    return false\n  end\n  local days_count = days[day]\n\
    \  if days_count == nil then\n    return false\n  end\n  local year_count = year\
    \ - 1911\n  if year_count < 1 or year_count > 31 then\n    return false\n  end\n\
    \  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpydm6kk5w.lua:48:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpydm6kk5w.lua:48:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ < 4 or month > 11 then\n        return false\n    end\n    if day < 1 or day\
    \ > 30 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcwkgwcem.lua:47:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpcwkgwcem.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil then\n        return false\n    end\n\
    \    if day == nil then\n        return false\n    end\n    if year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqq6_k40j.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpqq6_k40j.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpqq6_k40j.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil then\n        return false\n    end\n\
    \    if day == nil then\n        return false\n    end\n    if year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcf97weqt.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpcf97weqt.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpcf97weqt.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month < 1 or month > 12 then\n        return false\n\
    \    end\n    if day < 1 or day > 31 then\n        return false\n    end\n   \
    \ if month == 2 then\n        if day > 29 then\n            return false\n   \
    \     end\n    end\n    if month == 4 then\n        if day > 30 then\n       \
    \     return false\n        end\n    end\n    if month == 6 then\n        if day\
    \ > 29 then\n            return false\n        end\n    end\n    if month == 9\
    \ then\n        if day > 30 then\n            return false\n        end\n    end\n\
    \    if month == 11 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    if month == 12 then\n        if day > 31 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwye02ch5.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpwye02ch5.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpwye02ch5.lua:62: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n       \
    \ [7] = '29',\n        [8] = '28'\n    }\n    local year = tonumber(date:match('(%d+)-(%d+)-(%d+)'))\n\
    \    if year == nil then\n        return false\n    end\n    local month = months[tonumber(date:match('(%d+)-(%d+)'))]\n\
    \    if month == nil then\n        return false\n    end\n    local day = tonumber(date:match('(%d+)'))\n\
    \    if day == nil then\n        return false\n    end\n    if day < 1 or day\
    \ > days[month] then\n        return false\n    end\n    if month < 1 or month\
    \ > 12 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpyzs75z7c.lua:47:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpyzs75z7c.lua:47:\
    \ in function 'candidate'\n\t/tmp/tmpyzs75z7c.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date == 0 then\n      return false\n   end\n   local date_array\
    \ = string.gmatch(date, \"%d-%d-%d\")\n   if date_array == nil then\n      return\
    \ false\n   end\n   if date_array[2] ~= date_array[3] then\n      return false\n\
    \   end\n   if date_array[2] > 12 then\n      return false\n   end\n   if date_array[2]\
    \ < 1 then\n      return false\n   end\n   if date_array[1] > 12 then\n      return\
    \ false\n   end\n   if date_array[1] < 1 then\n      return false\n   end\n  \
    \ return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq4y741jb.lua:29:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpq4y741jb.lua:29: in function 'candidate'\n\t/tmp/tmpq4y741jb.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if day < 1 or day\
    \ > 30 then\n        return false\n    end\n    if month == 1 and day > 31 then\n\
    \        return false\n    end\n    if month == 1 and day < 31 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgocppk0v.lua:63:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpgocppk0v.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 1 and\
    \ day > 30 then\n        return false\n    end\n    if month == 1 and day < 30\
    \ then\n        return false\n    end\n    if month == 3 and day > 31 then\n \
    \       return false\n    end\n    if month == 3 and day < 31 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzu1f9cty.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpzu1f9cty.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpzu1f9cty.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 4 then\n    if day > 30 then\n      return false\n    end\n  end\n  if month\
    \ == 6 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 9 then\n    if day > 31 then\n      return false\n    end\n  end\n  if month\
    \ == 11 then\n    if day > 30 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if day == nil then\n        return false\n    end\n    if year == nil\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    end\n    if month == 4 then\n        if day\
    \ > 30 then\n            return false\n        end\n    end\n    if month == 6\
    \ then\n        if day > 29 then\n            return false\n        end\n    end\n\
    \    if month == 9 then\n        if day > 31 then\n            return false\n\
    \        end\n    end\n    if month == 11 then\n        if day > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpvbdk7kf0.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpvbdk7kf0.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpvbdk7kf0.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   local date_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n   if date_array == nil then\n\
    \      return false\n   end\n   if date_array[3] ~= nil then\n      if date_array[3]\
    \ < 1 or date_array[3] > 12 then\n         return false\n      end\n   end\n \
    \  if date_array[2] ~= nil then\n      if date_array[2] < 1 or date_array[2] >\
    \ 31 then\n         return false\n      end\n   end\n   if date_array[1] ~= nil\
    \ then\n      if date_array[1] < 1 or date_array[1] > 30 then\n         return\
    \ false\n      end\n   end\n   if date_array[1] and date_array[2] and date_array[3]\
    \ then\n      return true\n   end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7br_21zm.lua:29:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmp7br_21zm.lua:29: in function 'candidate'\n\t/tmp/tmp7br_21zm.lua:53: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day > 30 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 9 and day > 31 then\n        return false\n\
    \    end\n    if month == 10 and day > 31 then\n        return false\n    end\n\
    \    if month == 11 and day > 30 then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4drm4ci2.lua:72:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4drm4ci2.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local months = {\n    [1] = 1,\n    [3] = 1,\n    [5] = 1,\n    [7] = 1,\n\
    \    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local days = {\n    [1] =\
    \ 1,\n    [31] = 31,\n    [59] = 30,\n    [91] = 31,\n  }\n  local years = {\n\
    \    [1] = 2000,\n    [31] = 2030,\n    [59] = 2030,\n    [91] = 2100,\n  }\n\
    \  local months_count = #months\n  local days_count = #days\n  local years_count\
    \ = #years\n  local months_index = #date_parts - 1\n  local days_index = #date_parts\
    \ - 2\n  local years_index = #date_parts - 3\n  local months_value = tonumber(date_parts[months_index])\n\
    \  local days_value = tonumber(date_parts[days_index])\n  local years_value =\
    \ tonumber(date_parts[years_index])\n  if months_value == nil or days_value ==\
    \ nil or years_value == nil then\n    return false\n  end\n  if months_value <\
    \ 1 or months_value > 12 then\n    return false\n  end\n  if days_value < 1 or\
    \ days_value > 31 then\n    return false\n  end\n  if years_value < 1 or years_value\
    \ > 91 then\n    return false\n  end\n  if months_value == months[months_value]\
    \ then\n    if days_value == days[days_value] then\n      if years_value == years[years_value]\
    \ then\n        return true\n      end\n    end\n  end\n  return false\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputgz0rui.lua:78:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmputgz0rui.lua:78:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = 1,\n        [31] = 31,\n        [59] = 59,\n        [90]\
    \ = 30,\n        [120, 31] = 31,\n        [152] = 29\n    }\n    local months_count\
    \ = #months\n    local days_count = #days\n    local months_limit = months_count\
    \ - 2\n    local days_limit = days_count - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\n    local days_limit = days_limit - 2\n    local months_limit = months_limit\
    \ - 2\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvt1i18sq.lua:33: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\tlocal months = {\n\t\t[1] = '01',\n\t\t[3] = '03',\n\
    \t\t[5] = '05',\n\t\t[7] = '07',\n\t\t[8] = '08',\n\t\t[10] = '10',\n\t\t[12]\
    \ = '12'\n\t}\n\tlocal days = {\n\t\t[1] = '01',\n\t\t[2] = '02',\n\t\t[3] = '03',\n\
    \t\t[4] = '04',\n\t\t[5] = '05',\n\t\t[6] = '06',\n\t\t[7] = '07',\n\t\t[8] =\
    \ '08',\n\t\t[9] = '09',\n\t\t[10] = '10',\n\t\t[11] = '11',\n\t\t[12] = '12',\n\
    \t\t[13] = '13',\n\t\t[14] = '14',\n\t\t[15] = '15',\n\t\t[16] = '16',\n\t\t[17]\
    \ = '17',\n\t\t[18] = '18',\n\t\t[19] = '19',\n\t\t[20] = '20',\n\t\t[21] = '21',\n\
    \t\t[22] = '22',\n\t\t[23] = '23',\n\t\t[24] = '24',\n\t\t[25] = '25',\n\t\t[26]\
    \ = '26',\n\t\t[27] = '27',\n\t\t[28] = '28',\n\t\t[29] = '29',\n\t\t[30] = '30',\n\
    \t\t[31] = '31'\n\t}\n\tlocal months_count = months[month]\n\tlocal days_count\
    \ = days[day]\n\tlocal months_count_valid = months_count and months_count > 1\
    \ and months_count <= 12\n\tlocal days_count_valid = days_count and days_count\
    \ > 1 and days_count <= 31\n\tlocal months_count_valid_2 = months_count and months_count\
    \ > 4 and months_count <= 12\n\tlocal days_count_valid_2 = days_count and days_count\
    \ > 4 and days_count <= 30\n\tlocal months_count_valid_3 = months_count and months_count\
    \ > 6 and months_count <= 12\n\tlocal days_count_valid_3 = days_count and days_count\
    \ > 6 and days_count <= 29\n\tlocal months_count_valid_4 = months_count and months_count\
    \ > 9 and months_count <= 12\n\tlocal days_count_valid_4 = days_count and days_count\
    \ > 9 and days_count <= 28\n\tlocal months_count_valid_5 = months_count and months_count\
    \ > 11 and months_count <= 12\n\tlocal days_count_\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp933wj09h.lua:96: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_array = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_array[1])\n    local month = tonumber(date_array[2])\n\
    \    local year = tonumber(date_array[3])\n    local days_in_month = tonumber(date_array[5])\n\
    \    local days_in_year = tonumber(date_array[7])\n    local days_in_century =\
    \ tonumber(date_array[8])\n    local days_in_decade = tonumber(date_array[9])\n\
    \    local days_in_millennium = tonumber(date_array[10])\n    local days_in_thousand\
    \ = tonumber(date_array[11])\n    local days_in_hundred = tonumber(date_array[12])\n\
    \    local days_in_ten = tonumber(date_array[13])\n    local days_in_five = tonumber(date_array[14])\n\
    \    local days_in_one = tonumber(date_array[15])\n    local days_in_two = tonumber(date_array[16])\n\
    \    local days_in_three = tonumber(date_array[17])\n    local days_in_four =\
    \ tonumber(date_array[18])\n    local days_in_six = tonumber(date_array[19])\n\
    \    local days_in_seven = tonumber(date_array[20])\n    local days_in_eight =\
    \ tonumber(date_array[21])\n    local days_in_nine = tonumber(date_array[22])\n\
    \    local days_in_ten = tonumber(date_array[23])\n    local days_in_eleven =\
    \ tonumber(date_array[24])\n    local days_in_twelve = tonumber(date_array[25])\n\
    \    local days_in_thirteen = tonumber(date_array[26])\n    local days_in_fourteen\
    \ = tonumber(date_array[27])\n    local days_in_fifteen = tonumber(date_array[28])\n\
    \    local days_in_sixteen = tonumber(date_array[29])\n    local days_in_seventeen\
    \ = tonumber(date_array[30])\n    local days_in_eighteen = tonumber(date_array[31])\n\
    \    local days_in_nineteen = tonumber(date_array[32])\n    local days_in_twenty\
    \ = tonumber(date_array[33])\n    local days_in_twenty_one = tonumber(date_array[34])\n\
    \    local days_in_twenty_two = tonumber(date_array[35])\n    local days_in_twenty_three\
    \ = tonumber(date_array[36])\n    local days_in_twenty_four\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvrb2zrcx.lua:77: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\tmonth = tonumber(month)\n\tday = tonumber(day)\n\tyear\
    \ = tonumber(year)\n\tif month == nil or day == nil or year == nil then\n\t\t\
    return false\n\tend\n\tif month < 1 or month > 12 then\n\t\treturn false\n\tend\n\
    \tif day < 1 or day > 31 then\n\t\treturn false\n\tend\n\tif month == 2 and day\
    \ > 29 then\n\t\treturn false\n\tend\n\tif month > 2 then\n\t\treturn false\n\t\
    end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy221zulz.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy221zulz.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month == 3 and day > 30 then\n\
    \    return false\n  end\n  if month == 4 and day > 31 then\n    return false\n\
    \  end\n  if month == 6 and day > 30 then\n    return false\n  end\n  if month\
    \ == 9 and day > 31 then\n    return false\n  end\n  if month == 11 and day >\
    \ 30 then\n    return false\n  end\n  if month == 12 and day > 31 then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lj9jhac.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp6lj9jhac.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp6lj9jhac.lua:56: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  month = tonumber(month)\n  day = tonumber(day)\n  year\
    \ = tonumber(year)\n  if month == nil or day == nil or year == nil then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if day < 1 or day > 31 then\n    return false\n  end\n  if month == 2 then\n\
    \    if day > 29 then\n      return false\n    end\n  end\n  if month == 4 then\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  if month == 6 then\n\
    \    if day > 29 then\n      return false\n    end\n  end\n  if month == 9 then\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  if month == 11 then\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   if string.find(date, \"-\") ~= nil then\n    \
    \  local date_array = string.split(date, \"-\")\n      if #date_array ~= 3 then\n\
    \         return false\n      end\n      if date_array[1] < 1 or date_array[1]\
    \ > 12 then\n         return false\n      end\n      if date_array[2] < 1 or date_array[2]\
    \ > 31 then\n         return false\n      end\n   else\n      if string.find(date,\
    \ \"/\") ~= nil then\n         local date_array = string.split(date, \"/\")\n\
    \         if #date_array ~= 3 then\n            return false\n         end\n \
    \        if date_array[1] < 1 or date_array[1] > 12 then\n            return false\n\
    \         end\n         if date_array[2] < 1 or date_array[2] > 30 then\n    \
    \        return false\n         end\n      else\n         return false\n     \
    \ end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqesujf3g.lua:38:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpqesujf3g.lua:38:\
    \ in function 'candidate'\n\t/tmp/tmpqesujf3g.lua:70: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil then\n        return false\n    end\n\
    \    if day == nil then\n        return false\n    end\n    if year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 12 or month < 1 then\n        return false\n    end\n    if day > 31 or day\
    \ < 1 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcyvwsqw0.lua:63:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcyvwsqw0.lua:63:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n       \
    \ [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] = '12',\n\
    \        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n        [17]\
    \ = '17',\n        [18] = '18',\n        [19] = '19',\n        [20] = '20',\n\
    \        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n        [24]\
    \ = '24',\n        [25] = '25',\n        [26] = '26',\n        [27] = '27',\n\
    \        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n        [31]\
    \ = '31'\n    }\n    local months_length = #months\n    local days_length = #days\n\
    \    local months_count = months_length\n    local days_count = days_length\n\
    \    local month = 1\n    local day = 1\n    local year = 1\n    local month_string\
    \ = ''\n    local day_string = ''\n    local year_string = ''\n    local month_index\
    \ = 1\n    local day_index = 1\n    local year_index = 1\n    local month_string_index\
    \ = 1\n    local day_string_index = 1\n    local year_string_index = 1\n    local\
    \ month_index = 1\n    local day_index = 1\n    local year_index = 1\n    local\
    \ month_string_index = 1\n    local day_string_index = 1\n    local year_string_index\
    \ = 1\n    local month_index = 1\n    local day_index = 1\n    local year_index\
    \ = 1\n    local month_string_index = 1\n    local day_string_index = 1\n    local\
    \ year_string_index = 1\n    local month_index = 1\n    local day_index = 1\n\
    \    local year_index = 1\n    local month_string_index = 1\n    local day_string_index\
    \ = 1\n    local year_string_index = 1\n    local month_index = 1\n    local day_index\
    \ = 1\n    local year_index = 1\n    local month_string_index = 1\n    local day_string_index\
    \ = 1\n    local year_string_index = 1\n    local month_index = 1\n    local day_index\
    \ = 1\n    local year_index = 1\n    local month_string_index = 1\n    local day_string_index\
    \ = 1\n    local year_string_index = 1\n    local \nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplul4rvyh.lua:124: ''end'' expected (to close ''function''
    at line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjyy_cj0e.lua:45: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        return true\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2660r04d.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2660r04d.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local months = {\n    [1] = '01',\n\
    \    [3] = '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10]\
    \ = '10',\n    [12] = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] =\
    \ '03',\n    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n\
    \    [12] = '12',\n    [14] = '14',\n    [16] = '16',\n    [18] = '18',\n    [20]\
    \ = '20',\n    [22] = '22',\n    [24] = '24',\n    [26] = '26',\n    [28] = '28',\n\
    \    [30] = '30',\n    [32] = '32',\n    [34] = '34',\n    [36] = '36',\n    [38]\
    \ = '38',\n    [40] = '40',\n    [42] = '42',\n    [44] = '44',\n    [46] = '46',\n\
    \    [48] = '48',\n    [50] = '50',\n    [52] = '52',\n    [54] = '54',\n    [56]\
    \ = '56',\n    [58] = '58',\n    [60] = '60',\n    [62] = '62',\n    [64] = '64',\n\
    \    [66] = '66',\n    [68] = '68',\n    [70] = '70',\n    [72] = '72',\n    [74]\
    \ = '74',\n    [76] = '76',\n    [78] = '78',\n    [80] = '80',\n    [82] = '82',\n\
    \    [84] = '84',\n    [86] = '86',\n    [88] = '88',\n    [90] = '90',\n    [92]\
    \ = '92',\n    [94] = '94',\n    [96] = '96',\n    [98] = '98',\n    [100] = '100',\n\
    \    [102] = '102',\n    [104] = '104',\n    [106] = '106',\n    [108] = '108',\n\
    \    [110] = '110',\n    [112] = '112',\n    [114] = '114',\n    [116] = '116',\n\
    \    [118] = '118',\n    [120] = '120',\n    [122] = '122',\n    [124] = '124',\n\
    \    [126] = '126',\n    [128] = '128',\n    [130] = '130',\n    [132] = '132',\n\
    \    [134] = '134',\n    [136] = '136',\n    [138] = '138',\n    [140] = '140',\n\
    \    [142] = '142',\n    [144] = '144',\n    [146] = '146',\n    [148\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy4_8kmxp.lua:104: '']'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day == 29 then\n        return false\n    end\n    if month\
    \ < 4 or month > 11 then\n        return false\n    end\n    if day < 1 or day\
    \ > 30 then\n        return false\n    end\n    if year < 1900 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw58cmdmf.lua:47:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpw58cmdmf.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if year < 1 or year > 9999 then\n        return false\n    end\n    if month\
    \ == 2 and day == 29 then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ivydmzy.lua:23:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp4ivydmzy.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmp4ivydmzy.lua:47: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil then\n    return false\n  end\n  if\
    \ day == nil then\n    return false\n  end\n  if year == nil then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if day < 1 or day > 31 then\n    return false\n  end\n  if month == 2 and day\
    \ > 29 then\n    return false\n  end\n  if month == 3 and day > 30 then\n    return\
    \ false\n  end\n  if month == 4 and day > 31 then\n    return false\n  end\n \
    \ if month == 5 and day > 31 then\n    return false\n  end\n  if month == 7 and\
    \ day > 30 then\n    return false\n  end\n  if month == 8 and day > 31 then\n\
    \    return false\n  end\n  if month == 10 and day > 31 then\n    return false\n\
    \  end\n  if month == 12 and day > 31 then\n    return false\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp43ij0mbg.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp43ij0mbg.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmp43ij0mbg.lua:65: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 1 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 3 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if month == 5 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    if month == 7 then\n    \
    \    if day > 31 then\n            return false\n        end\n    end\n    if\
    \ month == 8 then\n        if day > 31 then\n            return false\n      \
    \  end\n    end\n    if month == 10 then\n        if day > 31 then\n         \
    \   return false\n        end\n    end\n    if month == 12 then\n        if day\
    \ > 31 then\n            return false\n        end\n    end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuk9yh1bm.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpuk9yh1bm.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpuk9yh1bm.lua:82: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 1 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if day == nil then\n        return false\n    end\n    if year == nil\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month > 2 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    if day > 31 then\n        return false\n  \
    \  end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9bfh8nmb.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp9bfh8nmb.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmp9bfh8nmb.lua:52: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month < 1 or month > 12 then return false end\n\
    \    if day < 1 or day > 31 then return false end\n    if month == 2 and day ==\
    \ 29 then return false end\n    if month == 2 then return day > 30 end\n    if\
    \ month == 4 then return day > 29 end\n    if month == 6 then return day > 28\
    \ end\n    if month == 8 then return day > 27 end\n    if month == 10 then return\
    \ day > 26 end\n    if month == 12 then return day > 25 end\n    return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8a7hlc3v.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp8a7hlc3v.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmp8a7hlc3v.lua:35: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n\
    \    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12] = '12',\n    [14]\
    \ = '14',\n    [15] = '15',\n    [16] = '16',\n    [17] = '17',\n    [18] = '18',\n\
    \    [19] = '19',\n    [20] = '20',\n    [21] = '21',\n    [22] = '22',\n    [23]\
    \ = '23',\n    [24] = '24',\n    [25] = '25',\n    [26] = '26',\n    [27] = '27',\n\
    \    [28] = '28',\n    [29] = '29',\n    [30] = '30',\n    [31] = '31'\n  }\n\
    \  local months_count = months[month]\n  local days_count = days[day]\n  local\
    \ months_count_lower = months_count - 1\n  local days_count_lower = days_count\
    \ - 1\n  local months_count_upper = months_count + 1\n  local days_count_upper\
    \ = days_count + 1\n  local months_count_lower = months_count - 1\n  local days_count_lower\
    \ = days_count - 1\n  local months_count_upper = months_count + 1\n  local days_count_upper\
    \ = days_count + 1\n  local months_count_lower = months_count - 1\n  local days_count_lower\
    \ = days_count - 1\n  local months_count_upper = months_count + 1\n  local days_count_upper\
    \ = days_count + 1\n  local months_count_lower = months_count - 1\n  local days_count_lower\
    \ = days_count - 1\n  local months_count_upper = months_count + 1\n  local days_count_upper\
    \ = days_count + 1\n  local months_count_lower = months_count - 1\n  local days_count_lower\
    \ = days_count - 1\n  local months_count_upper = months_count + 1\n  local days_count_upper\
    \ = days_count + 1\n  local months_count_lower = months_count - 1\n  local days_count_lower\
    \ = days_count - 1\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpde1f_yn0.lua:102: ''end'' expected (to close ''function''
    at line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local days = {\n        [1]\
    \ = '01',\n        [3] = '31',\n        [5] = '30',\n        [7] = '29',\n   \
    \     [8] = '28',\n        [10] = '31',\n        [12] = '30'\n    }\n    local\
    \ months_count = months[month]\n    local days_count = days[day]\n    local months_count_valid\
    \ = months_count > 0 and months_count <= 12\n    local days_count_valid = days_count\
    \ > 0 and days_count <= 31\n    local months_count_valid = months_count_valid\
    \ and days_count_valid and months_count <= 12\n    local days_count_valid = days_count_valid\
    \ and months_count_valid and days_count <= 31\n    local months_count_valid =\
    \ months_count_valid and days_count_valid and months_count <= 12\n    local days_count_valid\
    \ = days_count_valid and months_count_valid and days_count <= 31\n    local months_count_valid\
    \ = months_count_valid and days_count_valid and months_count <= 12\n    local\
    \ days_count_valid = days_count_valid and months_count_valid and days_count <=\
    \ 31\n    local months_count_valid = months_count_valid and days_count_valid and\
    \ months_count <= 12\n    local days_count_valid = days_count_valid and months_count_valid\
    \ and days_count <= 31\n    local months_count_valid = months_count_valid and\
    \ days_count_valid and months_count <= 12\n    local days_count_valid = days_count_valid\
    \ and months_count_valid and days_count <= 31\n    local months_count_valid =\
    \ months_count_valid and days_count_valid and months_count <= 12\n    local days_count_valid\
    \ = days_count_valid and months_count_valid and days_count <= 31\n    local months_count_valid\
    \ = months_count_valid and days_count_valid and months_count <= 12\n    local\
    \ days_count_valid = days_count_valid and months_count_valid and days_count <=\
    \ 31\n    local months_count_valid = months_count_valid and days_count_valid \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy23zes1_.lua:79: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = \"01\",\n      \
    \  [3] = \"03\",\n        [5] = \"05\",\n        [7] = \"07\",\n        [8] =\
    \ \"08\",\n        [10] = \"10\",\n        [12] = \"12\"\n    }\n    local days\
    \ = {\n        [1] = \"01\",\n        [3] = \"03\",\n        [5] = \"05\",\n \
    \       [7] = \"07\",\n        [8] = \"08\",\n        [10] = \"10\",\n       \
    \ [12] = \"12\"\n    }\n    local months_count = #months\n    local days_count\
    \ = #days\n    local months_count_in_year = months_count / 12\n    local days_count_in_year\
    \ = days_count / 31\n    local months_count_in_month = months_count % 12\n   \
    \ local days_count_in_month = days_count % 31\n    local months_count_in_day =\
    \ months_count % 12\n    local days_count_in_day = days_count % 30\n    local\
    \ months_count_in_year = months_count / 12\n    local days_count_in_year = days_count\
    \ / 31\n    local months_count_in_month = months_count % 12\n    local days_count_in_month\
    \ = days_count % 31\n    local months_count_in_day = months_count % 12\n    local\
    \ days_count_in_day = days_count % 30\n    local months_count_in_year = months_count\
    \ / 12\n    local days_count_in_year = days_count / 31\n    local months_count_in_month\
    \ = months_count % 12\n    local days_count_in_month = days_count % 31\n    local\
    \ months_count_in_day = months_count % 12\n    local days_count_in_day = days_count\
    \ % 30\n    local months_count_in_year = months_count / 12\n    local days_count_in_year\
    \ = days_count / 31\n    local months_count_in_month = months_count % 12\n   \
    \ local days_count_in_month = days_count % 31\n    local months_count_in_day =\
    \ months_count % 12\n    local days_count_in_day = days_count % 30\n    local\
    \ months_count_in_year = months_count / 12\n    local days_count_in_year = days_count\
    \ / 31\n    local months_count_in_month = months_count % 12\n    local days_count_in_month\
    \ = days_count % 31\n    local months_count_in_day = months_count % 12\n    local\
    \ day\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu4hs9z4v.lua:92: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  local months = {\n        [1] = 1,\n        [3] = 1\n    }\n    local days\
    \ = {\n        [5] = 1\n    }\n    local months_count = months[date_month]\n \
    \   local days_count = days[date_day]\n    if date_year and date_month and date_day\
    \ then\n        if months_count and days_count then\n            if months_count\
    \ > 12 or days_count > 31 then\n                return false\n            end\n\
    \            if months_count < 1 or days_count < 1 or months_count > 12 or days_count\
    \ > 30 then\n                return false\n            end\n            if months_count\
    \ < 2 or days_count < 2 or months_count > 12 or days_count > 29 then\n       \
    \         return false\n            end\n            if months_count < 3 or days_count\
    \ < 3 or months_count > 12 or days_count > 31 then\n                return false\n\
    \            end\n            if months_count < 4 or days_count < 4 or months_count\
    \ > 12 or days_count > 30 then\n                return false\n            end\n\
    \            if months_count < 6 or days_count < 6 or months_count > 12 or days_count\
    \ > 31 then\n                return false\n            end\n            if months_count\
    \ < 9 or days_count < 9 or months_count > 12 or days_count > 30 then\n       \
    \         return false\n            end\n            if months_count < 11 or days_count\
    \ < 11 or months_count > 12 or days_count > 31 then\n                return false\n\
    \            end\n            if months_count < 12 or days_count < 12 or months_count\
    \ > 12 or days_count > 31 then\n                return false\n            end\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpus3t7cbv.lua:19:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpus3t7cbv.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpus3t7cbv.lua:69: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day > 31 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 10 and day > 31 then\n        return false\n\
    \    end\n    if month == 12 and day > 31 then\n        return false\n    end\n\
    \    if month == 1 and day > 31 then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdjfsx45c.lua:72:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpdjfsx45c.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_parts == nil then\n        return false\n\
    \    end\n    local days_part1 = tonumber(date_parts[1])\n    local days_part2\
    \ = tonumber(date_parts[2])\n    local days_part3 = tonumber(date_parts[3])\n\
    \    local months_part1 = tonumber(date_parts[4])\n    local months_part2 = tonumber(date_parts[5])\n\
    \    local months_part3 = tonumber(date_parts[6])\n    local years_part1 = tonumber(date_parts[7])\n\
    \    local years_part2 = tonumber(date_parts[8])\n    local years_part3 = tonumber(date_parts[9])\n\
    \    if days_part1 == nil or days_part2 == nil or days_part3 == nil then\n   \
    \     return false\n    end\n    if months_part1 == nil or months_part2 == nil\
    \ or months_part3 == nil then\n        return false\n    end\n    if years_part1\
    \ == nil or years_part2 == nil or years_part3 == nil then\n        return false\n\
    \    end\n    if days_part1 < 1 or days_part1 > 31 or months_part1 < 1 or months_part1\
    \ > 12 or years_part1 < 1 or years_part1 > 9999 then\n        return false\n \
    \   end\n    if months_part1 < 1 or months_part1 > 12 then\n        return false\n\
    \    end\n    if days_part2 < 1 or days_part2 > 31 or months_part2 < 1 or months_part2\
    \ > 12 or years_part2 < 1 or years_part2 > 9999 then\n        return false\n \
    \   end\n    if months_part2 < 1 or months_part2 > 12 then\n        return false\n\
    \    end\n    if days_part3 < 1 or days_part3 > 31 or months_part3 < 1 or months_part3\
    \ > 12 or years_part3 < 1 or years_part3 > 9999 then\n        return false\n \
    \   end\n    if months_part3 < 1 or months_part3 > 12 then\n        return false\n\
    \    end\n    if days_part1 == days_part2 and days_part2 == days_part3 and days_part3\
    \ == days_part1 then\n        return true\n    end\n    if months_part1 == months_part2\
    \ and months_part2 == months_part3 and months_part3 == months_part1 then\n   \
    \     return true\n    end\n    if years_part1 == years_part2 and years_part2\
    \ == years_part3 and years_part3 == years_part1 then\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx4fwd9rf.lua:88: ''end'' expected (to close ''if'' at line
    65) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month and day and year then\n    if month < 1 or\
    \ month > 12 then\n      return false\n    end\n    if day < 1 or day > 31 then\n\
    \      return false\n    end\n    if year < 1 or year > 9999 then\n      return\
    \ false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxnd___65.lua:21:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpxnd___65.lua:21:\
    \ in function 'candidate'\n\t/tmp/tmpxnd___65.lua:37: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = 1,\n        [31] = 31,\n        [59] = 59,\n        [90]\
    \ = 30,\n        [119] = 29\n    }\n    local months_count = months[month]\n \
    \   local days_count = days[day]\n    local year = tonumber(year)\n    local months\
    \ = tonumber(month)\n    local days = tonumber(day)\n    local date_string = date\n\
    \    if date == nil then\n        return false\n    end\n    if date == '' then\n\
    \        return false\n    end\n    if months < 1 or months > 12 then\n      \
    \  return false\n    end\n    if days < 1 or days > 31 then\n        return false\n\
    \    end\n    if months == 1 then\n        if days == 29 then\n            return\
    \ true\n        end\n        return false\n    end\n    if months == 3 then\n\
    \        if days == 30 then\n            return true\n        end\n        return\
    \ false\n    end\n    if months == 5 then\n        if days == 31 then\n      \
    \      return true\n        end\n        return false\n    end\n    if months\
    \ == 7 then\n        if days == 31 then\n            return true\n        end\n\
    \        return false\n    end\n    if months == 8 then\n        if days == 30\
    \ then\n            return true\n        end\n        return false\n    end\n\
    \    if months == 10 then\n        if days == 31 then\n            return true\n\
    \        end\n        return false\n    end\n    if months == 12 then\n      \
    \  if days == 31 then\n            return true\n        end\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpykxdg326.lua:47:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpykxdg326.lua:47:\
    \ in function 'candidate'\n\t/tmp/tmpykxdg326.lua:101: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7ss0feux.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp7ss0feux.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_parts == nil then\n        return false\n\
    \    end\n    local year = tonumber(date_parts[1])\n    local month = tonumber(date_parts[2])\n\
    \    local day = tonumber(date_parts[3])\n    if year == nil or month == nil or\
    \ day == nil then\n        return false\n    end\n    if month < 1 or month >\
    \ 12 then\n        return false\n    end\n    if day < 1 or day > 31 then\n  \
    \      return false\n    end\n    if month == 2 and day > 29 then\n        return\
    \ false\n    end\n    if month == 2 and day < 29 then\n        return false\n\
    \    end\n    if month == 1 and day > 31 then\n        return false\n    end\n\
    \    if month == 1 and day < 31 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 3 and\
    \ day < 30 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 5 and day < 31 then\n \
    \       return false\n    end\n    if month == 7 and day > 30 then\n        return\
    \ false\n    end\n    if month == 7 and day < 30 then\n        return false\n\
    \    end\n    if month == 8 and day > 31 then\n        return false\n    end\n\
    \    if month == 8 and day < 31 then\n        return false\n    end\n    if month\
    \ == 10 and day > 31 then\n        return false\n    end\n    if month == 10 and\
    \ day < 31 then\n        return false\n    end\n    if month == 12 and day > 31\
    \ then\n        return false\n    end\n    if month == 12 and day < 31 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl48rfyi6.lua:89:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpl48rfyi6.lua:89:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n    if day\
    \ > 30 then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr22wby3l.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)') -- mm-dd-yyyy\n  local months = {\n    [1] = 1,\n    [3]\
    \ = 1,\n    [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n\
    \  }\n  local days = {\n    [1] = 1,\n    [31] = 31,\n    [59] = 30,\n    [91]\
    \ = 31,\n  }\n  local months_count = months[month]\n  local days_count = days[day]\n\
    \  local year_count = year == nil and 1 or year\n  return months_count >= 1 and\
    \ months_count <= 12 and days_count >= 1 and days_count <= 31 and year_count >=\
    \ 1 and year_count <= 12\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuun8r4tf.lua:38:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpuun8r4tf.lua:38:\
    \ in function 'candidate'\n\t/tmp/tmpuun8r4tf.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date < 1 then\n      return false\n   end\n   if #date\
    \ > 31 then\n      return false\n   end\n   if #date > 29 then\n      return false\n\
    \   end\n   if #date > 12 then\n      return false\n   end\n   if #date == 0 then\n\
    \      return false\n   end\n   if #date > 1 then\n      return false\n   end\n\
    \   if #date == 1 then\n      return true\n   end\n   if #date == 2 then\n   \
    \   return true\n   end\n   if #date == 3 then\n      return true\n   end\n  \
    \ if #date == 4 then\n      return true\n   end\n   if #date == 5 then\n     \
    \ return true\n   end\n   if #date == 6 then\n      return true\n   end\n   if\
    \ #date == 7 then\n      return true\n   end\n   if #date == 8 then\n      return\
    \ true\n   end\n   if #date == 9 then\n      return true\n   end\n   if #date\
    \ == 10 then\n      return true\n   end\n   if #date == 11 then\n      return\
    \ true\n   end\n   if #date == 12 then\n      return true\n   end\n   return false\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpby67wf88.lua:82:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpby67wf88.lua:82:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if day == nil then\n        return false\n    end\n    if year == nil\
    \ then\n        return false\n    end\n    if month < 1 or month > 12 then\n \
    \       return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 3 and day > 30 then\n        return false\n    end\n\
    \    if month == 4 and day > 31 then\n        return false\n    end\n    if month\
    \ == 6 and day > 30 then\n        return false\n    end\n    if month == 9 and\
    \ day > 31 then\n        return false\n    end\n    if month == 11 and day > 31\
    \ then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp63pvpag1.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmp63pvpag1.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmp63pvpag1.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ 1,\n        [3] = 1\n    }\n    local days = {\n        [1..31] = 1\n    }\n\
    \    local months_30 = {\n        [4..12] = 1\n    }\n    local months_29 = {\n\
    \        [2..12] = 1\n    }\n    local months_31 = {\n        [1..30] = 1\n  \
    \  }\n    local months_30_29 = {\n        [4..12] = 1\n    }\n    local months_31_30\
    \ = {\n        [1..29] = 1\n    }\n    local months_31_30_29 = {\n        [4..12]\
    \ = 1\n    }\n    local months_31_30_29_30 = {\n        [1..29] = 1\n    }\n \
    \   local months_31_30_29_30_29 = {\n        [4..12] = 1\n    }\n    local months_31_30_29_30_29_30\
    \ = {\n        [1..29] = 1\n    }\n    local months_31_30_29_30_29_30_29 = {\n\
    \        [4..12] = 1\n    }\n    local months_31_30_29_30_29_30_29_30 = {\n  \
    \      [1..29] = 1\n    }\n    local months_31_30_29_30_29_30_29_30_29 = {\n \
    \       [4..12] = 1\n    }\n    local months_31_30_29_30_29_30_29_30_29_30 = {\n\
    \        [1..29] = 1\n    }\n    local months_31_30_29_30_29_30_29_30_29_30_29\
    \ = {\n        [4..12] = 1\n    }\n    local months_31_30_29_30_29_30_29_30_29_30_29_30\
    \ = {\n        [1..29] = 1\n    }\n    local months_31_30_29_30_29_30_29_30_29_30_29_30_29\
    \ = {\n        [4..12] = 1\n    }\n    local months_31_30_29_30_29_30_29_30_29_30_29_30_29_30\
    \ = {\n        [1..29] = 1\n    }\n    local months_31_30_29_30_29_30_29_30_29_30_29_30_29_30_29\
    \ = {\n        [4..12] = 1\n    }\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8faaj_7t.lua:24: malformed number near ''1..31''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\tif month == nil or day == nil or year == nil then\n\
    \t\treturn false\n\tend\n\tif month < 1 or month > 12 then\n\t\treturn false\n\
    \tend\n\tif day < 1 or day > 31 then\n\t\treturn false\n\tend\n\tif month == 2\
    \ and day > 29 then\n\t\treturn false\n\tend\n\tif month == 2 and day < 29 then\n\
    \t\treturn false\n\tend\n\tif month == 2 and day == 29 then\n\t\treturn false\n\
    \tend\n\tif month == 2 and day == 30 then\n\t\treturn false\n\tend\n\tif month\
    \ == 2 and day == 31 then\n\t\treturn false\n\tend\n\tif month == 3 and day >\
    \ 31 then\n\t\treturn false\n\tend\n\tif month == 3 and day < 31 then\n\t\treturn\
    \ false\n\tend\n\tif month == 3 and day == 31 then\n\t\treturn false\n\tend\n\t\
    if month == 3 and day == 30 then\n\t\treturn false\n\tend\n\tif month == 3 and\
    \ day == 29 then\n\t\treturn false\n\tend\n\tif month == 3 and day == 28 then\n\
    \t\treturn false\n\tend\n\tif month == 3 and day == 27 then\n\t\treturn false\n\
    \tend\n\tif month == 3 and day == 26 then\n\t\treturn false\n\tend\n\tif month\
    \ == 3 and day == 25 then\n\t\treturn false\n\tend\n\tif month == 3 and day ==\
    \ 24 then\n\t\treturn false\n\tend\n\tif month == 3 and day == 23 then\n\t\treturn\
    \ false\n\tend\n\tif month == 3 and day == 22 then\n\t\treturn false\n\tend\n\t\
    if month == 3 and day == 21 then\n\t\treturn false\n\tend\n\tif month == 3 and\
    \ day == 20 then\n\t\treturn false\n\tend\n\tif month == 3 and day == 19 then\n\
    \t\treturn false\n\tend\n\tif month == 3 and day == 18 then\n\t\treturn false\n\
    \tend\n\tif month == 3 and day == 17 then\n\t\treturn false\n\tend\n\tif month\
    \ == 3 and day == 16 then\n\t\treturn false\n\tend\n\tif month == 3 and day ==\
    \ 15 then\n\t\treturn false\n\tend\n\tif month == 3 and day == 14 then\n\t\treturn\
    \ false\n\tend\n\tif month == 3 and day == 13 then\n\t\treturn false\n\tend\n\t\
    if month == 3 and day == 12 then\n\t\treturn false\n\tend\n\tif month == 3 and\
    \ day == 11 then\n\t\treturn false\n\tend\n\tif month == 3 and day == 10 then\n\
    \t\treturn false\n\tend\n\tif month == 3 and day == \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpru_l83da.lua:117: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n       \
    \ [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] = '12',\n\
    \        [14] = '14',\n        [15] = '15',\n        [16] = '16',\n        [17]\
    \ = '17',\n        [18] = '18',\n        [19] = '19',\n        [20] = '20',\n\
    \        [21] = '21',\n        [22] = '22',\n        [23] = '23',\n        [24]\
    \ = '24',\n        [25] = '25',\n        [26] = '26',\n        [27] = '27',\n\
    \        [28] = '28',\n        [29] = '29',\n        [30] = '30',\n        [31]\
    \ = '31'\n    }\n    local years = {\n        [1] = '00',\n        [2] = '20',\n\
    \        [3] = '21',\n        [4] = '22',\n        [5] = '23',\n        [6] =\
    \ '24',\n        [7] = '25',\n        [8] = '26',\n        [9] = '27',\n     \
    \   [10] = '28',\n        [11] = '29',\n        [12] = '30',\n        [13] = '31'\n\
    \    }\n    local months_length = months[month]\n    local days_length = days[day]\n\
    \    local years_length = years[year]\n    local months_length = months_length\
    \ or 0\n    local days_length = days_length or 0\n    local years_length = years_length\
    \ or 0\n    local months_length = months_length or 0\n    local days_length =\
    \ days_length or 0\n    local years_length = years_length or 0\n    local months_length\
    \ = months_length or 0\n    local days_length = days_length or 0\n    local years_length\
    \ = years_length or 0\n    local months_length = months_length or 0\n    local\
    \ days_length = days_length or 0\n    local years_length = years_length or 0\n\
    \    local months_length = months_length or 0\n    local days_length = days_length\
    \ or 0\n    local years_length = years_length or 0\n    local months_length =\
    \ months_length or 0\n    local days_length = days_length or 0\n    \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp12xwu93_.lua:113: ''end'' expected (to close ''function''
    at line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_parts == nil then\n    return false\n  end\n\
    \  local date_parts = date_parts:match(\"(%d+)-(%d+)-(%d+)\")\n  if date_parts\
    \ == nil then\n    return false\n  end\n  local month = tonumber(date_parts[1])\n\
    \  local day = tonumber(date_parts[2])\n  local year = tonumber(date_parts[3])\n\
    \  if month == nil or day == nil or year == nil then\n    return false\n  end\n\
    \  if month < 1 or month > 12 then\n    return false\n  end\n  if day < 1 or day\
    \ > 31 then\n    return false\n  end\n  if month == 2 then\n    if day > 29 then\n\
    \      return false\n    end\n  end\n  if month == 4 then\n    if day > 30 then\n\
    \      return false\n    end\n  end\n  if month == 6 then\n    if day > 29 then\n\
    \      return false\n    end\n  end\n  if month == 8 then\n    if day > 30 then\n\
    \      return false\n    end\n  end\n  if month == 10 then\n    if day > 30 then\n\
    \      return false\n    end\n  end\n  if month == 12 then\n    if day > 31 then\n\
    \      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp78trtu_.lua:75:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpp78trtu_.lua:75:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil then\n        return false\n   \
    \ end\n    if month < 1 or month > 12 then\n        return false\n    end\n  \
    \  if day == nil then\n        return false\n    end\n    if day < 1 or day >\
    \ 31 then\n        return false\n    end\n    if year == nil then\n        return\
    \ false\n    end\n    if year < 1 or year > 9999 then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbfshad1k.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpbfshad1k.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpbfshad1k.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 4 then\n    if day > 30 then\n      return false\n    end\n  end\n  if month\
    \ == 6 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 9 then\n    if day > 30 then\n      return false\n    end\n  end\n  if month\
    \ == 11 then\n    if day > 30 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  -- Your code here\n  local months\
    \ = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n    [7] = '07',\n  \
    \  [8] = '08',\n    [10] = '10',\n    [12] = '12'\n  }\n  local days = {\n   \
    \ [1] = '01',\n    [3] = '31',\n    [5] = '30',\n    [7] = '29'\n  }\n  local\
    \ years = {\n    [1] = '01',\n    [3] = '20',\n    [5] = '19',\n    [7] = '18',\n\
    \    [8] = '17',\n    [10] = '16',\n    [12] = '15'\n  }\n  local months_count\
    \ = #months\n  local days_count = #days\n  local years_count = #years\n  local\
    \ months_index = #months\n  local days_index = #days\n  local years_index = #years\n\
    \  local months_value = months[month]\n  local days_value = days[day]\n  local\
    \ years_value = years[year]\n  local months_count = #months\n  local days_count\
    \ = #days\n  local years_count = #years\n  local months_index = #months\n  local\
    \ days_index = #days\n  local years_index = #years\n  local months_value = months[month]\n\
    \  local days_value = days[day]\n  local years_value = years[year]\n  local months_count\
    \ = #months\n  local days_count = #days\n  local years_count = #years\n  local\
    \ months_index = #months\n  local days_index = #days\n  local years_index = #years\n\
    \  local months_value = months[month]\n  local days_value = days[day]\n  local\
    \ years_value = years[year]\n  local months_count = #months\n  local days_count\
    \ = #days\n  local years_count = #years\n  local months_index = #months\n  local\
    \ days_index = #days\n  local years_index = #years\n  local months_value = months[month]\n\
    \  local days_value = days[day]\n  local years_value = years[year]\n  local months_count\
    \ = #months\n  local days_count = #days\n  local years_count = #years\n  local\
    \ months_index = #months\n  local days_index = #days\n  local years_index = #years\n\
    \  local months_value = months[\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr9mzfz9j.lua:87: '']'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 29 then\n        return false\n    end\n    if month == 5 and day > 30\
    \ then\n        return false\n    end\n    if month == 7 and day > 29 then\n \
    \       return false\n    end\n    if month == 8 and day > 30 then\n        return\
    \ false\n    end\n    if month == 10 and day > 30 then\n        return false\n\
    \    end\n    if month == 12 and day > 31 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n    if day\
    \ > 30 then\n      return false\n    end\n  end\n  if year < 1900 then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '03',\n        [5] = '05',\n       \
    \ [7] = '07',\n        [8] = '08',\n        [10] = '10',\n        [12] = '12',\n\
    \        [14] = '14',\n        [16] = '16',\n        [18] = '18',\n        [20]\
    \ = '20',\n        [30] = '30',\n        [50] = '50',\n        [60] = '60',\n\
    \        [90] = '90',\n        [120] = '120',\n        [150] = '150',\n      \
    \  [180] = '180',\n        [365] = '365'\n    }\n    local months_count = months[month]\n\
    \    local days_count = days[day]\n    local year_count = years[year]\n    local\
    \ months_count_valid = months_count > 0 and months_count <= 12\n    local days_count_valid\
    \ = days_count > 0 and days_count <= 31\n    local year_count_valid = year_count\
    \ > 0 and year_count <= year_count\n    local months_count_valid_2 = months_count_valid\
    \ and months_count <= 12\n    local days_count_valid_2 = days_count_valid and\
    \ days_count <= 31\n    local year_count_valid_2 = year_count_valid and year_count\
    \ <= year_count\n    local months_count_valid_3 = months_count_valid and months_count\
    \ <= 12\n    local days_count_valid_3 = days_count_valid and days_count <= 30\n\
    \    local year_count_valid_3 = year_count_valid and year_count <= year_count\n\
    \    local months_count_valid_4 = months_count_valid and months_count <= 12\n\
    \    local days_count_valid_4 = days_count_valid and days_count <= 29\n    local\
    \ year_count_valid_4 = year_count_valid and year_count <= year_count\n    local\
    \ months_count_valid_5 = months_count_valid and months_count <= 12\n    local\
    \ days_count_valid_5 = days_count_valid and days_count <= 29\n    local year_count_valid_5\
    \ = year_count_valid and year_count <= year_count\n    local months_count_valid_6\
    \ = months_count_valid and months_count <= 12\n    local days_count_valid_6 =\
    \ days_count_valid and days_count <= 30\n    local year_count_valid_6 = year_count_valid\
    \ and \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3ddll37g.lua:70: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if year < 1000 or year > 9999 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return true\n    end\n    if month == 2 and\
    \ day == 29 then\n        return true\n    end\n    if month == 2 and day == 30\
    \ then\n        return true\n    end\n    if month == 2 and day == 31 then\n \
    \       return true\n    end\n    if month == 3 and day > 31 then\n        return\
    \ false\n    end\n    if month == 3 and day < 31 then\n        return true\n \
    \   end\n    if month == 3 and day == 31 then\n        return true\n    end\n\
    \    if month == 3 and day == 30 then\n        return true\n    end\n    if month\
    \ == 3 and day == 29 then\n        return true\n    end\n    if month == 3 and\
    \ day == 28 then\n        return true\n    end\n    if month == 3 and day == 27\
    \ then\n        return true\n    end\n    if month == 3 and day == 26 then\n \
    \       return true\n    end\n    if month == 3 and day == 25 then\n        return\
    \ true\n    end\n    if month == 3 and day == 24 then\n        return true\n \
    \   end\n    if month == 3 and day == 23 then\n        return true\n    end\n\
    \    if month == 3 and day == 22 then\n        return true\n    end\n    if month\
    \ == 3 and day == 21 then\n        return true\n    end\n    if month == 3 and\
    \ day == 20 then\n        return true\n    end\n    if month == 3 and day == 19\
    \ then\n        return true\n    end\n    if month == 3 and day == 18 then\n \
    \       return true\n    end\n    if month == 3 and day == 17 then\n        return\
    \ true\n    end\n    if month == 3 and day == 16 then\n        return true\n \
    \   end\n    if month == 3 and day == 15 then\n        return true\n    end\n\
    \    if month == 3 and day == 14 then\n        return true\n    end\n    if month\
    \ == 3 and day == 13 then\n        return true\n    end\n    if month == 3 and\
    \ day == 12 then\n        return true\n    end\n    if month == 3 and day == 11\
    \ then\n        return true\n    end\n    if month == 3 and day == 10 then\n \
    \       return true\n    end\n    if month == 3 and day == 9 then\n        return\
    \ true\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp40ty4w4l.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 3 and\
    \ day > 30 then\n        return false\n    end\n    if month == 3 and day < 30\
    \ then\n        return false\n    end\n    if month == 4 and day > 31 then\n \
    \       return false\n    end\n    if month == 4 and day < 31 then\n        return\
    \ false\n    end\n    if month == 5 and day > 31 then\n        return false\n\
    \    end\n    if month == 5 and day < 31 then\n        return false\n    end\n\
    \    if month == 7 and day > 31 then\n        return false\n    end\n    if month\
    \ == 7 and day < 31 then\n        return false\n    end\n    if month == 8 and\
    \ day > 31 then\n        return false\n    end\n    if month == 8 and day < 31\
    \ then\n        return false\n    end\n    if month == 10 and day > 31 then\n\
    \        return false\n    end\n    if month == 10 and day < 31 then\n       \
    \ return false\n    end\n    if month == 11 and day > 30 then\n        return\
    \ false\n    end\n    if month == 11 and day < 30 then\n        return false\n\
    \    end\n    if month == 12 and day > 31 then\n        return false\n    end\n\
    \    if month == 12 and day < 31 then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp68y57i8n.lua:92:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp68y57i8n.lua:92:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 6 and day > 30\
    \ then\n        return false\n    end\n    if month == 9 and day > 31 then\n \
    \       return false\n    end\n    if month == 11 and day > 30 then\n        return\
    \ false\n    end\n    if month == 1 and day > 31 then\n        return false\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpezsq05uq.lua:66:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpezsq05uq.lua:66:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  if date_year and date_month and date_day then\n        if date_month < 1 or\
    \ date_month > 12 or date_day < 1 or date_day > 31 then\n            return false\n\
    \        end\n        if date_month == 1 or date_month == 3 or date_month == 5\
    \ or\n            date_month == 7 or\n            date_month == 8 or\n       \
    \     date_month == 10 or\n            date_month == 12 then\n            if date_day\
    \ < 1 or date_day > 30 then\n                return false\n            end\n \
    \       elseif date_month == 4 or date_month == 6 or\n            date_month ==\
    \ 9 or date_month == 11\n            then\n            if date_day < 1 or date_day\
    \ > 29 then\n                return false\n            end\n        elseif date_month\
    \ == 2 then\n            if date_day < 1 or date_day > 29 then\n             \
    \   return false\n            end\n        end\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpkbfsojxm.lua:19:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpkbfsojxm.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpkbfsojxm.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if year < 1000 or year > 9999 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if day > 30 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if date_array == nil then\n    return false\n  end\n\
    \  local month = tonumber(date_array[1])\n  local day = tonumber(date_array[2])\n\
    \  local year = tonumber(date_array[3])\n  if month < 1 or month > 12 then\n \
    \   return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if month == 2 then\n    if day > 29 then\n      return false\n    end\n  else\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  if year < 1900 then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpfdwuv4k6.lua:23:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmpfdwuv4k6.lua:23: in function 'candidate'\n\t/tmp/tmpfdwuv4k6.lua:50: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = 1,\n        [31] = 31,\n        [59] = 59,\n        [90]\
    \ = 30,\n        [120, 31] = 29,\n        [152] = 29\n    }\n    local months_count\
    \ = #months\n    local days_count = #days\n    local months_count_in_string =\
    \ #date % months_count_in_string\n    local days_count_in_string = #date % days_count_in_string\n\
    \    local months_count_in_string_2 = months_count_in_string - 1\n    local days_count_in_string_2\
    \ = days_count_in_string - 1\n    local months_count_in_string_3 = months_count_in_string\
    \ - 2\n    local days_count_in_string_3 = days_count_in_string - 2\n    local\
    \ months_count_in_string_4 = months_count_in_string - 3\n    local days_count_in_string_4\
    \ = days_count_in_string - 3\n    local months_count_in_string_5 = months_count_in_string\
    \ - 4\n    local days_count_in_string_5 = days_count_in_string - 4\n    local\
    \ months_count_in_string_6 = months_count_in_string - 5\n    local days_count_in_string_6\
    \ = days_count_in_string - 5\n    local months_count_in_string_7 = months_count_in_string\
    \ - 6\n    local days_count_in_string_7 = days_count_in_string - 6\n    local\
    \ months_count_in_string_8 = months_count_in_string - 7\n    local days_count_in_string_8\
    \ = days_count_in_string - 7\n    local months_count_in_string_9 = months_count_in_string\
    \ - 8\n    local days_count_in_string_9 = days_count_in_string - 8\n    local\
    \ months_count_in_string_10 = months_count_in_string - 9\n    local days_count_in_string_10\
    \ = days_count_in_string - 9\n    local months_count_in_string_11 = months_count_in_string\
    \ - 10\n    local days_count_in_string_11 = days_count_in_string - 10\n    local\
    \ months_count_in_string_12 = months_count_in_string - 11\n    local days_count_in_string_12\
    \ = days_count_in_string - 11\n    local months_count_in_string_13 = months_count_in_string\
    \ - 12\n    local days_count_in_string_13\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx6o5q0zu.lua:33: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  local months = {\n    [1] = 1,\n    [3] = 1\n  }\n \
    \ local days = {\n    [1,3,5,7,8,10,12] = 1\n  }\n  local months_2 = {\n    [4,6,9,11]\
    \ = 1\n  }\n  local days_2 = {\n    [1,3,5,7,8,10,12] = 1\n  }\n  local months_3\
    \ = {\n    [1,2] = 1\n  }\n  local days_3 = {\n    [1,3] = 1\n  }\n  local months_4\
    \ = {\n    [1,2] = 1\n  }\n  local days_4 = {\n    [1,3] = 1\n  }\n  local months_5\
    \ = {\n    [1,2] = 1\n  }\n  local days_5 = {\n    [1,3] = 1\n  }\n  local months_6\
    \ = {\n    [1,2] = 1\n  }\n  local days_6 = {\n    [1,3] = 1\n  }\n  local months_7\
    \ = {\n    [1,2] = 1\n  }\n  local days_7 = {\n    [1,3] = 1\n  }\n  local months_8\
    \ = {\n    [1,2] = 1\n  }\n  local days_8 = {\n    [1,3] = 1\n  }\n  local months_9\
    \ = {\n    [1,2] = 1\n  }\n  local days_9 = {\n    [1,3] = 1\n  }\n  local months_10\
    \ = {\n    [1,2] = 1\n  }\n  local days_10 = {\n    [1,3] = 1\n  }\n  local months_11\
    \ = {\n    [1,2] = 1\n  }\n  local days_11 = {\n    [1,3] = 1\n  }\n  local months_12\
    \ = {\n    [1,2] = 1\n  }\n  local days_12 = {\n    [1,3] = 1\n  }\n  local months_13\
    \ = {\n    [1,2] = 1\n  }\n  local days_13 = {\n    [1,3] = 1\n  }\n  local months_14\
    \ = {\n    [1,2] = 1\n  }\n  local days_14 = {\n    [1,3] = 1\n  }\n  local months_15\
    \ = {\n    [1,2] = 1\n  }\n  local days_15 = {\n    [1,3] = 1\n  }\n  local months_16\
    \ = {\n    [1,2] = 1\n  }\n  local days_16 = {\n    [1,3] = 1\n  }\n  local months_17\
    \ = {\n    [1,2] = 1\n  }\n  local days_17 = {\n    [1,3] = 1\n  }\n  local months_18\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6f5jy6l4.lua:25: '']'' expected near '',''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  local months = {\n    [1] = 1,\n    [3] = 1,\n   \
    \ [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [1] = 1,\n    [31] = 31,\n    [59] = 30,\n  }\n  local months_count\
    \ = months[month]\n  if months_count == nil then\n    return false\n  end\n  local\
    \ days_count = days[day]\n  if days_count == nil then\n    return false\n  end\n\
    \  local year_count = year\n  if year_count == nil then\n    return false\n  end\n\
    \  if months_count > 12 or days_count > 31 then\n    return false\n  end\n  if\
    \ months_count < 1 or days_count < 1 or year_count < 1900 then\n    return false\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsyrlkar6.lua:61:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpsyrlkar6.lua:61:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0r2m38pp.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\tlocal months = {\n\t\t[1] = 1,\n\t\t[3] = 1,\n\t\t\
    [5] = 1,\n\t\t[7] = 1,\n\t\t[8] = 1,\n\t\t[10] = 1,\n\t\t[12] = 1,\n\t}\n\tlocal\
    \ days = {\n\t\t[1] = 1,\n\t\t[2] = 2,\n\t\t[3] = 3,\n\t\t[4] = 4,\n\t\t[5] =\
    \ 5,\n\t\t[6] = 6,\n\t\t[7] = 7,\n\t\t[8] = 8,\n\t\t[9] = 9,\n\t\t[10] = 10,\n\
    \t\t[11] = 11,\n\t\t[12] = 12,\n\t}\n\tlocal years = {\n\t\t[1] = 2000,\n\t\t\
    [2] = 2001,\n\t\t[3] = 2002,\n\t\t[4] = 2003,\n\t\t[5] = 2004,\n\t\t[6] = 2005,\n\
    \t\t[7] = 2006,\n\t\t[8] = 2007,\n\t\t[9] = 2008,\n\t\t[10] = 2009,\n\t\t[11]\
    \ = 2010,\n\t\t[12] = 2011,\n\t}\n\tlocal months_count = months[date_parts[1]]\n\
    \tlocal days_count = days[date_parts[2]]\n\tlocal year_count = years[date_parts[3]]\n\
    \tlocal months_valid = months_count > 0 and months_count <= 12\n\tlocal days_valid\
    \ = days_count > 0 and days_count <= 31\n\tlocal year_valid = year_count > 0 and\
    \ year_count <= 12\n\tlocal months_valid = months_valid and days_valid and year_valid\n\
    \treturn months_valid and days_valid and year_valid\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo4ngazb6.lua:60:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpo4ngazb6.lua:60:\
    \ in function 'candidate'\n\t/tmp/tmpo4ngazb6.lua:70: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_array = string.gmatch(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_array == nil then\n        return false\n\
    \    end\n    local days_array = date_array[2]\n    local months_array = date_array[1]\n\
    \    local years_array = date_array[3]\n    local days_length = days_array:len()\n\
    \    local months_length = months_array:len()\n    local years_length = years_array:len()\n\
    \    if days_length < 1 or days_length > 31 then\n        return false\n    end\n\
    \    if months_length < 1 or months_length > 12 then\n        return false\n \
    \   end\n    if years_length < 1 or years_length > 4 then\n        return false\n\
    \    end\n    if days_length == 1 and months_length == 1 and years_length == 1\
    \ then\n        return true\n    end\n    if days_length == 2 then\n        if\
    \ months_length == 2 then\n            if years_length == 2 then\n           \
    \     if days_array[1] == 2 or days_array[1] == 4 or days_array[1] == 6 or days_array[1]\
    \ == 9 or days_array[1] == 11 then\n                    return true\n        \
    \        end\n            end\n        end\n    end\n    return false\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8b6vjr6l.lua:23:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmp8b6vjr6l.lua:23: in function 'candidate'\n\t/tmp/tmp8b6vjr6l.lua:56: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if day > 30 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil then\n    return false\n  end\n  if\
    \ day == nil then\n    return false\n  end\n  if year == nil then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if day < 1 or day > 31 then\n    return false\n  end\n  if month == 2 and day\
    \ > 29 then\n    return false\n  end\n  if month == 3 and day > 30 then\n    return\
    \ false\n  end\n  if month == 4 and day > 31 then\n    return false\n  end\n \
    \ if month == 6 and day > 30 then\n    return false\n  end\n  if month == 9 and\
    \ day > 31 then\n    return false\n  end\n  if month == 11 and day > 30 then\n\
    \    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprgv3htkc.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmprgv3htkc.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmprgv3htkc.lua:59: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 31 then\n        return false\n    end\n    if month == 4 and\
    \ day > 30 then\n        return false\n    end\n    if month == 6 and day > 29\
    \ then\n        return false\n    end\n    if month == 9 and day > 31 then\n \
    \       return false\n    end\n    if month == 11 and day > 30 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpey77wr6q.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpey77wr6q.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpey77wr6q.lua:53: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if #date == 0 then\n      return false\n   end\n   if #date\
    \ < 1 then\n      return false\n   end\n   if #date > 31 then\n      return false\n\
    \   end\n   if #date > 29 then\n      return false\n   end\n   if #date > 12 then\n\
    \      return false\n   end\n   local months = {\n      [1] = '01',\n      [3]\
    \ = '03',\n      [5.] = '05',\n      [7.] = '07',\n      [8.] = '08',\n      [10.]\
    \ = '10',\n      [12.] = '12'\n   }\n   local day = tonumber(date:sub(1,2))\n\
    \   local month = tonumber(date:sub(-2,-1))\n   local year = tonumber(date:sub(-4,-1))\n\
    \   if month < 1 or month > 12 then\n      return false\n   end\n   if day < 1\
    \ or day > 31 then\n      return false\n   end\n   if months[month] ~= date then\n\
    \      return false\n   end\n   if year < 1 or year > 9999 then\n      return\
    \ false\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uny47z5.lua:67:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4uny47z5.lua:67:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil then\n    return false\n  end\n  if\
    \ month < 1 or month > 12 then\n    return false\n  end\n  if day == nil then\n\
    \    return false\n  end\n  if day < 1 or day > 31 then\n    return false\n  end\n\
    \  if year == nil then\n    return false\n  end\n  if year < 1 or year > 9999\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi3t02mdq.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpi3t02mdq.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpi3t02mdq.lua:44: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 4 and day > 30 then\n        return false\n    end\n    if month == 6 and\
    \ day > 30 then\n        return false\n    end\n    if month == 9 and day > 30\
    \ then\n        return false\n    end\n    if month == 11 and day > 30 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil then\n    return false\n  end\n  if\
    \ day == nil then\n    return false\n  end\n  if year == nil then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if day < 1 or day > 31 then\n    return false\n  end\n  if month == 2 then\n\
    \    if day > 29 then\n      return false\n    end\n  end\n  if month == 4 then\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  if month == 6 then\n\
    \    if day > 29 then\n      return false\n    end\n  end\n  if month == 9 then\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  if month == 11 then\n\
    \    if day > 30 then\n      return false\n    end\n  end\n  return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpeakdpgfe.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpeakdpgfe.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpeakdpgfe.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if date_parts == nil then\n        return false\n\
    \    end\n    local month = tonumber(date_parts[1])\n    local day = tonumber(date_parts[2])\n\
    \    local year = tonumber(date_parts[3])\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    else\n        if day > 30 then\n          \
    \  return false\n        end\n    end\n    if year < 1900 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdav08v2b.lua:26:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpdav08v2b.lua:26:\
    \ in function 'candidate'\n\t/tmp/tmpdav08v2b.lua:50: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjwhb6cf9.lua:121: ''end'' expected (to close ''if'' at line
    119) near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n    return\
    \ true\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphrr_iy7p.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmphrr_iy7p.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwn64ra1v.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpwn64ra1v.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpwn64ra1v.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day == 29 then\n        return false\n    end\n    if month == 2 and day ==\
    \ 30 then\n        return false\n    end\n    if month == 2 and day == 31 then\n\
    \        return false\n    end\n    if month == 2 and day == 32 then\n       \
    \ return false\n    end\n    if month == 2 and day == 33 then\n        return\
    \ false\n    end\n    if month == 2 and day == 34 then\n        return false\n\
    \    end\n    if month == 2 and day == 35 then\n        return false\n    end\n\
    \    if month == 2 and day == 36 then\n        return false\n    end\n    if month\
    \ == 2 and day == 37 then\n        return false\n    end\n    if month == 2 and\
    \ day == 38 then\n        return false\n    end\n    if month == 2 and day ==\
    \ 39 then\n        return false\n    end\n    if month == 2 and day == 40 then\n\
    \        return false\n    end\n    if month == 2 and day == 41 then\n       \
    \ return false\n    end\n    if month == 2 and day == 42 then\n        return\
    \ false\n    end\n    if month == 2 and day == 43 then\n        return false\n\
    \    end\n    if month == 2 and day == 44 then\n        return false\n    end\n\
    \    if month == 2 and day == 45 then\n        return false\n    end\n    if month\
    \ == 2 and day == 46 then\n        return false\n    end\n    if month == 2 and\
    \ day == 47 then\n        return false\n    end\n    if month == 2 and day ==\
    \ 48 then\n        return false\n    end\n    if month == 2 and day == 49 then\n\
    \        return false\n    end\n    if month == 2 and day == 50 then\n       \
    \ return false\n    end\n    if month == 2 and day == 51 then\n        return\
    \ false\n    end\n    if month == 2 and day == 52 then\n        return false\n\
    \    end\n    if month == 2 and day == 53 then\n        return false\n    end\n\
    \    if month == 2 and day == 54 then\n        return false\n    end\n    if month\
    \ == 2 and day == 55 then\n        return false\n    end\n    if month == 2 and\
    \ day == 56 then\n        return false\n    end\n    if month == 2 and day ==\
    \ \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp449dn_oi.lua:120: ''then'' expected near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local days = {\n        [1]\
    \ = '01',\n        [3] = '31',\n        [5] = '30',\n        [7] = '29',\n   \
    \     [8] = '28',\n        [10] = '31',\n        [12] = '30'\n    }\n    local\
    \ months_count = #months\n    local days_count = #days\n    local months_index\
    \ = #date_parts[2]\n    local days_index = #date_parts[3]\n    local years_index\
    \ = #date_parts[4]\n    local months_value = months[months_index]\n    local days_value\
    \ = days[days_index]\n    local years_value = years_index\n    if date_parts[1]\
    \ ~= nil then\n        months_value = months[months_index]\n    end\n    if date_parts[2]\
    \ ~= nil then\n        days_value = days[days_index]\n    end\n    if date_parts[3]\
    \ ~= nil then\n        years_value = years_index\n    end\n    if months_value\
    \ ~= nil and days_value ~= nil and years_value ~= nil then\n        if months_value\
    \ < 1 or months_value > 12 then\n            return false\n        end\n     \
    \   if days_value < 1 or days_value > 31 then\n            return false\n    \
    \    end\n        if years_value < 1 or years_value > 12 then\n            return\
    \ false\n        end\n        if months_value == 2 and days_value == 29 and years_value\
    \ == 20 then\n            return true\n        end\n        if months_value ==\
    \ 2 and days_value == 29 and years_value == 19 then\n            return true\n\
    \        end\n        if months_value == 2 and days_value == 29 and years_value\
    \ == 18 then\n            return true\n        end\n        if months_value ==\
    \ 2 and days_value == 29 and years_value == 17 then\n            return true\n\
    \        end\n        if months_value == 2 and days_value == 29 and years_value\
    \ == 16 then\n            return true\n        end\n        if months_value ==\
    \ 2 and days_value == 29 and years_value == 15 then\n            return true\n\
    \        end\n        if months_value == 2 and days_value == 29 and years_value\
    \ == 14 then\n            return true\n        end\n        if months_value ==\
    \ 2 and days_value == 29 and years_value == 13 then\n            return true\n\
    \        end\n        if months_value == 2 and days_value == 29 and year\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbw55_2p8.lua:90: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 1 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 3 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcbwys1dh.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpcbwys1dh.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpcbwys1dh.lua:60: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if year < 1 or year > 9999 then\n        return false\n    end\n    if month\
    \ == 2 and day > 29 then\n        return false\n    end\n    return true\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8qb7z_41.lua:51:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8qb7z_41.lua:51:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 and day > 29 then\n    return false\n  end\n  if month > 2 then\n    return\
    \ false\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpp2jd1mi3.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpp2jd1mi3.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpp2jd1mi3.lua:41: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = 1,\n    [3] = 1,\n   \
    \ [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [4] = 1,\n    [6] = 1,\n    [9] = 1,\n    [11] = 1,\n  }\n  local\
    \ months_count = months[month]\n  local days_count = days[month]\n  if months_count\
    \ < 1 or months_count > 12 then\n    return false\n  end\n  if days_count < 1\
    \ or days_count > 31 then\n    return false\n  end\n  if month == 2 then\n   \
    \ if days_count < 1 or days_count > 29 then\n      return false\n    end\n  else\n\
    \    if days_count < 1 or days_count > 30 then\n      return false\n    end\n\
    \  end\n  if year < 1000 or year > 9999 then\n    return false\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe_y9w4im.lua:37:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpe_y9w4im.lua:37:\
    \ in function 'candidate'\n\t/tmp/tmpe_y9w4im.lua:61: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil then\n        return false\n \
    \   end\n    if day == nil then\n        return false\n    end\n    if year ==\
    \ nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 then\n        if day > 29 then\n         \
    \   return false\n        end\n    end\n    if month == 4 then\n        if day\
    \ > 30 then\n            return false\n        end\n    end\n    if month == 6\
    \ then\n        if day > 29 then\n            return false\n        end\n    end\n\
    \    if month == 9 then\n        if day > 30 then\n            return false\n\
    \        end\n    end\n    if month == 11 then\n        if day > 30 then\n   \
    \         return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  month = tonumber(month)\n  day = tonumber(day)\n  year\
    \ = tonumber(year)\n  if month == nil or day == nil or year == nil then\n    return\
    \ false\n  end\n  if month < 1 or month > 12 then\n    return false\n  end\n \
    \ if day < 1 or day > 31 then\n    return false\n  end\n  if month == 2 and day\
    \ > 29 then\n    return false\n  end\n  if month == 2 and day < 29 then\n    return\
    \ false\n  end\n  if month == 3 and day > 30 then\n    return false\n  end\n \
    \ if month == 3 and day < 30 then\n    return false\n  end\n  if month == 4 and\
    \ day > 31 then\n    return false\n  end\n  if month == 4 and day < 31 then\n\
    \    return false\n  end\n  if month == 5 and day > 31 then\n    return false\n\
    \  end\n  if month == 5 and day < 31 then\n    return false\n  end\n  if month\
    \ == 7 and day > 30 then\n    return false\n  end\n  if month == 7 and day < 30\
    \ then\n    return false\n  end\n  if month == 8 and day > 31 then\n    return\
    \ false\n  end\n  if month == 8 and day < 31 then\n    return false\n  end\n \
    \ if month == 10 and day > 31 then\n    return false\n  end\n  if month == 10\
    \ and day < 31 then\n    return false\n  end\n  if month == 12 and day > 31 then\n\
    \    return false\n  end\n  if month == 12 and day < 31 then\n    return false\n\
    \  end\n  if month == 1 and day > 31 then\n    return false\n  end\n  if month\
    \ == 1 and day < 31 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa6ymdcmw.lua:92:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpa6ymdcmw.lua:92:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 3 and day > 30 then\n        return false\n    end\n    if month == 4 and\
    \ day > 31 then\n        return false\n    end\n    if month == 5 and day > 31\
    \ then\n        return false\n    end\n    if month == 7 and day > 31 then\n \
    \       return false\n    end\n    if month == 8 and day > 31 then\n        return\
    \ false\n    end\n    if month == 10 and day > 31 then\n        return false\n\
    \    end\n    if month == 12 and day > 31 then\n        return false\n    end\n\
    \    if month == 1 and day > 31 then\n        return false\n    end\n    return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbkgzqmdf.lua:72:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbkgzqmdf.lua:72:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\tif month < 1 or month > 12 then return false end\n\t\
    if day < 1 or day > 31 then return false end\n\tif year < 1 or year > 9999 then\
    \ return false end\n\treturn true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcmmlp_rn.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpcmmlp_rn.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpcmmlp_rn.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if year < 1 or year > 9999 then\n        return false\n    end\n    if month\
    \ == 2 and day == 29 then\n        return false\n    end\n    if month == 2 and\
    \ day == 30 then\n        return false\n    end\n    if month == 3 and day ==\
    \ 31 then\n        return false\n    end\n    if month == 4 and day == 30 then\n\
    \        return false\n    end\n    if month == 4 and day == 31 then\n       \
    \ return false\n    end\n    if month == 5 and day == 31 then\n        return\
    \ false\n    end\n    if month == 6 and day == 30 then\n        return false\n\
    \    end\n    if month == 6 and day == 31 then\n        return false\n    end\n\
    \    if month == 7 and day == 31 then\n        return false\n    end\n    if month\
    \ == 8 and day == 31 then\n        return false\n    end\n    if month == 9 and\
    \ day == 31 then\n        return false\n    end\n    if month == 10 and day ==\
    \ 31 then\n        return false\n    end\n    if month == 11 and day == 31 then\n\
    \        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdirarlcx.lua:20:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpdirarlcx.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmpdirarlcx.lua:74: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 2 and\
    \ day > 30 then\n        return false\n    end\n    if month == 2 and day < 30\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpr22wby3l.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmc77zblh.lua:53:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpmc77zblh.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 8 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 10 then\n        if day > 31 then\n            return\
    \ false\n        end\n    end\n    if month == 12 then\n        if day > 31 then\n\
    \            return false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n   if date == nil then\n      return\
    \ false\n   end\n   if date == '' then\n      return false\n   end\n   local date_array\
    \ = string.gmatch(date, \"(%d+)-(%d+)-(%d+)\")\n   if date_array == nil then\n\
    \      return false\n   end\n   if date_array[3] < 1 or date_array[3] > 12 then\n\
    \      return false\n   end\n   if date_array[2] < 1 or date_array[2] > 31 then\n\
    \      return false\n   end\n   if date_array[1] < 1 or date_array[1] > 12 then\n\
    \      return false\n   end\n   return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprc74vewm.lua:29:\
    \ attempt to index local 'date_array' (a function value)\nstack traceback:\n\t\
    /tmp/tmprc74vewm.lua:29: in function 'candidate'\n\t/tmp/tmprc74vewm.lua:44: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\tlocal months = {\n\t\t[1] = '01',\n\t\t[3] = '03',\n\
    \t\t[5] = '05',\n\t\t[7] = '07',\n\t\t[8] = '08',\n\t\t[10] = '10',\n\t\t[12]\
    \ = '12'\n\t}\n\tlocal days = {\n\t\t[1] = '01',\n\t\t[2] = '02',\n\t\t[3] = '03',\n\
    \t\t[4] = '04',\n\t\t[5] = '05',\n\t\t[6] = '06',\n\t\t[7] = '07',\n\t\t[8] =\
    \ '08',\n\t\t[9] = '09',\n\t\t[10] = '10',\n\t\t[11] = '11',\n\t\t[12] = '12',\n\
    \t\t[13] = '13',\n\t\t[14] = '14',\n\t\t[15] = '15',\n\t\t[16] = '16',\n\t\t[17]\
    \ = '17',\n\t\t[18] = '18',\n\t\t[19] = '19',\n\t\t[20] = '20',\n\t\t[21] = '21',\n\
    \t\t[22] = '22',\n\t\t[23] = '23',\n\t\t[24] = '24',\n\t\t[25] = '25',\n\t\t[26]\
    \ = '26',\n\t\t[27] = '27',\n\t\t[28] = '28',\n\t\t[29] = '29',\n\t\t[30] = '30',\n\
    \t\t[31] = '31'\n\t}\n\tlocal months_count = months[month]\n\tlocal days_count\
    \ = days[day]\n\tlocal months_count_valid = months_count and months_count > 0\
    \ and months_count <= 12\n\tlocal days_count_valid = days_count and days_count\
    \ > 0 and days_count <= 31\n\tlocal months_count_valid = months_count_valid and\
    \ days_count_valid and days_count <= 30\n\tlocal months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 29\n\tlocal months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 28\n\tlocal months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 27\n\tlocal months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 26\n\tlocal months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 25\n\tlocal months_count_valid = months_count_valid\
    \ and days_count_valid and days_count <= 24\n\tlocal months_count_\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyu01oc04.lua:96: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil then\n        return false\n \
    \   end\n    if day == nil then\n        return false\n    end\n    if year ==\
    \ nil then\n        return false\n    end\n    if month < 1 or month > 12 then\n\
    \        return false\n    end\n    if day < 1 or day > 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 29 then\n        return false\n\
    \    end\n    if month == 3 and day > 30 then\n        return false\n    end\n\
    \    if month == 4 and day > 31 then\n        return false\n    end\n    if month\
    \ == 5 and day > 31 then\n        return false\n    end\n    if month == 7 and\
    \ day > 31 then\n        return false\n    end\n    if month == 8 and day > 31\
    \ then\n        return false\n    end\n    if month == 10 and day > 31 then\n\
    \        return false\n    end\n    if month == 12 and day > 31 then\n       \
    \ return false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaug16ija.lua:75:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpaug16ija.lua:75:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_parts = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if date_parts == nil then\n        return false\n\
    \    end\n    local days_months = {\n        [1] = 28,\n        [3] = 01,\n  \
    \      [5] = 04,\n        [7] = 06,\n        [8] = 09,\n        [10] = 11,\n \
    \       [12] = 02,\n    }\n    local days_months_count = #days_months\n    local\
    \ days_months_index = #days_months\n    local days_months_value = days_months[date_parts[1]]\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local days_months_value = days_months_value + days_months_value * days_months_count\n\
    \    local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb64725ix.lua:75: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  month = tonumber(month)\n  day = tonumber(day)\n \
    \ year = tonumber(year)\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  if month < 1 or month > 12 then\n    return false\n\
    \  end\n  if day < 1 or day > 31 then\n    return false\n  end\n  if month ==\
    \ 2 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 4 then\n    if day > 30 then\n      return false\n    end\n  end\n  if month\
    \ == 6 then\n    if day > 29 then\n      return false\n    end\n  end\n  if month\
    \ == 9 then\n    if day > 30 then\n      return false\n    end\n  end\n  if month\
    \ == 11 then\n    if day > 30 then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  local months = {\n    [1] = 1,\n    [3] = 1,\n   \
    \ [5] = 1,\n    [7] = 1,\n    [8] = 1,\n    [10] = 1,\n    [12] = 1,\n  }\n  local\
    \ days = {\n    [1] = 1,\n    [2] = 1,\n    [4] = 1,\n    [6] = 1,\n    [9] =\
    \ 1,\n    [11] = 1,\n  }\n  local months_count = months[month]\n  if months_count\
    \ == nil then\n    return false\n  end\n  local days_count = days[day]\n  if days_count\
    \ == nil then\n    return false\n  end\n  local year_count = year - 2000\n  if\
    \ year_count == nil then\n    return false\n  end\n  if months_count > 12 or days_count\
    \ > 31 then\n    return false\n  end\n  if months_count < 1 or days_count < 1\
    \ or year_count < 1 then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6rycmuo5.lua:64:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6rycmuo5.lua:64:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 4 or month == 6 or month == 9 or month == 11 and day > 30 then\n        return\
    \ false\n    end\n    if month == 1 and day > 31 then\n        return false\n\
    \    end\n    if month == 3 and day > 31 then\n        return false\n    end\n\
    \    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9g92fg06.lua:53:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9g92fg06.lua:53:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8kmt7f95.lua:44:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp8kmt7f95.lua:44:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local months = {\n        [1] =\
    \ '01',\n        [3] = '03',\n        [5] = '05',\n        [7] = '07',\n     \
    \   [8] = '08',\n        [10] = '10',\n        [12] = '12'\n    }\n    local days\
    \ = {\n        [1] = '01',\n        [3] = '31',\n        [5] = '30',\n       \
    \ [7] = '29',\n        [8] = '28',\n        [10] = '31',\n        [12] = '30'\n\
    \    }\n    local years = {\n        [1] = '00',\n        [3] = '20',\n      \
    \  [5] = '19',\n        [7] = '18',\n        [8] = '17',\n        [10] = '16',\n\
    \        [12] = '15'\n    }\n    local months_length = #months\n    local days_length\
    \ = #days\n    local years_length = #years\n    local months_index = -1\n    local\
    \ days_index = -1\n    local years_index = -1\n    local months_value = months[month]\n\
    \    local days_value = days[day]\n    local years_value = years[year]\n    local\
    \ months_length = months_length\n    local days_length = days_length\n    local\
    \ years_length = years_length\n    local months_index = months_index\n    local\
    \ days_index = days_index\n    local years_index = years_index\n    local months_value\
    \ = months_value\n    local days_value = days_value\n    local years_value = years_value\n\
    \    local months_length = months_length\n    local days_length = days_length\n\
    \    local years_length = years_length\n    local months_index = months_index\n\
    \    local days_index = days_index\n    local years_index = years_index\n    local\
    \ months_value = months_value\n    local days_value = days_value\n    local years_value\
    \ = years_value\n    local months_length = months_length\n    local days_length\
    \ = days_length\n    local years_length = years_length\n    local months_index\
    \ = months_index\n    local days_index = days_index\n    local years_index = years_index\n\
    \    local months_value = months_value\n    local days_value = days_value\n  \
    \  local years_value = years_value\n    local months_length = months_length\n\
    \    local days_length = days_length\n    local years_length = years_length\n\
    \    local months_index = months_index\n    local days_index = days_index\n  \
    \  \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpps5e0ylx.lua:110: ''end'' expected (to close ''function''
    at line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    local months = {\n        [1] = '01',\n        [3]\
    \ = '03',\n        [5] = '05',\n        [7] = '07',\n        [8] = '08',\n   \
    \     [10] = '10',\n        [12] = '12'\n    }\n    local days = {\n        [1]\
    \ = '01',\n        [3] = '31',\n        [5] = '30',\n        [7] = '29'\n    }\n\
    \    local months_count = months[month]\n    local days_count = days[day]\n  \
    \  local months_count_valid = months_count and months_count > 1 and months_count\
    \ <= 12\n    local days_count_valid = days_count and days_count > 1 and days_count\
    \ <= 31\n    local months_count_valid_2 = months_count and months_count > 4 and\
    \ months_count <= 12\n    local days_count_valid_2 = days_count and days_count\
    \ > 4 and days_count <= 30\n    local months_count_valid_3 = months_count and\
    \ months_count > 6 and months_count <= 12\n    local days_count_valid_3 = days_count\
    \ and days_count > 6 and days_count <= 29\n    local months_count_valid_4 = months_count\
    \ and months_count > 9 and months_count <= 12\n    local days_count_valid_4 =\
    \ days_count and days_count > 9 and days_count <= 28\n    local months_count_valid_5\
    \ = months_count and months_count > 11 and months_count <= 12\n    local days_count_valid_5\
    \ = days_count and days_count > 11 and days_count <= 31\n    local months_count_valid_6\
    \ = months_count and months_count > 12 and months_count <= 12\n    local days_count_valid_6\
    \ = days_count and days_count > 12 and days_count <= 30\n    return months_count_valid\
    \ and days_count_valid and months_count_valid_2 and days_count_valid_2 and months_count_valid_3\
    \ and days_count_valid_3 and months_count_valid_4 and days_count_valid_4 and months_count_valid_5\
    \ and days_count_valid_5 and months_count_valid_6 and days_count_valid_6\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpge4hzbk7.lua:55:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpge4hzbk7.lua:55: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local day = tonumber(date_split[1])\n    local month = tonumber(date_split[2])\n\
    \    local year = tonumber(date_split[3])\n    local months = { 1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12 }\n    local days_months = { 31, 28, 31, 30, 31, 30,\
    \ 31, 31, 30, 31, 30, 31 }\n    local days_years = { 31, 30 }\n    local days_months_years\
    \ = { 31, 30 }\n    local days_years_months = { 31, 30 }\n    local days_months_years_months\
    \ = { 31, 30 }\n    local days_years_months_years = { 31, 30 }\n    local days_months_years_months_years\
    \ = { 31, 30 }\n    local days_years_months_years_months = { 31, 30 }\n    local\
    \ days_years_months_years_months_years = { 31, 30 }\n    local days_years_months_years_months_years_months\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years =\
    \ { 31, 30 }\n    local days_years_months_years_months_years_months_years_months\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_years\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_years_months\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_years_months_years\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_years_months_years_months\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_years_months_years_months_years\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_years_months_years_months_years_months\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_years_months_years_months_years_months_years\
    \ = { 31, 30 }\n    local days_years_months_years_months_years_months_years_months_\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg54jfwls.lua:66: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local date_split = string.split(date,\
    \ \"-\")\n    local date_year = tonumber(date_split[2])\n    local date_month\
    \ = tonumber(date_split[1])\n    local date_day = tonumber(date_split[3])\n  \
    \  local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = days_in_year(date_year)\n    local date_days_in_month =\
    \ days_in_month(date_month, date_year)\n    local date_days_in_year = days_in_year(date_year)\n\
    \    local date_days_in_month = days_in_month(date_month, date_year)\n    local\
    \ date_days_in_year = \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbuhzk7qq.lua:57: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  -- Write your code here\n  local\
    \ date_array = string.split(date, \"-\")\n  local month = tonumber(date_array[1])\n\
    \  local day = tonumber(date_array[2])\n  local year = tonumber(date_array[3])\n\
    \  if month < 1 or month > 12 then\n    return false\n  end\n  if day < 1 or day\
    \ > 31 then\n    return false\n  end\n  if month == 2 and day > 29 then\n    return\
    \ false\n  end\n  if month == 2 and day < 29 then\n    return false\n  end\n \
    \ if month == 1 and day > 30 then\n    return false\n  end\n  if month == 1 and\
    \ day < 30 then\n    return false\n  end\n  if month == 3 and day > 31 then\n\
    \    return false\n  end\n  if month == 3 and day < 31 then\n    return false\n\
    \  end\n  if month == 5 and day > 31 then\n    return false\n  end\n  if month\
    \ == 5 and day < 31 then\n    return false\n  end\n  if month == 7 and day > 31\
    \ then\n    return false\n  end\n  if month == 7 and day < 31 then\n    return\
    \ false\n  end\n  if month == 8 and day > 31 then\n    return false\n  end\n \
    \ if month == 8 and day < 31 then\n    return false\n  end\n  if month == 10 and\
    \ day > 31 then\n    return false\n  end\n  if month == 10 and day < 31 then\n\
    \    return false\n  end\n  if month == 12 and day > 31 then\n    return false\n\
    \  end\n  if month == 12 and day < 31 then\n    return false\n  end\n  if month\
    \ == 1 and day > 29 then\n    return false\n  end\n  if month == 1 and day < 29\
    \ then\n    return false\n  end\n  if month == 3 and day > 31 then\n    return\
    \ false\n  end\n  if month == 3 and day < 31 then\n    return false\n  end\n \
    \ if month == 5 and day > 31 then\n    return false\n  end\n  if month == 5 and\
    \ day < 31 then\n    return false\n  end\n  if month == 7 and day > 31 then\n\
    \    return false\n  end\n  if month == 7 and day < 31 then\n    return false\n\
    \  end\n  if month == 8 and day > 31 then\n    return false\n  end\n  if month\
    \ == 8 and day < 31 then\n    return false\n  end\n  if month == 10 and day >\
    \ 31 then\n    return false\n  end\n  if month == 10 and day < 31 then\n    return\
    \ false\n  end\n  if month == 12 and day > 31 then\n    return false\n  end\n\
    \  if month == 12 and day < 31 then\n    return false\n  end\n  return true\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprcjimlna.lua:20:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmprcjimlna.lua:20:\
    \ in function 'candidate'\n\t/tmp/tmprcjimlna.lua:126: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 2 and day < 29 then\n        return false\n    end\n    if month == 2 and\
    \ day > 28 then\n        return false\n    end\n    if month == 2 and day < 28\
    \ then\n        return false\n    end\n    if month == 2 and day > 31 then\n \
    \       return false\n    end\n    if month == 2 and day < 31 then\n        return\
    \ false\n    end\n    if month == 2 and day > 30 then\n        return false\n\
    \    end\n    if month == 2 and day < 30 then\n        return false\n    end\n\
    \    if month == 2 and day > 31 then\n        return false\n    end\n    if month\
    \ == 2 and day < 31 then\n        return false\n    end\n    if month == 3 and\
    \ day > 31 then\n        return false\n    end\n    if month == 3 and day < 31\
    \ then\n        return false\n    end\n    if month == 3 and day > 30 then\n \
    \       return false\n    end\n    if month == 3 and day < 30 then\n        return\
    \ false\n    end\n    if month == 3 and day > 29 then\n        return false\n\
    \    end\n    if month == 3 and day < 29 then\n        return false\n    end\n\
    \    if month == 3 and day > 28 then\n        return false\n    end\n    if month\
    \ == 3 and day < 28 then\n        return false\n    end\n    if month == 3 and\
    \ day > 31 then\n        return false\n    end\n    if month == 3 and day < 31\
    \ then\n        return false\n    end\n    if month == 3 and day > 30 then\n \
    \       return false\n    end\n    if month == 3 and day < 30 then\n        return\
    \ false\n    end\n    if month == 3 and day > 31 then\n        return false\n\
    \    end\n    if month == 3 and day < 31 then\n        return false\n    end\n\
    \    if month == 4 and day > 31 then\n        return false\n    end\n    if month\
    \ == 4 and day < 31 then\n        return false\n    end\n    if month == 4 and\
    \ day > 30 then\n        return false\n    end\n    if month == 4 and day < 30\
    \ then\n        return false\n    end\n    if month == 4 and day > 29 then\n \
    \       return false\n    end\n    if month == 4 and day < 29 then\n        return\
    \ false\n    end\n    if month\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0p295ov5.lua:123: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 2 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if day > 31 then\n        return false\n    end\n    if month ==\
    \ 2 and day > 29 then\n        return false\n    end\n    if month > 2 then\n\
    \        if day > 30 then\n            return false\n        end\n    end\n  \
    \  if day > 31 then\n        return false\n    end\n    return true\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbz0da6zv.lua:23:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpbz0da6zv.lua:23:\
    \ in function 'candidate'\n\t/tmp/tmpbz0da6zv.lua:57: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n\tif month == nil or day == nil or year == nil then\n\
    \t\treturn false\n\tend\n\tmonth = tonumber(month)\n\tday = tonumber(day)\n\t\
    year = tonumber(year)\n\tif month < 1 or month > 12 then\n\t\treturn false\n\t\
    end\n\tif day < 1 or day > 31 then\n\t\treturn false\n\tend\n\tif month == 2 and\
    \ day > 29 then\n\t\treturn false\n\tend\n\tif month == 3 and day > 31 then\n\t\
    \treturn false\n\tend\n\tif month == 4 and day > 30 then\n\t\treturn false\n\t\
    end\n\tif month == 5 and day > 31 then\n\t\treturn false\n\tend\n\tif month ==\
    \ 7 and day > 31 then\n\t\treturn false\n\tend\n\tif month == 8 and day > 31 then\n\
    \t\treturn false\n\tend\n\tif month == 10 and day > 31 then\n\t\treturn false\n\
    \tend\n\tif month == 11 and day > 30 then\n\t\treturn false\n\tend\n\tif month\
    \ == 12 and day > 31 then\n\t\treturn false\n\tend\n\treturn true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n\tlocal month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n\tlocal months = {\n\t\t[1] = 1,\n\t\t[3] = 1,\n\t\t[5]\
    \ = 1,\n\t\t[7] = 1,\n\t\t[8] = 1,\n\t\t[10] = 1,\n\t\t[12] = 1,\n\t}\n\tlocal\
    \ days = {\n\t\t[1] = 1,\n\t\t[2] = 2,\n\t\t[4] = 4,\n\t\t[6] = 6,\n\t\t[9] =\
    \ 9,\n\t\t[11] = 11,\n\t}\n\tlocal months_count = months[month]\n\tlocal days_count\
    \ = days[day]\n\tlocal year_count = year - 2000\n\tlocal months_count_in_year\
    \ = months_count / year_count\n\tlocal days_count_in_year = days_count / year_count\n\
    \tlocal months_count_in_century = months_count / 100\n\tlocal days_count_in_century\
    \ = days_count / 100\n\tlocal months_count_in_decade = months_count / 10\n\tlocal\
    \ days_count_in_decade = days_count / 10\n\tlocal months_count_in_millenium =\
    \ months_count / 1\n\tlocal days_count_in_millenium = days_count / 1\n\tlocal\
    \ months_count_in_thousand = months_count / 1000\n\tlocal days_count_in_thousand\
    \ = days_count / 1000\n\tlocal months_count_in_hundred = months_count / 10000\n\
    \tlocal days_count_in_hundred = days_count / 10000\n\tlocal months_count_in_ten\
    \ = months_count / 100000\n\tlocal days_count_in_ten = days_count / 100000\n\t\
    local months_count_in_one = months_count / 1000000\n\tlocal days_count_in_one\
    \ = days_count / 1000000\n\tlocal months_count_in_ten_thousand = months_count\
    \ / 10000000\n\tlocal days_count_in_ten_thousand = days_count / 10000000\n\tlocal\
    \ months_count_in_hundred_thousand = months_count / 100000000\n\tlocal days_count_in_hundred_thousand\
    \ = days_count / 100000000\n\tlocal months_count_in_hundred_million = months_count\
    \ / 1000000000\n\tlocal days_count_in_hundred_million = days_count / 1000000000\n\
    \tlocal months_count_in_billion = months_count / 1000000000000\n\tlocal days_count_in_billion\
    \ = days_count / 1000000000000\n\tlocal months_count_in_trillion = months_count\
    \ / \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqc2mvypi.lua:65: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  if month == nil or day == nil or year == nil then\n\
    \    return false\n  end\n  local months = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n\
    \    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12] = '12',\n    [14]\
    \ = '14',\n    [16] = '16',\n    [18] = '18',\n    [20] = '20',\n    [22] = '22',\n\
    \    [24] = '24',\n    [26] = '26',\n    [28] = '28',\n    [30] = '30',\n    [32]\
    \ = '32',\n    [34] = '34',\n    [36] = '36'\n  }\n  local months_count = #months\n\
    \  local days_count = #days\n  local months_count_limit = months_count > 0 and\
    \ months_count <= 12\n  local days_count_limit = days_count > 0 and days_count\
    \ <= 31\n  local months_limit_limit = months_count > 0 and months_count <= 12\n\
    \  local days_limit_limit = days_count > 0 and days_count <= 30\n  local months_limit_limit_limit\
    \ = months_count > 0 and months_count <= 12\n  local days_limit_limit_limit =\
    \ days_count > 0 and days_count <= 29\n  local months_limit_limit_limit_limit\
    \ = months_count > 0 and months_count <= 12\n  local days_limit_limit_limit_limit\
    \ = days_count > 0 and days_count <= 29\n  local months_limit_limit_limit_limit_limit\
    \ = months_count > 0 and months_count <= 12\n  local days_limit_limit_limit_limit_limit\
    \ = days_count > 0 and days_count <= 29\n  local months_limit_limit_limit_limit_limit\
    \ = months_count > 0 and months_count <= 12\n  local days_limit_limit_limit_limit_limit_limit\
    \ = days_count > 0 and days_count <= 29\n  local months_limit_limit_limit_limit_limit_limit\
    \ = months_count > 0 and months_count <= 12\n  local days_limit_limit_limit_limit_limit_limit\
    \ = days_count > 0 and days_count <= 29\n  local months_limit_limit_limit_limit_limit_limit\
    \ = months_count > 0 and months_count <= 12\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1gjlrork.lua:92: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n  local months = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '03',\n    [5] = '05',\n\
    \    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12] = '12',\n    [14]\
    \ = '14',\n    [15] = '15',\n    [17] = '17',\n    [19] = '19',\n    [20] = '20',\n\
    \    [21] = '21',\n    [23] = '23',\n    [24] = '24',\n    [26] = '26',\n    [28]\
    \ = '28',\n    [30] = '30',\n    [31] = '31'\n  }\n  local months_count = #months\n\
    \  local days_count = #days\n  local months_count_valid = months_count > 0 and\
    \ months_count <= 12\n  local days_count_valid = days_count > 0 and days_count\
    \ <= 31\n  local months_count_valid_2 = months_count > 0 and months_count <= 12\n\
    \  local days_count_valid_2 = days_count > 0 and days_count <= 30\n  local months_count_valid_3\
    \ = months_count > 0 and months_count <= 12\n  local days_count_valid_3 = days_count\
    \ > 0 and days_count <= 29\n  local months_count_valid_4 = months_count > 0 and\
    \ months_count <= 12\n  local days_count_valid_4 = days_count > 0 and days_count\
    \ <= 29\n  local months_count_valid_5 = months_count > 0 and months_count <= 12\n\
    \  local days_count_valid_5 = days_count > 0 and days_count <= 29\n  local months_count_valid_6\
    \ = months_count > 0 and months_count <= 12\n  local days_count_valid_6 = days_count\
    \ > 0 and days_count <= 29\n  local months_count_valid_7 = months_count > 0 and\
    \ months_count <= 12\n  local days_count_valid_7 = days_count > 0 and days_count\
    \ <= 29\n  local months_count_valid_8 = months_count > 0 and months_count <= 12\n\
    \  local days_count_valid_8 = days_count > 0 and days_count <= 29\n  local months_count_valid_9\
    \ = months_count > 0 and months_count \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe6e0f4ta.lua:91: ''end'' expected (to close ''function'' at
    line 18) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n  local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n  local months = {\n    [1] = '01',\n    [3] = '03',\n\
    \    [5] = '05',\n    [7] = '07',\n    [8] = '08',\n    [10] = '10',\n    [12]\
    \ = '12'\n  }\n  local days = {\n    [1] = '01',\n    [3] = '31',\n    [5] = '30',\n\
    \    [7] = '29'\n  }\n  local months_count = months[month]\n  local days_count\
    \ = days[day]\n  local months_count_valid = months_count and months_count[1] and\
    \ months_count[2] and months_count[3] and months_count[4] and months_count[5]\
    \ and months_count[6] and months_count[7] and months_count[8] and months_count[9]\
    \ and months_count[10] and months_count[11] and months_count[12]\n  local days_count_valid\
    \ = days_count and days_count[1] and days_count[2] and days_count[3] and days_count[4]\
    \ and days_count[5] and days_count[6] and days_count[7] and days_count[8] and\
    \ days_count[9] and days_count[10] and days_count[11] and days_count[12]\n  local\
    \ year_valid = year and year[1] and year[2] and year[3] and year[4] and year[5]\
    \ and year[6] and year[7] and year[8] and year[9] and year[10] and year[11] and\
    \ year[12]\n  return months_count_valid and days_count_valid and year_valid\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = valid_date\n\
    \    lu.assertEquals(candidate('03-11-2000'), true)\n    lu.assertEquals(candidate('15-01-2012'),\
    \ false)\n    lu.assertEquals(candidate('04-0-2040'), false)\n    lu.assertEquals(candidate('06-04-2020'),\
    \ true)\n    lu.assertEquals(candidate('01-01-2007'), true)\n    lu.assertEquals(candidate('03-32-2011'),\
    \ false)\n    lu.assertEquals(candidate(''), false)\n    lu.assertEquals(candidate('04-31-3000'),\
    \ false)\n    lu.assertEquals(candidate('06-06-2005'), true)\n    lu.assertEquals(candidate('21-31-2000'),\
    \ false)\n    lu.assertEquals(candidate('04-12-2003'), true)\n    lu.assertEquals(candidate('04122003'),\
    \ false)\n    lu.assertEquals(candidate('20030412'), false)\n    lu.assertEquals(candidate('2003-04'),\
    \ false)\n    lu.assertEquals(candidate('2003-04-12'), false)\n    lu.assertEquals(candidate('04-2003'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsxnxwibb.lua:46:\
    \ expected: true, actual: nil\nstack traceback:\n\t/tmp/tmpsxnxwibb.lua:46: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ > 12 or month < 1 then\n        return false\n    end\n    if day > 31 or day\
    \ < 1 then\n        return false\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt6p04bfq.lua:57:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpt6p04bfq.lua:57:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ \"(%d+)-(%d+)-(%d+)\")\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 and day > 29 then\n        return false\n    end\n    if month\
    \ == 4 or month == 6 or month == 9 or month == 11 and day > 30 then\n        return\
    \ false\n    end\n    if month == 1 or month == 3 or month == 5 or month == 7\
    \ or month == 8 or month == 10 or month == 12 and day > 31 then\n        return\
    \ false\n    end\n    return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'), true)\n\
    \    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj7o1eyb8.lua:47:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpj7o1eyb8.lua:47:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750516
- exit_code: 1
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil then\n        return false\n    end\n\
    \    if day == nil then\n        return false\n    end\n    if year == nil then\n\
    \        return false\n    end\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 30 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqq6_k40j.lua:29:\
    \ attempt to compare string with number\nstack traceback:\n\t/tmp/tmpqq6_k40j.lua:29:\
    \ in function 'candidate'\n\t/tmp/tmpqq6_k40j.lua:66: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750516
- exit_code: 0
  program: "-- You have to write a function which validates a given date string and\n\
    -- returns true if the date is valid otherwise false.\n-- The date is valid if\
    \ all of the following rules are satisfied:\n-- 1. The date string is not empty.\n\
    -- 2. The number of days is not less than 1 or higher than 31 days for months\
    \ 1,3,5,7,8,10,12. And the number of days is not less than 1 or higher than 30\
    \ days for months 4,6,9,11. And, the number of days is not less than 1 or higher\
    \ than 29 for the month 2.\n-- 3. The months should not be less than 1 or higher\
    \ than 12.\n-- 4. The date should be in the format: mm-dd-yyyy\n-- >>> valid_date('03-11-2000')\n\
    -- true\n-- >>> valid_date('15-01-2012')\n-- false\n-- >>> valid_date('04-0-2040')\n\
    -- false\n-- >>> valid_date('06-04-2020')\n-- true\n-- >>> valid_date('06/04/2020')\n\
    -- false\nlocal function valid_date(date)\n    local month, day, year = string.match(date,\
    \ '(%d+)-(%d+)-(%d+)')\n    if month == nil or day == nil or year == nil then\n\
    \        return false\n    end\n    month = tonumber(month)\n    day = tonumber(day)\n\
    \    year = tonumber(year)\n    if month < 1 or month > 12 then\n        return\
    \ false\n    end\n    if day < 1 or day > 31 then\n        return false\n    end\n\
    \    if month == 2 then\n        if day > 29 then\n            return false\n\
    \        end\n    end\n    if month == 4 then\n        if day > 30 then\n    \
    \        return false\n        end\n    end\n    if month == 6 then\n        if\
    \ day > 29 then\n            return false\n        end\n    end\n    if month\
    \ == 9 then\n        if day > 31 then\n            return false\n        end\n\
    \    end\n    if month == 11 then\n        if day > 30 then\n            return\
    \ false\n        end\n    end\n    return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = valid_date\n    lu.assertEquals(candidate('03-11-2000'),\
    \ true)\n    lu.assertEquals(candidate('15-01-2012'), false)\n    lu.assertEquals(candidate('04-0-2040'),\
    \ false)\n    lu.assertEquals(candidate('06-04-2020'), true)\n    lu.assertEquals(candidate('01-01-2007'),\
    \ true)\n    lu.assertEquals(candidate('03-32-2011'), false)\n    lu.assertEquals(candidate(''),\
    \ false)\n    lu.assertEquals(candidate('04-31-3000'), false)\n    lu.assertEquals(candidate('06-06-2005'),\
    \ true)\n    lu.assertEquals(candidate('21-31-2000'), false)\n    lu.assertEquals(candidate('04-12-2003'),\
    \ true)\n    lu.assertEquals(candidate('04122003'), false)\n    lu.assertEquals(candidate('20030412'),\
    \ false)\n    lu.assertEquals(candidate('2003-04'), false)\n    lu.assertEquals(candidate('2003-04-12'),\
    \ false)\n    lu.assertEquals(candidate('04-2003'), false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750516
