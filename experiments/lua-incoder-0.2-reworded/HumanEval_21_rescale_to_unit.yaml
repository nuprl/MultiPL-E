name: HumanEval_21_rescale_to_unit
language: lua
prompt: "-- Given table of numbers (of at least two elements), apply a linear transform\
  \ to that table,\n-- such that the smallest number will become 0 and the largest\
  \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
  \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
  \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
  \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0,\
  \ 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n  \
    \  new_numbers[i] = new_min + (new_max - new_min) * numbers[i] / range\n  end\n\
    \  return new_numbers\nend", "  local min = table.min(numbers)\n  local max =\
    \ table.max(numbers)\n  local range = max - min\n  local new_min = min - range\
    \ * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    local n = numbers[i]\n    if n > new_max then\n    \
    \  new_numbers[i] = new_max\n    elseif n < new_min then\n      new_numbers[i]\
    \ = new_min\n    else\n      new_numbers[i] = n\n    end\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local new_min = min - range * 0.1\n  local new_max = max\
    \ + range * 0.1\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(new_numbers, math.floor(new_min + (new_max - new_min) *\
    \ number))\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    new_numbers[number] = new_min + new_range * number\n  end\n  return\
    \ new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scale = 1.0 / range\n  local new_numbers =\
    \ {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = min + scale\
    \ * number\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n  \
    \  new_numbers[i] = new_min + range * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / 2.0\n  local result = {}\n  for _, v in ipairs(numbers) do\n\
    \    table.insert(result, v - min + scale)\n  end\n  return result\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / 2.0\n  local result = {}\n  for _, v in pairs(numbers) do\n    result[v]\
    \ = min + scale * v\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = min + (numbers[i] -\
    \ min) / range\n  end\n  return scaled_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = new_min + (numbers[i] -\
    \ min) * new_range / range\n  end\n  return new_numbers\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local range = max -\
    \ min\n  local scale = 1.0 / range\n  local new_numbers = {}\n  for _, number\
    \ in ipairs(numbers) do\n    new_numbers[number] = number * scale\n  end\n  return\
    \ new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    scaled_numbers[number] = ((number - min) / range) * 2.0\n  end\n  return\
    \ scaled_numbers\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
