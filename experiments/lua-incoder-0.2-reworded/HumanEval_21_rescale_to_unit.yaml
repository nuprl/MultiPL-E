name: HumanEval_21_rescale_to_unit
language: lua
prompt: "-- Given table of numbers (of at least two elements), apply a linear transform\
  \ to that table,\n-- such that the smallest number will become 0 and the largest\
  \ will become 1\n-- >>> rescale_to_unit({1.0, 2.0, 3.0, 4.0, 5.0})\n-- {0.0, 0.25,\
  \ 0.5, 0.75, 1.0}\nlocal function rescale_to_unit(numbers)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = rescale_to_unit\n\
  \    lu.assertEquals(candidate({2.0, 49.9}), {0.0, 1.0})\n    lu.assertEquals(candidate({100.0,\
  \ 49.9}), {1.0, 0.0})\n    lu.assertEquals(candidate({1.0, 2.0, 3.0, 4.0, 5.0}),\
  \ {0.0, 0.25, 0.5, 0.75, 1.0})\n    lu.assertEquals(candidate({2.0, 1.0, 5.0, 3.0,\
  \ 4.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\n    lu.assertEquals(candidate({12.0, 11.0,\
  \ 15.0, 13.0, 14.0}), {0.25, 0.0, 1.0, 0.5, 0.75})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n  \
    \  new_numbers[i] = new_min + (new_max - new_min) * numbers[i] / range\n  end\n\
    \  return new_numbers\nend", "  local min = table.min(numbers)\n  local max =\
    \ table.max(numbers)\n  local range = max - min\n  local new_min = min - range\
    \ * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    local n = numbers[i]\n    if n > new_max then\n    \
    \  new_numbers[i] = new_max\n    elseif n < new_min then\n      new_numbers[i]\
    \ = new_min\n    else\n      new_numbers[i] = n\n    end\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local new_min = min - range * 0.1\n  local new_max = max\
    \ + range * 0.1\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    table.insert(new_numbers, math.floor(new_min + (new_max - new_min) *\
    \ number))\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    new_numbers[number] = new_min + new_range * number\n  end\n  return\
    \ new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scale = 1.0 / range\n  local new_numbers =\
    \ {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = min + scale\
    \ * number\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n  \
    \  new_numbers[i] = new_min + range * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / 2.0\n  local result = {}\n  for _, v in ipairs(numbers) do\n\
    \    table.insert(result, v - min + scale)\n  end\n  return result\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / 2.0\n  local result = {}\n  for _, v in pairs(numbers) do\n    result[v]\
    \ = min + scale * v\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for i = 1, #numbers do\n    scaled_numbers[i] = min + (numbers[i] -\
    \ min) / range\n  end\n  return scaled_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = new_min + (numbers[i] -\
    \ min) * new_range / range\n  end\n  return new_numbers\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local range = max -\
    \ min\n  local scale = 1.0 / range\n  local new_numbers = {}\n  for _, number\
    \ in ipairs(numbers) do\n    new_numbers[number] = number * scale\n  end\n  return\
    \ new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    scaled_numbers[number] = ((number - min) / range) * 2.0\n  end\n  return\
    \ scaled_numbers\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local length = #numbers\n  local scale = (max - min) / (length - 1)\n  local\
    \ result = {}\n  for i = 1, length do\n    result[i] = min + (numbers[i] - min)\
    \ * scale\n  end\n  return result\nend", "  local min = table.min(numbers)\n \
    \ local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local range = max -\
    \ min\n  local scale = 1.0 / range\n  local new_numbers = {}\n  for i = 1, #numbers\
    \ do\n    new_numbers[i] = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local scale = (range == 0)\n    or ((min == 0) and (max\
    \ == 1))\n    or ((min == 0) and (max == 0))\n    or ((min == 1) and (max == 0))\n\
    \    or ((min == 0) and (max == 1))\n    or ((min == 1) and (max == 1))\n    or\
    \ ((min == 0) and (max == 0))\n    or ((min == 1) and (max == 1))\n    or ((min\
    \ == 0) and (max == 0))\n    or ((min == 1) and (max == 0))\n    or ((min == 0)\
    \ and (max == 1))\n    or ((min == 1) and (max == 1))\n    or ((min == 0) and\
    \ (max == 0))\n    or ((min == 1) and (max == 0))\n    or ((min == 0) and (max\
    \ == 1))\n    or ((min == 1) and (max == 1))\n    or ((min == 0) and (max == 0))\n\
    \    or ((min == 1) and (max == 0))\n    or ((min == 0) and (max == 1))\n    or\
    \ ((min == 1) and (max == 1))\n    or ((min == 0) and (max == 0))\n    or ((min\
    \ == 1) and (max == 0))\n    or ((min == 0) and (max == 1))\n    or ((min == 1)\
    \ and (max == 1))\n    or ((min == 0) and (max == 0))\n    or ((min == 1) and\
    \ (max == 0))\n    or ((min == 0) and (max == 1))\n    or ((min == 1) and (max\
    \ == 1))\n    or ((min == 0) and (max == 0))\n    or ((min == 1) and (max == 0))\n\
    \    or ((min == 0) and (max == 1))\n    or ((min == 1) and (max == 1))\n    or\
    \ ((min == 0) and (max == 0))\n    or ((min == 1) and (max == 0))\n    or ((min\
    \ == 0) and (max == 1))\n    or ((min == 1) and (max == 1))\n    or ((min == 0)\
    \ and (max == 0))\n    or ((min == 1) and (max == 0))\n    or ((min == 0) and\
    \ (max == 1))\n    or ((min == 1) and (max == 1))\n    or ((min == 0) and (max\
    \ == 0))\n    or ((min == 1) and (max == 0))\n    or ((min == 0) and (max == 1))\n\
    \    or ((min == 1) and (max == 1))\n    or ((min == 0) and (max == ", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max\
    \ - min\n  local scale = 1.0 / range\n  local result = {}\n  for _, number in\
    \ ipairs(numbers) do\n    result[#result + 1] = number * scale\n  end\n  return\
    \ result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_range = new_max - new_min\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    local n = numbers[i]\n    local new_n =\
    \ ((n - min) * new_range) / range\n    new_numbers[i] = new_n\n  end\n  return\
    \ new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local length = #numbers\n  local scale = (max - min) / length\n  local result\
    \ = {}\n  for i = 1, length do\n    result[i] = min + scale * numbers[i]\n  end\n\
    \  return result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return\
    \ result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    scaled_numbers[number] = ((number - min) / range)\n  end\n  return scaled_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    scaled_numbers[number] = (number - min) / range\n  end\n  return scaled_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local range =\
    \ max - min\n  local scale = 1.0 / range\n  local new_numbers = {}\n  for _, number\
    \ in ipairs(numbers) do\n    new_numbers[number] = min + ((number - min) * scale)\n\
    \  end\n  return new_numbers\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return numbers\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n\
    \  return result\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local range = max - min\n  local scale = (range == 0 and 1 or range / max)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number]\
    \ = number * scale\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ 1.0 / range\n  local new_numbers = {}\n  for _, value in ipairs(numbers) do\n\
    \    new_numbers[value] = value * scale\n  end\n  return new_numbers\nend", " \
    \ local min = numbers[1]\n  local max = numbers[#numbers]\n  local factor = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = numbers[i]\
    \ - min + factor * (i - 1)\n  end\n  return numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for i = 1, #numbers do\n    local\
    \ n = numbers[i]\n    local new_n = ((n - min) * new_range) / range\n    new_numbers[i]\
    \ = new_n\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i]\
    \ - min) * scale\n  end\n  return result\nend", "  local min = numbers[1]\n  local\
    \ max = numbers[#numbers]\n  local scale = 1.0\n  if min > max then\n    min =\
    \ min - max\n    max = max + min\n  end\n  for i = 1, #numbers do\n    numbers[i]\
    \ = numbers[i] * scale + min\n    scale = scale - 1.0\n  end\n  return numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local scale = 1.0 / range\n  local result = {}\n  for _,\
    \ v in ipairs(numbers) do\n    result[#result + 1] = (v - min) * scale\n  end\n\
    \  return result\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return numbers\nend", "  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local factor = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + factor * (numbers[i] - min)\n  end\n  return result\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ max - min\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = numbers[i] - min * scale\n  end\n  return new_numbers\nend", "  local min\
    \ = table.min(numbers)\n  local max = table.max(numbers)\n  local range = max\
    \ - min\n  local scale = (range == 0)\n    or (range == 1)\n    or (range == -1)\n\
    \    or (range == -2) -- Special case for -2\n    or (range == -3)\n    or (range\
    \ == -4)\n    or (range == -5)\n    or (range == -6)\n    or (range == -7)\n \
    \   or (range == -8)\n    or (range == -9)\n    or (range == -10)\n    or (range\
    \ == -11)\n    or (range == -12)\n    or (range == -13)\n    or (range == -14)\n\
    \    or (range == -15)\n    or (range == -16)\n    or (range == -17)\n    or (range\
    \ == -18)\n    or (range == -19)\n    or (range == -20)\n    or (range == -21)\
    \ -- Special case for -21\n    or (range == -22)\n    or (range == -23)\n    or\
    \ (range == -24)\n    or (range == -25)\n    or (range == -26)\n    or (range\
    \ == -27)\n    or (range == -28)\n    or (range == -29)\n    or (range == -30)\n\
    \    or (range == -31)\n    or (range == -32)\n    or (range == -33)\n    or (range\
    \ == -34)\n    or (range == -35)\n    or (range == -36)\n    or (range == -37)\n\
    \    or (range == -38)\n    or (range == -39)\n    or (range == -40)\n    or (range\
    \ == -41)\n    or (range == -42)\n    or (range == -43)\n    or (range == -44)\n\
    \    or (range == -45)\n    or (range == -46)\n    or (range == -47)\n    or (range\
    \ == -48)\n    or (range == -49)\n    or (range == -50)\n    or (range == -51)\n\
    \    or (range == -52)\n    or (range == -53)\n    or (range == -54)\n    or (range\
    \ == -55)\n    or (range == -56)\n    or (range == -57)\n    or (range == -58)\n\
    \    or (range == -59)\n    or (range == -60)\n    or (range == -61)\n    or (range\
    \ == -62) -- Special case for -62\n    ", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ (max - min) / (length - 1)\n  local result = {}\n  for i = 1, length do\n  \
    \  result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max -\
    \ min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range)\n  end\n  return scaled_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ (range == 0 and 1 or range) / 2.0\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = max - min\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    new_numbers[number] = ((number - min) / scale) + min\n  end\n  return\
    \ new_numbers\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local range = max -\
    \ min\n  local scale = 1.0 / range\n  local result = {}\n  for _, number in ipairs(numbers)\
    \ do\n    result[#result + 1] = number * scale\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale\
    \ * (numbers[i] - min)\n  end\n  return numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for _, value in ipairs(numbers) do\n    new_numbers[value] = new_min\
    \ + (new_max - new_min) * value / range\n  end\n  return new_numbers\nend", " \
    \ local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers\
    \ - 1)\n  for i = 1, #numbers do\n    numbers[i] = min + scale * (numbers[i] -\
    \ min)\n  end\n  return numbers\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local range = max - min\n  local new_min = min -\
    \ range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers = {}\n\
    \  for _, number in ipairs(numbers) do\n    new_numbers[math.round(new_min + (new_max\
    \ - new_min) * number / range)] = number\n  end\n  return new_numbers\nend", " \
    \ local min = math.min(numbers)\n  local max = math.max(numbers)\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_range = new_max - new_min\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    local n = numbers[i]\n    new_numbers[i] = ((n - new_min)\
    \ / new_range) * new_range + new_min\n  end\n  return new_numbers\nend", "  assert(#numbers\
    \ > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local range = max -\
    \ min\n  local new_min = min - range * 0.1\n  local new_max = max + range * 0.1\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = math.floor((numbers[i]\
    \ - min) / range * new_max + new_min)\n  end\n  return new_numbers\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = new_min + new_range * i / #numbers\n  end\n  return new_numbers\nend", " \
    \ local min = table.min(numbers)\n  local max = table.max(numbers)\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = math.floor(new_min + (new_max - new_min) * numbers[i])\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local new_min = min - range * 0.1\n  local new_max = max\
    \ + range * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = math.floor(new_min + (new_max - new_min) * numbers[i])\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ range = max - min\n  local new_min = min - range * 0.1\n  local new_max = max\
    \ + range * 0.1\n  local new_range = new_max - new_min\n  local new_numbers =\
    \ {}\n  for i = 1, #numbers do\n    local n = numbers[i]\n    local new_n = ((n\
    \ - min) * new_range) / range\n    new_numbers[i] = new_n\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local scale = 1.0 / range\n  local new_numbers = {}\n \
    \ for _, number in ipairs(numbers) do\n    new_numbers[number] = min + (number\
    \ - min) * scale\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ 1.0 / range\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    new_numbers[number] = min + scale * number\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ range = max - min\n  local scale = 1.0 / range\n  local new_numbers = {}\n \
    \ for i = 1, #numbers do\n    new_numbers[i] = min + scale * (numbers[i] - min)\n\
    \  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers =\
    \ {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ numbers[1]\n  local max = numbers[#numbers]\n  local range = max - min\n  local\
    \ new_min = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = math.min(new_max, math.max(new_min,\
    \ numbers[i]))\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for i = 1, #numbers do\n    local\
    \ n = numbers[i]\n    local new_n = ((n - min) * new_range) / range\n    new_numbers[i]\
    \ = new_n\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local range = max - min\n  local new_min = min - range\
    \ * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = new_min + (new_max - new_min) * numbers[i]\
    \ / range\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i] - min)\
    \ * scale\n  end\n  return result\nend", "  local min = table.min(numbers)\n \
    \ local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local range = max - min\n  local scale = (range == 0)\n\
    \    or ((range == 1) and (numbers[1] == 0))\n    or ((range == 1) and (numbers[1]\
    \ == 1))\n    or ((range == 1) and (numbers[1] == numbers[2]))\n    or ((range\
    \ == 1) and (numbers[1] == numbers[2])\n      and (numbers[3] == 0))\n    or ((range\
    \ == 1) and (numbers[1] == numbers[2])\n      and (numbers[3] == 1))\n    or ((range\
    \ == 1) and (numbers[1] == numbers[2])\n      and (numbers[3] == numbers[4]))\n\
    \    or ((range == 1) and (numbers[1] == numbers[2])\n      and (numbers[3] ==\
    \ numbers[4])\n      and (numbers[5] == 0))\n    or ((range == 1) and (numbers[1]\
    \ == numbers[2])\n      and (numbers[3] == numbers[4])\n      and (numbers[5]\
    \ == 1))\n    or ((range == 1) and (numbers[1] == numbers[2])\n      and (numbers[3]\
    \ == numbers[4])\n      and (numbers[5] == numbers[6]))\n    or ((range == 1)\
    \ and (numbers[1] == numbers[2])\n      and (numbers[3] == numbers[4])\n     \
    \ and (numbers[5] == numbers[6])\n      and (numbers[7] == 0))\n    or ((range\
    \ == 1) and (numbers[1] == numbers[2])\n      and (numbers[3] == numbers[4])\n\
    \      and (numbers[5] == numbers[6])\n      and (numbers[7] == 1))\n    or ((range\
    \ == 1) and (numbers[1] == numbers[2])\n      and (numbers[3] == numbers[4])\n\
    \      and (numbers[5] == numbers[6])\n      and (numbers[7] == numbers[8]))\n\
    \    or ((range == 1) and (numbers[1] == numbers[2])\n      and (numbers[3] ==\
    \ numbers[4])\n      and (numbers[5] == numbers[6])\n      and (numbers[7] ==\
    \ numbers[8])\n      and (numbers[9] == 0))\n    or ((range == 1) and (numbers[1]\
    \ == numbers[2])\n      and (numbers[3] == numbers[4])\n      and (numbers[5]\
    \ == numbers[6])\n      and (numbers[7] == numbers[8])\n      and (numbers[9]\
    \ == 1))\n    or ((range == 1) and (numbers[1] == numbers[2])\n      and (numbers[3]\
    \ == numbers[4])\n      and (numbers[5] == numbers[6])\n      and (numbers[7]\
    \ == numbers[8])\n      and (numbers[9] == numbers[", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = numbers[i] - min\n  end\n\
    \  for i = 1, #new_numbers do\n    new_numbers[i] = new_numbers[i] / scale\n \
    \ end\n  return new_numbers\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i] - min)\
    \ * scale\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local range = max - min\n  local scale = 1.0 / range\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number]\
    \ = min + (number - min) * scale\n  end\n  return new_numbers\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local range\
    \ = max - min\n  local scale = (range == 0)\n    or (range == 1)\n    or (range\
    \ == -1)\n    or (range == -2)\n    or (range == -3)\n    or (range == -4)\n \
    \   or (range == -5)\n    or (range == -6)\n    or (range == -7)\n    or (range\
    \ == -8)\n    or (range == -9)\n    or (range == -10)\n    or (range == -11)\n\
    \    or (range == -12)\n    or (range == -13)\n    or (range == -14)\n    or (range\
    \ == -15)\n    or (range == -16)\n    or (range == -17)\n    or (range == -18)\n\
    \    or (range == -19)\n    or (range == -20)\n    or (range == -21)\n    or (range\
    \ == -22)\n    or (range == -23)\n    or (range == -24)\n    or (range == -25)\n\
    \    or (range == -26)\n    or (range == -27)\n    or (range == -28)\n    or (range\
    \ == -29)\n    or (range == -30)\n    or (range == -31)\n    or (range == -32)\n\
    \    or (range == -33)\n    or (range == -34)\n    or (range == -35)\n    or (range\
    \ == -36)\n    or (range == -37)\n    or (range == -38)\n    or (range == -39)\n\
    \    or (range == -40)\n    or (range == -41)\n    or (range == -42)\n    or (range\
    \ == -43)\n    or (range == -44)\n    or (range == -45)\n    or (range == -46)\n\
    \    or (range == -47)\n    or (range == -48)\n    or (range == -49)\n    or (range\
    \ == -50)\n    or (range == -51)\n    or (range == -52)\n    or (range == -53)\n\
    \    or (range == -54)\n    or (range == -55)\n    or (range == -56)\n    or (range\
    \ == -57)\n    or (range == -58)\n    or (range == -59)\n    or (range == -60)\n\
    \    or (range == -61)\n    or (range == -60)\n    or (range == -60)\n    or (range\
    \ == -60)\n    or (range == -", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i] - min)\
    \ * scale\n  end\n  return result\nend", "  local min = table.min(numbers)\n \
    \ local max = table.max(numbers)\n  local scale = 1.0 / (max - min)\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = numbers[i] * scale\n  end\n\
    \  return result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return\
    \ result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n  return\
    \ result\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local range = max - min\n  local scale = 1.0 / range\n  local new_numbers =\
    \ {}\n  for i = 1, #numbers do\n    new_numbers[i] = min + scale * (numbers[i]\
    \ - min)\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = 1.0\
    \ / range\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = min + scale * numbers[i]\n  end\n  return new_numbers\nend", "  local min\
    \ = table.min(numbers)\n  local max = table.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ 1.0\n  if min == max then\n    scale = 1.0\n  elseif min == max - 1 then\n \
    \   scale = max - min + 1\n  else\n    scale = 1.0 / (max - min + 1)\n  end\n\
    \  local result = {}\n  for i = 1, length do\n    result[i] = numbers[i] * scale\n\
    \  end\n  return result\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n\
    \  return result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = 1.0\n\
    \  if min == max then\n    return numbers\n  elseif min > max then\n    min =\
    \ min - max\n    max = max + min\n    scale = 1.0 / max\n  else\n    min = min\
    \ - max\n    max = max + min\n    scale = 1.0 / min\n  end\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    new_numbers[i] = numbers[i] * scale\n  end\n\
    \  return new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_range = new_max - new_min\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    local new_number = (numbers[i] - new_min)\
    \ / new_range\n    new_numbers[i] = new_number\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ range = max - min\n  local new_min = min - range * 0.1\n  local new_max = max\
    \ + range * 0.1\n  local new_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    new_numbers[number] = math.floor(new_min + (new_max - new_min) * number\
    \ / range)\n  end\n  return new_numbers\nend", "  assert(#numbers > 1)\n  local\
    \ min = numbers[1]\n  local max = numbers[#numbers]\n  local range = max - min\n\
    \  local new_min = min - range * 0.1\n  local new_max = max + range * 0.1\n  local\
    \ new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i] = new_min + (new_max\
    \ - new_min) * numbers[i] / range\n  end\n  return new_numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n\
    \    new_numbers[i] = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * i\n  end\n  return result\nend", "  local min =\
    \ table.min(numbers)\n  local max = table.max(numbers)\n  local length = #numbers\n\
    \  if min == max then\n    return numbers\n  elseif min == 0 then\n    table.insert(numbers,\
    \ 0)\n  elseif max == 1 then\n    table.insert(numbers, 1)\n  else\n    local\
    \ scale = 1 / (max - min)\n    for i = 1, length do\n      numbers[i] = numbers[i]\
    \ * scale\n    end\n  end\n  return numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ 1.0 / range\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    new_numbers[number] = min + (number - min) * scale\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max\
    \ - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    scaled_numbers[number] = ((number - min) / range)\n  end\n  return scaled_numbers\n\
    end", "  assert(#numbers > 1)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local factor = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + factor * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local range\
    \ = max - min\n  local scale = (range == 0)\n    or (range == 1)\n    or (min\
    \ == 0 and max == 1)\n    or (min == 0 and max == 0)\n    or (min == 1 and max\
    \ == 0)\n    or (min == 0 and max == 1)\n    or (min == 0 and max == 0)\n    or\
    \ (min == 1 and max == 1)\n    or (min == 0 and max == 1)\n    or (min == 1 and\
    \ max == 0)\n    or (min == 0 and max == 0)\n    or (min == 1 and max == 1)\n\
    \    or (min == 1 and max == 0)\n    or (min == 0 and max == 1)\n    or (min ==\
    \ 1 and max == 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and max ==\
    \ 0)\n    or (min == 1 and max == 1)\n    or (min == 1 and max == 0)\n    or (min\
    \ == 0 and max == 0)\n    or (min == 1 and max == 1)\n    or (min == 1 and max\
    \ == 0)\n    or (min == 0 and max == 0)\n    or (min == 1 and max == 1)\n    or\
    \ (min == 1 and max == 0)\n    or (min == 0 and max == 0)\n    or (min == 1 and\
    \ max == 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and max == 0)\n\
    \    or (min == 1 and max == 1)\n    or (min == 1 and max == 0)\n    or (min ==\
    \ 0 and max == 0)\n    or (min == 1 and max == 1)\n    or (min == 1 and max ==\
    \ 0)\n    or (min == 0 and max == 0)\n    or (min == 1 and max == 1)\n    or (min\
    \ == 1 and max == 0)\n    or (min == 0 and max == 0)\n    or (min == 1 and max\
    \ == 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and max == 0)\n    or\
    \ (min == 1 and max == 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and\
    \ max == 0)\n    or (min == 1 and max == 1)\n    or (min == 1 and max == 0)\n\
    \    or (min == 0 and max == 0)\n    or (min == 1 and max == 1)\n    or (min ==\
    \ 1 and max == 0)\n    or (min == 0 and max == 0)\n    or (min == 1 and max ==\
    \ 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and max == 0)\n    or (min\
    \ == 1 and max == 1)\n    or (min == 1 and max == 0)", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = ((number\
    \ - min) / scale) + min\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ 1.0 / range\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    new_numbers[number] = number * scale\n  end\n  return new_numbers\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = max - min\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n\
    \    new_numbers[number] = min + (number - min) * scale\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ max - min\n  local new_numbers = {}\n  for _, v in ipairs(numbers) do\n    new_numbers[v]\
    \ = (v - min) / scale\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / 2.0\n  local result\
    \ = {}\n  for _, v in ipairs(numbers) do\n    table.insert(result, v - min + scale)\n\
    \  end\n  return result\nend", "  local min = math.min(numbers)\n  local max =\
    \ math.max(numbers)\n  local range = max - min\n  local scale = 1.0 / range\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ numbers[i]\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = max - min\n  local new_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number] = ((number\
    \ - min) / scale) + min\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scaled_numbers\
    \ = {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local length = #numbers\n\
    \  local scale = (max - min) / (length - 1)\n  local result = {}\n  for i = 1,\
    \ length do\n    result[i] = min + scale * numbers[i]\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ range = max - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    scaled_numbers[number] = ((number - min) / range) * 2.0\n  end\n  return\
    \ scaled_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return\
    \ result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return\
    \ result\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local length\
    \ = #numbers\n  local scale = (max - min) / (length - 1)\n  local result = {}\n\
    \  for i = 1, length do\n    result[i] = min + (numbers[i] - min) * scale\n  end\n\
    \  return result\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local new_min = min - range * 0.1\n  local new_max\
    \ = max + range * 0.1\n  local new_range = new_max - new_min\n  local new_numbers\
    \ = {}\n  for i = 1, #numbers do\n    local n = numbers[i]\n    local new_n =\
    \ ((n - new_min) / new_range) * new_range + new_min\n    new_numbers[i] = new_n\n\
    \  end\n  return new_numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local range = max - min\n  local scale = (range == 0 and 1 or range / max)\n\
    \  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number]\
    \ = min + ((number - min) * scale)\n  end\n  return new_numbers\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local range =\
    \ max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = math.floor(new_min + (new_max - new_min) * numbers[i])\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local factor = (max\
    \ - min) / (#numbers - 1)\n  local new_numbers = {}\n  for i = 1, #numbers do\n\
    \    new_numbers[i] = min + factor * (numbers[i] - min)\n  end\n  return new_numbers\n\
    end", "  local min = numbers[1]\n  local max = numbers[#numbers]\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = new_min + (new_max - new_min) * numbers[i] / range\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ length = #numbers\n  local scale = (max - min) / (length - 1)\n  local result\
    \ = {}\n  for i = 1, length do\n    result[i] = min + (numbers[i] - min) * scale\n\
    \  end\n  return result\nend", "  local min = table.min(numbers)\n  local max\
    \ = table.max(numbers)\n  local length = #numbers\n  local scale = (max - min)\
    \ / (length - 1)\n  local result = {}\n  for i = 1, length do\n    result[i] =\
    \ min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  local min\
    \ = math.min(numbers)\n  local max = math.max(numbers)\n  local range = max -\
    \ min\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number]\
    \ = ((number - min) / range) * 2.0\n  end\n  return new_numbers\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local scale =\
    \ (range == 0)\n    or ((range == 1) and (min == 0))\n    or ((range == 1) and\
    \ (min == max))\n    or ((range == 0) and (min == max))\n    or ((range == -1)\
    \ and (min == 0))\n    or ((range == -1) and (min == max))\n    or ((range ==\
    \ 1) and (min == max))\n    or ((range == 0) and (min == max))\n    or ((range\
    \ == -1) and (min == max))\n    or ((range == 1) and (min == max))\n    or ((range\
    \ == 0) and (min == max))\n    or ((range == -1) and (min == max))\n    or ((range\
    \ == 1) and (min == max))\n    or ((range == 0) and (min == max))\n    or ((range\
    \ == -1) and (min == max))\n    or ((range == 1) and (min == max))\n    or ((range\
    \ == 0) and (min == max))\n    or ((range == -1) and (min == max))\n    or ((range\
    \ == 1) and (min == max))\n    or ((range == 0) and (min == max))\n    or ((range\
    \ == -1) and (min == max))\n    or ((range == 1) and (min == max))\n    or ((range\
    \ == 0) and (min == max))\n    or ((range == -1) and (min == max))\n    or ((range\
    \ == 1) and (min == max))\n    or ((range == 0) and (min == max))\n    or ((range\
    \ == -1) and (min == max))\n    or ((range == 1) and (min == max))\n    or ((range\
    \ == 0) and (min == max))\n    or ((range == -1) and (min == max))\n    or ((range\
    \ == 1) and (min == max))\n    or ((range == 0) and (min == max))\n    or ((range\
    \ == -1) and (min == max))\n    or ((range == 1) and (min == max))\n    or ((range\
    \ == 0) and (min == max))\n    or ((range == -1) and (min == max))\n    or ((range\
    \ == 1) and (min == max))\n    or ((range == 0) and (min == max))\n    or ((range\
    \ == -1) and (min == max))\n    or ((range == 1) and (min == max))\n    or ((range\
    \ == 0) and (min == max))\n    or ((range ", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  assert(#numbers >= 2)\n  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = 1.0\
    \ / range\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return new_numbers\nend", "  local\
    \ min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale =\
    \ (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  assert(#numbers >= 2)\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n   \
    \ new_numbers[number] = math.floor(new_min + (new_max - new_min) * number / range)\n\
    \  end\n  return new_numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  for i = 2, #numbers do\n    numbers[i]\
    \ = numbers[i] - min + scale\n  end\n  return numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  assert(#numbers > 1)\n  local min = numbers[1]\n\
    \  local max = numbers[#numbers]\n  local scale = 1.0\n  if min == max then\n\
    \    return numbers\n  end\n  if min > max then\n    min = min - max\n    max\
    \ = max + min\n  end\n  local new_min = min - max\n  local new_max = max + min\n\
    \  local new_scale = (new_max - new_min) / (max - min)\n  local new_numbers =\
    \ {}\n  for i = 1, #numbers do\n    new_numbers[i] = new_min + scale * (numbers[i]\
    \ - min)\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local range = max - min\n  local scale = (range == 0)\n\
    \    or (range == 1)\n    or (range == -1)\n    or (range == -2) -- special case\
    \ for -2\n  assert(scale)\n  local new_numbers = {}\n  for i = 1, #numbers do\n\
    \    local n = numbers[i]\n    local new_n = ((n - min) / range) * scale\n   \
    \ new_numbers[i] = new_n\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local max\
    \ = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local result\
    \ = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * (numbers[i] -\
    \ min)\n  end\n  return result\nend", "  local min = numbers[1]\n  local max =\
    \ numbers[#numbers]\n  local scale = max - min\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    new_numbers[i] = numbers[i] - min\n  end\n  for i =\
    \ 1, #new_numbers do\n    new_numbers[i] = new_numbers[i] * scale + min\n  end\n\
    \  return new_numbers\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * i\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_range = new_max - new_min\n  local new_numbers = {}\n  for\
    \ i = 1, #numbers do\n    local n = numbers[i]\n    local new_n = ((n - min) *\
    \ new_range) / range\n    new_numbers[i] = new_n\n  end\n  return new_numbers\n\
    end", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local\
    \ scale = 1.0\n  if min == max then\n    return numbers\n  elseif min < 0 then\n\
    \    scale = 1.0 / min\n    min = -1 * min\n    max = -1 * max\n  end\n  local\
    \ new_numbers = {}\n  for _, number in ipairs(numbers) do\n    new_numbers[number]\
    \ = number * scale\n  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local length = #numbers\n  local scale =\
    \ 1.0\n  if min == max then\n    return numbers\n  end\n  if min == 0 then\n \
    \   scale = 1.0 / length\n  elseif max == 1 then\n    scale = 1.0 / length\n \
    \ else\n    scale = 1.0 / (max - min)\n  end\n  local new_numbers = {}\n  for\
    \ i = 1, length do\n    new_numbers[i] = numbers[i] * scale\n  end\n  return new_numbers\n\
    end", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local\
    \ scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers\
    \ do\n    result[i] = min + scale * i\n  end\n  return result\nend", "  local\
    \ min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + (numbers[i] - min) * scale\n  end\n  return result\nend",
  "  local min = math.min(numbers)\n  local max = math.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local scale\
    \ = (max - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    result[i] = min + scale * (numbers[i] - min)\n  end\n  return result\nend",
  "  local min = table.min(numbers)\n  local max = table.max(numbers)\n  local range\
    \ = max - min\n  local scale = 1.0 / range\n  local new_numbers = {}\n  for i\
    \ = 1, #numbers do\n    new_numbers[i] = min + scale * (numbers[i] - min)\n  end\n\
    \  return new_numbers\nend", "  local min = math.min(numbers)\n  local max = math.max(numbers)\n\
    \  local range = max - min\n  local scaled_numbers = {}\n  for _, number in ipairs(numbers)\
    \ do\n    scaled_numbers[number] = ((number - min) / range) * 2.0\n  end\n  return\
    \ scaled_numbers\nend", "  assert(#numbers >= 2)\n  local min = numbers[1]\n \
    \ local max = numbers[#numbers]\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local range = max - min\n  local new_min\
    \ = min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_numbers\
    \ = {}\n  for _, value in ipairs(numbers) do\n    new_numbers[value] = new_min\
    \ + (new_max - new_min) * value / range\n  end\n  return new_numbers\nend", " \
    \ local min = table.min(numbers)\n  local max = table.max(numbers)\n  local range\
    \ = max - min\n  local new_min = min - range * 0.1\n  local new_max = max + range\
    \ * 0.1\n  local new_numbers = {}\n  for _, number in ipairs(numbers) do\n   \
    \ new_numbers[number] = math.floor(new_min + (new_max - new_min) * number / range)\n\
    \  end\n  return new_numbers\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale * i\n  end\n\
    \  return result\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local range = max - min\n  local scale = (range == 0 and 1 or range / max)\
    \ -- if range == 0, then scale is 0\n  local new_numbers = {}\n  for _, value\
    \ in ipairs(numbers) do\n    new_numbers[value] = value * scale\n  end\n  return\
    \ new_numbers\nend", "  local min = table.min(numbers)\n  local max = table.max(numbers)\n\
    \  local range = max - min\n  local scale = (range == 0)\n    or (range == 1)\n\
    \    or (min == 0 and max == 1)\n    or (min == 0 and max == 0)\n    or (min ==\
    \ 1 and max == 0)\n    or (min == 0 and max == 1)\n    or (min == 0 and max ==\
    \ 0)\n    or (min == 0 and max == 1)\n    or (min == 1 and max == 0)\n    or (min\
    \ == 0 and max == 1)\n    or (min == 0 and max == 0)\n    or (min == 0 and max\
    \ == 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and max == 1)\n    or\
    \ (min == 0 and max == 0)\n    or (min == 0 and max == 1)\n    or (min == 1 and\
    \ max == 0)\n    or (min == 0 and max == 1)\n    or (min == 0 and max == 0)\n\
    \    or (min == 0 and max == 1)\n    or (min == 1 and max == 0)\n    or (min ==\
    \ 0 and max == 1)\n    or (min == 0 and max == 0)\n    or (min == 0 and max ==\
    \ 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and max == 1)\n    or (min\
    \ == 0 and max == 0)\n    or (min == 0 and max == 1)\n    or (min == 1 and max\
    \ == 0)\n    or (min == 0 and max == 1)\n    or (min == 0 and max == 0)\n    or\
    \ (min == 0 and max == 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and\
    \ max == 1)\n    or (min == 0 and max == 0)\n    or (min == 0 and max == 1)\n\
    \    or (min == 1 and max == 0)\n    or (min == 0 and max == 1)\n    or (min ==\
    \ 0 and max == 0)\n    or (min == 0 and max == 1)\n    or (min == 1 and max ==\
    \ 0)\n    or (min == 0 and max == 1)\n    or (min == 0 and max == 0)\n    or (min\
    \ == 0 and max == 1)\n    or (min == 1 and max == 0)\n    or (min == 0 and max\
    \ == 1)\n    or (min == 0 and max == 0)\n    or (min == 0 and max == 1)\n    or\
    \ (min == 1 and max == 0)\n    or (min == 0 and max == 1)\n    or (min == 0 and\
    \ max == 0)\n    or (min == 0 and max == 1)\n    or (min == 1 and max == 0)\n\
    \    or (min == 0 and max == 1)\n    or (min == 0 and max == 0)", "  local min\
    \ = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) /\
    \ (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local new_min =\
    \ min - range * 0.1\n  local new_max = max + range * 0.1\n  local new_range =\
    \ new_max - new_min\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = new_min + new_range * i / #numbers\n  end\n  return new_numbers\nend", " \
    \ local min = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max\
    \ - min) / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n   \
    \ result[i] = min + scale * i\n  end\n  return result\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local range = max - min\n  local scale = 1.0\
    \ / range\n  local result = {}\n  for _, v in ipairs(numbers) do\n    result[v]\
    \ = min + (v - min) * scale\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local scale = (max - min) / (#numbers - 1)\n  local result = {}\n  for i =\
    \ 1, #numbers do\n    result[i] = min + scale * (numbers[i] - min)\n  end\n  return\
    \ result\nend", "  assert(#numbers >= 2, \"rescale_to_unit expects table of at\
    \ least two elements\")\n  local min = numbers[1]\n  local max = numbers[#numbers]\n\
    \  local range = max - min\n  local scale = 1.0 / range\n  local new_numbers =\
    \ {}\n  for i = 1, #numbers do\n    new_numbers[i] = min + scale * (numbers[i]\
    \ - min)\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / 2.0\n  local result\
    \ = {}\n  for _, v in ipairs(numbers) do\n    table.insert(result, v - min + scale)\n\
    \  end\n  return result\nend", "  local min = math.min(numbers)\n  local max =\
    \ math.max(numbers)\n  local range = max - min\n  local new_min = min - range\
    \ * 0.1\n  local new_max = max + range * 0.1\n  local new_range = new_max - new_min\n\
    \  local new_numbers = {}\n  for i = 1, #numbers do\n    local n = numbers[i]\n\
    \    local new_n = ((n - new_min) / new_range) * new_range + new_min\n    new_numbers[i]\
    \ = new_n\n  end\n  return new_numbers\nend", "  local min = math.min(numbers)\n\
    \  local max = math.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ (numbers[i] - min)\n  end\n  return result\nend", "  local min = table.min(numbers)\n\
    \  local max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n\
    \  local result = {}\n  for i = 1, #numbers do\n    result[i] = min + scale *\
    \ i\n  end\n  return result\nend", "  local min = table.min(numbers)\n  local\
    \ max = table.max(numbers)\n  local scale = (max - min) / (#numbers - 1)\n  local\
    \ result = {}\n  for i = 1, #numbers do\n    result[i] = min + (numbers[i] - min)\
    \ * scale\n  end\n  return result\nend", "  local min = math.min(numbers)\n  local\
    \ max = math.max(numbers)\n  local range = max - min\n  local scaled_numbers =\
    \ {}\n  for _, number in ipairs(numbers) do\n    scaled_numbers[number] = ((number\
    \ - min) / range) * 2.0\n  end\n  return scaled_numbers\nend", "  local min =\
    \ math.min(numbers)\n  local max = math.max(numbers)\n  local scale = (max - min)\
    \ / (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  local min\
    \ = numbers[1]\n  local max = numbers[#numbers]\n  local scale = (max - min) /\
    \ (#numbers - 1)\n  local result = {}\n  for i = 1, #numbers do\n    result[i]\
    \ = min + scale * (numbers[i] - min)\n  end\n  return result\nend", "  local min\
    \ = table.min(numbers)\n  local max = table.max(numbers)\n  local range = max\
    \ - min\n  local new_min = min - range * 0.1\n  local new_max = max + range *\
    \ 0.1\n  local new_numbers = {}\n  for i = 1, #numbers do\n    new_numbers[i]\
    \ = math.floor((numbers[i] - min) / range * new_max + new_min)\n  end\n  return\
    \ new_numbers\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
