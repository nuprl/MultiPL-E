name: HumanEval_160_do_algebra
language: lua
prompt: "-- Given two tables operator, and operand. The first table has basic algebra\
  \ operations, and \n-- the second table is a table of integers. Use the two given\
  \ tables to build the algebric \n-- expression and return the evaluation of this\
  \ expression.\n-- The basic algebra operations:\n-- Addition ( + ) \n-- Subtraction\
  \ ( - ) \n-- Multiplication ( * ) \n-- Floor division ( // ) \n-- Exponentiation\
  \ ( ** ) \n-- Example:\n-- operator['+', '*', '-']\n-- table = [2, 3, 4, 5]\n--\
  \ result = 2 + 3 * 4 - 5\n-- => result = 9\n-- Note:\n-- The length of operator\
  \ table is equal to the length of operand table minus one.\n-- Operand is a table\
  \ of of non-negative integers.\n-- Operator table has at least one operator, and\
  \ operand table has at least two operands.\nlocal function do_algebra(operator,\
  \ operand)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = do_algebra\n\
  \    lu.assertEquals(candidate({'**', '*', '+'}, {2, 3, 4, 5}), 37)\n    lu.assertEquals(candidate({'+',\
  \ '*', '-'}, {2, 3, 4, 5}), 9)\n    lu.assertEquals(candidate({'//', '*'}, {7, 3,\
  \ 4}), 8)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local result = nil\n    local ops = #operator\n    local ops_len\
    \ = #operand\n    local ops_index = 1\n    local ops_index_next = 1\n    local\
    \ ops_index_prev = 1\n    local ops_index_prev2 = 1\n    local ops_index_prev3\
    \ = 1\n    local ops_index_prev4 = 1\n    local ops_index_prev5 = 1\n    local\
    \ ops_index_prev6 = 1\n    local ops_index_prev7 = 1\n    local ops_index_prev8\
    \ = 1\n    local ops_index_prev9 = 1\n    local ops_index_prev10 = 1\n    local\
    \ ops_index_prev11 = 1\n    local ops_index_prev12 = 1\n    local ops_index_prev13\
    \ = 1\n    local ops_index_prev14 = 1\n    local ops_index_prev15 = 1\n    local\
    \ ops_index_prev16 = 1\n    local ops_index_prev17 = 1\n    local ops_index_prev18\
    \ = 1\n    local ops_index_prev19 = 1\n    local ops_index_prev20 = 1\n    local\
    \ ops_index_prev21 = 1\n    local ops_index_prev22 = 1\n    local ops_index_prev23\
    \ = 1\n    local ops_index_prev24 = 1\n    local ops_index_prev25 = 1\n    local\
    \ ops_index_prev26 = 1\n    local ops_index_prev27 = 1\n    local ops_index_prev28\
    \ = 1\n    local ops_index_prev29 = 1\n    local ops_index_prev30 = 1\n    local\
    \ ops_index_prev31 = 1\n    local ops_index_prev32 = 1\n    local ops_index_prev33\
    \ = 1\n    local ops_index_prev34 = 1\n    local ops_index_prev35 = 1\n    local\
    \ ops_index_prev36 = 1\n    local ops_index_prev37 = 1\n    local ops_index_prev38\
    \ = 1\n    local ops_index_prev39 = 1\n    local ops_index_prev40 = 1\n    local\
    \ ops_index_prev41 = 1\n    local ops_index_prev42 = 1\n    local ops_index_prev43\
    \ = 1\n    local ops_index_prev44 = 1\n    local ops_index_prev45 = 1\n    local\
    \ ops_index_prev46 = 1\n    local ops_index_prev47 = 1\n    local ops_index_prev48\
    \ = 1\n    local ops_index_prev49 = 1\n    local ops_index_prev50 = 1\n    local\
    \ ops_index_prev51 = 1\n    local ops_index_prev52 = 1\n    local ", "    local\
    \ result = nil\n    local operator_count = #operator\n    local operand_count\
    \ = #operand\n    local operator_table = operator\n    local operand_table = operand\n\
    \    local operator_stack = {}\n    local operand_stack = {}\n    local operator_stack_size\
    \ = #operator_stack\n    local operand_stack_size = #operand_stack\n    local\
    \ operator_stack_pointer = operator_stack_size\n    local operand_stack_pointer\
    \ = operand_stack_size\n    local operator_stack_pointer_pointer = operator_stack_pointer\n\
    \    local operand_stack_pointer_pointer = operand_stack_pointer\n    local operator_stack_pointer_pointer_pointer\
    \ = operator_stack_pointer_pointer\n    local operand_stack_pointer_pointer_pointer\
    \ = operand_stack_pointer_pointer\n    local operator_pointer = operator_stack_pointer\n\
    \    local operand_pointer = operand_stack_pointer\n    local operator_pointer_pointer\
    \ = operator_pointer\n    local operand_pointer_pointer = operand_pointer\n  \
    \  local operator_pointer_pointer_pointer = operator_pointer_pointer\n    local\
    \ operand_pointer_pointer_pointer = operand_pointer_pointer\n    local operator_pointer_pointer_pointer_pointer\
    \ = operator_pointer_pointer_pointer\n    local operand_pointer_pointer_pointer_pointer\
    \ = operand_pointer_pointer_pointer\n    local operator_pointer_pointer_pointer_pointer_pointer\
    \ = operator_pointer_pointer_pointer_pointer\n    local operand_pointer_pointer_pointer_pointer_pointer\
    \ = operand_pointer_pointer_pointer_pointer\n    local operator_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = operator_pointer_pointer_pointer_pointer_pointer\n    local operand_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = operand_pointer_pointer_pointer_pointer_pointer_pointer\n    local operator_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = operator_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n    local\
    \ operand_pointer_pointer_pointer_pointer_pointer_pointer_pointer = operand_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n\
    \    local operator_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = operator_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n\
    \    local operand_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\
    \ = operand_pointer_pointer_pointer_pointer_pointer_pointer_pointer_pointer\n\
    \    local operator_pointer_pointer_pointer_pointer_", "    local result = operand[1]\n\
    \    for i = 2, #operand do\n        result = operator[operator](result, operand[i])\n\
    \    end\n    return result\nend", "  local result = operand[1]\n  for i = 2,\
    \ #operand do\n    result = operator[result]\n  end\n  return result\nend", " \
    \ local result = nil\n  local length = #operand\n  local i = 0\n  local j = 0\n\
    \  while i < length do\n    local op = operator[i]\n    local a = operand[i]\n\
    \    local b = operand[i + 1]\n    local c = operand[i + 2]\n    local d = operand[i\
    \ + 3]\n    local e = operand[i + 4]\n    local f = operand[i + 5]\n    local\
    \ g = operand[i + 6]\n    local h = operand[i + 7]\n    local i = i + 8\n    if\
    \ op == '+' then\n      result = a + b\n    elseif op == '-' then\n      result\
    \ = a - b\n    elseif op == '*' then\n      result = a * b\n    elseif op == '/'\
    \ then\n      result = a / b\n    elseif op == '//' then\n      result = a //\
    \ b\n    elseif op == '**' then\n      result = a ** b\n    end\n  end\n  return\
    \ result\nend", "  local result = operand[1]\n  for i = 2, #operand do\n    result\
    \ = operator[operand[i-1]](result, operand[i])\n  end\n  return result\nend",
  "  local result = operand[1]\n  for i = 2, #operand do\n    result = operator[result]\n\
    \  end\n  return result\nend", "\tlocal result = nil\n\tlocal operator_count =\
    \ #operator\n\tlocal operand_count = #operand\n\tlocal operator_table = operator\n\
    \tlocal operand_table = operand\n\tlocal operator_stack = { }\n\tlocal operand_stack\
    \ = { }\n\tlocal operator_stack_size = #operator_stack\n\tlocal operand_stack_size\
    \ = #operand_stack\n\tlocal operator_stack_index = 1\n\tlocal operand_stack_index\
    \ = 1\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\
    \tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal\
    \ operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value\
    \ = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\
    \tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal\
    \ operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value\
    \ = nil\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\
    \tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal\
    \ operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value\
    \ = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\
    \tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal\
    \ operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value\
    \ = nil\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\
    \tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal\
    \ operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value\
    \ = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\
    \tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal\
    \ operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value\
    \ = nil\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\
    \tlocal operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal\
    \ operator_stack_value = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value\
    \ = nil\n\tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\
    \tlocal operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal\
    \ operand_stack_value = nil\n\tlocal operator_stack_value = nil\n\tlocal operand_stack_value\
    \ = nil\n\tlocal operator_stack_value = nil", "\tlocal result = nil\n\tlocal length\
    \ = #operand\n\tlocal i = 0\n\twhile i < length do\n\t\tlocal op = operator[i]\n\
    \t\tlocal operand1 = operand[i]\n\t\tlocal operand2 = operand[i + 1]\n\t\tlocal\
    \ result1 = nil\n\t\tlocal result2 = nil\n\t\tif op == '+' then\n\t\t\tresult1\
    \ = operand1 + operand2\n\t\telseif op == '-' then\n\t\t\tresult1 = operand1 -\
    \ operand2\n\t\telseif op == '*' then\n\t\t\tresult1 = operand1 * operand2\n\t\
    \telseif op == '/' then\n\t\t\tresult1 = operand1 // operand2\n\t\telseif op ==\
    \ '**' then\n\t\t\tresult1 = operand1 ** operand2\n\t\tend\n\t\tif result1 ~=\
    \ nil then\n\t\t\tresult = result1\n\t\t\ti = length\n\t\tend\n\t\ti = i + 1\n\
    \tend\n\treturn result\nend", "    local result = 0\n    for i = 1, #operand do\n\
    \        local op = operator[i]\n        local operand1 = operand[i]\n       \
    \ local operand2 = operand[i + 1]\n        local op1 = operator[op]\n        local\
    \ op2 = operator[op + 1]\n        if op1 then\n            local tmp1 = op1(operand1,\
    \ operand2)\n            if tmp1 then\n                result = result + tmp1\n\
    \            end\n        else\n            if op2 then\n                local\
    \ tmp2 = op2(operand1, operand2)\n                if tmp2 then\n             \
    \       result = result + tmp2\n                end\n            end\n       \
    \ end\n    end\n    return result\nend", "\tlocal result = operand[1]\n\tfor i\
    \ = 2, #operand do\n\t\tresult = operator[operator](result, operand[i])\n\tend\n\
    \treturn result\nend", "  local result = operand[1]\n  for i = 2, #operand do\n\
    \    result = operator[operator](result, operand[i])\n  end\n  return result\n\
    end", "\tlocal result = nil\n\tlocal length = #operand\n\tlocal i = 0\n\tlocal\
    \ j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o\
    \ = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t =\
    \ 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\
    \tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\t\
    local e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal\
    \ j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o\
    \ = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t =\
    \ 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\
    \tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\t\
    local e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal\
    \ j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o\
    \ = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t =\
    \ 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\
    \tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\t\
    local e = 0\n\tlocal f = 0\n\tlocal g = 0\n\tlocal h = 0\n\tlocal i = 0\n\tlocal\
    \ j = 0\n\tlocal k = 0\n\tlocal l = 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o\
    \ = 0\n\tlocal p = 0\n\tlocal q = 0\n\tlocal r = 0\n\tlocal s = 0\n\tlocal t =\
    \ 0\n\tlocal u = 0\n\tlocal v = 0\n\tlocal w = 0\n\tlocal x = 0\n\tlocal y = 0\n\
    \tlocal z = 0\n\tlocal a = 0\n\tlocal b = 0\n\tlocal c = 0\n\tlocal d = 0\n\t\
    local e = 0\n\tlocal f = 0", "  local result = operand[1]\n  for i = 2, #operand\
    \ do\n    result = operator[operator](result, operand[i])\n  end\n  return result\n\
    end", "  local result = operand[1]\n  for i = 2, #operand do\n    result = operator[operand[i-1]](result,\
    \ operand[i])\n  end\n  return result\nend", "  local result = nil\n  local operator_count\
    \ = #operator\n  local operand_count = #operand\n  local operator_table = {}\n\
    \  local operand_table = {}\n  for i = 1, operand_count do\n    operand_table[i]\
    \ = operand[i]\n  end\n  for i = 1, operator_count do\n    operator_table[i] =\
    \ operator[i]\n  end\n  local operator_stack = {}\n  local operand_stack = {}\n\
    \  local operator_stack_size = #operator_stack\n  local operand_stack_size = #operand_stack\n\
    \  local operator_stack_index = 1\n  local operand_stack_index = 1\n  local operator_stack_value\
    \ = nil\n  local operand_stack_value = nil\n  local operator_stack_top = operator_stack[operator_stack_index]\n\
    \  local operand_stack_top = operand_stack[operand_stack_index]\n  while operator_stack_top\
    \ ~= nil do\n    local operator = operator_table[operator_stack_top]\n    local\
    \ operand = operand_table[operand_stack_top]\n    local operator_stack_index =\
    \ operator_stack_index + 1\n    local operand_stack_index = operand_stack_index\
    \ + 1\n    local operator_stack_value = operator_stack[operator_stack_index]\n\
    \    local operand_stack_value = operand_stack[operand_stack_index]\n    local\
    \ result = nil\n    if operator == '+' then\n      result = operand_stack_value\
    \ + operator_stack_value\n    elseif operator == '-' then\n      result = operand_stack_value\
    \ - operator_stack_value\n    elseif operator == '*' then\n      result = operand_stack_value\
    \ * operator_stack_value\n    elseif operator == '/' then\n      result = operand_stack_value\
    \ // operator_stack_value\n    elseif operator == '%' then\n      result = operand_stack_value\
    \ % operator_stack_value\n    elseif operator == '**' then\n      result = operand_stack_value\
    \ ^ operator_stack_value\n    end\n    operand_stack[operand_stack_index] = result\n\
    \    operator_stack[operator_stack_index] = nil\n  end\n  return result\nend",
  "  local result = nil\n  local length = #operand\n  for i = 1, length do\n    local\
    \ operand1 = operand[i]\n    local operand2 = operand[i - 1]\n    local operator1\
    \ = operator[i]\n    local operator2 = operator[i - 1]\n    local result1 = nil\n\
    \    local result2 = nil\n    local result3 = nil\n    local result4 = nil\n \
    \   local result5 = nil\n    local result6 = nil\n    local result7 = nil\n  \
    \  local result8 = nil\n    local result9 = nil\n    local result10 = nil\n  \
    \  local result11 = nil\n    local result12 = nil\n    local result13 = nil\n\
    \    local result14 = nil\n    local result15 = nil\n    local result16 = nil\n\
    \    local result17 = nil\n    local result18 = nil\n    local result19 = nil\n\
    \    local result20 = nil\n    local result21 = nil\n    local result22 = nil\n\
    \    local result23 = nil\n    local result24 = nil\n    local result25 = nil\n\
    \    local result26 = nil\n    local result27 = nil\n    local result28 = nil\n\
    \    local result29 = nil\n    local result30 = nil\n    local result31 = nil\n\
    \    local result32 = nil\n    local result33 = nil\n    local result34 = nil\n\
    \    local result35 = nil\n    local result36 = nil\n    local result37 = nil\n\
    \    local result38 = nil\n    local result39 = nil\n    local result40 = nil\n\
    \    local result41 = nil\n    local result42 = nil\n    local result43 = nil\n\
    \    local result44 = nil\n    local result45 = nil\n    local result46 = nil\n\
    \    local result47 = nil\n    local result48 = nil\n    local result49 = nil\n\
    \    local result50 = nil\n    local result51 = nil\n    local result52 = nil\n\
    \    local result53 = nil\n    local result54 = nil\n    local result55 = nil\n\
    \    local result56 = nil\n    local result57 = nil\n    local result58 = nil\n\
    \    local result59 = nil\n    local result60 = nil\n    local result61 = nil\n\
    \    local result62 = nil\n    local result63 = nil\n    local result64 = nil\n\
    \    local result65 = nil\n    local result66 = nil\n    local result67 = nil\n\
    \    local result68 = nil\n    ", "  local result = nil\n  local i = 0\n  local\
    \ j = 0\n  local k = 0\n  local l = 0\n  local m = 0\n  local n = 0\n  local o\
    \ = 0\n  local p = 0\n  local q = 0\n  local r = 0\n  local s = 0\n  local t =\
    \ 0\n  local u = 0\n  local v = 0\n  local w = 0\n  local x = 0\n  local y = 0\n\
    \  local z = 0\n  local a = 0\n  local b = 0\n  local c = 0\n  local d = 0\n \
    \ local e = 0\n  local f = 0\n  local g = 0\n  local h = 0\n  local i = 0\n  local\
    \ j = 0\n  local k = 0\n  local l = 0\n  local m = 0\n  local n = 0\n  local o\
    \ = 0\n  local p = 0\n  local q = 0\n  local r = 0\n  local s = 0\n  local t =\
    \ 0\n  local u = 0\n  local v = 0\n  local w = 0\n  local x = 0\n  local y = 0\n\
    \  local z = 0\n  local a = 0\n  local b = 0\n  local c = 0\n  local d = 0\n \
    \ local e = 0\n  local f = 0\n  local g = 0\n  local h = 0\n  local i = 0\n  local\
    \ j = 0\n  local k = 0\n  local l = 0\n  local m = 0\n  local n = 0\n  local o\
    \ = 0\n  local p = 0\n  local q = 0\n  local r = 0\n  local s = 0\n  local t =\
    \ 0\n  local u = 0\n  local v = 0\n  local w = 0\n  local x = 0\n  local y = 0\n\
    \  local z = 0\n  local a = 0\n  local b = 0\n  local c = 0\n  local d = 0\n \
    \ local e = 0\n  local f = 0\n  local g = 0\n  local h = 0\n  local i = 0\n  local\
    \ j = 0\n  local k = 0\n  local l = 0\n  local m = 0\n  local n = 0\n  local o\
    \ = 0\n  local p = 0\n  local q = 0\n  local r = 0\n  local s = 0\n  local t =\
    \ 0\n  local u = 0\n  local v = 0\n  local w = 0\n  local x = 0\n  local y = 0\n\
    \  local z = 0\n  local a = 0\n  local b = 0\n  local c = 0\n  local d = 0\n \
    \ local e = 0\n  local f = 0\n  local g = 0\n", "\tlocal result = nil\n\tlocal\
    \ length = #operand\n\tlocal i = 0\n\tlocal j = 0\n\tlocal k = 0\n\tlocal l =\
    \ 0\n\tlocal m = 0\n\tlocal n = 0\n\tlocal o = 0\n\tlocal p = 0\n\tlocal q = 0\n\
    \tlocal r = 0\n\tlocal s = 0\n\tlocal t = 0\n\tlocal u = 0\n\tlocal v = 0\n\t\
    local w = 0\n\tlocal x = 0\n\tlocal y = 0\n\tlocal z = 0\n\tlocal a = 0\n\tlocal\
    \ b = 0\n\tlocal c = 0\n\tlocal d = 0\n\tlocal e = 0\n\tlocal f = 0\n\tlocal g\
    \ = 0\n\tlocal h = 0\n\tlocal i = 1\n\tlocal j = 1\n\tlocal k = 1\n\tlocal l =\
    \ 1\n\tlocal m = 1\n\tlocal n = 2\n\tlocal o = 2\n\tlocal p = 2\n\tlocal q = 2\n\
    \tlocal r = 2\n\tlocal s = 2\n\tlocal t = 2\n\tlocal u = 2\n\tlocal v = 3\n\t\
    local w = 4\n\tlocal x = 5\n\tlocal y = 6\n\tlocal z = 7\n\tlocal a = 8\n\tlocal\
    \ b = 9\n\tlocal c = 10\n\tlocal d = 11\n\tlocal e = 12\n\tlocal f = 13\n\tlocal\
    \ g = 14\n\tlocal h = 15\n\tlocal i = 2\n\tlocal j = 3\n\tlocal k = 4\n\tlocal\
    \ l = 5\n\tlocal m = 6\n\tlocal n = 7\n\tlocal o = 8\n\tlocal p = 9\n\tlocal q\
    \ = 10\n\tlocal r = 11\n\tlocal s = 12\n\tlocal t = 13\n\tlocal u = 14\n\tlocal\
    \ v = 15\n\tlocal w = 16\n\tlocal x = 17\n\tlocal y = 18\n\tlocal z = 19\n\tlocal\
    \ a = 20\n\tlocal b = 21\n\tlocal c = 22\n\tlocal d = 23\n\tlocal e = 24\n\tlocal\
    \ f = 25\n\tlocal g = 26\n\tlocal h = 27\n\tlocal i = 2\n\tlocal j = 3\n\tlocal\
    \ k = 4\n\tlocal l = 5\n\tlocal m = 6\n\tlocal n = 7\n\tlocal o = 8\n\tlocal p\
    \ = 9\n\tlocal q = 10\n\tlocal r = 11\n\tlocal s = 12\n\tlocal t = 13\n\tlocal\
    \ u = 14\n\tlocal v = 15\n\tlocal w = 16\n\tlocal x = 17\n\tlocal y = 18\n\tlocal\
    \ z = 19\n\tlocal a = 20\n\tlocal b = 21\n\tlocal c = 22\n\tlocal d = 23\n\tlocal\
    \ e = ", "  local result = operand[1]\n  for i = 2, #operand do\n    result =\
    \ operator[result]\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
