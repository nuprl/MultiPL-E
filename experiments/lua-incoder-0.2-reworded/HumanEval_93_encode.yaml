name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n--\
  \ >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n  local vowels =\
    \ \"aeiou\"\n  local result = \"\"\n  for i = 1, #message do\n    local letter\
    \ = message[i]\n    local index = alphabet .. vowels\n    local letterIndex =\
    \ alphabet .. vowels\n    for j = 1, #letter do\n      if letter:sub(i, i + j)\
    \ == index:sub(i, i + j) then\n        letterIndex = index:sub(i, i + j)\n   \
    \   end\n    end\n    local vowelIndex = letterIndex .. vowels\n    for j = 1,\
    \ #vowelIndex do\n      if vowelIndex:sub(i, i + j) == vowels:sub(i, i + j) then\n\
    \        vowelIndex = vowelIndex:sub(i, i + j)\n      end\n    end\n    local\
    \ letterIndex = letterIndex .. vowels\n    for j = 1, #letterIndex do\n      if\
    \ letterIndex:sub(i, i + j) == letter:sub(i, i + j) then\n        letterIndex\
    \ = letterIndex:sub(i, i + j)\n      end\n    end\n    local letterIndex = letterIndex\
    \ .. vowels\n    for j = 1, #letterIndex do\n      if letterIndex:sub(i, i + j)\
    \ == vowels:sub(i, i + j) then\n        letterIndex = letterIndex:sub(i, i + j)\n\
    \      end\n    end\n    local letterIndex = letterIndex .. vowels\n    for j\
    \ = 1, #letterIndex do\n      if letterIndex:sub(i, i + j) == index:sub(i, i +\
    \ j) then\n        letterIndex = letterIndex:sub(i, i + j)\n      end\n    end\n\
    \    local letterIndex = letterIndex .. vowels\n    for j = 1, #letterIndex do\n\
    \      if letterIndex:sub(i, i + j) == vowels:sub(i, i + j) then\n        letterIndex\
    \ = letterIndex:sub(i, i + j)\n      end\n    end\n    local letterIndex = letterIndex\
    \ .. vowels\n    for j = 1, #letterIndex do\n      if letterIndex:sub(i, i + j)\
    \ == index:sub(i, i + j) then\n        letterIndex = letterIndex:sub(i, i + j)\n\
    \      end\n    end\n    local letterIndex = letterIndex .. vowels\n    for j\
    \ = 1, #letterIndex do\n      if letterIndex:sub(i, i + j) == vowels:sub(i, i\
    \ + j) then\n        letterIndex = letterIndex:sub(i, i + j)\n      end\n    end\n\
    \    local letterIndex = letterIndex .. vowels\n    for j = 1, #letterIndex do\n\
    \      if letterIndex:sub(i, i + j) == index:sub(i, i + j) then\n        letterIndex\
    \ = letterIndex:sub(i, i + j)\n      end\n    end", "    local alphabet = {\n\
    \        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n\
    \        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n\
    \        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z',\n        'a', 'b',\
    \ 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r',\
    \ 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n        'A', 'B', 'C', 'D', 'E', 'F',\
    \ 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V',\
    \ 'W', 'X', 'Y', 'Z',\n        'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j',\
    \ 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z',\n\
    \        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M', 'N',\
    \ 'O', 'P', 'Q', '", "  local vowels = {'a','e','i','o','u'}\n  local alphabet\
    \ = {string.char(tonumber(string.sub(message,1,1))),\n                    string.char(tonumber(string.sub(message,2,2))),\n\
    \                    string.char(tonumber(string.sub(message,3,3))),\n       \
    \             string.char(tonumber(string.sub(message,4,4))),\n              \
    \      string.char(tonumber(string.sub(message,5,5))),\n                    string.char(tonumber(string.sub(message,6,6)))}\n\
    \  local result = ''\n  for i = 1, #message do\n    local letter = alphabet[string.find(message,vowels,i)]\n\
    \    local vowel = vowels[string.find(message,vowels,i)]\n    local next = alphabet[string.find(message,vowels,i+1)]\n\
    \    if letter == vowel then\n      result = result .. letter\n    elseif letter\
    \ == next then\n      result = result .. letter\n      result = result .. letter\n\
    \    else\n      result = result .. letter\n      result = result .. letter\n\
    \      result = result .. letter\n    end\n  end\n  return result\nend", "   \
    \ local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\
    \n    local output = ''\n    for i = 1, #message do\n        local letter = message[i]\n\
    \        if letter ~= nil then\n            local index = alphabet + alphabet:sub(i,\
    \ i + 1)\n            local vowel_index = index:sub(i, i + 1)\n            local\
    \ vowel_letter = vowels:sub(vowel_index, vowel_index + 1)\n            local letter_index\
    \ = alphabet:sub(i, i + 1)\n            local letter_letter = alphabet:sub(letter_index,\
    \ letter_index + 1)\n            local new_letter = letter\n            if letter:lower()\
    \ == letter then\n                new_letter = letter_letter\n            end\n\
    \            if vowel_letter ~= nil then\n                new_letter = vowel_letter\n\
    \            end\n            output = output .. new_letter\n        end\n   \
    \ end\n    return output\nend", "  -- Write your code here\n  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local alphabet = {'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'}\n  local new_message = ''\n  for i = 1, #message do\n    local\
    \ letter = message[i]\n    local new_letter = letter\n    for j = 1, #vowels do\n\
    \      if letter == vowels[j] then\n        new_letter = alphabet[#alphabet]\n\
    \        break\n      end\n    end\n    new_message = new_message .. new_letter\n\
    \  end\n  return new_message\nend", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local vowels = \"aeiou\"\n    local result = \"\"\n    local vowelIndex\
    \ = 0\n    local currentLetter = message[1]\n    local currentVowel = message[2]\n\
    \    local currentVowelIndex = #alphabet", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\
    \n    local vowels = \"aeiou\"\n    local output = ''\n    local index = 1\n \
    \   for i = 1, #message do\n        if string.sub(message, i, i) ~= '' then\n\
    \            local letter = string.sub(message, i, i)\n            local vowel\
    \ = string.sub(message, i, i+1)\n            local letterIndex = alphabet.find(letter)\n\
    \            local vowelIndex = alphabet.find(vowel)\n            if letterIndex\
    \ > -1 and vowelIndex > -1 then\n                local newLetter = alphabet[letterIndex\
    \ + 1]\n                local newVowel = alphabet[vowelIndex + 1]\n          \
    \      output = output .. newLetter .. newVowel\n            else\n          \
    \      output = output .. letter\n            end\n        end\n        index\
    \ = index + 1\n    end\n    return output\nend", "  local alphabet = \"ABCDEFGHIJKLMNOPQRSTUVWXYZ\"\
    \n  local vowels = \"AEIOU\"\n  local result = \"\"\n  for i = 1, #message do\n\
    \    local letter = message[i]\n    local vowel = string.sub(letter, 1, 1)\n \
    \   local index = alphabet + vowels\n    local letter2 = string.sub(letter, 2)\n\
    \    local letter3 = string.sub(letter, 3)\n    local letter4 = string.sub(letter,\
    \ 4)\n    local letter5 = string.sub(letter, 5)\n    local letter6 = string.sub(letter,\
    \ 6)\n    local letter7 = string.sub(letter, 7)\n    local letter8 = string.sub(letter,\
    \ 8)\n    local letter9 = string.sub(letter, 9)\n    local letter10 = string.sub(letter,\
    \ 10)\n    local letter11 = string.sub(letter, 11)\n    local letter12 = string.sub(letter,\
    \ 12)\n    local letter13 = string.sub(letter, 13)\n    local letter14 = string.sub(letter,\
    \ 14)\n    local letter15 = string.sub(letter, 15)\n    local letter16 = string.sub(letter,\
    \ 16)\n    local letter17 = string.sub(letter, 17)\n    local letter18 = string.sub(letter,\
    \ 18)\n    local letter19 = string.sub(letter, 19)\n    local letter20 = string.sub(letter,\
    \ 20)\n    local letter21 = string.sub(letter, 21)\n    local letter22 = string.sub(letter,\
    \ 22)\n    local letter23 = string.sub(letter, 23)\n    local letter24 = string.sub(letter,\
    \ 24)\n    local letter25 = string.sub(letter, 25)\n    local letter26 = string.sub(letter,\
    \ 26)\n    local letter27 = string.sub(letter, 27)\n    local letter28 = string.sub(letter,\
    \ 28)\n    local letter29 = string.sub(letter, 29)\n    local letter30 = string.sub(letter,\
    \ 30)\n    local letter31 = string.sub(letter, 31)\n    local letter32 = string.sub(letter,\
    \ 32)\n    local letter33 = string.sub(letter, 33)\n    local letter34 = string.sub(letter,\
    \ 34)\n    local letter35 = string.sub(letter, 35)\n    local letter36 = string.sub(letter,\
    \ 36)\n    local letter37 = string.sub(letter, 37)\n    local letter38 = string.sub(letter,\
    \ 38)\n    local letter39 = string.sub(letter, 39)\n    local letter40 = string.sub(letter,\
    \ 40)\n    local letter41 = string.sub(letter, 41)\n    local ", "  local alphabet\
    \ = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n  local newMessage\
    \ = ''\n  for i = 1, #message do\n    local letter = message[i]\n    local newLetter\
    \ = letter\n    for j = 1, #alphabet do\n      if letter == alphabet[j] then\n\
    \        newLetter = alphabet[(j + #alphabet)%#alphabet]\n      end\n    end\n\
    \    for j = 1, #vowels do\n      if letter == vowels[j] then\n        newLetter\
    \ = alphabet[(j + #alphabet)%#alphabet]\n      end\n    end\n    newMessage =\
    \ newMessage .. newLetter\n  end\n  return newMessage\nend", "    local alphabet\
    \ = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels = \"aeiou\"\n    local output\
    \ = ''\n    for i = 1, #message do\n        local char = message[i]\n        if\
    \ char in vowels then\n            local index = alphabet + alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet:find(char, alphabet:find(char, alphabet:find(char,\
    \ alphabet:find(char, alphabet", "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowels = 'aeiou'\n  local output = ''\n  for i = 1, #message do\n   \
    \ local letter = message[i]\n    local position = alphabet .. vowels .. alphabet\n\
    \    local letterIndex = alphabet + letter\n    local vowelIndex = position +\
    \ letter\n    local replacement = alphabet[letterIndex:sub(1,2)]\n    output =\
    \ output .. replacement\n  end\n  return output\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local output = ''\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter ~= ' ' then\n          \
    \  local index = alphabet + letter\n            local letter2 = alphabet:sub(i,\
    \ i + 1)\n            local letter3 = alphabet:sub(i + 1, i + 2)\n           \
    \ local letter4 = alphabet:sub(i + 2, i + 3)\n            local letter5 = alphabet:sub(i\
    \ + 3, i + 4)\n            local letter6 = alphabet:sub(i + 4, i + 5)\n      \
    \      local letter7 = alphabet:sub(i + 5, i + 6)\n            local letter8 =\
    \ alphabet:sub(i + 6, i + 7)\n            local letter9 = alphabet:sub(i + 7,\
    \ i + 8)\n            local letter10 = alphabet:sub(i + 8, i + 9)\n          \
    \  local letter11 = alphabet:sub(i + 9, i + 10)\n            local letter12 =\
    \ alphabet:sub(i + 10, i + 11)\n            local letter13 = alphabet:sub(i +\
    \ 11, i + 12)\n            local letter14 = alphabet:sub(i + 12, i + 13)\n   \
    \         local letter15 = alphabet:sub(i + 13, i + 14)\n            local letter16\
    \ = alphabet:sub(i + 14, i + 15)\n            local letter17 = alphabet:sub(i\
    \ + 15, i + 16)\n            local letter18 = alphabet:sub(i + 16, i + 17)\n \
    \           local letter19 = alphabet:sub(i + 17, i + 18)\n            local letter20\
    \ = alphabet:sub(i + 18, i + 19)\n            local letter21 = alphabet:sub(i\
    \ + 19, i + 20)\n            local letter22 = alphabet:sub(i + 20, i + 21)\n \
    \           local letter23 = alphabet:sub(i + 21, i + 22)\n            local letter24\
    \ = alphabet:sub(i + 22, i + 23)\n            local letter25 = alphabet:sub(i\
    \ + 23, i + 24)\n            local letter26 = alphabet:sub(i + 24, i + 25)\n \
    \           local letter27 = alphabet:sub(i + 25, i + 26)\n            local letter28\
    \ = alphabet:sub(i + 26, i + 27)\n            local letter29 = alphabet:sub(i\
    \ + 27, i + 28)\n            local letter30 = alphabet:sub(i + 28, i + 29)\n \
    \           local letter31 = alphabet:sub(i + 29, i + 30)\n            local letter32\
    \ = alphabet:sub(i + 30, i + 31)\n            local letter33 = alphabet:sub(i\
    \ + 31, i + 32)\n            local letter34 = alphabet:sub(i + 32, ", "  -- Write\
    \ your code here\n  local vowels = {'a','e','i','o','u','y'}\n  local alphabet\
    \ = {'a','b','c','d','e','f','g','h','i','j','k','l','m','n','o','p','q','r','s','t','u','v','w','x','y','z'}\n\
    \  local result = \"\"\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel = letter:sub(1,1)\n    local index = alphabet:find(vowel)\n \
    \   if index == nil then\n      index = alphabet:find(vowel:sub(1,2))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,3))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,4))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,5))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,6))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,7))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,8))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,9))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,10))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,11))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,12))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,13))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,14))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,15))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,16))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,17))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,18))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,19))\n    end\n\
    \    if index == nil then\n      index = alphabet:find(vowel:sub(1,20))\n    end\n\
    \    if index == nil ", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n \
    \   local vowels = 'aeiou'\n    local output = ''\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        local vowel = letter:sub(1, 1)\n \
    \       local position = alphabet:find(vowel)\n        if position == nil then\n\
    \            position = alphabet + 1\n        end\n        local nextLetter =\
    \ alphabet:sub(position + 1, position)\n        local nextVowel = alphabet:find(nextLetter)\n\
    \        if nextVowel == nil then\n            nextVowel = alphabet + 1\n    \
    \    end\n        local newLetter = alphabet:sub(nextVowel + 1, nextVowel)\n \
    \       output = output .. newLetter\n    end\n    return output\nend", "  --\
    \ Write your code here\n  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local alphabet\
    \ = {string.char(tonumber(string.sub(message, i, i + 1)))}\n  local new_message\
    \ = \"\"\n  for i = 1, #message do\n    if alphabet[i] then\n      new_message\
    \ = new_message .. alphabet[string.sub(message, i, i + 1)] .. alphabet[string.sub(message,\
    \ i + 1, i + 2)] \n    end\n  end\n  return new_message\nend", "    local alphabet\
    \ = {\n        'A', 'B', 'C', 'D', 'E', 'F', 'G', 'H', 'I', 'J', 'K', 'L', 'M',\
    \ \n        'N', 'O', 'P', 'Q', 'R', 'S', 'T', 'U', 'V', 'W', 'X', 'Y', 'Z'\n\
    \    }\n    local vowels = {\n        'a', 'e', 'i', 'o', 'u', 'y'\n    }\n  \
    \  local messageLength = #message\n    local encodedMessage = ''\n    local index\
    \ = 0\n    while index <= messageLength do\n        local currentChar = message[index]\n\
    \        local nextChar = message[index + 1]\n        local currentCharIndex =\
    \ alphabet.indexOf(currentChar)\n        local nextCharIndex = alphabet.indexOf(nextChar)\n\
    \        if currentCharIndex > -1 and nextCharIndex > -1 then\n            local\
    \ currentCharVowelIndex = vowels.indexOf(currentChar)\n            local nextCharVowelIndex\
    \ = vowels.indexOf(nextChar)\n            if currentCharVowelIndex > -1 and nextCharVowelIndex\
    \ > -1 then\n                local currentCharVowelIndex = currentCharIndex +\
    \ 2\n                local nextCharVowelIndex = nextCharIndex + 2\n          \
    \      if currentCharVowelIndex > -1 and nextCharVowelIndex > -1 then\n      \
    \              local currentChar = alphabet[currentCharIndex]\n              \
    \      local nextChar = alphabet[nextCharIndex]\n                    local currentCharVowel\
    \ = alphabet[currentCharVowelIndex]\n                    local nextCharVowel =\
    \ alphabet[nextCharVowelIndex]\n                    local newChar = alphabet[currentCharVowelIndex\
    \ + 1]\n                    encodedMessage = encodedMessage .. newChar\n     \
    \           else\n                    encodedMessage = encodedMessage .. currentChar\n\
    \                end\n            else\n                encodedMessage = encodedMessage\
    \ .. currentChar\n            end\n        else\n            encodedMessage =\
    \ encodedMessage .. currentChar\n        end\n        index = index + 1\n    end\n\
    \    return encodedMessage\nend", "  -- Write your code here\n  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u', 'A', 'E', 'I', 'O', 'U'}\n  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \  local vowel_positions = {}\n  for i = 1, #message do\n    local letter = message[i]\n\
    \    local vowel_position = alphabet + letter\n    vowel_positions[letter] = vowel_position\n\
    \  end\n  local new_message = {}\n  for i = 1, #message do\n    local letter =\
    \ message[i]\n    local vowel_position = vowel_positions[letter]\n    local vowel_letter\
    \ = alphabet:sub(vowel_position, 1)\n    local new_letter = alphabet:sub(vowel_position\
    \ + 1, 1)\n    new_message[i] = vowel_letter + new_letter\n  end\n  return table.concat(new_message)\n\
    end", "    local alphabet = \"abcdefghijklmnopqrstuvwxyz\"\n    local vowels =\
    \ \"aeiou\"\n    local result = \"\"\n    for i = 1, #message do\n        local\
    \ letter = message[i]\n        if letter ~= nil then\n            local index\
    \ = alphabet.find(letter)\n            if index == nil then\n                index\
    \ = alphabet.find(vowels, letter)\n            end\n            if index == nil\
    \ then\n                index = alphabet.find(vowels, letter, index + 1)\n   \
    \         end\n            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowels,\
    \ letter, index + 1)\n            end\n            if index == nil then\n    \
    \            index = alphabet.find(vowels, letter, index + 1)\n            end\n\
    \            if index == nil then\n                index = alphabet.find(vowel",
  "  local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n  local vowels = 'aeiou'\n  local\
    \ newMessage = ''\n  local currentLetter = ''\n  local currentVowel = ''\n  for\
    \ i = 1, #message do\n    currentLetter = alphabet:sub(#alphabet, i)\n    currentVowel\
    \ = vowels:sub(#vowels, i)\n    if currentLetter:sub(1, 1) == currentVowel then\n\
    \      newMessage = newMessage .. currentLetter:sub(2, 2)\n    else\n      newMessage\
    \ = newMessage .. currentLetter\n    end\n  end\n  return newMessage\nend", " \
    \   local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local output = ''\n    local vowelIndex = 1\n    for i = 1, #message do\n\
    \        local letter = message[i]\n        if letter ~= ' ' then\n          \
    \  local index = alphabet + letter\n            local nextLetter = alphabet[vowelIndex\
    \ + 1]\n            local nextVowel = alphabet[vowelIndex + 2]\n            local\
    \ nextVowelIndex = alphabet + nextVowel\n            local nextVowelIndex = alphabet\
    \ + nextVowelIndex\n            local nextVowelIndex = alphabet + nextVowelIndex\n\
    \            local nextVowelIndex = alphabet + nextVowelIndex\n            local\
    \ nextVowelIndex = alphabet + nextVowelIndex\n            local nextVowelIndex\
    \ = alphabet + nextVowelIndex\n            local nextVowelIndex = alphabet + nextVowelIndex\n\
    \            local nextVowelIndex = alphabet + nextVowelIndex\n            local\
    \ nextVowelIndex = alphabet + nextVowelIndex\n            local nextVowelIndex\
    \ = alphabet + nextVowelIndex\n            local nextVowelIndex = alphabet + nextVowelIndex\n\
    \            local nextVowelIndex = alphabet + nextVowelIndex\n            local\
    \ nextVowelIndex = alphabet + nextVowelIndex\n            local nextVowelIndex\
    \ = alphabet + nextVowelIndex\n            local nextVowelIndex = alphabet + nextVowelIndex\n\
    \            local nextVowelIndex = alphabet + nextVowelIndex\n            local\
    \ nextVowelIndex = alphabet + nextVowelIndex\n            local nextVowelIndex\
    \ = alphabet + nextVowelIndex\n            local nextVowelIndex = alphabet + nextVowelIndex\n\
    \            local nextVowelIndex = alphabet + nextVowelIndex\n            local\
    \ nextVowelIndex = alphabet + nextVowelIndex\n            local nextVowelIndex\
    \ = alphabet + nextVowelIndex\n            local nextVowelIndex = alphabet + nextVowelIndex\n\
    \            local nextVowelIndex = alphabet + nextVowelIndex\n            local\
    \ nextVowelIndex = alphabet + nextVowelIndex\n            local nextVowelIndex\
    \ = alphabet + nextVowelIndex\n            local nextVowel"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
