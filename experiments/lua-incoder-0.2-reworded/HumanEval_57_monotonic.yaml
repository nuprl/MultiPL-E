name: HumanEval_57_monotonic
language: lua
prompt: "-- Return true is table elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m =\
    \ i\n    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n       \
    \ j = n\n      else\n        i = m\n      end\n      n = m\n    end\n    if i\
    \ < j then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend", "  local sorted = table.sort(l)\n  local last = sorted[1]\n\
    \  for i = 2, #sorted do\n    if sorted[i] ~= last then\n      return false\n\
    \    end\n    last = sorted[i]\n  end\n  return true\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    local m = i\n    while m <= j and l[m]\
    \ <= l[m+1] do\n      m = m + 1\n    end\n    if m > i then\n      j = m\n   \
    \ else\n      i = m + 1\n    end\n  end\n  return i <= j\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n   \
    \ while m <= n do\n      if l[m] < l[n] then\n        j = n\n      else\n    \
    \    i = m\n      end\n      n = i - 1\n    end\n    if i == j then return false\
    \ end\n    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local last\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n \
    \   end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m\
    \ <= n do\n      if l[m] < l[n] then\n        j = m\n      else\n        i = m\n\
    \      end\n      m = m + 1\n      n = n - 1\n    end\n    if i == j then\n  \
    \    return true\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return false\n\
    end", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~=\
    \ last then\n      return false\n    end\n    last = l[i]\n  end\n  return true\n\
    end", "  local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2,\
    \ #sorted do\n    if sorted[i] ~= last then\n      return false\n    end\n   \
    \ last = sorted[i]\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local function is_increasing(v)\n\
    \    return v < l[1]\n  end\n  local function is_decreasing(v)\n    return v >\
    \ l[1]\n  end\n  local function is_monotonic(v)\n    return is_increasing(v) or\
    \ is_decreasing(v)\n  end\n  local function is_strictly_increasing(v)\n    return\
    \ v < l[1] and l[1] == v\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and l[1] == v\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_decreasing(v)\n    return v > l[1] and l[1] == v\n  end\n\
    \  local function is_strictly_increasing(v)\n    return v < l[1] and l[1] == v\n\
    \  end\n  local function is_strictly_monotonic(v)\n    return is_strictly_increasing(v)\
    \ or is_strictly_decreasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and l[1] == v\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and l[1] == v\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_increasing(v)\n    return v < l[1] and l[1] == v\n  end\n\
    \  local function is_strictly_decreasing(v)\n    return v > l[1] and l[1] == v\n\
    \  end\n  local function is_strictly_monotonic(v)\n    return is_strictly_increasing(v)\
    \ or is_strictly_decreasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and l[1] == v\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and l[1] == v\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_increasing(v)\n    return v < l[1] and l[1] == v\n  end\n\
    \  local function is_strictly_decreasing(v)\n    return v > l[1] and l[1] == v\n\
    \  end\n  local function is_strictly_monotonic(v)\n    return is_strictly_increasing(v)\
    \ or is_strictly_decreasing(v)\n  end\n  local function is_strict", "  local sorted\
    \ = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1]\
    \ + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local last_val\
    \ = l[1]\n  local last_val_i = l[1]\n  local last_val_j = l[1]\n  local last_val_k\
    \ = l[1]\n  while i <= #l do\n    local val = l[i]\n    local val_i = l[i]\n \
    \   local val_j = l[i]\n    local val_k = l[i]\n    if val > last_val then\n \
    \     k = k + 1\n      last_val = val\n      last_val_i = val_i\n      last_val_j\
    \ = val_j\n      last_val_k = val_k\n    elseif val < last_val then\n      if\
    \ val_i > last_val_i then\n        k = k + 1\n        last_val = val\n       \
    \ last_val_i = val_i\n        last_val_j = val_j\n        last_val_k = val_k\n\
    \      elseif val_j < last_val_j then\n        k = k + 1\n        last_val = val\n\
    \        last_val_i = val_i\n        last_val_j = val_j\n        last_val_k =\
    \ val_k\n      elseif val_k < last_val_k then\n        k = k + 1\n        last_val\
    \ = val\n        last_val_i = val_i\n        last_val_j = val_j\n        last_val_k\
    \ = val_k\n      end\n    else\n      i = i + 1\n    end\n  end\n  if last_val\
    \ > last_val_i then\n    monotonic = false\n  end\n  return monotonic\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n + 1\n    end\n\
    \  end\n  return i <= j\nend", "  local i = 1\n  local last = -1\n  local monotonic\
    \ = true\n  for i = 2, #l do\n    if l[i] < last then\n      monotonic = false\n\
    \    end\n    last = l[i]\n  end\n  return monotonic\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n    j = m\n\
    \    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return i == j\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   i = i + 1\n      j = j - 1\n    end\n  end\n  return i <= j\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local t = l[m]\n\
    \        l[m] = l[i]\n        l[i] = t\n      end\n      if l[n] > l[m] then\n\
    \        local t = l[n]\n        l[n] = l[m]\n        l[m] = t\n      end\n  \
    \    m = m + 1\n      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return l[1] < l[#l]\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted\
    \ do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ monotonic_flag = true\n  local max_val = l[1]\n  local min_val = l[1]\n  local\
    \ max_i = #l\n  local min_i = #l\n  while i <= max_i do\n    local val = l[i]\n\
    \    if val > max_val then\n      max_val = val\n      max_i = i\n    end\n  \
    \  if val < min_val then\n      min_val = val\n      min_i = i\n    end\n    i\
    \ = i + 1\n  end\n  while j <= max_i do\n    local val = l[j]\n    if val > max_val\
    \ then\n      max_val = val\n      max_i = j\n    end\n    if val < min_val then\n\
    \      min_val = val\n      min_i = j\n    end\n    j = j + 1\n  end\n  if max_i\
    \ < min_i then\n    local tmp = min_i\n    min_i = max_i\n    max_i = tmp\n  \
    \  monotonic_flag = false\n  end\n  if max_i < min_val then\n    return false\n\
    \  end\n  if min_val > max_val then\n    return false\n  end\n  if min_val ==\
    \ max_val then\n    return true\n  end\n  if min_val < max_val then\n    return\
    \ monotonic_flag\n  end\n  return false\nend", "  local i = 1\n  local j = #l\
    \ + 1\n  while i <= j do\n    if l[i] < l[j] then\n      local tmp = l[i]\n  \
    \    l[i] = l[j]\n      l[j] = tmp\n      i = i + 1\n      j = j - 1\n    elseif\
    \ l[i] > l[j] then\n      j = j - 1\n    else\n      i = i + 1\n    end\n  end\n\
    \  return i == j\nend", "  local sorted = table.sort(l)\n  local last = sorted[1]\n\
    \  for i = 2, #sorted do\n    if sorted[i] ~= last then\n      return false\n\
    \    end\n    last = sorted[i]\n  end\n  return true\nend", "  local sorted =\
    \ table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] +\
    \ 1 then\n      return false\n    end\n  end\n  return true\nend", "  local sorted\
    \ = table.sort(l)\n  return sorted[#sorted] == 0 and sorted[1] < sorted[#sorted]\n\
    end", "  local sorted = {}\n  for i = 1, #l do\n    sorted[#sorted + 1] = l[i]\n\
    \  end\n  table.sort(sorted)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i\
    \ - 1] + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n  end\n\
    \  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local sorted\
    \ = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1]\
    \ + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ sorted = table.sort(l)\n  return sorted[1] == sorted[#sorted]\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local m = #l\n\
    \  while i < m do\n    local v = l[i]\n    if v < l[j] then\n      k = k + 1\n\
    \      if k < m then\n        j = k\n      else\n        monotonic = false\n \
    \       break\n      end\n    elseif v > l[j] then\n      k = k - 1\n      if\
    \ k < 1 then\n        j = k\n      else\n        monotonic = false\n        break\n\
    \      end\n    else\n      i = i + 1\n      j = j + 1\n    end\n  end\n  return\
    \ monotonic\nend", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n \
    \   if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i]\
    \ then return false end\n      if l[m] > l[i] then return true end\n      m =\
    \ m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", " \
    \ local prev = {}\n  for i = 1, #l do\n    local curr = l[i]\n    if prev[curr]\
    \ then\n      return false\n    end\n    prev[curr] = true\n  end\n  return true\n\
    end", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~=\
    \ last then\n      return false\n    end\n    last = l[i]\n  end\n  return true\n\
    end", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~=\
    \ last then\n      return false\n    end\n    last = l[i]\n  end\n  return true\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n =\
    \ #l\n  while i <= n do\n    local x = l[i]\n    local y = l[j]\n    local w =\
    \ l[k]\n    if w < x then\n      k = k + 1\n    elseif w > x then\n      if k\
    \ ~= j then\n        j = j + 1\n      end\n      k = k + 1\n    else\n      if\
    \ k ~= j then\n        j = j + 1\n      end\n      if w < y then\n        k =\
    \ k + 1\n      else\n        i = i + 1\n      end\n    end\n  end\n  return i\
    \ == n\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i\n    i = j\n    j = m\n    if l[i] < l[j] then\n      j = i\n    end\n\
    \    if l[i] > l[j] then\n      i = m\n    end\n  end\n  return i <= j\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    local n = j\n    while m <= n do\n      if l[m] < l[n] then return false\
    \ end\n      if l[m] > l[n] then m = m + 1; n = n end\n    end\n    i = m + 1\n\
    \    j = n\n  end\n  return true\nend", "  local prev = {}\n  for i = 1, #l do\n\
    \    local cur = l[i]\n    if prev[cur] then\n      return false\n    end\n  \
    \  prev[cur] = true\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n   \
    \ local n = j\n    while m <= n do\n      if l[m] < l[i] then return false end\n\
    \      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i =\
    \ i + 1\n    j = j - 1\n  end\n  return false\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m <= n do\n\
    \      if l[m] < l[n] then\n        j = n\n      else\n        i = m\n      end\n\
    \      n = i - 1\n    end\n    if i < j then\n      return false\n    end\n  \
    \  i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local x = l[i]\n    local y = l[j]\n    if\
    \ x < y then return false end\n    if x > y then return true end\n    i = i +\
    \ 1\n    j = j - 1\n  end\n  return true\nend", "  local i = 1\n  local last =\
    \ l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n   \
    \ end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local j\
    \ = 1\n  local k = 1\n  local monotonic = true\n  local max = l[1]\n  local min\
    \ = l[1]\n  for i = 2, #l do\n    local x = l[i]\n    if x > max then\n      max\
    \ = x\n    end\n    if x < min then\n      min = x\n    end\n    if x > max or\
    \ x < min then\n      monotonic = false\n    end\n  end\n  if max > min then\n\
    \    local x = l[k]\n    if x > max then\n      max = x\n    end\n    if x < min\
    \ then\n      min = x\n    end\n    if max > min then\n      monotonic = false\n\
    \    end\n  end\n  return monotonic\nend", "  local i = 1\n  local j = #l + 1\n\
    \  while i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n\
    \      if l[m] < l[i] then\n        i, m = m, i - 1\n      elseif l[m] > l[i]\
    \ then\n        j, n = n, j - 1\n      else\n        return false\n      end\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local prev\
    \ = {}\n  for i = 1, #l do\n    local curr = l[i]\n    if prev[curr] then\n  \
    \    return false\n    end\n    prev[curr] = true\n  end\n  return true\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = false\n  local\
    \ max = math.max(l)\n  local min = math.min(l)\n  while i <= max do\n    while\
    \ j <= min do\n      if l[j] < l[i] then\n        j = j + 1\n      elseif l[j]\
    \ > l[i] then\n        k = k + 1\n      else\n        monotonic = true\n     \
    \   break\n      end\n    end\n    i = i + 1\n    j = j + 1\n  end\n  return monotonic\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i] then\n       \
    \ i, m = m, i - 1\n      elseif l[m] > l[i] then\n        j, n = n, j - 1\n  \
    \    else\n        i = m + 1\n      end\n    end\n    if i < j then\n      j =\
    \ i\n    end\n  end\n  return i <= j\nend", "  local i = 1\n  local j = #l + 1\n\
    \  while i <= j do\n    local m = i\n    i = j\n    j = m\n    if l[i] < l[j]\
    \ then\n      j = i\n    end\n    if l[i] > l[j] then\n      i = m\n    end\n\
    \  end\n  return i == 1\nend", "  local i = 1\n  local last = -1\n  for i = 1,\
    \ #l do\n    local current = l[i]\n    if current > last then\n      return false\n\
    \    end\n    last = current\n  end\n  return true\nend", "  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  return sorted[1] < sorted[#sorted]\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local prev = {}\n  local curr\
    \ = {}\n  for i = 1, #l do\n    local e = l[i]\n    if prev[e] then\n      if\
    \ prev[e] < e then\n        return false\n      else\n        curr[e] = e\n  \
    \    end\n    else\n      curr[e] = e\n    end\n    prev[e] = e\n  end\n  for\
    \ i = #l, 1, -1 do\n    if curr[l[i]] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local sorted = {}\n  for i = 1, #l do\n    sorted[#sorted\
    \ + 1] = l[i]\n  end\n  table.sort(sorted)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic_val = true\n\
    \  local max_val = l[1]\n  local min_val = l[1]\n  for i = 2, #l do\n    if l[i]\
    \ > max_val then\n      max_val = l[i]\n    end\n    if l[i] < min_val then\n\
    \      min_val = l[i]\n    end\n    if l[i] ~= l[j] then\n      monotonic_val\
    \ = false\n    end\n    k = k + 1\n    if k > 1 then\n      if l[i] > l[j] then\n\
    \        j = k\n      else\n        i = k\n      end\n    end\n  end\n  return\
    \ monotonic_val\nend", "  local sorted = {}\n  for _, v in ipairs(l) do sorted[v]\
    \ = true end\n  for _, v in ipairs(l) do\n    for i = #sorted - 1, -1, -1 do\n\
    \      if sorted[v] and sorted[sorted[i]] then\n        return false\n      end\n\
    \    end\n  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n  for\
    \ i = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n    last\
    \ = l[i]\n  end\n  return true\nend", "  local sorted = table.sort(l)\n  for i\
    \ = 1, #sorted do\n    if sorted[i] ~= sorted[i-1] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local prev = {}\n  local curr = {}\n\
    \  for i = 1, #l do\n    local e = l[i]\n    if prev[e] then\n      if prev[e]\
    \ < e then\n        return false\n      elseif prev[e] > e then\n        return\
    \ true\n      end\n    else\n      prev[e] = e\n    end\n    curr[e] = e\n  end\n\
    \  return true\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n\
    \    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local function is_decreasing(v)\n    return v < l[1]\n\
    \  end\n  local function is_increasing(v)\n    return v > l[1]\n  end\n  local\
    \ function is_monotonic(v)\n    return is_decreasing(v) or is_increasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return is_increasing(v)\
    \ and l[1] == v\n  end\n  local function is_strictly_decreasing(v)\n    return\
    \ is_decreasing(v) and l[1] == v\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_monotonic(v) and l[1] == v\n  end\n  local function is_strictly_strictly_increasing(v)\n\
    \    return is_strictly_increasing(v) and l[1] == v\n  end\n  local function is_strictly_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and l[1] == v\n  end\n  local function is_strictly_strictly_monotonic(v)\n\
    \    return is_strictly_monotonic(v) and l[1] == v\n  end\n  local function is_strictly_strictly_strictly_increasing(v)\n\
    \    return is_strictly_strictly_increasing(v) and l[1] == v\n  end\n  local function\
    \ is_strictly_strictly_strictly_decreasing(v)\n    return is_strictly_strictly_decreasing(v)\
    \ and l[1] == v\n  end\n  local function is_strictly_strictly_strictly_monotonic(v)\n\
    \    return is_strictly_strictly_monotonic(v) and l[1] == v\n  end\n  local function\
    \ is_strictly_strictly_strictly_strictly_increasing(v)\n    return is_strictly_strictly_strictly_increasing(v)\
    \ and l[1] == v\n  end\n  local function is_strictly_strictly_strictly_strictly_decreasing(v)\n\
    \    return is_strictly_strictly_strictly_decreasing(v) and l[1] == v\n  end\n\
    \  local function is_strictly_strictly_strictly_strictly_monotonic(v)\n    return\
    \ is_strictly_strictly_strictly_monotonic(v) and l[1] == v\n  end\n  local function\
    \ is_strictly_strictly_strictly_strictly_strictly_increasing(v)\n    return is_strictly_strictly_strictly_strictly_increasing(v)\
    \ and l[1] == v\n  end\n  local function is_strictly_strictly_strictly_strictly_strictly_decreasing(v)\n\
    \    return is_strictly_strictly_strictly_strictly_decreasing(v) and l[1] == v\n\
    \  end\n  local function is_strictly_strictly_strictly_strictly_strictly_monotonic(v)\n\
    \    return is_strictly_strict", "  local sorted = table.sort(l)\n  for i = 1,\
    \ #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n  for i\
    \ = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local monotonic = true\n  local last_val = l[1]\n  local last_val_i =\
    \ l[1]\n  local last_val_j = l[1]\n  local last_val_k = l[1]\n  local last_val_l\
    \ = l[1]\n  while i <= #l do\n    local val = l[i]\n    local val_i = l[i]\n \
    \   local val_j = l[i]\n    local val_k = l[i]\n    local val_l = l[i]\n    if\
    \ i == 1 then\n      last_val = val\n      last_val_i = val_i\n      last_val_j\
    \ = val_j\n      last_val_k = val_k\n      last_val_l = val_l\n    elseif val\
    \ > last_val then\n      last_val = val\n      last_val_i = val_i\n      last_val_j\
    \ = val_j\n      last_val_k = val_k\n      last_val_l = val_l\n      monotonic\
    \ = false\n    end\n    if val_i > last_val_i then\n      last_val_i = val_i\n\
    \      last_val_j = val_j\n      last_val_k = val_k\n      last_val_l = val_l\n\
    \      monotonic = false\n    end\n    if val_j > last_val_j then\n      last_val_j\
    \ = val_j\n      last_val_k = val_k\n      last_val_l = val_l\n      monotonic\
    \ = false\n    end\n    if val_k > last_val_k then\n      last_val_k = val_k\n\
    \      last_val_l = val_l\n      monotonic = false\n    end\n    if val_l > last_val_l\
    \ then\n      last_val_l = val_l\n      monotonic = false\n    end\n    i = i\
    \ + 1\n  end\n  return monotonic\nend", "  local i = 1\n  local j = #l + 1\n \
    \ while i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n\
    \      if l[m] < l[i] then\n        i, m = m, i - 1\n      elseif l[m] > l[i]\
    \ then\n        j, n = n, j - 1\n      else\n        return true\n      end\n\
    \    end\n    if i == j then return false end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return false\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then\n     \
    \ j = i\n    end\n  end\n  return i <= j\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local prev = {}\n  for _, v in\
    \ ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if\
    \ prev[v] == nil then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while\
    \ i <= n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if\
    \ x > y then\n      if x < z then\n        return true\n      else\n        return\
    \ false\n      end\n    elseif x < y then\n      if x > z then\n        return\
    \ false\n      else\n        return true\n      end\n    else\n      if x < z\
    \ then\n        return true\n      else\n        return false\n      end\n   \
    \ end\n    i = i + 1\n    j = j + 1\n    k = k + 1\n  end\n  return true\nend",
  "  local prev = {}\n  for i = 1, #l do\n    local v = l[i]\n    if prev[v] ~= nil\
    \ then\n      return false\n    end\n    prev[v] = true\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n\
    \    local m = j\n    while k <= m do\n      if l[k] < l[m] then\n        i, j\
    \ = k, m\n      else\n        k, m = m, k\n      end\n    end\n    if i < j then\n\
    \      return false\n    end\n    i = i + 1\n  end\n  return true\nend", "  local\
    \ sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted do\n\
    \    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ m = 1\n  local n = #l\n  while i < n do\n    local x = l[i]\n    local y = l[j]\n\
    \    local w = l[k]\n    if x > y then\n      if w < x then\n        j = k\n \
    \     else\n        i = i + 1\n      end\n    elseif x < y then\n      if w >\
    \ x then\n        k = k + 1\n      else\n        j = j + 1\n      end\n    else\n\
    \      if w == x then\n        i = i + 1\n        j = j + 1\n        k = k + 1\n\
    \      else\n        m = m + 1\n      end\n    end\n  end\n  return m == n\nend",
  "  local prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for\
    \ _, v in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m]\
    \ < l[i] then\n        i, m = m, i - 1\n      elseif l[m] > l[i] then\n      \
    \  j = j - 1\n      else\n        return true\n      end\n    end\n    i = i +\
    \ 1\n  end\n  return false\nend", "  local sorted = table.sort(l)\n  local last\
    \ = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n      return\
    \ false\n    end\n    last = sorted[i]\n  end\n  return true\nend", "  local i\
    \ = 1\n  local j = 1\n  local k = 1\n  local monotonic = false\n  local max =\
    \ math.max(l)\n  local min = math.min(l)\n  while i <= j do\n    local m = math.abs(max\
    \ - min)\n    if m > k then\n      k = m\n      monotonic = true\n    end\n  \
    \  i = i + 1\n    j = j + 1\n  end\n  return monotonic\nend", "  local prev =\
    \ {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l)\
    \ do\n    if prev[v] == nil then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted,\
    \ v)\n  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v <\
    \ sorted[#sorted] then\n      return false\n    end\n  end\n  return true\nend",
  "  local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted\
    \ do\n    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend", "  local prev = {}\n  for i = 1, #l do\n    local\
    \ curr = l[i]\n    if prev[curr] == nil then\n      prev[curr] = true\n    else\n\
    \      return false\n    end\n  end\n  return true\nend", "  local i = 1\n  local\
    \ last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n\
    \    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m\
    \ <= n do\n      if l[m] < l[n] then\n        j = n\n      else\n        i = m\n\
    \      end\n      n = m\n    end\n    if i < j then\n      j = i\n    end\n  \
    \  i = m + 1\n  end\n  return i <= j\nend", "  local i = 1\n  local j = 1\n  local\
    \ k = 1\n  local monotonic = false\n  while i <= #l do\n    local v = l[i]\n \
    \   if i == 1 then\n      k = v\n    elseif v < k then\n      k = v\n      j =\
    \ i\n    elseif v > k then\n      k = v\n      i = j\n    end\n    i = i + 1\n\
    \    if i == #l then\n      monotonic = true\n    end\n  end\n  return monotonic\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i] then return false\
    \ end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n \
    \   i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local function is_increasing(v)\n\
    \    return v < l[1]\n  end\n  local function is_decreasing(v)\n    return v >\
    \ l[1]\n  end\n  local function is_monotonic(v)\n    return is_increasing(v) or\
    \ is_decreasing(v)\n  end\n  local function is_monotonic_or_equal(v)\n    return\
    \ is_increasing(v) or is_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and is_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and is_decreasing(v)\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_monotonic(v) or is_strictly_increasing(v) or is_strictly_decreasing(v)\n\
    \  end\n  local function is_strictly_monotonic_or_equal(v)\n    return is_monotonic(v)\
    \ or is_strictly_increasing(v) or is_strictly_decreasing(v) or v == l[1]\n  end\n\
    \  local function is_strictly_decreasing(v)\n    return v > l[1] and is_decreasing(v)\n\
    \  end\n  local function is_strictly_increasing(v)\n    return v < l[1] and is_increasing(v)\n\
    \  end\n  local function is_strictly_increasing_or_equal(v)\n    return v < l[1]\
    \ and is_increasing(v) or v == l[1]\n  end\n  local function is_strictly_decreasing_or_equal(v)\n\
    \    return v > l[1] and is_decreasing(v) or v == l[1]\n  end\n  local function\
    \ is_strictly_decreasing(v)\n    return v > l[1] and is_decreasing(v)\n  end\n\
    \  local function is_strictly_decreasing_or_equal(v)\n    return v > l[1] and\
    \ is_decreasing(v) or v == l[1]\n  end\n  local function is_strictly_increasing_or_equal(v)\n\
    \    return v < l[1] and is_increasing(v) or v == l[1]\n  end\n  local function\
    \ is_strictly_decreasing_or_equal(v)\n    return v > l[1] and is_decreasing(v)\
    \ or v == l[1]\n  end\n  local function is_strictly_increasing(v)\n    return\
    \ v < l[1] and is_increasing(v)\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and is_decreasing(v)\n  end\n  local function is_strictly_increasing_or_equal(v)\n",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i =\
    \ i + 1\n    local k = j\n    j = j - 1\n    while k >= m do\n      if l[k] <\
    \ l[m] then\n        return false\n      end\n      k = k - 1\n    end\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i\n    i = i + 1\n    local k = j\n    j = j - 1\n    while k >=\
    \ m do\n      if l[m] > l[k] then\n        return false\n      elseif l[m] < l[k]\
    \ then\n        return true\n      end\n      k = k - 1\n    end\n  end\n  return\
    \ true\nend", "  local sorted = table.sort(l)\n  local last = sorted[1]\n  for\
    \ i = 2, #sorted do\n    if sorted[i] ~= last then\n      return false\n    end\n\
    \    last = sorted[i]\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i\
    \ - 1] + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while k <=\
    \ j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n     \
    \ k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n =\
    \ j\n    while m <= n do\n      if l[m] < l[i] then return false end\n      if\
    \ l[m] > l[i] then return true end\n      m = m + 1\n    end\n    i = i + 1\n\
    \    j = j - 1\n  end\n  return false\nend", "  local i = 1\n  local j = #l +\
    \ 1\n  while i <= j do\n    local m = i\n    i = j\n    j = m\n    if l[i] < l[j]\
    \ then return false end\n    if l[i] > l[j] then i = j end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    i = j\n    j = m\n    if l[i] < l[j] then\n      j = m\n    end\n  end\n\
    \  return i <= j\nend", "  local function is_decreasing(t)\n    local last_value\
    \ = t[1]\n    for _, v in ipairs(t) do\n      if last_value < v then\n       \
    \ return false\n      end\n      last_value = v\n    end\n    return true\n  end\n\
    \  local function is_increasing(t)\n    local last_value = t[1]\n    for _, v\
    \ in ipairs(t) do\n      if last_value > v then\n        return false\n      end\n\
    \      last_value = v\n    end\n    return true\n  end\n  local function is_monotonic(t)\n\
    \    local last_value = t[1]\n    for _, v in ipairs(t) do\n      if last_value\
    \ < v then\n        return false\n      end\n      last_value = v\n    end\n \
    \   return true\n  end\n  local function is_strictly_increasing(t)\n    local\
    \ last_value = t[1]\n    for _, v in ipairs(t) do\n      if last_value < v then\n\
    \        return false\n      end\n      last_value = v\n    end\n    return true\n\
    \  end\n  local function is_strictly_decreasing(t)\n    local last_value = t[1]\n\
    \    for _, v in ipairs(t) do\n      if last_value > v then\n        return false\n\
    \      end\n      last_value = v\n    end\n    return true\n  end\n  local function\
    \ is_strictly_monotonic(t)\n    local last_value = t[1]\n    for _, v in ipairs(t)\
    \ do\n      if last_value < v then\n        return false\n      end\n      last_value\
    \ = v\n    end\n    return true\n  end\n  local function is_strictly_strictly_increasing(t)\n\
    \    local last_value = t[1]\n    for _, v in ipairs(t) do\n      if last_value\
    \ < v then\n        return false\n      end\n      last_value = v\n    end\n \
    \   return true\n  end\n  local function is_strictly_strictly_decreasing(t)\n\
    \    local last_value = t[1]\n    for _, v in ipairs(t) do\n      if last_value\
    \ > v then\n        return false\n      end\n      last_value = v\n    end\n \
    \   return true\n  end\n  local function is_strictly_strictly_monotonic(t)\n \
    \   local last_value = t[1]\n    for _, v in ipairs(t) do\n      if last_value\
    \ < v then\n        return false\n      end\n      last_value = v\n    end\n \
    \   return true\n  end\n  local function is_strictly_strictly_strictly_increasing(t)\n\
    \    local last_value = t[1]\n    for _, v in ipairs(t) do\n      if last_value\
    \ < v then\n        return false\n      end\n      last_value = ", "  local i\
    \ = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    while m <=\
    \ j and l[m] <= l[m+1] do\n      m = m + 1\n    end\n    if m > i then\n     \
    \ local k = m\n      while k <= i and l[k] < l[k+1] do\n        k = k + 1\n  \
    \    end\n      if k <= i then\n        j = k\n      else\n        i = m\n   \
    \   end\n    else\n      i = m + 1\n    end\n  end\n  return i <= j\nend", " \
    \ local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i\
    \ - 1] + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while\
    \ i < n do\n    local x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if\
    \ x > y then\n      if x < z then\n        return false\n      else\n        j\
    \ = k\n      end\n    elseif x < z then\n      if y < z then\n        return false\n\
    \      else\n        k = m\n      end\n    else\n      if y < z then\n       \
    \ i = i + 1\n      else\n        k = k + 1\n      end\n    end\n    m = m + 1\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i\n    i = i + 1\n    local n = j\n    j = j - 1\n    if\
    \ l[m] < l[n] then\n      local t = l[m]\n      l[m] = l[n]\n      l[n] = t\n\
    \    end\n  end\n  return i == j\nend", "  local sorted = table.sort(l)\n  local\
    \ last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n \
    \     return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local sorted = {}\n  for _, v in ipairs(l) do\n    table.insert(sorted, v)\n\
    \  end\n  table.sort(sorted)\n  for _, v in ipairs(sorted) do\n    if v < sorted[#sorted]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local i =\
    \ 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n     \
    \ return false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local\
    \ sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i\
    \ - 1] + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ prev = {}\n  for i = 1, #l do\n    local curr = l[i]\n    if prev[curr] then\n\
    \      return false\n    end\n    prev[curr] = true\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - j\n   \
    \ if l[m] ~= l[i] then\n      return false\n    end\n    i = i + 1\n    j = j\
    \ - 1\n  end\n  return true\nend", "  local sorted = table.sort(l)\n  for i =\
    \ 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n  local\
    \ last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n \
    \     return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return true\n    end\n  end\n  return false\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local n = j\n    while\
    \ m <= n do\n      if l[m] < l[i] then return false end\n      if l[m] > l[i]\
    \ then return true end\n      m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n\
    \  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n\
    \  end\n  return true\nend", "  local sorted = {}\n  for i = 1, #l do\n    sorted[#sorted\
    \ + 1] = l[i]\n  end\n  table.sort(sorted)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local function is_decreasing(v)\n    return v > l[1]\n  end\n  local\
    \ function is_increasing(v)\n    return v < l[1]\n  end\n  local function is_monotonic(v)\n\
    \    return is_decreasing(v) or is_increasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v >= l[1]\n  end\n  local function is_strictly_decreasing(v)\n   \
    \ return v <= l[1]\n  end\n  local function is_strictly_monotonic(v)\n    return\
    \ is_strictly_decreasing(v) or is_strictly_increasing(v)\n  end\n  local function\
    \ is_strictly_decreasing_strictly_increasing(v)\n    return is_strictly_decreasing(v)\
    \ and is_strictly_increasing(v)\n  end\n  local function is_strictly_monotonic_strictly_decreasing(v)\n\
    \    return is_strictly_monotonic(v) and is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_monotonic_strictly_increasing(v)\n    return is_strictly_monotonic(v)\
    \ and is_strictly_increasing(v)\n  end\n  local function is_strictly_decreasing_strictly_decreasing(v)\n\
    \    return is_strictly_decreasing(v) and is_strictly_decreasing(v)\n  end\n \
    \ local function is_strictly_monotonic_strictly_decreasing_strictly_increasing(v)\n\
    \    return is_strictly_monotonic(v) and is_strictly_decreasing(v) and is_strictly_increasing(v)\n\
    \  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n    return\
    \ is_strictly_decreasing(v) and is_strictly_increasing(v)\n  end\n  local function\
    \ is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n    return\
    \ is_strictly_monotonic(v) and is_strictly_increasing(v) and is_strictly_decreasing(v)\n\
    \  end\n  local function is_strictly_decreasing_strictly_increasing(v)\n    return\
    \ is_strictly_decreasing(v) and is_strictly_increasing(v)\n  end\n  local function\
    \ is_strictly_monotonic_strictly_increasing_strictly_decreasing(v)\n    return\
    \ is_strictly_monotonic(v) and is_strictly_increasing(v) and is_strictly_decreasing(v)\n\
    \  end\n  local function is_strictly_decreasing_strictly_decreasing(v)\n    return\
    \ is_strictly_decreasing(v) and is_strictly_decreasing(v)\n  end\n  local function\
    \ is_", "  local sorted = {}\n  for _, v in ipairs(l) do sorted[v] = true end\n\
    \  for _, v in ipairs(l) do\n    if sorted[v] then\n      sorted[v] = false\n\
    \      return false\n    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i\
    \ - 1] + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n = #l\n  while\
    \ i <= n do\n    local x = l[i]\n    local y = l[j]\n    local w = l[k]\n    if\
    \ w == 0 then\n      k = k + 1\n      m = m + 1\n      n = n + 1\n      continue\n\
    \    end\n    if x >= y then\n      k = k + 1\n      m = m + 1\n      n = n +\
    \ 1\n      i = i + 1\n      continue\n    end\n    if x <= y then\n      j = j\
    \ + 1\n      m = m + 1\n      n = n + 1\n      i = i + 1\n      continue\n   \
    \ end\n    i = i + 1\n  end\n  return m <= n\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local prev = {}\n  for _, v in\
    \ ipairs(l) do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if\
    \ prev[v] == nil then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   return true\n    end\n  end\n  return false\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i\
    \ - 1] + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted do\n\
    \    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i\n    local n = j\n    while m <= n do\n      if l[m] <\
    \ l[n] then\n        local t = l[m]\n        l[m] = l[n]\n        l[n] = t\n \
    \       m, n = n, m\n      else\n        m, n = n, m\n      end\n    end\n   \
    \ i = m + 1\n    j = n\n  end\n  return l[1] < l[#l]\nend", "  local i = 1\n \
    \ local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return\
    \ false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local k = i\n    while k <= j and\
    \ l[k] < l[k + 1] do\n      k = k + 1\n    end\n    if k > i then\n      l[i],\
    \ l[k] = l[k], l[i]\n      i = i + 1\n    end\n    j = j - 1\n  end\n  return\
    \ i == j\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local\
    \ m = i\n    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n   \
    \     j = n\n      else\n        i = m\n      end\n      n = m + 1\n    end\n\
    \    if i < j then\n      j = i\n    end\n  end\n  return i <= j\nend", "  local\
    \ sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted do\n\
    \    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted\
    \ do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    if l[i] < l[j] then\n      local tmp = l[i]\n      l[i] = l[j]\n \
    \     l[j] = tmp\n      i = i + 1\n      j = j - 1\n    elseif l[i] > l[j] then\n\
    \      i = i + 1\n    else\n      j = j - 1\n    end\n  end\n  return i == j\n\
    end", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ 1\n    local n = j\n    while m <= n do\n      if l[m] < l[i] then return false\
    \ end\n      if l[m] > l[i] then return true end\n      m = m + 1\n    end\n \
    \   i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n\
    \      return false\n    end\n    last = l[i]\n  end\n  return true\nend", " \
    \ local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted\
    \ do\n    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local k = i\n    while k < j do\n      if l[k] < l[k + 1] then\n \
    \       return false\n      end\n      k = k + 1\n    end\n    i = i + 1\n  end\n\
    \  return true\nend", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n\
    \    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n  end\n\
    \  return true\nend", "  local sorted = {}\n  for i = 1, #l do\n    sorted[#sorted\
    \ + 1] = l[i]\n  end\n  table.sort(sorted)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = 1\n  local n =\
    \ #l\n  while i < n do\n    local x = l[i]\n    local y = l[j]\n    local w =\
    \ l[k]\n    if w ~= 0 then\n      if x < y then\n        if w > 0 then\n     \
    \     return false\n        else\n          k = k + 1\n        end\n      else\n\
    \        if w < 0 then\n          return false\n        else\n          k = k\
    \ + 1\n        end\n      end\n    end\n    i = i + 1\n    j = j + 1\n    m =\
    \ m + 1\n  end\n  return true\nend", "  local sorted = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(sorted, v)\n  end\n  table.sort(sorted)\n  for _, v in\
    \ ipairs(sorted) do\n    if v < sorted[#sorted] then\n      return false\n   \
    \ end\n  end\n  return true\nend", "  local prev = {}\n  for _, v in ipairs(l)\
    \ do\n    prev[v] = true\n  end\n  for _, v in ipairs(l) do\n    if not prev[v]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local i =\
    \ 1\n  local j = 1\n  local k = 1\n  local m = #l\n  while i <= m do\n    local\
    \ x = l[i]\n    local y = l[j]\n    local z = l[k]\n    if x < y then\n      if\
    \ x < z then\n        j = k\n      else\n        i = k\n      end\n    elseif\
    \ x > y then\n      if x > z then\n        k = k + 1\n      else\n        i =\
    \ k\n      end\n    else\n      i = i + 1\n      j = j + 1\n      k = k + 1\n\
    \    end\n  end\n  return i == m\nend", "  local i = 1\n  local j = #l + 1\n \
    \ while i <= j do\n    local m = i\n    local n = j\n    while m <= n do\n   \
    \   if l[m] < l[n] then\n        j = m\n      else\n        i = m\n      end\n\
    \      m = m + 1\n      n = n - 1\n    end\n    if i < j then\n      return false\n\
    \    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\nend", "  local sorted\
    \ = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1]\
    \ + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ prev = {}\n  for _, v in ipairs(l) do\n    prev[v] = true\n  end\n  for _, v\
    \ in ipairs(l) do\n    if not prev[v] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i\n    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n\
    \        local t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      else\n \
    \       local t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n   \
    \   m = m + 1\n      n = n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return l[1] < l[#l]\nend", "  local i = 1\n  local last = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local last = l[1]\n  for i = 2,\
    \ #l do\n    if l[i] ~= last then\n      return false\n    end\n    last = l[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i\n    local k = j\n    while k >= m do\n      if l[m] <\
    \ l[k] then\n        local t = l[m]\n        l[m] = l[k]\n        l[k] = t\n \
    \     end\n      k = k - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ l[1] < l[#l]\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local m\
    \ = 1\n  local n = #l\n  while i <= n do\n    local m = i\n    local k = j\n \
    \   local j = i\n    while j <= n and l[j] <= l[m] do\n      j = j + 1\n    end\n\
    \    if j > m then\n      k = k + 1\n      if k > m then\n        break\n    \
    \  end\n    end\n    if l[i] > l[m] then\n      i = i + 1\n    else\n      m =\
    \ m + 1\n      if m > n then\n        break\n      end\n    end\n  end\n  return\
    \ i == m\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n   \
    \ if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i\n    i = i + 1\n    local n = j\n    j = j - 1\n    if l[m] >\
    \ l[n] then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n \
    \   j = m\n    if l[i] < l[j] then\n      local t = l[i]\n      l[i] = l[j]\n\
    \      l[j] = t\n    end\n  end\n  return i == j\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local prev = {}\n  for i = 1, #l do\n    prev[tostring(l[i])] = true\n  end\n\
    \  for i = 1, #l do\n    if not prev[tostring(l[i])] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k\
    \ = 1\n  local monotonic = true\n  local min_value = l[1]\n  local max_value =\
    \ l[1]\n  for i = 2, #l do\n    if l[i] < min_value then\n      min_value = l[i]\n\
    \    elseif l[i] > max_value then\n      max_value = l[i]\n    end\n    if l[i]\
    \ < min_value then\n      monotonic = false\n    end\n  end\n  return monotonic\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i -\
    \ j\n    if l[m] < l[i] then return false end\n    if l[m] > l[i] then return\
    \ true end\n    i = i + 1\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i] ~= last then\n\
    \      return false\n    end\n    last = sorted[i]\n  end\n  return true\nend",
  "  local i = 1\n  local last = -1\n  local monotonic = true\n  for i = 1, #l do\n\
    \    if l[i] ~= last then\n      monotonic = false\n    end\n    last = l[i]\n\
    \  end\n  return monotonic\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n     \
    \ if l[m] < l[i] then return false end\n      if l[m] > l[i] then return true\
    \ end\n      m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return\
    \ false\nend", "  local sorted = {}\n  for _, v in ipairs(l) do sorted[v] = true\
    \ end\n  table.sort(sorted)\n  for _, v in ipairs(l) do sorted[v] = false end\n\
    \  return sorted[#sorted]\nend", "  local i = 1\n  local last = l[1]\n  for i\
    \ = 2, #l do\n    if l[i] ~= last then\n      return false\n    end\n    last\
    \ = l[i]\n  end\n  return true\nend", "  local prev = {}\n  for i = 1, #l do\n\
    \    prev[tostring(l[i])] = true\n  end\n  for i = 1, #l do\n    if prev[tostring(l[i])]\
    \ then\n      return false\n    end\n  end\n  return true\nend", "  local sorted\
    \ = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted do\n    if sorted[i]\
    \ ~= last then\n      return false\n    end\n    last = sorted[i]\n  end\n  return\
    \ true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local m = {}\n \
    \ local n = #l\n  while i <= n do\n    local x = l[i]\n    local y = l[j]\n  \
    \  local z = l[k]\n    if x > y then\n      if x > z then\n        m[i] = true\n\
    \      else\n        m[j] = true\n      end\n    elseif x < y then\n      if x\
    \ < z then\n        m[k] = true\n      else\n        m[i] = true\n      end\n\
    \    else\n      m[k] = true\n    end\n    i = i + 1\n    j = j + 1\n    k = k\
    \ + 1\n  end\n  for i = 1, n do\n    if not m[i] then\n      return false\n  \
    \  end\n  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while\
    \ i <= j do\n    local m = i - j\n    if l[m] < l[i] then return false end\n \
    \   if l[m] > l[j] then return true end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return false\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then\n      local t\
    \ = l[i]\n      l[i] = l[j]\n      l[j] = t\n    end\n  end\n  return l[1] < l[2]\n\
    end", "  local prev = {}\n  local curr = {}\n  for _, v in ipairs(l) do\n    prev[v]\
    \ = true\n    curr[v] = true\n  end\n  for i = 1, #l do\n    if prev[l[i]] then\n\
    \      if not curr[l[i]] then\n        return false\n      end\n    else\n   \
    \   if not curr[l[i]] then\n        return true\n      end\n    end\n  end\n \
    \ return false\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n\
    \    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n\
    \  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n\
    \    local m = i\n    i = j\n    j = m\n    if l[i] < l[j] then return false end\n\
    \    if l[i] > l[j] then i = j end\n  end\n  return true\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n   \
    \ while m <= n do\n      if l[m] < l[n] then\n        j = m\n      else\n    \
    \    i = m\n      end\n      m = m + 1\n      n = n - 1\n    end\n  end\n  return\
    \ i <= j\nend", "  local sorted = table.sort(l)\n  local last = sorted[1]\n  for\
    \ i = 2, #sorted do\n    if sorted[i] ~= last then\n      return false\n    end\n\
    \    last = sorted[i]\n  end\n  return true\nend", "  local function is_decreasing(a,\
    \ b)\n    return a <= b\n  end", "  local i = 1\n  local j = 1\n  local k = 1\n\
    \  local m = 1\n  local n = #l\n  local p = 1\n  local q = 1\n  local r = 1\n\
    \  local s = l[1]\n  local t = l[1]\n  local u = 1\n  local v = 1\n  local w =\
    \ 1\n  local x = l[1]\n  local y = l[1]\n  local z = l[1]\n  local A = l[1]\n\
    \  local B = l[1]\n  local C = l[1]\n  local D = l[1]\n  local E = l[1]\n  local\
    \ F = l[1]\n  local G = l[1]\n  local H = l[1]\n  local I = l[1]\n  local J =\
    \ l[1]\n  local K = l[1]\n  local L = l[1]\n  local M = l[1]\n  local N = l[1]\n\
    \  local O = l[1]\n  local P = l[1]\n  local Q = l[1]\n  local R = l[1]\n  local\
    \ S = l[1]\n  local T = l[1]\n  local U = l[1]\n  local V = l[1]\n  local W =\
    \ l[1]\n  local X = l[1]\n  local Y = l[1]\n  local Z = l[1]\n  local A = l[1]\n\
    \  local B = l[1]\n  local C = l[1]\n  local D = l[1]\n  local E = l[1]\n  local\
    \ F = l[1]\n  local G = l[1]\n  local H = l[1]\n  local I = l[1]\n  local J =\
    \ l[1]\n  local K = l[1]\n  local L = l[1]\n  local M = l[1]\n  local N = l[1]\n\
    \  local O = l[1]\n  local P = l[1]\n  local Q = l[1]\n  local R = l[1]\n  local\
    \ S = l[1]\n  local T = l[1]\n  local U = l[1]\n  local V = l[1]\n  local W =\
    \ l[1]\n  local X = l[1]\n  local Y = l[1]\n  local Z = l[1]\n  local A = l[1]\n\
    \  local B = l[1]\n  local C = l[1]\n  local D = l[1]\n  local E = l[1]\n  local\
    \ F = l[1]\n  local G = l[1]\n  local H = l[1]\n  local I = l[1]\n  local J =\
    \ l[1]\n  local K = l[1]\n  local L = l[1]\n  local M = l[1]\n  local N = l[1]\n\
    \  local O = l[1]", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n  \
    \  local m = i\n    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n\
    \        local t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n  \
    \    m = m + 1\n      n = n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return l[1] < l[#l]\nend", "  local sorted = {}\n  for i = 1, #l do\n    table.insert(sorted,\
    \ l[i])\n  end\n  table.sort(sorted)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] then\n      return false\n    end\n  end\n  return true\nend",
  "  local i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local\
    \ last_val = l[1]\n  local last_val_i = l[1]\n  local last_val_j = l[1]\n  local\
    \ last_val_k = l[1]\n  local last_val_i_next = l[1]\n  local last_val_j_next =\
    \ l[1]\n  local last_val_k_next = l[1]\n  local last_val_i_prev = l[1]\n  local\
    \ last_val_j_prev = l[1]\n  local last_val_k_prev = l[1]\n  local last_val_i_prev\
    \ = l[1]\n  local last_val_j_prev = l[1]\n  local last_val_k_prev = l[1]\n  local\
    \ last_val_i_prev = l[1]\n  local last_val_j_prev = l[1]\n  local last_val_k_prev\
    \ = l[1]\n  local last_val_i_prev = l[1]\n  local last_val_j_prev = l[1]\n  local\
    \ last_val_k_prev = l[1]\n  local last_val_i_prev = l[1]\n  local last_val_j_prev\
    \ = l[1]\n  local last_val_k_prev = l[1]\n  local last_val_i_prev = l[1]\n  local\
    \ last_val_j_prev = l[1]\n  local last_val_k_prev = l[1]\n  local last_val_i_prev\
    \ = l[1]\n  local last_val_j_prev = l[1]\n  local last_val_k_prev = l[1]\n  local\
    \ last_val_i_prev = l[1]\n  local last_val_j_prev = l[1]\n  local last_val_k_prev\
    \ = l[1]\n  local last_val_i_prev = l[1]\n  local last_val_j_prev = l[1]\n  local\
    \ last_val_k_prev = l[1]\n  local last_val_i_prev = l[1]\n  local last_val_j_prev\
    \ = l[1]\n  local last_val_k_prev = l[1]\n  local last_val_i_prev = l[1]\n  local\
    \ last_val_j_prev = l[1]\n  local last_val_k_prev = l[1]\n  local last_val_i_prev\
    \ = l[1]\n  local last_val_j_prev = l[1]\n  local last_val_k_prev = l[1]\n  local\
    \ last_val_i_prev = l[1]\n  local last_val_j_prev = l[1]\n  local last_val_k_prev\
    \ = l[1]\n  local last_val_i_prev = l[1]\n  local last_val_j_prev = l[1]\n  local\
    \ last_val_k_prev = l[1]\n  local last_val_i_prev = l[1]\n  local last_val_j_prev\
    \ = l[1]\n  local last_val_k_prev = l[1]\n  local last_val_i_prev = l[1]\n  local\
    \ last_val_j_prev = l[1]\n  local last_val_k_prev = l[1]\n  ", "  local sorted\
    \ = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1]\
    \ + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local k = i\n    while k <\
    \ j do\n      if l[k] < l[k + 1] then\n        return false\n      end\n     \
    \ k = k + 1\n    end\n    i = i + 1\n  end\n  return true\nend", "  local i =\
    \ 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n     \
    \ return false\n    end\n    last = l[i]\n  end\n  return true\nend", "  local\
    \ sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i\
    \ - 1] + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2, #sorted do\n\
    \    if sorted[i] ~= last then\n      return false\n    end\n    last = sorted[i]\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = #l + 1\n  while i <=\
    \ j do\n    local m = i - 1\n    local n = j\n    while m <= n do\n      if l[m]\
    \ < l[i] then return false end\n      if l[m] > l[i] then return true end\n  \
    \    m = m + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return true\n\
    end", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n\
    \    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n        local\
    \ t = l[m]\n        l[m] = l[n]\n        l[n] = t\n      end\n      m = m + 1\n\
    \      n = n + 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return l[1]\
    \ < l[#l]\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
