name: HumanEval_57_monotonic
language: lua
prompt: "-- Return true is table elements are monotonically increasing or decreasing.\n\
  -- >>> monotonic({1, 2, 4, 20})\n-- true\n-- >>> monotonic({1, 20, 4, 10})\n-- false\n\
  -- >>> monotonic({4, 1, 0, -10})\n-- true\nlocal function monotonic(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = monotonic\n\
  \    lu.assertEquals(candidate({1, 2, 4, 10}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 4, 20}), true)\n    lu.assertEquals(candidate({1, 20, 4, 10}), false)\n   \
  \ lu.assertEquals(candidate({4, 1, 0, -10}), true)\n    lu.assertEquals(candidate({4,\
  \ 1, 1, 0}), true)\n    lu.assertEquals(candidate({1, 2, 3, 2, 5, 60}), false)\n\
  \    lu.assertEquals(candidate({1, 2, 3, 4, 5, 60}), true)\n    lu.assertEquals(candidate({9,\
  \ 9, 9, 9}), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m =\
    \ i\n    local n = j\n    while m <= n do\n      if l[m] < l[n] then\n       \
    \ j = n\n      else\n        i = m\n      end\n      n = m\n    end\n    if i\
    \ < j then\n      return false\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return true\nend", "  local sorted = table.sort(l)\n  local last = sorted[1]\n\
    \  for i = 2, #sorted do\n    if sorted[i] ~= last then\n      return false\n\
    \    end\n    last = sorted[i]\n  end\n  return true\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    local m = i\n    while m <= j and l[m]\
    \ <= l[m+1] do\n      m = m + 1\n    end\n    if m > i then\n      j = m\n   \
    \ else\n      i = m + 1\n    end\n  end\n  return i <= j\nend", "  local i = 1\n\
    \  local j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n   \
    \ while m <= n do\n      if l[m] < l[n] then\n        j = n\n      else\n    \
    \    i = m\n      end\n      n = i - 1\n    end\n    if i == j then return false\
    \ end\n    i = i + 1\n  end\n  return true\nend", "  local i = 1\n  local last\
    \ = l[1]\n  for i = 2, #l do\n    if l[i] ~= last then\n      return false\n \
    \   end\n    last = l[i]\n  end\n  return true\nend", "  local i = 1\n  local\
    \ j = #l + 1\n  while i <= j do\n    local m = i\n    local n = j\n    while m\
    \ <= n do\n      if l[m] < l[n] then\n        j = m\n      else\n        i = m\n\
    \      end\n      m = m + 1\n      n = n - 1\n    end\n    if i == j then\n  \
    \    return true\n    end\n    i = i + 1\n    j = j - 1\n  end\n  return false\n\
    end", "  local sorted = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i]\
    \ ~= sorted[i - 1] + 1 then\n      return false\n    end\n  end\n  return true\n\
    end", "  local i = 1\n  local last = l[1]\n  for i = 2, #l do\n    if l[i] ~=\
    \ last then\n      return false\n    end\n    last = l[i]\n  end\n  return true\n\
    end", "  local sorted = table.sort(l)\n  local last = sorted[1]\n  for i = 2,\
    \ #sorted do\n    if sorted[i] ~= last then\n      return false\n    end\n   \
    \ last = sorted[i]\n  end\n  return true\nend", "  local sorted = table.sort(l)\n\
    \  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return\
    \ false\n    end\n  end\n  return true\nend", "  local function is_increasing(v)\n\
    \    return v < l[1]\n  end\n  local function is_decreasing(v)\n    return v >\
    \ l[1]\n  end\n  local function is_monotonic(v)\n    return is_increasing(v) or\
    \ is_decreasing(v)\n  end\n  local function is_strictly_increasing(v)\n    return\
    \ v < l[1] and l[1] == v\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and l[1] == v\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_decreasing(v)\n    return v > l[1] and l[1] == v\n  end\n\
    \  local function is_strictly_increasing(v)\n    return v < l[1] and l[1] == v\n\
    \  end\n  local function is_strictly_monotonic(v)\n    return is_strictly_increasing(v)\
    \ or is_strictly_decreasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and l[1] == v\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and l[1] == v\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_increasing(v)\n    return v < l[1] and l[1] == v\n  end\n\
    \  local function is_strictly_decreasing(v)\n    return v > l[1] and l[1] == v\n\
    \  end\n  local function is_strictly_monotonic(v)\n    return is_strictly_increasing(v)\
    \ or is_strictly_decreasing(v)\n  end\n  local function is_strictly_increasing(v)\n\
    \    return v < l[1] and l[1] == v\n  end\n  local function is_strictly_decreasing(v)\n\
    \    return v > l[1] and l[1] == v\n  end\n  local function is_strictly_monotonic(v)\n\
    \    return is_strictly_increasing(v) or is_strictly_decreasing(v)\n  end\n  local\
    \ function is_strictly_increasing(v)\n    return v < l[1] and l[1] == v\n  end\n\
    \  local function is_strictly_decreasing(v)\n    return v > l[1] and l[1] == v\n\
    \  end\n  local function is_strictly_monotonic(v)\n    return is_strictly_increasing(v)\
    \ or is_strictly_decreasing(v)\n  end\n  local function is_strict", "  local sorted\
    \ = table.sort(l)\n  for i = 1, #sorted do\n    if sorted[i] ~= sorted[i - 1]\
    \ + 1 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ i = 1\n  local j = 1\n  local k = 1\n  local monotonic = true\n  local last_val\
    \ = l[1]\n  local last_val_i = l[1]\n  local last_val_j = l[1]\n  local last_val_k\
    \ = l[1]\n  while i <= #l do\n    local val = l[i]\n    local val_i = l[i]\n \
    \   local val_j = l[i]\n    local val_k = l[i]\n    if val > last_val then\n \
    \     k = k + 1\n      last_val = val\n      last_val_i = val_i\n      last_val_j\
    \ = val_j\n      last_val_k = val_k\n    elseif val < last_val then\n      if\
    \ val_i > last_val_i then\n        k = k + 1\n        last_val = val\n       \
    \ last_val_i = val_i\n        last_val_j = val_j\n        last_val_k = val_k\n\
    \      elseif val_j < last_val_j then\n        k = k + 1\n        last_val = val\n\
    \        last_val_i = val_i\n        last_val_j = val_j\n        last_val_k =\
    \ val_k\n      elseif val_k < last_val_k then\n        k = k + 1\n        last_val\
    \ = val\n        last_val_i = val_i\n        last_val_j = val_j\n        last_val_k\
    \ = val_k\n      end\n    else\n      i = i + 1\n    end\n  end\n  if last_val\
    \ > last_val_i then\n    monotonic = false\n  end\n  return monotonic\nend", " \
    \ local i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[n] then\n        j = m\n     \
    \ else\n        i = m\n      end\n      m = m + 1\n      n = n + 1\n    end\n\
    \  end\n  return i <= j\nend", "  local i = 1\n  local last = -1\n  local monotonic\
    \ = true\n  for i = 2, #l do\n    if l[i] < last then\n      monotonic = false\n\
    \    end\n    last = l[i]\n  end\n  return monotonic\nend", "  local i = 1\n \
    \ local j = #l + 1\n  while i <= j do\n    local m = i\n    i = j\n    j = m\n\
    \    if l[i] < l[j] then\n      j = m\n    end\n  end\n  return i == j\nend",
  "  local i = 1\n  local j = #l + 1\n  while i <= j do\n    if l[i] < l[j] then\n\
    \      i = i + 1\n    elseif l[i] > l[j] then\n      j = j - 1\n    else\n   \
    \   i = i + 1\n      j = j - 1\n    end\n  end\n  return i <= j\nend", "  local\
    \ i = 1\n  local j = #l + 1\n  while i <= j do\n    local m = i - 1\n    local\
    \ n = j\n    while m <= n do\n      if l[m] < l[i] then\n        local t = l[m]\n\
    \        l[m] = l[i]\n        l[i] = t\n      end\n      if l[n] > l[m] then\n\
    \        local t = l[n]\n        l[n] = l[m]\n        l[m] = t\n      end\n  \
    \    m = m + 1\n      n = n - 1\n    end\n    i = i + 1\n    j = j - 1\n  end\n\
    \  return l[1] < l[#l]\nend", "  local sorted = table.sort(l)\n  for i = 1, #sorted\
    \ do\n    if sorted[i] ~= sorted[i - 1] + 1 then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local i = 1\n  local j = 1\n  local k = 1\n  local\
    \ monotonic_flag = true\n  local max_val = l[1]\n  local min_val = l[1]\n  local\
    \ max_i = #l\n  local min_i = #l\n  while i <= max_i do\n    local val = l[i]\n\
    \    if val > max_val then\n      max_val = val\n      max_i = i\n    end\n  \
    \  if val < min_val then\n      min_val = val\n      min_i = i\n    end\n    i\
    \ = i + 1\n  end\n  while j <= max_i do\n    local val = l[j]\n    if val > max_val\
    \ then\n      max_val = val\n      max_i = j\n    end\n    if val < min_val then\n\
    \      min_val = val\n      min_i = j\n    end\n    j = j + 1\n  end\n  if max_i\
    \ < min_i then\n    local tmp = min_i\n    min_i = max_i\n    max_i = tmp\n  \
    \  monotonic_flag = false\n  end\n  if max_i < min_val then\n    return false\n\
    \  end\n  if min_val > max_val then\n    return false\n  end\n  if min_val ==\
    \ max_val then\n    return true\n  end\n  if min_val < max_val then\n    return\
    \ monotonic_flag\n  end\n  return false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
