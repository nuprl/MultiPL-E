name: HumanEval_24_largest_divisor
language: lua
prompt: "-- For a given number n, find the largest number that divides n evenly, smaller\
  \ than n\n-- >>> largest_divisor(15)\n-- 5\nlocal function largest_divisor(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_divisor\n\
  \    lu.assertEquals(candidate(3), 1)\n    lu.assertEquals(candidate(7), 1)\n  \
  \  lu.assertEquals(candidate(10), 5)\n    lu.assertEquals(candidate(100), 50)\n\
  \    lu.assertEquals(candidate(49), 7)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local max_divisor = 1\n    local max_divisor_remainder = 1\n  \
    \  for i = 2, n do\n        if n % i == 0 then\n            local divisor = i\n\
    \            local divisor_remainder = n % i\n            if divisor_remainder\
    \ > max_divisor_remainder then\n                max_divisor = divisor\n      \
    \          max_divisor_remainder = divisor_remainder\n            end\n      \
    \  end\n    end\n    return max_divisor\nend", "  local max_div = math.floor(n/2)\
    \ + 1\n  local max_div2 = math.floor(n/max_div)\n  local max_div3 = math.floor(n/max_div2)\n\
    \  local max_div4 = math.floor(n/max_div3)\n  local max_div5 = math.floor(n/max_div4)\n\
    \  local max_div6 = math.floor(n/max_div5)\n  local max_div7 = math.floor(n/max_div6)\n\
    \  local max_div8 = math.floor(n/max_div7)\n  local max_div9 = math.floor(n/max_div8)\n\
    \  local max_div10 = math.floor(n/max_div9)\n  local max_div11 = math.floor(n/max_div10)\n\
    \  local max_div12 = math.floor(n/max_div11)\n  local max_div13 = math.floor(n/max_div12)\n\
    \  local max_div14 = math.floor(n/max_div13)\n  local max_div15 = math.floor(n/max_div14)\n\
    \  local max_div16 = math.floor(n/max_div15)\n  local max_div17 = math.floor(n/max_div16)\n\
    \  local max_div18 = math.floor(n/max_div17)\n  local max_div19 = math.floor(n/max_div18)\n\
    \  local max_div20 = math.floor(n/max_div19)\n  local max_div21 = math.floor(n/max_div20)\n\
    \  local max_div22 = math.floor(n/max_div21)\n  local max_div23 = math.floor(n/max_div22)\n\
    \  local max_div24 = math.floor(n/max_div23)\n  local max_div25 = math.floor(n/max_div24)\n\
    \  local max_div26 = math.floor(n/max_div25)\n  local max_div27 = math.floor(n/max_div26)\n\
    \  local max_div28 = math.floor(n/max_div27)\n  local max_div29 = math.floor(n/max_div28)\n\
    \  local max_div30 = math.floor(n/max_div29)\n  local max_div31 = math.floor(n/max_div30)\n\
    \  local max_div32 = math.floor(n/max_div31)\n  local max_div33 = math.floor(n/max_div32)\n\
    \  local max_div34 = math.floor(n/max_div33)\n  local max_div35 = math.floor(n/max_div34)\n\
    \  local max_div36 = math.floor(n/max_div35)\n  local max_div37 = math.floor(n/max_",
  "    local max_divisor = 1\n    for i = 2, n do\n        if n % i == 0 then\n  \
    \          if max_divisor < i then\n                max_divisor = i\n        \
    \    end\n        end\n    end\n    return max_divisor\nend", "  local max_divisor\
    \ = 1\n  local max_divisor_p = 1\n  local max_divisor_pp = 1\n  local max_divisor_ppp\
    \ = 1\n  for i = 2, n do\n    if n % i == 0 then\n      local divisor_p = i\n\
    \      local divisor_pp = i\n      local divisor_ppp = i\n      for j = 1, i do\n\
    \        if n % j == 0 then\n          divisor_p = j\n          divisor_pp = j\n\
    \          divisor_ppp = j\n        end\n      end\n      if divisor_p * divisor_pp\
    \ * divisor_ppp == n then\n        if divisor_p * divisor_pp * divisor_ppp > max_divisor\
    \ then\n          max_divisor = divisor_p * divisor_pp * divisor_ppp\n       \
    \   max_divisor_p = divisor_p\n          max_divisor_pp = divisor_pp\n       \
    \   max_divisor_ppp = divisor_ppp\n        end\n      end\n    end\n  end\n  return\
    \ max_divisor\nend", "    local max_divisor = 1\n    local max_divisor_remainder\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            local divisor\
    \ = i\n            local divisor_remainder = n % i\n            if divisor_remainder\
    \ > max_divisor_remainder then\n                max_divisor = divisor\n      \
    \          max_divisor_remainder = divisor_remainder\n            end\n      \
    \  end\n    end\n    return max_divisor\nend", "  local largest = 1\n  for i =\
    \ 2, n do\n    if n % i == 0 then\n      largest = i\n    end\n  end\n  return\
    \ largest\nend", "  -- If n is even, return n/2\n  if n % 2 == 0 then\n    return\
    \ n/2\n  end\n  -- If n is odd, return n/2 + 1\n  return n/2 + 1\nend", "    local\
    \ max_div = math.floor(n/2) + 1\n    local max_div2 = math.floor(n/max_div)\n\
    \    local max_div3 = math.floor(n/max_div2)\n    local max_div4 = math.floor(n/max_div3)\n\
    \    local max_div5 = math.floor(n/max_div4)\n    local max_div6 = math.floor(n/max_div5)\n\
    \    local max_div7 = math.floor(n/max_div6)\n    local max_div8 = math.floor(n/max_div7)\n\
    \    local max_div9 = math.floor(n/max_div8)\n    local max_div10 = math.floor(n/max_div9)\n\
    \    local max_div11 = math.floor(n/max_div10)\n    local max_div12 = math.floor(n/max_div11)\n\
    \    local max_div13 = math.floor(n/max_div12)\n    local max_div14 = math.floor(n/max_div13)\n\
    \    local max_div15 = math.floor(n/max_div14)\n    local max_div16 = math.floor(n/max_div15)\n\
    \    local max_div17 = math.floor(n/max_div16)\n    local max_div18 = math.floor(n/max_div17)\n\
    \    local max_div19 = math.floor(n/max_div18)\n    local max_div20 = math.floor(n/max_div19)\n\
    \    local max_div21 = math.floor(n/max_div20)\n    local max_div22 = math.floor(n/max_div21)\n\
    \    local max_div23 = math.floor(n/max_div22)\n    local max_div24 = math.floor(n/max_div23)\n\
    \    local max_div25 = math.floor(n/max_div24)\n    local max_div26 = math.floor(n/max_div25)\n\
    \    local max_div27 = math.floor(n/max_div26)\n    local max_div28 = math.floor(n/max_div27)\n\
    \    local max_div29 = math.floor(n/max_div28)\n    local max_div30 = math.floor(n/max_div29)\n\
    \    local max_div31 = math.floor(n/max_div30)\n    local max_div32 = math.floor(n/max_div31)\n\
    \    local max_div33 = math.floor(n/max_div32)\n    local max_div34 = math.floor(n/max_div33)\n\
    \    local max_div35 = math.floor(n/max_div34)\n    local max_div36 = math.floor(n/max_div35)\n\
    \    local max_div37 = math.floor(n/max_", "    local divisor = 1\n    while n\
    \ % divisor == 0 do\n        divisor = divisor + 1\n    end\n    return divisor\n\
    end", "    local max_divisor = 1\n    local max_divisor_p = 1\n    for i = 2,\
    \ n do\n        if n % i == 0 then\n            if max_divisor < i then\n    \
    \            max_divisor = i\n                max_divisor_p = i\n            else\n\
    \                max_divisor_p = i\n            end\n        end\n    end\n  \
    \  return max_divisor_p\nend", "    local max_divisor = 1\n    local max_divisor_remainder\
    \ = 1\n    for i = 2, n do\n        if n % i == 0 then\n            -- If n is\
    \ divisible by i, then n is divisible by max_divisor\n            max_divisor\
    \ = i\n            max_divisor_remainder = n % i\n        end\n    end\n    return\
    \ max_divisor\nend", "    local divisor = 1\n    local max_divisor = 1\n    while\
    \ divisor <= n do\n        if n % divisor == 0 then\n            if max_divisor\
    \ < divisor then\n                max_divisor = divisor\n            end\n   \
    \     end\n        divisor = divisor + 1\n    end\n    return max_divisor\nend",
  "  local max_div = nil\n  local max_div_n = 1\n  local max_div_n_n = 1\n  for i\
    \ = 1, n do\n    local div = math.floor(n/i)\n    if div > max_div then\n    \
    \  max_div = div\n      max_div_n = i\n      max_div_n_n = i\n    end\n  end\n\
    \  if max_div_n_n ~= n then\n    max_div = max_div_n_n\n  end\n  return max_div\n\
    end", "    local max_divisor = 1\n    local max_divisor_index = 1\n    for i =\
    \ 2, n do\n        if n % i == 0 then\n            if max_divisor < i then\n \
    \               max_divisor = i\n                max_divisor_index = i\n     \
    \       else\n                max_divisor_index = i\n            end\n       \
    \ end\n    end\n    return max_divisor\nend", "    local max_div = math.floor(n/2)\n\
    \    local max_div2 = math.floor(n/max_div)\n    local max_div3 = math.floor(n/max_div2)\n\
    \    local max_div4 = math.floor(n/max_div3)\n    local max_div5 = math.floor(n/max_div4)\n\
    \    local max_div6 = math.floor(n/max_div5)\n    local max_div7 = math.floor(n/max_div6)\n\
    \    local max_div8 = math.floor(n/max_div7)\n    local max_div9 = math.floor(n/max_div8)\n\
    \    local max_div10 = math.floor(n/max_div9)\n    local max_div11 = math.floor(n/max_div10)\n\
    \    local max_div12 = math.floor(n/max_div11)\n    local max_div13 = math.floor(n/max_div12)\n\
    \    local max_div14 = math.floor(n/max_div13)\n    local max_div15 = math.floor(n/max_div14)\n\
    \    local max_div16 = math.floor(n/max_div15)\n    local max_div17 = math.floor(n/max_div16)\n\
    \    local max_div18 = math.floor(n/max_div17)\n    local max_div19 = math.floor(n/max_div18)\n\
    \    local max_div20 = math.floor(n/max_div19)\n    local max_div21 = math.floor(n/max_div20)\n\
    \    local max_div22 = math.floor(n/max_div21)\n    local max_div23 = math.floor(n/max_div22)\n\
    \    local max_div24 = math.floor(n/max_div23)\n    local max_div25 = math.floor(n/max_div24)\n\
    \    local max_div26 = math.floor(n/max_div25)\n    local max_div27 = math.floor(n/max_div26)\n\
    \    local max_div28 = math.floor(n/max_div27)\n    local max_div29 = math.floor(n/max_div28)\n\
    \    local max_div30 = math.floor(n/max_div29)\n    local max_div31 = math.floor(n/max_div30)\n\
    \    local max_div32 = math.floor(n/max_div31)\n    local max_div33 = math.floor(n/max_div32)\n\
    \    local max_div34 = math.floor(n/max_div33)\n    local max_div35 = math.floor(n/max_div34)\n\
    \    local max_div36 = math.floor(n/max_div35)\n    local max_div37 = math.floor(n/max_div36",
  "    local max_divisor = 1\n    local max_divisor_value = 1\n    for i = 2, n do\n\
    \        if n % i == 0 then\n            if max_divisor_value < i then\n     \
    \           max_divisor_value = i\n                max_divisor = i\n         \
    \   end\n        end\n    end\n    return max_divisor\nend", "    local max_divisor\
    \ = 1\n    local max_divisor_remainder = n\n    for i = 2, n do\n        if n\
    \ % i == 0 then\n            if max_divisor_remainder % i == 0 then\n        \
    \        max_divisor = i\n                max_divisor_remainder = max_divisor_remainder\
    \ / i\n            else\n                max_divisor_remainder = max_divisor_remainder\
    \ / i\n            end\n        end\n    end\n    return max_divisor\nend", " \
    \ -- We only need to check up to sqrt(n), since sqrt(n) divides evenly into n.\n\
    \  local i = 1\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n      return\
    \ i\n    end\n    i = i + 1\n  end\n  return n\nend", "    local max_divisor =\
    \ 1\n    local max_divisor_remainder = 1\n    for i = 2, n do\n        if n %\
    \ i == 0 then\n            local divisor = i\n            local divisor_remainder\
    \ = n % i\n            if divisor_remainder > max_divisor_remainder then\n   \
    \             max_divisor = divisor\n                max_divisor_remainder = divisor_remainder\n\
    \            end\n        end\n    end\n    return max_divisor\nend", "    local\
    \ max_divisor = 1\n    local max_divisor_p = 1\n    local max_divisor_n = 1\n\
    \    for i = 2, n do\n        if n % i == 0 then\n            local p = i / max_divisor\n\
    \            local n = n / max_divisor\n            if p > max_divisor then\n\
    \                max_divisor_p = p\n                max_divisor = n\n        \
    \    else\n                max_divisor_p = p\n                max_divisor = n\n\
    \            end\n        end\n    end\n    return max_divisor_p, max_divisor_n\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
