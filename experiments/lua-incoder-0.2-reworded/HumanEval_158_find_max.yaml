name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a table of strings.\n-- The table contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\n-- >>> find_max({'name', 'of', 'string'})\n\
  -- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n-- >>> find_max({'aaaaaaa',\
  \ 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max_count = 0\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = {}\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if max[word] == nil then\n      max[word] = count\n    else\n      max[word]\
    \ = max[word] .. count\n    end\n  end\n  local maxWord = nil\n  local maxCount\
    \ = -1\n  for word, count in pairs(max) do\n    if count > maxCount then\n   \
    \   maxCount = count\n      maxWord = word\n    end\n  end\n  return maxWord\n\
    end", "  local max_count = -1\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in pairs(words) do\n    max = max +\
    \ 1\n    if max > #word then\n      break\n    end\n  end\n  if max > #words then\n\
    \    return nil\n  end\n  local maxChars = {}\n  for i = 1, #word do\n    local\
    \ char = word[i]\n    local count = maxChars[char]\n    if count == nil then\n\
    \      maxChars[char] = 1\n    else\n      maxChars[char] = count + 1\n    end\n\
    \  end\n  local maxChar\n  for maxChar, count in pairs(maxChars) do\n    if count\
    \ > max then\n      return maxChar\n    end\n  end\n  return nil\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    if #word > max then\n   \
    \   max = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = {}\n\
    \    for word in words do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if #maxChars == 0 or count > #maxChars then\n\
    \          maxChars = {}\n          maxChars[char] = count\n        elseif count\
    \ > maxChars[char] then\n          maxChars[char] = count\n        end\n     \
    \ end\n    end\n    for word in words do\n      local count = 0\n      for char\
    \ in word do\n        count = count + maxChars[char]\n      end\n      if count\
    \ > max then\n        max = count\n      end\n    end\n  end\n  return words[#words]\n\
    end", "  local max = {}\n  for i = 1, #words do\n    local count = {}\n    for\
    \ j = 1, #words[i] do\n      count[words[i][j]] = count[words[i][j]] + 1 -- count\
    \ the character\n    end\n    for j = 1, #count do\n      if count[words[i][j]]\
    \ > max[words[i][j]] then\n        max[words[i][j]] = count[words[i][j]]\n   \
    \   end\n    end\n  end\n  for i = 1, #words do\n    for j = 1, #words[i] do\n\
    \      if max[words[i][j]] > max[words[i][j+1]] then\n        max[words[i][j]],\
    \ max[words[i][j+1]] = max[words[i][j]], max[words[i][j+1]]\n      end\n    end\n\
    \  end\n  for i = 1, #words do\n    if max[words[i][1]] > max[words[i][#words[i]]]\
    \ then\n      return words[i][1]\n    end\n  end\n  return nil\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    local count = 0\n    for\
    \ char in word do\n      count = count + 1\n    end\n    if count > max then\n\
    \      max = count\n    end\n  end\n  if max > 0 then\n    return words[#words]\n\
    \  end\nend", "  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count = count[char] or\
    \ 0\n      count[char] = count + 1\n    end\n    local maxChar = nil\n    for\
    \ _, char in pairs(count) do\n      if maxChar == nil or count[char] > count[maxChar]\
    \ then\n        maxChar = char\n      end\n    end\n    max[#max+1] = maxChar\n\
    \  end\n  table.sort(max, function(a, b) return a<b end)\n  return max[1]\nend",
  "  local max = {}\n  for _, word in ipairs(words) do\n    local count = {}\n   \
    \ for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n      count[c]\
    \ = count[c] + 1\n    end\n    local maxChar = nil\n    for _, c in pairs(count)\
    \ do\n      if maxChar == nil or count[c] > count[maxChar] then\n        maxChar\
    \ = c\n      end\n    end\n    max[word] = maxChar\n  end\n  local maxChar = nil\n\
    \  for _, c in pairs(max) do\n    if maxChar == nil or count[c] > count[maxChar]\
    \ then\n      maxChar = c\n    end\n  end\n  return maxChar\nend", "  local max\
    \ = 0\n  local word\n  for word in pairs(words) do\n    max = math.max(max, #word)\n\
    \  end\n  local i = 1\n  while i <= max do\n    local word = words[i]\n    local\
    \ count = 0\n    for word in pairs(words) do\n      if #word > count then\n  \
    \      count = #word\n      end\n    end\n    if count > max then\n      return\
    \ word\n    end\n    i = i + 1\n  end\n  return words[1]\nend", "  local max =\
    \ 0\n  local word\n  for word in pairs(words) do\n    max = max or #word\n   \
    \ if #word > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n\
    \    local i = 1\n    local word\n    for word in pairs(words) do\n      if #word\
    \ == max then\n        return word\n      elseif #word > max then\n        return\
    \ word\n      end\n      i = i + 1\n    end\n  end\nend", "  local max_count =\
    \ 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for\
    \ word in words do\n    if #word > max then\n      max = #word\n    end\n  end\n\
    \  if max > 0 then\n    for word in words do\n      if #word == max then\n   \
    \     return word\n      end\n    end\n  end\n  return nil\nend", "  local max_count\
    \ = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ 0\n    for _, c in ipairs(word) do\n      count = count + 1\n    end\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count =\
    \ count[char] or 0\n      count[char] = count + 1\n    end\n    table.insert(max,\
    \ count, word)\n  end\n  table.sort(max, function(a, b) return a[2] > b[2] end)\n\
    \  return max[#max][1]\nend", "  local max = 0\n  local word\n  for word in pairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    local words = {}\n    for word in pairs(words)\
    \ do\n      if #word == max then\n        table.insert(words, word)\n      else\n\
    \        words[#words + 1] = word\n      end\n    end\n    table.sort(words, function(a,\
    \ b) return #a > #b end)\n    return words[#words]\n  end\nend", "  local max_count\
    \ = -1\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local count\
    \ = #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local\
    \ max_word\n  for _, word in ipairs(words) do\n    local count = #word\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", "  local max_count = -1\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = 0\n  local word\n  for word in words do\n   \
    \ max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.", "  local max_count = -1\n  local max_word\
    \ = nil\n  for _, word in ipairs(words) do\n    local count = #word\n    if count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend", "  local max = 0\n  local word\n  for word in\
    \ words do\n    local count = 0\n    for c in word do\n      count = count + 1\n\
    \      if count > max then\n        max = count\n      end\n    end\n  end\n \
    \ return words[#words]\nend", "  local max_count = 0\n  local max_word\n  for\
    \ _, word in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word)\
    \ do\n      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max_count = -1\n  local max_word\n  for _, word in ipairs(words) do\n\
    \    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max_count then\n      max_count = count\n     \
    \ max_word = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n\
    \  local word\n  for word in pairs(words) do\n    if #word > max then\n      max\
    \ = #word\n    end\n  end\n  if max > 0 then\n    local words = {}\n    for word\
    \ in pairs(words) do\n      if #word == max then\n        table.insert(words,\
    \ word)\n      else\n        table.insert(words, word, word:sub(1, max))\n   \
    \   end\n    end\n    table.sort(words)\n    return words[#words]\n  end\nend",
  "  local max = 0\n  local word\n  for word in pairs(words) do\n    max = max or\
    \ #word\n    if #word > max then\n      max = #word\n    end\n  end\n  if max\
    \ > 0 then\n    local i = 1\n    local word = words[1]\n    while i <= max do\n\
    \      word = words[i]\n      if #word > #max then\n        max = #word\n    \
    \  end\n      i = i + 1\n    end\n  end\n  return word\nend", "  local max = 0\n\
    \  local word\n  for word in pairs(words) do\n    max = max or #word\n    if #word\
    \ > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n    local\
    \ i = 1\n    local word = words[max]\n    while i < max do\n      word = words[#words]\n\
    \      i = i + 1\n    end\n    return word\n  end\nend", "  local max = 0\n  local\
    \ word\n  for word in pairs(words) do\n    max = max or #word\n    if #word >\
    \ max then\n      max = #word\n    end\n  end\n  if max > 0 then\n    local maxChars\
    \ = {}\n    for word in pairs(words) do\n      local count = 0\n      for char\
    \ in word do\n        count = count + 1\n        if count > max then\n       \
    \   break\n        end\n        table.insert(maxChars, char)\n      end\n    end\n\
    \    table.sort(maxChars)\n    return maxChars[1]\n  end\n  return nil\nend",
  "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words) do\n  \
    \  local count = #word\n    if count > max_count then\n      max_count = count\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "  local max\
    \ = {}\n  for i = 1, #words do\n    local count = {}\n    for j = 1, #words[i]\
    \ do\n      count[words[i][j]] = count[words[i][j]] + 1 -- count the number of\
    \ unique characters\n    end\n    local maxChar = nil\n    for j = 1, #count do\n\
    \      if count[j] > 1 then\n        if maxChar == nil then\n          maxChar\
    \ = j\n        else\n          if count[j] > count[maxChar] then\n           \
    \ maxChar = j\n          end\n        end\n      end\n    end\n    if maxChar\
    \ == nil then\n      maxChar = #count\n    end\n    max[#max+1] = words[i][maxChar]\n\
    \  end\n  return max[1]\nend", "  local max = 0\n  local word\n  for word in words\
    \ do\n    if #word > max then\n      max = #word\n    end\n  end\n  if max > 0\
    \ then\n    local maxChars = {}\n    for word in words do\n      local count =\
    \ 0\n      for char in word do\n        count = count + 1\n        if #maxChars\
    \ < count then\n          maxChars[#maxChars + 1] = char\n        end\n      end\n\
    \    end\n    local maxChar\n    for maxChar = 1, #maxChars do\n      local count\
    \ = 0\n      for word in words do\n        local char\n        for char in word\
    \ do\n          if char == maxChars[maxChar] then\n            count = count +\
    \ 1\n          end\n        end\n        if count > max then\n          max =\
    \ count\n        end\n      end\n    end\n  end\n  return words[#words]\nend",
  "  local max = 0\n  local word\n  for word in words do\n    max = max or #word\n\
    \    if #word > max then\n      max = #word\n    end\n  end\n  return words[#words]\n\
    end", "  local max = 0\n  local word\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    local count = 0\n    for c in word\
    \ do\n      count = count + 1\n      if count > max then\n        return word\n\
    \      end\n    end\n  end\n  return nil\nend", "  local max_count = 0\n  local\
    \ max_word = \"\"\n  for _, word in ipairs(words) do\n    local count = 0\n  \
    \  for _, c in ipairs(word) do\n      count = count + 1\n      if count > max_count\
    \ then\n        max_count = count\n        max_word = word\n      end\n    end\n\
    \  end\n  return max_word\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count[char]\
    \ = count[char] or 0\n      count[char] = count[char] + 1\n    end\n    local\
    \ maxChar = nil\n    for _, char in pairs(count) do\n      if maxChar == nil or\
    \ count[char] > count[maxChar] then\n        maxChar = char\n      end\n    end\n\
    \    max[#max+1] = maxChar\n  end\n  table.sort(max, function(a, b) return a <\
    \ b end)\n  return max[1]\nend", "  local max = 0\n  local word\n  for word in\
    \ pairs(words) do\n    max = max or #word\n    if #word > max then\n      max\
    \ = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = {}\n    for\
    \ word in pairs(words) do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if #maxChars < count then\n          maxChars[#maxChars\
    \ + 1] = char\n        end\n      end\n    end\n    local maxChar = #maxChars\n\
    \    if maxChar > 0 then\n      local firstChar = maxChar[1]\n      for i = 2,\
    \ maxChar do\n        if maxChar[i] ~= firstChar then\n          firstChar = maxChar[i]\n\
    \        end\n      end\n      return firstChar\n    end\n  end\n  return nil\n\
    end", "  local max_count = 0\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in pairs(words) do\n    max = max or\
    \ #word\n    if #word > max then\n      max = #word\n    end\n  end\n  if max\
    \ > 0 then\n    local maxChars = {}\n    for word in pairs(words) do\n      local\
    \ count = 0\n      for char in word do\n        count = count + 1\n        if\
    \ #maxChars < count then\n          maxChars[#maxChars + 1] = char\n        end\n\
    \      end\n    end\n    local maxChar = maxChars[#maxChars]\n    for word in\
    \ pairs(words) do\n      local count = 0\n      for char in word do\n        count\
    \ = count + 1\n        if char == maxChar then\n          break\n        end\n\
    \      end\n      if count == max then\n        return word\n      end\n    end\n\
    \  end\n  return nil\nend", "  local max = 0\n  local word\n  for word in words\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    local i = 1\n    while i <= max do\n    \
    \  local j = i\n      while j <= max do\n        if words[i] < words[j] then\n\
    \          words[i], words[j] = words[j], words[i]\n        end\n        j = j\
    \ + 1\n      end\n      i = i + 1\n    end\n  end\n  return words[#words]\nend",
  "  local max_count = -1\n  local max_word\n  for _, word in ipairs(words) do\n \
    \   local count = #word\n    if count > max_count then\n      max_count = count\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n\
    \  for word in words do\n    max = max or #word\n    if #word > max then\n   \
    \   max = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = {}\n\
    \    for word in words do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if #maxChars < count then\n          maxChars[#maxChars\
    \ + 1] = char\n        end\n      end\n    end\n    local sortedChars = {}\n \
    \   for i = 1, #maxChars do\n      sortedChars[#sortedChars + 1] = maxChars[i]\n\
    \    end\n    local sortedWords = {}\n    for i = 1, #words do\n      sortedWords[#sortedWords\
    \ + 1] = words[i]\n    end\n    table.sort(sortedWords, function(a, b) return\
    \ #a < #b end)\n    table.sort(sortedChars, function(a, b) return #a < #b end)\n\
    \    return sortedWords[#sortedWords]\n  else\n    return nil\n  end\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    if #word > max then\n\
    \      max = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = {}\n\
    \    for word in words do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if #maxChars < count then\n          maxChars[#maxChars\
    \ + 1] = char\n        end\n      end\n    end\n    local maxChar = maxChars[#maxChars]\n\
    \    for word in words do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if char == maxChar then\n          break\n\
    \        end\n      end\n      if count == max then\n        return word\n   \
    \   end\n    end\n  end\n  return nil\nend", "  local max_count = 0\n  local max_word\
    \ = ''\n  for _, word in ipairs(words) do\n    local count = #word\n    if count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend", "  local max = 0\n  local word\n  for word in\
    \ pairs(words) do\n    max = max or #word\n    if #word > max then\n      max\
    \ = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = {}\n    for\
    \ word in pairs(words) do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if count > max then\n          break\n   \
    \     end\n        table.insert(maxChars, char)\n      end\n    end\n    local\
    \ maxChar = table.concat(maxChars, \"\")\n    table.sort(maxChars)\n    return\
    \ maxChars[1]\n  else\n    return nil\n  end\nend", "  local max = 0\n  local\
    \ word = nil\n  for _, word in ipairs(words) do\n    max = max + 1\n    if max\
    \ > #word then\n      return word\n    end\n  end\n  return word\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    max = max or #word\n    if\
    \ #word > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n   \
    \ local i = 1\n    while i <= max do\n      local j = i\n      while j > 0 and\
    \ words[j - 1] == words[i] do\n        j = j - 1\n      end\n      if j > 0 then\n\
    \        words[i] = words[j]\n      else\n        i = i + 1\n      end\n    end\n\
    \  end\n  return words[#words]\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, c in ipairs(word) do\n      count[c] =\
    \ count[c] or 0\n      count[c] = count[c] + 1\n    end\n    for _, c in pairs(count)\
    \ do\n      if count[c] > max[c] then\n        max[c] = count[c]\n      end\n\
    \    end\n  end\n  for _, c in pairs(max) do\n    if max[c] == 1 then\n      return\
    \ c\n    end\n  end\n  return nil\nend", "  local max_count = 0\n  local max_word\
    \ = nil\n  for _, word in ipairs(words) do\n    local count = #word\n    if count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count[char]\
    \ = count[char] or 0\n      count[char] = count[char] + 1\n    end\n    local\
    \ maxChar, maxCount = unpack(unpack(max))\n    if maxCount > count[maxChar] then\n\
    \      max = {maxChar, count[maxChar]}\n    end\n  end\n  return unpack(max)\n\
    end", "  local max = 0\n  local word\n  for word in pairs(words) do\n    max =\
    \ max or #word\n    if max > #word then\n      max = #word\n    end\n  end\n \
    \ if max > 0 then\n    local pos = 1\n    local word = words[pos]\n    while pos\
    \ < #words do\n      pos = pos + 1\n      word = words[pos]\n      if #word >\
    \ max then\n        max = #word\n        word = words[pos]\n      end\n    end\n\
    \  end\n  return word\nend", "  local max = 0\n  local word\n  for word in words\
    \ do\n    max = math.max(max, #word)\n  end\n  for word in words do\n    max =\
    \ math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  return words[#words]\nend", "  local max_count = 0\n  local max_word\n  for\
    \ _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count[char] = count[char]\
    \ or 0\n      count[char] = count[char] + 1\n    end\n    local maxchar = count.keys[1]\n\
    \    if maxchar and maxchar > count.values[maxchar] then\n      maxchar = count.keys[1]\n\
    \    end\n    max[word] = maxchar\n  end\n  local maxword = max.keys[1]\n  if\
    \ maxword and maxword > max.values[maxword] then\n    maxword = max.keys[1]\n\
    \  end\n  return maxword\nend", "  local max_count = 0\n  local max_word = nil\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, c in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max_count then\n      max_count = count\n     \
    \ max_word = word\n    end\n  end\n  return max_word\nend", "  local max = {}\n\
    \  for i = 1, #words do\n    local count = {}\n    for j = 1, #words[i] do\n \
    \     count[words[i][j]] = count[words[i][j]] + 1 -- count the number of times\
    \ each character appears\n    end\n    for j = 1, #count do\n      if count[words[i][j]]\
    \ > max[words[i][j]] then\n        max[words[i][j]] = count[words[i][j]]\n   \
    \   end\n    end\n  end\n  local maxCount = 0\n  for i = 1, #words do\n    if\
    \ max[words[i]] > maxCount then\n      maxCount = max[words[i]]\n    end\n  end\n\
    \  for i = 1, #words do\n    if max[words[i]] == maxCount then\n      return words[i]\n\
    \    end\n  end\n  return nil\nend", "  local max = 0\n  local word\n  for word\
    \ in words do\n    max = max + 1\n  end\n  for word in words do\n    max = max\
    \ - 1\n    if max < 0 then\n      return word\n    end\n  end\nend", "  local\
    \ max_count = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local\
    \ count = 0\n    for _, char in pairs(word) do\n      count = count + 1\n    end\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = {}\n  for _, word in\
    \ ipairs(words) do\n    local count = {}\n    for _, char in ipairs(word) do\n\
    \      count[char] = count[char] or 0\n      count[char] = count[char] + 1\n \
    \   end\n    for _, char in pairs(count) do\n      if count[char] > max[char]\
    \ then\n        max[char] = count[char]\n      end\n    end\n  end\n  table.sort(max,\
    \ function(a, b) return max[a] < max[b] end)\n  return max[1]\nend", "  local\
    \ max_count = -1\n  local max_word = nil\n  for _, word in ipairs(words) do\n\
    \    local count = #word\n    if count > max_count then\n      max_count = count\n\
    \      max_word = word\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ 0\n    for _, c in ipairs(word) do\n      count = count + 1\n      if count\
    \ > max_count then\n        max_count = count\n        max_word = word\n     \
    \ end\n    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local\
    \ max_word = nil\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local max_word\
    \ = nil\n  local max_index = nil\n  for i, word in ipairs(words) do\n    local\
    \ count = #word\n    if count > max_count then\n      max_count = count\n    \
    \  max_word = word\n      max_index = i\n    end\n  end\n  if max_count > 1 then\n\
    \    return max_word\n  else\n    return words[max_index]\n  end\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    max = max + 1\n  end\n  for\
    \ word in words do\n    if max > #word then\n      return word\n    end\n  end\n\
    end", "  local max_count = 0\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    max = max or #word\n\
    \    if #word > max then\n      max = #word\n    end\n  end\n  return words[math.min(#words,\
    \ max)]\nend", "  local max = {}\n  local word = {}\n  for _, word in pairs(words)\
    \ do\n    local max = {}\n    for _, char in pairs(word) do\n      max[#max +\
    \ 1] = char\n    end\n    table.sort(max)\n    if #max > 1 then\n      table.insert(max,\
    \ words[#words])\n    end\n  end\n  return max[1]\nend", "  local max = {}\n \
    \ for i = 1, #words do\n    local count = {}\n    for j = 1, #words[i] do\n  \
    \    count[words[i][j]] = count[words[i][j]] + 1 -- count the number of occurences\
    \ of that character\n    end\n    local maxChar = nil\n    for j = 1, #count do\n\
    \      if count[j] > maxChar[1] then\n        maxChar = { j = count[j], char =\
    \ j }\n      end\n    end\n    max[#max+1] = maxChar.char\n  end\n  table.sort(max,\
    \ function(a, b) return max[a] < max[b] end)\n  return max[1]\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    max = math.max(max, #word)\n\
    \  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n  for word\
    \ in words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n\
    \    max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.", "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    max = max or #word\n\
    \    if #word > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n\
    \    local i = 1\n    while i <= max do\n      local j = i\n      while j <= max\
    \ do\n        if words[i] < words[j] then\n          words[i], words[j] = words[j],\
    \ words[i]\n        end\n        j = j + 1\n      end\n      i = i + 1\n    end\n\
    \  end\n  return words[#words]\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count[#count] == nil then\n      count[#count]\
    \ = 0\n    end\n    local maxCount = count[#count]\n    if maxCount > #max then\n\
    \      maxCount = #max\n    end\n    count[#count] = maxCount + 1\n    max[#max+1]\
    \ = word\n  end\n  table.sort(max, function(a, b) return #a > #b end)\n  return\
    \ max[1]\nend", "  local max = 0\n  local word\n  for word in words do\n    local\
    \ count = 0\n    for c in word do\n      count = count + 1\n      if count > max\
    \ then\n        max = count\n      end\n    end\n  end\n  return words[#words]\n\
    end", "  local max_count = 0\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = {}\n  for _, word in ipairs(words) do\n    local count = {}\n  \
    \  for _, char in ipairs(word) do\n      count[char] = count[char] or 0\n    \
    \  count[char] = count[char] + 1\n    end\n    local max = nil\n    for _, char\
    \ in pairs(count) do\n      if max and count[char] > count[max] then\n       \
    \ max = char\n      end\n    end\n    if max then\n      table.insert(max, word)\n\
    \    end\n  end\n  table.sort(max)\n  return max[1]\nend", "  local max = {}\n\
    \  for _, word in ipairs(words) do\n    local count = {}\n    for _, char in ipairs(word)\
    \ do\n      count[char] = count[char] or 0\n      count[char] = count[char] +\
    \ 1\n    end\n    local max_char = nil\n    for _, char in pairs(count) do\n \
    \     if count[char] > count[max_char] then\n        max_char = char\n      end\n\
    \    end\n    max[#max+1] = max_char\n  end\n  table.sort(max, function(a, b)\
    \ return a<b end)\n  return max[1]\nend", "  local max = {}\n  for i = 1, #words\
    \ do\n    local count = {}\n    for j = 1, #words[i] do\n      table.insert(count,\
    \ words[i][j])\n    end\n    table.sort(count, function(a, b) return #a > #b end)\n\
    \    table.insert(max, words[i][#count])\n  end\n  return max[1]\nend", "  local\
    \ max = 0\n  local word = nil\n  for _, word in pairs(words) do\n    if #word\
    \ > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n    local\
    \ maxChars = #word\n    for _, word in pairs(words) do\n      if #word == max\
    \ then\n        return word\n      end\n    end\n  end\n  return nil\nend", " \
    \ local max = 0\n  local word\n  for word in pairs(words) do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in pairs(words) do\n    local count = 0\n    for char\
    \ in word do\n      count = count + 1\n      if count > max then\n        return\
    \ word\n      end\n    end\n  end\nend", "  local max_count = -1\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = 0\n  local word\n  for word in pairs(words) do\n\
    \    max = max or #word\n    if #word > max then\n      max = #word\n    end\n\
    \  end\n  for word in pairs(words) do\n    if #word == max then\n      return\
    \ word\n    end\n  end\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n\
    \  end\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, char\
    \ in ipairs(word) do\n      count = count + 1\n    end\n    if count > max[#max]\
    \ then\n      max[#max] = count\n    end\n  end\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n\
    \  end\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, char\
    \ in ipairs(word) do\n      count = count + 1\n    end\n    if count > max[#max]\
    \ then\n      max[#max] = count\n    end\n  end\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n\
    \  end\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, char\
    \ in ipairs(word) do\n      count = count + 1\n    end\n    if count > max[#max]\
    \ then\n      max[#max] = count\n    end\n  end\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n\
    \  end\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, char\
    \ in ipairs(word) do\n      count = count + 1\n    end\n    if count > max[#max]\
    \ then\n      max[#max] = count\n    end\n  end\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n\
    \  end\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, char\
    \ in ipairs(word) do\n      count = count + 1\n    end", "  local max_count =\
    \ 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count = 0\n\
    \    for _, char in ipairs(word) do\n      count = count + 1\n    end\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for word\
    \ in pairs(words) do\n    if word:len() > max then\n      max = word:len()\n \
    \   end\n  end\n  if max > 0 then\n    local maxCharCount = 0\n    local word\n\
    \    for word in pairs(words) do\n      if word:len() > maxCharCount then\n  \
    \      maxCharCount = word:len()\n      end\n    end\n    if maxCharCount > 0\
    \ then\n      local word\n      for word in pairs(words) do\n        if word:len()\
    \ == max then\n          if word:len() > words[word:len()] then\n            return\
    \ word\n          end\n        end\n      end\n    end\n  end\n  return nil\n\
    end", "  local max = 0\n  local word\n  for word in words do\n    max = max +\
    \ 1\n  end\n  for word in words do\n    if max ~= #word then\n      max = #word\n\
    \    end\n  end\n  local word\n  for word in words do\n    if max ~= #word then\n\
    \      max = #word\n    end\n  end\n  return word\nend", "  local max = 0\n  local\
    \ word\n  for word in words do\n    max = max or #word\n    if #word > max then\n\
    \      max = #word\n    end\n  end\n  if max > 0 then\n    local i = 1\n    while\
    \ i <= max do\n      local j = i\n      while j <= max do\n        if words[i]\
    \ < words[j] then\n          words[i], words[j] = words[j], words[i]\n       \
    \ end\n        j = j + 1\n      end\n      i = i + 1\n    end\n  end\n  return\
    \ words[#words]\nend", "  local max_count = 0\n  local max_word = nil\n  for _,\
    \ word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = {}\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if max[word] == nil then\n      max[word] = count\n    else\n      if count\
    \ > max[word] then\n        max[word] = count\n      end\n    end\n  end\n  local\
    \ maxCount = 1\n  local maxWord = nil\n  for word, count in pairs(max) do\n  \
    \  if count > maxCount then\n      maxCount = count\n      maxWord = word\n  \
    \  end\n  end\n  return maxWord\nend", "  local max = 0\n  local word\n  for word\
    \ in words do\n    max = max or #word\n    if #word > max then\n      max = #word\n\
    \    end\n  end\n  if max > 0 then\n    local maxChars = #words[1]\n    for i\
    \ = 2, #words do\n      local chars = #words[i]\n      if chars > maxChars then\n\
    \        maxChars = chars\n        word = words[i]\n      end\n    end\n  end\n\
    \  return word\nend", "  local max = {}\n  local word = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, c in ipairs(word) do\n      count = count\
    \ + 1\n    end\n    if count > max[#max] then\n      max[#max] = count\n    end\n\
    \  end\n  local maxCount = 0\n  for _, count in ipairs(max) do\n    if count >\
    \ maxCount then\n      maxCount = count\n    end\n  end\n  local maxWord = {}\n\
    \  for _, word in ipairs(words) do\n    local count = 0\n    for _, c in ipairs(word)\
    \ do\n      count = count + 1\n    end\n    if count == maxCount then\n      table.insert(maxWord,\
    \ word)\n    end\n  end\n  if #maxWord == 1 then\n    return maxWord[1]\n  end\n\
    \  table.sort(maxWord)\n  return maxWord[1]\nend", "  local max = 0\n  local word\n\
    \  for word in words do\n    max = max + 1\n  end\n  local counts = {}\n  for\
    \ word in words do\n    counts[#counts + 1] = word\n  end\n  local i = 0\n  local\
    \ word\n  for word in words do\n    i = i + 1\n    local count = 0\n    for j\
    \ = 1, #counts do\n      if counts[j] == word then\n        count = count + 1\n\
    \      end\n    end\n    if count > max then\n      max = count\n    end\n  end\n\
    \  if max > 0 then\n    local word\n    for word in words do\n      if counts[#counts\
    \ + 1] == word then\n        return word\n      end\n    end\n  end\n  return\
    \ nil\nend", "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = 0\n    for _, char in ipairs(word) do\n      count = count\
    \ + 1\n      if count > max_count then\n        max_count = count\n        max_word\
    \ = word\n      end\n    end\n  end\n  return max_word\nend", "  local max_count\
    \ = nil\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local\
    \ count = #word\n    if max_count == nil or count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = {}\n  for i = 1, #words do\n    local word = words[i]\n    local\
    \ count = 0\n    for j = 1, #word do\n      count = count + word[j]:bytes()\n\
    \    end\n    table.insert(max, count, word)\n  end\n  table.sort(max, function(a,\
    \ b) return a[2] < b[2] end)\n  return max[1]\nend", "  local max = 0\n  local\
    \ word\n  for word in pairs(words) do\n    max = max or #word\n    if #word >\
    \ max then\n      max = #word\n    end\n  end\n  if max > 0 then\n    local maxChars\
    \ = #words[max]\n    local maxWord = words[max]\n    for i = 1, #words do\n  \
    \    local wordChars = #words[i]\n      if wordChars > maxChars then\n       \
    \ maxChars = wordChars\n        maxWord = words[i]\n      end\n    end\n    return\
    \ maxWord\n  else\n    return nil\n  end\nend", "  local max = {}\n  for _, word\
    \ in ipairs(words) do\n    local count = {}\n    for _, char in ipairs(word) do\n\
    \      count[char] = count[char] or 0\n      count[char] = count[char] + 1\n \
    \   end\n    local maxchar = count.keys[1]\n    local maxcount = 0\n    for _,\
    \ char in pairs(count) do\n      if count[char] > maxcount then\n        maxcount\
    \ = count[char]\n        maxchar = char\n      end\n    end\n    max[word] = maxchar\n\
    \  end\n  table.sort(max, function(a, b) return a[1] < b[1] end)\n  return max[1]\n\
    end", "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    if #word > max then\n\
    \      max = #word\n    end\n  end\n  if max > 0 then\n    local maxCharCount\
    \ = 0\n    local word\n    for word in words do\n      if #word > maxCharCount\
    \ then\n        maxCharCount = #word\n      end\n    end\n    if maxCharCount\
    \ > 0 then\n      local word\n      for word in words do\n        if #word ==\
    \ max then\n          return word\n        end\n      end\n    end\n  end\nend",
  "  local max = 0\n  local word\n  for word in pairs(words) do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in pairs(words) do\n    local count = 0\n    for c\
    \ in word do\n      count = count + 1\n      if count > max then\n        return\
    \ word\n      end\n    end\n  end\n  return nil\nend", "  local max_count = -1\n\
    \  local max_word = nil\n  for _, word in ipairs(words) do\n    local count =\
    \ #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n\
    \  for word in words do\n    max = max or #word\n    if #word > max then\n   \
    \   max = #word\n    end\n  end\n  return words[#words]\nend", "  local max_count\
    \ = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ 0\n    for _, char in ipairs(word) do\n      count = count + 1\n    end\n  \
    \  if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for\
    \ word in pairs(words) do\n    max = max or #word\n    if #word > max then\n \
    \     max = #word\n    end\n  end\n  for word in pairs(words) do\n    if #word\
    \ == max then\n      return word\n    end\n  end\nend", "  local max_count = 0\n\
    \  local max_word = \"\"\n  for _, word in ipairs(words) do\n    local count =\
    \ 0\n    for _, c in ipairs(word) do\n      count = count + 1\n      if count\
    \ > max_count then\n        max_count = count\n        max_word = word\n     \
    \ end\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n\
    \  for word in pairs(words) do\n    if words[word] > max then\n      max = words[word]\n\
    \    end\n  end\n  return max\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count[char]\
    \ = count[char] or 0\n      count[char] = count[char] + 1\n    end\n    local\
    \ maxChar = nil\n    for _, char in pairs(count) do\n      if maxChar == nil or\
    \ count[char] > count[maxChar] then\n        maxChar = char\n      end\n    end\n\
    \    max[#max+1] = maxChar\n  end\n  return max[1]\nend", "  local max = 0\n \
    \ local word\n  for word in words do\n    if word:len() > max then\n      max\
    \ = word:len()\n    end\n  end\n  if max > 0 then\n    for word in words do\n\
    \      if word:len() == max then\n        return word\n      end\n    end\n  end\n\
    \  return nil\nend", "  local max = 0\n  local word\n  for word in words do\n\
    \    max = max or #word\n    if #word > max then\n      max = #word\n    end\n\
    \  end\n  if max > 0 then\n    return words[#words]\n  end\nend", "  local max_count\
    \ = -1\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max_count = -1\n \
    \ local max_word\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local max_word\
    \ = nil\n  for _, word in ipairs(words) do\n    local count = #word\n    if count\
    \ > max_count then\n      max_count = count\n      max_word = word\n    end\n\
    \  end\n  return max_word\nend", "  local max = 0\n  local word\n  for word in\
    \ words do\n    max = max or #word\n    if #word > max then\n      max = #word\n\
    \    end\n  end\n  return words[math.min(#words, max)]\nend", "  local max_count\
    \ = 0\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local count\
    \ = #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = {}\n  for _,\
    \ word in ipairs(words) do\n    local count = {}\n    for _, char in ipairs(word)\
    \ do\n      count[char] = count[char] or 0\n      count[char] = count[char] +\
    \ 1\n    end\n    for _, char in pairs(count) do\n      if count[char] > max[char]\
    \ then\n        max[char] = count[char]\n      end\n    end\n  end\n  local maxCount\
    \ = 0\n  for _, char in pairs(max) do\n    if max[char] > maxCount then\n    \
    \  maxCount = max[char]\n    end\n  end\n  if maxCount == 0 then\n    return nil\n\
    \  end\n  local maxChar = nil\n  for _, char in pairs(max) do\n    if max[char]\
    \ == maxCount then\n      maxChar = char\n    end\n  end\n  return maxChar\nend",
  "  local max = {}\n  for _, word in ipairs(words) do\n    local count = {}\n   \
    \ for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n      count[c]\
    \ = count[c] + 1\n    end\n    local maxChar = nil\n    for c, count in pairs(count)\
    \ do\n      if count > max[maxChar] then\n        maxChar = c\n      end\n   \
    \ end\n    max[maxChar] = max[maxChar] or 0\n    max[maxChar] = max[maxChar] +\
    \ 1\n  end\n  local maxChar = nil\n  local maxCount = 0\n  for c, count in pairs(max)\
    \ do\n    if count > maxCount then\n      maxChar = c\n      maxCount = count\n\
    \    end\n  end\n  return maxChar\nend", "  local max = 0\n  local word\n  for\
    \ word in words do\n    max = max or #word\n    if #word > max then\n      max\
    \ = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = #words[1]\n\
    \    for i = 2, #words do\n      local chars = #words[i]\n      if chars > maxChars\
    \ then\n        maxChars = chars\n        word = words[i]\n      end\n    end\n\
    \  end\n  return word\nend", "  local max = 0\n  local word\n  for word in words\
    \ do\n    max = max + 1\n  end\n  for word in words do\n    max = max - 1\n  \
    \  if max < 0 then\n      return word\n    end\n  end\nend", "  local max = 0\n\
    \  local word\n  for word in words do\n    max = max or #word\n    if #word >\
    \ max then\n      max = #word\n    end\n  end\n  return words[#words]\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  local i = 1\n  while i <= max do\n    local word = words[i]\n\
    \    local count = 0\n    for j = 1, #word do\n      if word[j] == word[i] then\n\
    \        count = count + 1\n      end\n    end\n    if count > max then\n    \
    \  return word\n    end\n    i = i + 1\n  end\n  return nil\nend", "  local max\
    \ = {}\n  for i = 1, #words do\n    local count = {}\n    for j = 1, #words[i]\
    \ do\n      count[words[i][j]] = count[words[i][j]] + 1 -- count the character\n\
    \    end\n    local maxChar = nil\n    for j = 1, #count do\n      if count[maxChar]\
    \ < count[j] then\n        maxChar = j\n      end\n    end\n    if max[maxChar]\
    \ == nil then\n      max[maxChar] = words[i]\n    else\n      if #max[maxChar]\
    \ > #words[i] then\n        max[maxChar] = words[i]\n      end\n    end\n  end\n\
    \  return max[#max]\nend", "  local max = 0\n  local word\n  for word in pairs(words)\
    \ do\n    if words[word] > max then\n      max = words[word]\n    end\n  end\n\
    \  return max\nend", "  local max = 0\n  local word\n  for word in words do\n\
    \    if word:len() > max then\n      max = word:len()\n    end\n  end\n  if max\
    \ > 0 then\n    local maxChars = words[max]\n    for word in pairs(words) do\n\
    \      if word:len() == max then\n        if words[word] < maxChars then\n   \
    \       maxChars = words[word]\n        end\n      end\n    end\n    return maxChars\n\
    \  end\nend", "  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n\
    \      count[c] = count[c] + 1\n    end\n    local maxChar = nil\n    for _, c\
    \ in ipairs(count) do\n      if maxChar == nil or count[c] > count[maxChar] then\n\
    \        maxChar = c\n      end\n    end\n    table.insert(max, maxChar)\n  end\n\
    \  table.sort(max)\n  return max[1]\nend", "  local max_count = nil\n  local max_word\
    \ = nil\n  for _, word in ipairs(words) do\n    local count = #word\n    if max_count\
    \ == nil or count > max_count then\n      max_count = count\n      max_word =\
    \ word\n    end\n  end\n  return max_word\nend", "  local max = {}\n  for _, word\
    \ in ipairs(words) do\n    local count = {}\n    for _, char in ipairs(word) do\n\
    \      count[char] = count[char] or 0\n      count[char] = count[char] + 1\n \
    \   end\n    local maxChar = nil\n    for _, char in pairs(count) do\n      if\
    \ maxChar ~= nil and max[maxChar] >= count[char] then\n        maxChar = char\n\
    \      end\n    end\n    max[maxChar] = max[maxChar] or 0\n    max[maxChar] =\
    \ max[maxChar] + 1\n  end\n  local maxChar = nil\n  for _, char in pairs(max)\
    \ do\n    if maxChar ~= nil and max[maxChar] >= count[char] then\n      maxChar\
    \ = char\n    end\n  end\n  return maxChar\nend", "  local max = {}\n  for i =\
    \ 1, #words do\n    local count = {}\n    for j = 1, #words[i] do\n      count[words[i][j]]\
    \ = count[words[i][j]] + 1 -- count the character\n    end\n    for j = 1, #count\
    \ do\n      if count[words[i][j]] > max[words[i][j]] then\n        max[words[i][j]]\
    \ = count[words[i][j]]\n      end\n    end\n  end\n  for i = 1, #words do\n  \
    \  for j = 1, #words[i] do\n      if max[words[i][j]] > max[words[i][j+1]] then\n\
    \        max[words[i][j]] = max[words[i][j+1]]\n      end\n    end\n  end\n  for\
    \ i = 1, #words do\n    if max[words[i][1]] > max[words[i][#words[i]]] then\n\
    \      return words[i][1]\n    end\n  end\n  return nil\nend", "  local max_count\
    \ = -1\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n\
    \  for word in pairs(words) do\n    if word:len() > max then\n      max = word:len()\n\
    \    end\n  end\n  if max ~= 0 then\n    local maxChars = max\n    local word\n\
    \    for word in pairs(words) do\n      if word:len() > maxChars then\n      \
    \  maxChars = word:len()\n      end\n    end\n    if maxChars == max then\n  \
    \    maxChars = 1\n    end\n    return words[#words]\n  else\n    return nil\n\
    \  end\nend", "  local max = 0\n  local word\n  for word in words do\n    if #word\
    \ > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n    local\
    \ maxChars = #words[max]\n    for word in pairs(words) do\n      if #word > maxChars\
    \ then\n        maxChars = #word\n      end\n    end\n    return words[max][maxChars]\n\
    \  end\nend", "  local max = 0\n  local word\n  for word in pairs(words) do\n\
    \    max = max or #word\n    if #word > max then\n      max = #word\n    end\n\
    \  end\n  local word\n  for word in pairs(words) do\n    if #word == max then\n\
    \      return word\n    end\n  end\nend", "  local max = {}\n  for _, word in\
    \ ipairs(words) do\n    local count = {}\n    for _, char in ipairs(word) do\n\
    \      count[char] = count[char] or 0\n      count[char] = count[char] + 1\n \
    \   end\n    local max = nil\n    for _, char in pairs(count) do\n      if max\
    \ and count[char] > count[max] then\n        max = char\n      end\n    end\n\
    \    if max then\n      max[#max+1] = word\n    end\n  end\n  local maxWord =\
    \ nil\n  for _, word in ipairs(max) do\n    if maxWord then\n      if #maxWord\
    \ > #word then\n        return maxWord\n      else\n        return word\n    \
    \  end\n    end\n    maxWord = word\n  end\n  return maxWord\nend", "  local max\
    \ = {}\n  for _, word in ipairs(words) do\n    local count = {}\n    for _, c\
    \ in ipairs(word) do\n      count[c] = count[c] or 0\n      count[c] = count[c]\
    \ + 1\n    end\n    local maxc = nil\n    for c, count in pairs(count) do\n  \
    \    if count > maxc then\n        maxc = count\n        max = {}\n      end\n\
    \      max[c] = count\n    end\n  end\n  local maxc = nil\n  for c, count in pairs(max)\
    \ do\n    if count > maxc then\n      maxc = count\n    end\n  end\n  return max\n\
    end", "  local max = 0\n  local word\n  for word in pairs(words) do\n    local\
    \ count = 0\n    for char in word do\n      count = count + 1\n      if count\
    \ > max then\n        max = count\n      end\n    end\n  end\n  if max > 0 then\n\
    \    local index = #words - 1\n    while index > 0 do\n      if words[index] ==\
    \ words[max] then\n        max = max + 1\n      else\n        index = index -\
    \ 1\n      end\n    end\n    return words[max]\n  end\n  return nil\nend", " \
    \ local max_count = -1\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in pairs(words) do\n    local count\
    \ = 0\n    for char in word do\n      count = count + 1\n      if count > max\
    \ then\n        max = count\n      end\n    end\n  end\n  if max > 0 then\n  \
    \  local word\n    for word in pairs(words) do\n      if words[word] == max then\n\
    \        return word\n      end\n    end\n  end\n  return nil\nend", "  local\
    \ max_count = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local\
    \ count = 0\n    for _, c in ipairs(word) do\n      count = count + 1\n      if\
    \ count > max_count then\n        max_count = count\n        max_word = word\n\
    \      end\n    end\n  end\n  return max_word\nend", "  local max = {}\n  local\
    \ word = {}\n  for i = 1, #words do\n    word[#word + 1] = words[i]\n  end\n \
    \ for i = 1, #word do\n    local count = 0\n    for j = 1, #word do\n      if\
    \ word[i] == word[j] then\n        count = count + 1\n      end\n    end\n   \
    \ if count > max[#max] then\n      max[#max] = count\n    end\n  end\n  table.sort(max)\n\
    \  return max[1]\nend", "  local max = {}\n  for _, word in ipairs(words) do\n\
    \    local count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c]\
    \ or 0\n      count[c] = count[c] + 1\n    end\n    local maxc = nil\n    for\
    \ c, count in pairs(count) do\n      if count > maxc then\n        maxc = count\n\
    \        max = {}\n      end\n      max[c] = count\n    end\n  end\n  local maxc\
    \ = nil\n  for c, count in pairs(max) do\n    if count > maxc then\n      maxc\
    \ = count\n    end\n  end\n  if maxc == nil then\n    return nil\n  end\n  local\
    \ maxword = nil\n  for _, word in ipairs(words) do\n    local count = {}\n   \
    \ for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n      count[c]\
    \ = count[c] + 1\n    end\n    local maxc = nil\n    for c, count in pairs(count)\
    \ do\n      if count > maxc then\n        maxc = count\n        maxword = {}\n\
    \      end\n      maxword[c] = word\n    end\n    if maxc == maxc then\n     \
    \ return maxword\n    end\n  end\n  return nil\nend", "  local max = {}\n  local\
    \ max_count = 0\n  local max_word = nil\n  for _, word in ipairs(words) do\n \
    \   local count = 0\n    for _, char in ipairs(word) do\n      count = count +\
    \ 1\n    end\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = {}\n  for _,\
    \ word in ipairs(words) do\n    local count = {}\n    for _, c in ipairs(word)\
    \ do\n      count[c] = count[c] or 0\n      count[c] = count[c] + 1\n    end\n\
    \    local maxc = nil\n    for c, _ in pairs(count) do\n      if maxc == nil or\
    \ maxc > c then\n        maxc = c\n      end\n    end\n    if maxc then\n    \
    \  max[#max+1] = maxc\n    end\n  end\n  table.sort(max)\n  return max[1]\nend",
  "  local max = {}\n  for _, word in ipairs(words) do\n    local count = {}\n   \
    \ for _, char in ipairs(word) do\n      count[char] = count[char] or 0\n     \
    \ count[char] = count[char] + 1\n    end\n    for char, count in pairs(count)\
    \ do\n      if count > max[count] then\n        max[count] = char\n      end\n\
    \    end\n  end\n  for _, count in ipairs(max) do\n    if count == max[count]\
    \ then\n      return words[count]\n    end\n  end\n  return nil\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    if #word > max then\n   \
    \   max = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = {}\n\
    \    for word in words do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if #maxChars == 0 then\n          maxChars[char]\
    \ = count\n        elseif #maxChars[char] < count then\n          maxChars[char]\
    \ = count\n        end\n      end\n    end\n    for word in words do\n      local\
    \ count = 0\n      for char in word do\n        count = count + maxChars[char]\n\
    \      end\n      if count > max then\n        max = count\n      end\n    end\n\
    \  end\n  return words[#words]\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count =\
    \ table.insert(count, char)\n    end\n    table.sort(count, function(a, b) return\
    \ a < b end)\n    table.insert(max, count[1])\n  end\n  table.sort(max, function(a,\
    \ b) return a < b end)\n  return max[1]\nend", "  local max = {}\n  local word\
    \ = {}\n  for _, word in ipairs(words) do\n    for _, char in ipairs(word) do\n\
    \      if not max[char] then\n        max[char] = 1\n      else\n        max[char]\
    \ = max[char] + 1\n      end\n    end\n  end\n  for _, char in ipairs(max) do\n\
    \    if max[char] == 1 then\n      return char\n    end\n  end\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    max = max or #word\n    if\
    \ #word > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n   \
    \ local i = 1\n    local word = words[1]\n    while i <= max do\n      word =\
    \ words[i]\n      i = i + 1\n      if #word > max then\n        word = words[1]\n\
    \      end\n    end\n  end\n  return word\nend", "  local max = {}\n  for _, word\
    \ in ipairs(words) do\n    local count = #word\n    if max[count] ~= nil then\n\
    \      if count > max[count] then\n        max[count] = word\n      end\n    else\n\
    \      max[count] = word\n    end\n  end\n  table.sort(max, function(a, b) return\
    \ #a > #b end)\n  return max[1]\nend", "  local max_count = 0\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word)\
    \ do\n      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  return words[math.min(#words, max)]\nend", "  local max = 0\n\
    \  local word = nil\n  for _, word in pairs(words) do\n    max = max + 1\n   \
    \ if max > #word then\n      break\n    end\n  end\n  if max > #words then\n \
    \   return word\n  end\n  local max2 = 1\n  for _, word in pairs(words) do\n \
    \   max2 = max2 + 1\n    if max2 > #word then\n      break\n    end\n  end\n \
    \ if max2 > #words then\n    return word\n  end\n  local max3 = 0\n  for _, word\
    \ in pairs(words) do\n    max3 = max3 + 1\n    if max3 > #word then\n      break\n\
    \    end\n  end\n  if max3 > #words then\n    return word\n  end\n  local max4\
    \ = 0\n  for _, word in pairs(words) do\n    max4 = max4 + 1\n    if max4 > #word\
    \ then\n      break\n    end\n  end\n  if max4 > #words then\n    return word\n\
    \  end\n  local max5 = 0\n  for _, word in pairs(words) do\n    max5 = max5 +\
    \ 1\n    if max5 > #word then\n      break\n    end\n  end\n  if max5 > #words\
    \ then\n    return word\n  end\n  local max6 = 0\n  for _, word in pairs(words)\
    \ do\n    max6 = max6 + 1\n    if max6 > #word then\n      break\n    end\n  end\n\
    \  if max6 > #words then\n    return word\n  end\n  local max7 = 0\n  for _, word\
    \ in pairs(words) do\n    max7 = max7 + 1\n    if max7 > #word then\n      break\n\
    \    end\n  end\n  if max7 > #words then\n    return word\n  end\n  local max8\
    \ = 0\n  for _, word in pairs(words) do\n    max8 = max8 + 1\n    if max8 > #word\
    \ then\n      break\n    end\n  end\n  if max8 > #words then\n    return word\n\
    \  end\n  local max9 = 0\n  for _, word in pairs(words) do\n    max9 = max9 +\
    \ 1\n    if max9 > #word then\n      break\n    end\n  end\n  if max9 > #words\
    \ then\n    return word\n  end\n  local max10 = 0\n  for _, word in pairs(words)\
    \ do\n    max10 = max10 + 1\n    if max10 > #word then\n      break\n    end\n\
    \  end\n  if max10 > #words then\n    return word\n  end\n  local max11 = 0\n\
    \  for _, word in pairs(words) do\n    max11 = max11 + 1", "  local max_count\
    \ = -1\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n\
    \  for word in pairs(words) do\n    if words[word] > max then\n      max = words[word]\n\
    \    end\n  end\n  return max\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count =\
    \ count[char] or 0\n      count[char] = count + 1\n    end\n    local maxChar\
    \ = nil\n    for _, char in pairs(count) do\n      if maxChar == nil or count[char]\
    \ > count[maxChar] then\n        maxChar = char\n      end\n    end\n    max[word]\
    \ = maxChar\n  end\n  local maxChar = nil\n  for _, word in ipairs(words) do\n\
    \    if max[word] == nil then\n      maxChar = nil\n    else\n      if maxChar\
    \ ~= nil and max[word] ~= maxChar then\n        return word\n      end\n     \
    \ maxChar = max[word]\n    end\n  end\n  return nil\nend", "  local max_count\
    \ = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n\
    \  for word in words do\n    if #word > max then\n      max = #word\n    end\n\
    \  end\n  if max > 0 then\n    local maxChar\n    for word in words do\n     \
    \ if #word == max then\n        maxChar = word\n        break\n      end\n   \
    \ end\n    return maxChar\n  end\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if max[count] == nil then\n      max[count]\
    \ = word\n    else\n      if #max[count] > #word then\n        max[count] = word\n\
    \      end\n    end\n  end\n  return max[1]\nend", "  local max_count = -1\n \
    \ local max_word = nil\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max_count = 0\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = {}\n  for _, word in ipairs(words) do\n    local count = {}\n  \
    \  for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n      count[c]\
    \ = count[c] + 1\n    end\n    local maxc = nil\n    for c, v in pairs(count)\
    \ do\n      if v > maxc then\n        maxc = v\n        max[c] = c\n      end\n\
    \    end\n  end\n  return max[#max][1]\nend", "  local max_count = 0\n  local\
    \ max_word = nil\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for\
    \ word in words do\n    max = max or #word\n    if #word > max then\n      max\
    \ = #word\n    end\n  end\n  return words[math.min(#words, max)]\nend", "  local\
    \ max_count = -1\n  local max_word\n  for _, word in ipairs(words) do\n    local\
    \ count = 0\n    for _, c in ipairs(word) do\n      count = count + 1\n    end\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for\
    \ word in pairs(words) do\n    max = max or #word\n    if #word > max then\n \
    \     max = #word\n    end\n  end\n  return words[#words][max]\nend", "  local\
    \ max_count = nil\n  local max_word = nil\n  for _, word in ipairs(words) do\n\
    \    local count = #word\n    if max_count and count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max_count = 0\n  local max_word\n  for _, word in ipairs(words) do\n \
    \   local count = 0\n    for _, c in ipairs(word) do\n      count = count + 1\n\
    \    end\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  local index\
    \ = 1\n  while max > 0 do\n    max = max - 1\n    word = words[index]\n    index\
    \ = index + 1\n  end\n  return word\nend", "  local max = 0\n  local word\n  for\
    \ word in words do\n    max = max or #word\n    if #word > max then\n      max\
    \ = #word\n    end\n  end\n  if max > 0 then\n    local words = {}\n    for word\
    \ in words do\n      words[#words + 1] = word\n    end\n    table.sort(words,\
    \ function(a, b) return #a > #b end)\n    return words[#words]\n  end\nend", " \
    \ local max = {}\n  for _, word in ipairs(words) do\n    local count = {}\n  \
    \  for _, char in ipairs(word) do\n      count[char] = count[char] or 0\n    \
    \  count[char] = count[char] + 1\n    end\n    local maxChar = nil\n    for _,\
    \ char in pairs(count) do\n      if maxChar == nil or count[char] > count[maxChar]\
    \ then\n        maxChar = char\n      end\n    end\n    max[#max+1] = maxChar\n\
    \  end\n  return max[1]\nend", "  local max = {}\n  for i = 1, #words do\n   \
    \ local count = {}\n    for j = 1, #words[i] do\n      count[words[i][j]] = count[words[i][j]]\
    \ + 1 -- count the number of occurences of that character\n    end\n    local\
    \ maxChar = nil\n    for j = 1, #count do\n      if count[j] > maxChar[1] then\n\
    \        maxChar = { j = count[j], char = words[i][j] }\n      end\n    end\n\
    \    if maxChar.char == words[i][#words[i]] then\n      table.insert(max, maxChar.char)\n\
    \    end\n  end\n  if #max == 1 then\n    return max[1]\n  end\n  table.sort(max)\n\
    \  return max[1]\nend", "  local max = 0\n  local word\n  for word in words do\n\
    \    max = max or #word\n    if #word > max then\n      max = #word\n    end\n\
    \  end\n  return words[#words]\nend", "  local max = {}\n  for i = 1, #words do\n\
    \    local count = {}\n    for j = 1, #words[i] do\n      count[words[i][j]] =\
    \ count[words[i][j]] + 1 -- count the number of times a character appears\n  \
    \  end\n    local maxChar = nil\n    for j = 1, #count do\n      if count[j] >\
    \ maxChar[1] then\n        maxChar = { j = count[j], char = words[i][j] }\n  \
    \    end\n    end\n    if maxChar[1] > 1 then\n      max[#max+1] = maxChar[1]\n\
    \    end\n  end\n  table.sort(max)\n  return max[1]\nend", "  local max = 0\n\
    \  local word\n  for word in pairs(words) do\n    local count = 0\n    for char\
    \ in word do\n      count = count + 1\n      if count > max then\n        max\
    \ = count\n      end\n    end\n  end\n  return words[max]\nend", "  local max_count\
    \ = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ 0\n    for _, c in ipairs(word) do\n      count = count + 1\n    end\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for word\
    \ in words do\n    if #word > max then\n      max = #word\n    end\n  end\n  if\
    \ max > 0 then\n    local maxCharCount = 0\n    local word\n    for word in words\
    \ do\n      if #word > maxCharCount then\n        maxCharCount = #word\n     \
    \ end\n    end\n    if maxCharCount > 0 then\n      local minCharCount = 0\n \
    \     local word\n      for word in words do\n        if #word < minCharCount\
    \ then\n          minCharCount = #word\n        end\n      end\n      if minCharCount\
    \ > 0 then\n        local word\n        for word in words do\n          if #word\
    \ == max then\n            return word\n          end\n        end\n      end\n\
    \    end\n  end\n  return nil\nend", "  local max = 0\n  local word\n  for word\
    \ in words do\n    max = max or #word\n    if #word > max then\n      max = #word\n\
    \    end\n  end\n  for word in words do\n    if #word == max then\n      return\
    \ word\n    end\n  end\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count[char]\
    \ = count[char] or 0\n      count[char] = count[char] + 1\n    end\n    local\
    \ maxChar = nil\n    for _, char in pairs(count) do\n      if maxChar == nil or\
    \ count[char] > count[maxChar] then\n        maxChar = char\n      end\n    end\n\
    \    max[#max+1] = maxChar\n  end\n  table.sort(max, function(a, b) return a <\
    \ b end)\n  return max[1]\nend", "  local max = {}\n  for i = 1, #words do\n \
    \   local char = words[i][1]\n    local count = 0\n    for j = 2, #words do\n\
    \      if words[i][j] == char then\n        count = count + 1\n      end\n   \
    \ end\n    if count > max[char] then\n      max[char] = count\n    end\n  end\n\
    \  local maxChar = nil\n  local maxCount = -1\n  for i = 1, #words do\n    if\
    \ max[words[i][1]] > maxCount then\n      maxChar = words[i][1]\n      maxCount\
    \ = max[words[i][1]]\n    end\n  end\n  return maxChar\nend", "  local max = 0\n\
    \  local word\n  for word in words do\n    max = max + 1\n  end\n  local i = 1\n\
    \  while i < #words do\n    local count = 0\n    local word = words[i]\n    for\
    \ j = 1, #words do\n      if words[j] == word then\n        count = count + 1\n\
    \      end\n    end\n    if count > max then\n      max = count\n    end\n   \
    \ i = i + 1\n  end\n  return words[#words]\nend", "  local max = {}\n  local i\
    \ = 1\n  for _, word in ipairs(words) do\n    local count = 0\n    for _, c in\
    \ ipairs(word) do\n      count = count + 1\n    end\n    if count > max[#max]\
    \ then\n      max[#max] = count\n    end\n  end\n  for i = 1, #max do\n    if\
    \ max[i] > #words[i] then\n      return words[i]\n    end\n  end\n  return words[1]\n\
    end", "  local max = 0\n  local word\n  for word in words do\n    max = max or\
    \ #word\n    if #word > max then\n      max = #word\n    end\n  end\n  if max\
    \ > 0 then\n    local maxChars = {}\n    for word in words do\n      local count\
    \ = 0\n      for char in word do\n        count = count + 1\n        if #maxChars\
    \ < count then\n          maxChars[#maxChars + 1] = char\n        end\n      end\n\
    \    end\n    local maxChar = #maxChars\n    if maxChar > 0 then\n      local\
    \ firstChar = maxChar[1]\n      for i = 2, maxChar do\n        if maxChar[i] >\
    \ firstChar then\n          firstChar = maxChar[i]\n        end\n      end\n \
    \     return firstChar\n    end\n  end\n  return nil\nend", "  local max = 0\n\
    \  local word\n  for word in words do\n    if word:len() > max then\n      max\
    \ = word:len()\n    end\n  end\n  local word\n  for word in words do\n    if word:len()\
    \ == max then\n      break\n    end\n  end\n  return word\nend", "  local max\
    \ = {}\n  for _, word in ipairs(words) do\n    local count = {}\n    for _, c\
    \ in ipairs(word) do\n      count[c] = count[c] or 0\n      count[c] = count[c]\
    \ + 1\n    end\n    local maxc = count.max\n    if maxc then\n      max[#max+1]\
    \ = word\n    end\n  end\n  if #max > 1 then\n    return table.unpack(max, 1,\
    \ #max)\n  end\n  return words[1]\nend", "  local max_count = nil\n  local max_word\
    \ = nil\n  for _, word in ipairs(words) do\n    local count = #word\n    if max_count\
    \ == nil or count > max_count then\n      max_count = count\n      max_word =\
    \ word\n    end\n  end\n  return max_word\nend", "  local max = {}\n  for _, word\
    \ in ipairs(words) do\n    local count = {}\n    for _, c in ipairs(word) do\n\
    \      count[c] = count[c] or 0\n      count[c] = count[c] + 1\n    end\n    local\
    \ maxc = count.keys[1]\n    if maxc then\n      max[maxc] = word\n    end\n  end\n\
    \  local maxc = max.keys[1]\n  if maxc then\n    return max[maxc]\n  end\nend",
  "  local max = 0\n  local word\n  for word in words do\n    if #word > max then\n\
    \      max = #word\n    end\n  end\n  if max > 0 then\n    local maxCharCount\
    \ = 0\n    local word\n    for word in words do\n      if #word > maxCharCount\
    \ then\n        maxCharCount = #word\n      end\n    end\n    if maxCharCount\
    \ > 0 then\n      local word\n      for word in words do\n        if #word ==\
    \ max then\n          return word\n        end\n      end\n    end\n  end\nend",
  "  local max = 0\n  local word\n  for word in pairs(words) do\n    max = max or\
    \ #word\n    if #word > max then\n      max = #word\n    end\n  end\n  if max\
    \ > 0 then\n    local i = 1\n    while i <= max do\n      local word = words[i]\n\
    \      local count = 0\n      for _, c in pairs(word) do\n        count = count\
    \ + 1\n        if count > #word then\n          break\n        end\n      end\n\
    \      if count > max then\n        return word\n      end\n      i = i + 1\n\
    \    end\n  end\n  return nil\nend", "  local max_count = 0\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = 0\n    for _, char in ipairs(word)\
    \ do\n      count = count + 1\n    end\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in pairs(words) do\n    local count\
    \ = 0\n    for char in word do\n      count = count + 1\n      if count > max\
    \ then\n        max = count\n      end\n    end\n  end\n  if max > 0 then\n  \
    \  local word\n    for word in pairs(words) do\n      local count = 0\n      for\
    \ char in word do\n        count = count + 1\n        if count > max then\n  \
    \        max = count\n        end\n      end\n    end\n  end\n  return word\n\
    end", "  local max = 0\n  local word\n  for word in pairs(words) do\n    max =\
    \ max + 1\n  end\n  for word in pairs(words) do\n    local count = 0\n    for\
    \ char in word do\n      count = count + 1\n      if count > max then\n      \
    \  max = count\n      end\n    end\n  end\n  return words[#words]\nend", "  local\
    \ max = {}\n  for i = 1, #words do\n    local count = {}\n    for j = 1, #words[i]\
    \ do\n      table.insert(count, words[i][j])\n    end\n    table.sort(count, function(a,\
    \ b) return #a > #b end)\n    table.insert(max, count[1])\n  end\n  return max[1]\n\
    end", "  local max_count = -1\n  local max_word\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in words do\n    max = max or #word\n\
    \    if #word > max then\n      max = #word\n    end\n  end\n  return words[#words]\n\
    end", "  local max = 0\n  local word\n  for word in words do\n    max = max or\
    \ #word\n    if #word > max then\n      max = #word\n    end\n  end\n  if max\
    \ > 0 then\n    local i = 1\n    while i <= max do\n      local j = i\n      while\
    \ j <= max do\n        if words[i] < words[j] then\n          words[i], words[j]\
    \ = words[j], words[i]\n        end\n        j = j + 1\n      end\n      i = i\
    \ + 1\n    end\n  end\n  return words[#words]\nend", "  local max = 0\n  local\
    \ word\n  for word in pairs(words) do\n    max = max + 1\n  end\n  for word in\
    \ pairs(words) do\n    if max > #word then\n      return word\n    end\n  end\n\
    \  return nil\nend", "  local max = 0\n  local word\n  for word in pairs(words)\
    \ do\n    if words[word] > max then\n      max = words[word]\n    end\n  end\n\
    \  return max\nend", "  local max = {}\n  for _, word in ipairs(words) do\n  \
    \  local count = {}\n    for _, c in ipairs(word) do\n      count[c] = count[c]\
    \ or 0\n      count[c] = count[c] + 1\n    end\n    local maxc = count.keys[count.keys[1]]\n\
    \    if maxc then\n      max[word] = maxc\n    end\n  end\n  table.sort(max, function(a,\
    \ b) return max[a] < max[b] end)\n  return max[max.keys[1]]\nend", "  local max\
    \ = 0\n  local word\n  for word in words do\n    max = max or #word\n    if #word\
    \ > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n    local\
    \ i = 1\n    while i <= max do\n      local word = words[i]\n      local count\
    \ = 0\n      for j = 1, #word do\n        if word[j] == word[i] then\n       \
    \   count = count + 1\n        end\n      end\n      if count > max then\n   \
    \     return word\n      end\n      i = i + 1\n    end\n  end\nend", "  local\
    \ max = {}\n  for _, word in ipairs(words) do\n    local count = #word\n    for\
    \ i = 1, count do\n      local char = word[i]\n      if not max[char] then\n \
    \       max[char] = word\n      else\n        if max[char] < count then\n    \
    \      max[char] = word\n        end\n      end\n    end\n  end\n  return max[#max][1]\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
