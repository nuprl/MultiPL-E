name: HumanEval_158_find_max
language: lua
prompt: "-- Write a function that accepts a table of strings.\n-- The table contains\
  \ different words. Return the word with maximum number\n-- of unique characters.\
  \ If multiple strings have maximum number of unique\n-- characters, return the one\
  \ which comes first in lexicographical order.\n-- >>> find_max({'name', 'of', 'string'})\n\
  -- 'string'\n-- >>> find_max({'name', 'enam', 'game'})\n-- 'enam'\n-- >>> find_max({'aaaaaaa',\
  \ 'bb', 'cc'})\n-- 'aaaaaaa'\nlocal function find_max(words)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = find_max\n\
  \    lu.assertEquals(candidate({'name', 'of', 'string'}), 'string')\n    lu.assertEquals(candidate({'name',\
  \ 'enam', 'game'}), 'enam')\n    lu.assertEquals(candidate({'aaaaaaa', 'bb', 'cc'}),\
  \ 'aaaaaaa')\n    lu.assertEquals(candidate({'abc', 'cba'}), 'abc')\n    lu.assertEquals(candidate({'play',\
  \ 'this', 'game', 'of', 'footbott'}), 'footbott')\n    lu.assertEquals(candidate({'we',\
  \ 'are', 'gonna', 'rock'}), 'gonna')\n    lu.assertEquals(candidate({'we', 'are',\
  \ 'a', 'mad', 'nation'}), 'nation')\n    lu.assertEquals(candidate({'this', 'is',\
  \ 'a', 'prrk'}), 'this')\n    lu.assertEquals(candidate({'b'}), 'b')\n    lu.assertEquals(candidate({'play',\
  \ 'play', 'play'}), 'play')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local max_count = 0\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = {}\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if max[word] == nil then\n      max[word] = count\n    else\n      max[word]\
    \ = max[word] .. count\n    end\n  end\n  local maxWord = nil\n  local maxCount\
    \ = -1\n  for word, count in pairs(max) do\n    if count > maxCount then\n   \
    \   maxCount = count\n      maxWord = word\n    end\n  end\n  return maxWord\n\
    end", "  local max_count = -1\n  local max_word = nil\n  for _, word in ipairs(words)\
    \ do\n    local count = #word\n    if count > max_count then\n      max_count\
    \ = count\n      max_word = word\n    end\n  end\n  return max_word\nend", " \
    \ local max = 0\n  local word\n  for word in pairs(words) do\n    max = max +\
    \ 1\n    if max > #word then\n      break\n    end\n  end\n  if max > #words then\n\
    \    return nil\n  end\n  local maxChars = {}\n  for i = 1, #word do\n    local\
    \ char = word[i]\n    local count = maxChars[char]\n    if count == nil then\n\
    \      maxChars[char] = 1\n    else\n      maxChars[char] = count + 1\n    end\n\
    \  end\n  local maxChar\n  for maxChar, count in pairs(maxChars) do\n    if count\
    \ > max then\n      return maxChar\n    end\n  end\n  return nil\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    if #word > max then\n   \
    \   max = #word\n    end\n  end\n  if max > 0 then\n    local maxChars = {}\n\
    \    for word in words do\n      local count = 0\n      for char in word do\n\
    \        count = count + 1\n        if #maxChars == 0 or count > #maxChars then\n\
    \          maxChars = {}\n          maxChars[char] = count\n        elseif count\
    \ > maxChars[char] then\n          maxChars[char] = count\n        end\n     \
    \ end\n    end\n    for word in words do\n      local count = 0\n      for char\
    \ in word do\n        count = count + maxChars[char]\n      end\n      if count\
    \ > max then\n        max = count\n      end\n    end\n  end\n  return words[#words]\n\
    end", "  local max = {}\n  for i = 1, #words do\n    local count = {}\n    for\
    \ j = 1, #words[i] do\n      count[words[i][j]] = count[words[i][j]] + 1 -- count\
    \ the character\n    end\n    for j = 1, #count do\n      if count[words[i][j]]\
    \ > max[words[i][j]] then\n        max[words[i][j]] = count[words[i][j]]\n   \
    \   end\n    end\n  end\n  for i = 1, #words do\n    for j = 1, #words[i] do\n\
    \      if max[words[i][j]] > max[words[i][j+1]] then\n        max[words[i][j]],\
    \ max[words[i][j+1]] = max[words[i][j]], max[words[i][j+1]]\n      end\n    end\n\
    \  end\n  for i = 1, #words do\n    if max[words[i][1]] > max[words[i][#words[i]]]\
    \ then\n      return words[i][1]\n    end\n  end\n  return nil\nend", "  local\
    \ max = 0\n  local word\n  for word in words do\n    local count = 0\n    for\
    \ char in word do\n      count = count + 1\n    end\n    if count > max then\n\
    \      max = count\n    end\n  end\n  if max > 0 then\n    return words[#words]\n\
    \  end\nend", "  local max = {}\n  for _, word in ipairs(words) do\n    local\
    \ count = {}\n    for _, char in ipairs(word) do\n      count = count[char] or\
    \ 0\n      count[char] = count + 1\n    end\n    local maxChar = nil\n    for\
    \ _, char in pairs(count) do\n      if maxChar == nil or count[char] > count[maxChar]\
    \ then\n        maxChar = char\n      end\n    end\n    max[#max+1] = maxChar\n\
    \  end\n  table.sort(max, function(a, b) return a<b end)\n  return max[1]\nend",
  "  local max = {}\n  for _, word in ipairs(words) do\n    local count = {}\n   \
    \ for _, c in ipairs(word) do\n      count[c] = count[c] or 0\n      count[c]\
    \ = count[c] + 1\n    end\n    local maxChar = nil\n    for _, c in pairs(count)\
    \ do\n      if maxChar == nil or count[c] > count[maxChar] then\n        maxChar\
    \ = c\n      end\n    end\n    max[word] = maxChar\n  end\n  local maxChar = nil\n\
    \  for _, c in pairs(max) do\n    if maxChar == nil or count[c] > count[maxChar]\
    \ then\n      maxChar = c\n    end\n  end\n  return maxChar\nend", "  local max\
    \ = 0\n  local word\n  for word in pairs(words) do\n    max = math.max(max, #word)\n\
    \  end\n  local i = 1\n  while i <= max do\n    local word = words[i]\n    local\
    \ count = 0\n    for word in pairs(words) do\n      if #word > count then\n  \
    \      count = #word\n      end\n    end\n    if count > max then\n      return\
    \ word\n    end\n    i = i + 1\n  end\n  return words[1]\nend", "  local max =\
    \ 0\n  local word\n  for word in pairs(words) do\n    max = max or #word\n   \
    \ if #word > max then\n      max = #word\n    end\n  end\n  if max > 0 then\n\
    \    local i = 1\n    local word\n    for word in pairs(words) do\n      if #word\
    \ == max then\n        return word\n      elseif #word > max then\n        return\
    \ word\n      end\n      i = i + 1\n    end\n  end\nend", "  local max_count =\
    \ 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count = #word\n\
    \    if count > max_count then\n      max_count = count\n      max_word = word\n\
    \    end\n  end\n  return max_word\nend", "  local max = 0\n  local word\n  for\
    \ word in words do\n    if #word > max then\n      max = #word\n    end\n  end\n\
    \  if max > 0 then\n    for word in words do\n      if #word == max then\n   \
    \     return word\n      end\n    end\n  end\n  return nil\nend", "  local max_count\
    \ = 0\n  local max_word\n  for _, word in ipairs(words) do\n    local count =\
    \ 0\n    for _, c in ipairs(word) do\n      count = count + 1\n    end\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", "  local max = {}\n  for _, word in ipairs(words)\
    \ do\n    local count = {}\n    for _, char in ipairs(word) do\n      count =\
    \ count[char] or 0\n      count[char] = count + 1\n    end\n    table.insert(max,\
    \ count, word)\n  end\n  table.sort(max, function(a, b) return a[2] > b[2] end)\n\
    \  return max[#max][1]\nend", "  local max = 0\n  local word\n  for word in pairs(words)\
    \ do\n    max = max or #word\n    if #word > max then\n      max = #word\n   \
    \ end\n  end\n  if max > 0 then\n    local words = {}\n    for word in pairs(words)\
    \ do\n      if #word == max then\n        table.insert(words, word)\n      else\n\
    \        words[#words + 1] = word\n      end\n    end\n    table.sort(words, function(a,\
    \ b) return #a > #b end)\n    return words[#words]\n  end\nend", "  local max_count\
    \ = -1\n  local max_word = nil\n  for _, word in ipairs(words) do\n    local count\
    \ = #word\n    if count > max_count then\n      max_count = count\n      max_word\
    \ = word\n    end\n  end\n  return max_word\nend", "  local max_count = 0\n  local\
    \ max_word\n  for _, word in ipairs(words) do\n    local count = #word\n    if\
    \ count > max_count then\n      max_count = count\n      max_word = word\n   \
    \ end\n  end\n  return max_word\nend", "  local max_count = -1\n  local max_word\n\
    \  for _, word in ipairs(words) do\n    local count = #word\n    if count > max_count\
    \ then\n      max_count = count\n      max_word = word\n    end\n  end\n  return\
    \ max_word\nend", "  local max = 0\n  local word\n  for word in words do\n   \
    \ max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math.max(max, #word)\n  end\n  for word in\
    \ words do\n    max = math.max(max, #word)\n  end\n  for word in words do\n  \
    \  max = math.max(max, #word)\n  end\n  for word in words do\n    max = math.max(max,\
    \ #word)\n  end\n  for word in words do\n    max = math.max(max, #word)\n  end\n\
    \  for word in words do\n    max = math."]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
