name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a table of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ table.\n-- For example, if you are given \"Slices\" as the class and a table of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
  \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strongest_extension[strength] == nil then\n\
    \      strongest_extension[strength] = extension\n    elseif strongest_extension[strength]\
    \ < extension then\n      strongest_extension[strength] = extension\n    end\n\
    \  end\n  return class_name .. '.' .. table.concat(strongest_extension, ' ')\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return string.sub(class_name, 1, #class_name)\
    \ .. strongest_extensions[1].extension\nend", "\tlocal strongest_extension = {}\n\
    \tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension)\n\treturn string.sub(class_name,\
    \ 1, #class_name) .. '.' .. strongest_extension[1]\nend", "  local max_strength\
    \ = -1\n  local max_extension\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_strength = cap\
    \ - sm\n    if cap_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "    local strongest_extension\
    \ = nil\n    local max_strength = -1\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "    local strongest,\
    \ strongest_strength = nil, -1\n    for _, extension in ipairs(extensions) do\n\
    \        local cap = string.upper(extension:sub(1, #extension))\n        local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n        local strength =\
    \ cap - sm\n        if strength > strongest_strength then\n            strongest\
    \ = class_name\n            strongest_strength = strength\n        end\n    end\n\
    \    return strongest\nend", "  local max_strength = -1\n  local max_extension\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local strongest_extension = {}\n  local cap\
    \ = #class_name\n  local sm = #class_name:lower()\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap_ext = #extension:upper()\n    local sm_ext = #extension:lower()\n\
    \    local strength = cap - cap_ext - sm - sm_ext\n    if strength > 0 then\n\
    \      table.insert(strongest_extension, extension)\n    end\n  end\n  table.sort(strongest_extension)\n\
    \  return class_name .. '.' .. table.unpack(strongest_extension, 1)\nend", " \
    \   local max_strength = -1\n    local max_extension = nil\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n        if strength\
    \ > max_strength then\n            max_strength = strength\n            max_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "\tlocal max_strength = -1\n\tlocal max_extension = ''\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength = strength\n\
    \t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_strength\
    \ = #cap - #sm\n    if cap_strength > 0 then\n      if strongest_extension_strength\
    \ == nil then\n        strongest_extension_strength = cap_strength\n      elseif\
    \ cap_strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_strength\n        strongest_extension = extension\n      end\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest\
    \ = extensions[1]\n\tfor i = 2, #extensions do\n\t\tlocal cap = string.upper(extensions[i])\n\
    \t\tlocal sm = string.lower(extensions[i])\n\t\tlocal diff = cap - sm\n\t\tif\
    \ diff > 0 then\n\t\t\tstrongest = extensions[i]\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, string.len(class_name) - string.len(strongest)) + strongest\nend", "  local\
    \ strongest = extensions[1]\n  for i = 2, #extensions do\n    if extensions[i]\
    \ - strongest > 0 then\n      strongest = extensions[i]\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest\nend", "  local strongest_extension = nil\n \
    \ local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_strength\
    \ = cap - sm\n    if cap_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "    local max_strength = -1\n\
    \    local max_extension\n    for _, extension in ipairs(extensions) do\n    \
    \    local cap = string.upper(extension:sub(1, #extension))\n        local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n        local strength = cap\
    \ - sm\n        if strength > max_strength then\n            max_strength = strength\n\
    \            max_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend\n</cell>\n<text>\nThe next cell contains some test\
    \ cases. Feel free to play around with them and see what happens.", "  local strongest\
    \ = extensions[1]\n  for i = 2, #extensions do\n    if extensions[i] > strongest\
    \ then\n      strongest = extensions[i]\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest\nend", "  local strongest = extensions[1]\n  for i = 2, #extensions\
    \ do\n    local cap = #extensions[i]\n    local sm = #extensions[i]\n    local\
    \ strength = cap - sm\n    if strength > 0 then\n      if strength > strongest.strength\
    \ then\n        strongest.name = class_name\n        strongest.extension = extensions[i]\n\
    \        strongest.strength = strength\n      end\n    end\n  end\n  return strongest.name\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extension = nil\n  local\
    \ strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local max_strength\
    \ = -1\n  local max_extension\n  for _, extension in ipairs(extensions) do\n \
    \   local strength = string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1,\
    \ #extension)))\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - string.len(max_extension)) + max_extension\nend",
  "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1, #extension))\n    local strength = cap - sm\n    if strongest[strength]\
    \ == nil then\n      strongest[strength] = extension\n    end\n  end\n  local\
    \ strongest_extension = strongest[1]\n  if #strongest > 1 then\n    for _, extension\
    \ in ipairs(strongest) do\n      if extension > strongest_extension then\n   \
    \     strongest_extension = extension\n      end\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest_extension\nend", "\tlocal strongest = extensions[1]\n\t\
    for i = 2, #extensions do\n\t\tlocal c = extensions[i]\n\t\tlocal cap = #c:upper()\n\
    \t\tlocal sm = #c:lower()\n\t\tlocal diff = cap - sm\n\t\tif diff > 0 then\n\t\
    \t\tstrongest = c\n\t\telseif diff < 0 then\n\t\t\tstrongest = extensions[i -\
    \ 1]\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest\nend", "  local\
    \ strongest_extension = nil\n  local max_strength = -1\n  for _, extension in\
    \ ipairs(extensions) do\n    local strength = string.upper(extension:sub(1, 1))\
    \ - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n \
    \     max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local max_strength\
    \ = -1\n  local max_extension = \"\"\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > max_strength then\n      max_strength = strength\n   \
    \   max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. \".\" .. max_extension\nend", "    local strongest_extension\
    \ = nil\n    local strongest_extension_strength = nil\n    for _, extension in\
    \ ipairs(extensions) do\n        local cap = string.upper(extension:sub(1, #extension))\n\
    \        local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \        local strength = cap - sm\n        if strongest_extension_strength ==\
    \ nil then\n            strongest_extension_strength = strength\n        elseif\
    \ strength > strongest_extension_strength then\n            strongest_extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal max_strength = -1\n\tfor _, extension in ipairs(extensions) do\n\
    \t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\
    \t\tmax_strength = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\t\
    end\n\treturn string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[1]:sub(3)\nend", "  local strongest_extension\
    \ = nil\n  local extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_diff\
    \ = cap - sm\n    if cap_diff ~= 0 then\n      extension_strength = cap_diff\n\
    \      strongest_extension = extension\n    end\n  end\n  if extension_strength\
    \ ~= nil then\n    return class_name .. '.' .. strongest_extension .. '.' .. extension_strength\n\
    \  else\n    return nil\n  end\nend", "\tlocal strongest_extension = nil\n\tlocal\
    \ strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal cap_diff\
    \ = cap - sm\n\t\tif cap_diff > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ class_name .. '.' .. strongest_extension\nend", "\tlocal strongest = {}\n\t\
    for _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name ..\
    \ '.' .. table.concat(strongest, ' ')\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strongest_extension_strength == nil then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    elseif strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - #strongest_extension - 1..#strongest_extension_strength - 1..#strongest_extension_strength)..strongest_extension_strength..'.'..strongest_extension\n\
    end", "\tlocal strongest = {}\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_diff\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength == 0 then\n      -- If the extension's name is all uppercase,\
    \ use it\n      strongest_extensions[extension] = extension\n    elseif strength\
    \ > 0 then\n      -- If the extension's name is all lowercase, use it\n      strongest_extensions[extension]\
    \ = extension\n    else\n      -- If the extension's name is mixed case, use it\n\
    \      local extension_length = #extension\n      local extension_length = #extension_length\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_length - 1\n      local extension_length\
    \ = extension_length - 1\n      local extension_length = extension_length - 1\n\
    \      local extension_length = extension_", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "  local strongest_extensions = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength >= 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return strength < b end)\n  return class_name .. '.' .. strongest_extensions[1]\n\
    end", "    local strongest_extension = nil\n    local extension_strength = nil\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n        local cap_diff = cap - sm\n        if cap_diff > 0 then\n\
    \            if extension_strength == nil then\n                extension_strength\
    \ = cap_diff\n                strongest_extension = extension\n            elseif\
    \ extension_strength > cap_diff then\n                extension_strength = cap_diff\n\
    \                strongest_extension = extension\n            end\n        end\n\
    \    end\n    return class_name .. '.' .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local strongest_extension_strength = -1\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "\tlocal strongest_extension = nil\n\t\
    local extension_strength = nil\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal cap_diff = cap - sm\n\t\tif cap_diff ~= 0 then\n\t\t\textension_strength\
    \ = cap_diff\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\tif extension_strength\
    \ ~= nil then\n\t\treturn class_name .. '.' .. strongest_extension .. extension_strength\n\
    \telse\n\t\treturn nil\n\tend\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = #extension:upper()\n    local sm =\
    \ #extension:lower()\n    local strength = cap - sm\n    if strongest[strength]\
    \ == nil then\n      strongest[strength] = extension\n    end\n  end\n  local\
    \ strongest_extension = strongest[1]\n  if #strongest > 1 then\n    for _, extension\
    \ in ipairs(extensions) do\n      local cap = #extension:upper()\n      local\
    \ sm = #extension:lower()\n      local strength = cap - sm\n      if strongest[strength]\
    \ == nil then\n        strongest[strength] = extension\n      end\n    end\n \
    \   strongest_extension = strongest[1]\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension\n  for _, extension in\
    \ ipairs(extensions) do\n    local strength = string.upper(extension:sub(1, 1))\
    \ - string.lower(extension:sub(1, 1))\n    if strength > max_strength then\n \
    \     max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return string.sub(class_name, 1, string.len(class_name)-string.len(max_extension))..max_extension\n\
    end", "  local max_strength = -1\n  local max_extension = ''\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength == 0 then\n      -- The extension's name is all\
    \ uppercase\n      -- or all lowercase\n      -- or both mixed\n      -- or both\
    \ uppercase\n      -- or both lowercase\n      -- or both mixed\n      -- or both\
    \ mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n\
    \      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n    \
    \  -- or both mixed\n      -- or both mixed\n      -- or both mixed\n      --\
    \ or both mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both\
    \ mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n\
    \      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n    \
    \  -- or both mixed\n      -- or both mixed\n      -- or both mixed\n      --\
    \ or both mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both\
    \ mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n\
    \      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n    \
    \  -- or both mixed\n      -- or both mixed\n      -- or both mixed\n      --\
    \ or both mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both\
    \ mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n\
    \      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n    \
    \  -- or both mixed\n      -- or both mixed\n      -- or both mixed\n      --\
    \ or both mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both\
    \ mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n\
    \      -- or both mixed\n      -- or both mixed\n      -- or both mixed\n    \
    \  -- or both mixed\n      -- or both mixed\n      -- or both mixed\n      --\
    \ or both mixed\n      -- or both mixed\n      -- or both mixed\n      -- or both\
    \ mixed\n      -- or both mixed\n      -- or both mixed\n", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal cap_diff = cap -\
    \ sm\n\t\tif cap_diff > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ string.format(class_name .. '.%s', strongest_extension)\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension + 1), #extension))\n\t\tlocal cap_diff\
    \ = cap - sm\n\t\tif cap_diff > 0 then\n\t\t\tif strongest_extension_strength\
    \ == -1 then\n\t\t\t\tstrongest_extension_strength = cap_diff\n\t\t\t\tstrongest_extension\
    \ = extension\n\t\t\telseif strongest_extension_strength > cap_diff then\n\t\t\
    \t\tstrongest_extension_strength = cap_diff\n\t\t\t\tstrongest_extension = extension\n\
    \t\t\tend\n\t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = \"\"\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. \".\"\
    \ .. max_extension\nend", "  local strongest = nil\n  local strongest_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > strongest_strength then\n  \
    \    strongest = class_name\n      strongest_strength = strength\n    end\n  end\n\
    \  return strongest\nend", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal extension_strengths = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal extension_strength = string.upper(extension:sub(1, 1)) - string.lower(extension:sub(1,\
    \ 1))\n\t\textension_strengths[extension_strength] = extension\n\tend\n\tfor _,\
    \ extension_strength in pairs(extension_strengths) do\n\t\tif extension_strength\
    \ > strongest_extension_strength then\n\t\t\tstrongest_extension_strength = extension_strength\n\
    \t\t\tstrongest_extension = extension_strengths[extension_strength]\n\t\tend\n\
    \tend\n\treturn class_name .. '.' .. strongest_extension\nend", "    local strongest\
    \ = nil\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ if strongest == nil then\n                strongest = class_name..'.'..extension\n\
    \            else\n                local _, index = str:find(strongest, '.')\n\
    \                if strength > index:len() then\n                    strongest\
    \ = class_name..'.'..extension\n                end\n            end\n       \
    \ end\n    end\n    return strongest\nend", "  local strongest = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.concat(strongest, '.')\nend",
  "  local strongest_extension = nil\n  local max_strength = -1\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  if #strongest == 1 then\n    return class_name\
    \ .. '.' .. strongest[1]\n  else\n    local strongest_extensions = {}\n    for\
    \ _, extension in ipairs(strongest) do\n      table.insert(strongest_extensions,\
    \ extension)\n    end\n    local strongest_extension = strongest_extensions[1]\n\
    \    for _, extension in ipairs(strongest_extensions) do\n      strongest_extension\
    \ = strongest_extension .. '.' .. extension\n    end\n    return class_name ..\
    \ '.' .. strongest_extension\n  end\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  local strongest_extension_strength_counter\
    \ = 0\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1,\
    \ #extension)))\n    if extension_strength > strongest_extension_strength then\n\
    \      strongest_extension_strength = extension_strength\n      strongest_extension_strength_counter\
    \ = 1\n    elseif extension_strength == strongest_extension_strength then\n  \
    \    strongest_extension_strength_counter = strongest_extension_strength_counter\
    \ + 1\n    end\n  end\n  if strongest_extension_strength_counter > 1 then\n  \
    \  for _, extension in ipairs(extensions) do\n      local extension_strength =\
    \ string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1, #extension)))\n\
    \      if extension_strength == strongest_extension_strength then\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = ''\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == nil then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local max_strength = -1\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength - tonumber(a) - tonumber(b) end)\n  return class_name .. '.'\
    \ .. table.unpack(strongest_extension, 1)\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tlocal strongest_extension_strength_counter\
    \ = 0\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal extension_strength\
    \ = string.upper(extension:sub(1, 1)) - string.lower(extension:sub(1, 1))\n\t\t\
    if strongest_extension_strength == nil then\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension_strength_counter = 1\n\t\telseif\
    \ extension_strength > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension_strength_counter = 1\n\t\telseif\
    \ extension_strength == strongest_extension_strength then\n\t\t\tstrongest_extension_strength_counter\
    \ = strongest_extension_strength_counter + 1\n\t\tend\n\tend\n\tif strongest_extension_strength_counter\
    \ > 1 then\n\t\tstrongest_extension = extensions[strongest_extension_strength_counter]\n\
    \tend\n\treturn string.format(class_name .. '.%s', strongest_extension)\nend",
  "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  if #strongest == 1 then\n    return class_name\
    \ .. '.' .. strongest[1]\n  end\n  table.sort(strongest)\n  return class_name\
    \ .. '.' .. strongest[1]\nend", "  local strongest_extensions = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return string.sub(class_name, 1, #class_name)\
    \ .. strongest_extensions[1].extension\nend", "\tlocal strongest = {}\n\tfor _,\
    \ extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn class_name ..\
    \ '.' .. strongest[1]\nend", "  local strongest = extensions[1]\n  for i = 2,\
    \ #extensions do\n    if extensions[i] - strongest > 0 then\n      strongest =\
    \ extensions[i]\n    end\n  end\n  return class_name .. '.' .. strongest\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = nil\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strongest_extension_strength == nil then\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    elseif strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1))\n\t\tlocal cap_diff = cap -\
    \ sm\n\t\tif cap_diff > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "  local strongest_extension = nil\n  local strongest_extension_strength = -1\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "    local strongest_extension\
    \ = nil\n    local extension_strength = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if extension_strength == nil then\n            extension_strength\
    \ = strength\n        elseif extension_strength > strength then\n            extension_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = nil\n  local strongest_extension_strength_counter\
    \ = nil\n  local strongest_extension_strength_counter_max = nil\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local cap_counter\
    \ = cap:byte()\n    local sm_counter = sm:byte()\n    if cap_counter - sm_counter\
    \ > 0 then\n      if strongest_extension_strength_counter == nil then\n      \
    \  strongest_extension_strength_counter = cap_counter - sm_counter\n      elseif\
    \ cap_counter - sm_counter > strongest_extension_strength_counter then\n     \
    \   strongest_extension_strength_counter = cap_counter - sm_counter\n      end\n\
    \      if strongest_extension_strength_counter_max == nil then\n        strongest_extension_strength_counter_max\
    \ = cap_counter - sm_counter\n      elseif cap_counter - sm_counter < strongest_extension_strength_counter_max\
    \ then\n        strongest_extension_strength_counter_max = cap_counter - sm_counter\n\
    \      end\n    end\n  end\n  if strongest_extension_strength_counter ~= nil then\n\
    \    strongest_extension_strength = class_name .. '.' .. extensions[#extensions]\n\
    \  end\n  if strongest_extension_strength_counter_max ~= nil then\n    strongest_extension_strength\
    \ = strongest_extension_strength .. '.' .. extensions[#extensions]\n  end\n  return\
    \ strongest_extension_strength\nend", "  local strongest_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  if #strongest == 0 then\n    return class_name\n\
    \  else\n    return class_name .. '.' .. table.concat(strongest, ' ')\n  end\n\
    end", "  local max_strength = -1\n  local max_extension\n  for _, extension in\
    \ ipairs(extensions) do\n    local strength = string.upper(extension:sub(1, #extension)\
    \ - string.lower(extension:sub(1, #extension)))\n    if strength > max_strength\
    \ then\n      max_strength = strength\n      max_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tlocal extension_strengths\
    \ = {}\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal cap_strength = cap:sub(1, #cap) - sm:sub(1, #sm)\n\t\textension_strengths[cap_strength]\
    \ = extension\n\tend\n\tfor _, strength in ipairs(extension_strengths) do\n\t\t\
    if strength > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = strength\n\t\t\tstrongest_extension = extension_strengths[strength]\n\t\t\
    end\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local strongest_extension_strength = -1\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  local cap = #class_name\n  local sm\
    \ = #class_name:lower()\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap_ext = #extension:upper()\n    local sm_ext = #extension:lower()\n    local\
    \ strength = cap - cap_ext - sm - sm_ext\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    if strongest_extension_strength == 1 then\n    \
    \  return class_name .. '.' .. strongest_extension[1]\n    else\n      local strongest_extension_strength_sorted\
    \ = table.sort(strongest_extension_strength)\n      return class_name .. '.' ..\
    \ strongest_extension_sorted[1]\n    end\n  end\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension)\n  return string.sub(class_name,\
    \ 1, #class_name) .. strongest_extension[1]\nend", "    local strongest_extension\
    \ = nil\n    local strongest_extension_strength = nil\n    local strongest_extension_strength_pos\
    \ = nil\n    local strongest_extension_strength_pos_index = nil\n    for _, extension\
    \ in ipairs(extensions) do\n        local extension_strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n        if strongest_extension_strength\
    \ == nil then\n            strongest_extension_strength = extension_strength\n\
    \            strongest_extension_strength_pos = extension\n            strongest_extension_strength_pos_index\
    \ = #extensions\n        elseif extension_strength > strongest_extension_strength\
    \ then\n            strongest_extension_strength = extension_strength\n      \
    \      strongest_extension_strength_pos = extension\n            strongest_extension_strength_pos_index\
    \ = #extensions\n        end\n    end\n    return class_name .. '.' .. strongest_extension_strength_pos\n\
    end", "  local max_strength = -1\n  local max_extension = ''\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return class_name .. '.' ..\
    \ max_extension\nend", "  local strongest_extension = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest, extension)\n   \
    \ end\n  end\n  table.sort(strongest)\n  return string.format(class_name .. '.%s',\
    \ strongest[1])\nend", "  local strongest_extension = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension,\
    \ 1)\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local max_strength = -1\n  local max_extension = nil\n  for _, extension\
    \ in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      max_extension = extension\n\
    \    end\n  end\n  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "  local strongest_extension = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength - tonumber(a) - tonumber(b) end)\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - 1) .. strongest_extension[1]\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  local extension_strengths\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = string.upper(extension:sub(1, 1)) - string.lower(extension:sub(1, 1))\n  \
    \  extension_strengths[extension_strength] = extension\n  end\n  for _, extension_strength\
    \ in ipairs(extension_strengths) do\n    if extension_strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = extension_strength\n      strongest_extension\
    \ = extension_strengths[extension_strength]\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(strongest_extension)) + strongest_extension\nend", "\tlocal strongest_extension\
    \ = nil\n\tlocal strongest_extension_strength = -1\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal cap_diff\
    \ = cap - sm\n\t\tif cap_diff > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = cap_diff\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ class_name .. '.' .. strongest_extension\nend", "    local strongest_extensions\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local strength = cap - sm\n        if strength > 0 then\n           \
    \ table.insert(strongest_extensions, {extension, strength})\n        end\n   \
    \ end\n    table.sort(strongest_extensions, function(a, b) return a[2] > b[2]\
    \ end)\n    return class_name .. '.' .. strongest_extensions[1].extension\nend",
  "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength = -1\n\t\
    for _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal cap_diff = cap - sm\n\t\tif cap_diff > strongest_extension_strength\
    \ then\n\t\t\tstrongest_extension_strength = cap_diff\n\t\t\tstrongest_extension\
    \ = extension\n\t\tend\n\tend\n\treturn string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(strongest_extension) + 1) + strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local strongest_extension_strength = -1\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  table.sort(strongest_extension, function(a, b) return strength\
    \ > b end)\n  return class_name .. '.' .. table.unpack(strongest_extension, 1)\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local extension_strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local extension_strength = string.upper(extension:sub(1, 1)) - string.lower(extension:sub(1,\
    \ 1))\n    extension_strengths[extension_strength] = extension\n    if extension_strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = extension_strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - 1) .. strongest_extension .. extension_strengths[strongest_extension_strength]\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal strongest_extension_strength_counter = 0\n\tlocal strongest_extension_strength_counter_max\
    \ = -1\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal\
    \ strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\tlocal strongest_extension_strength_counter_max_counter\
    \ = 0\n\tlocal strongest_extension_strength_counter_max_counter = 0\n\t", "  local\
    \ max_strength = -1\n  local max_extension\n  for _, extension in ipairs(extensions)\
    \ do\n    local strength = string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1,\
    \ #extension)))\n    if strength > max_strength then\n      max_strength = strength\n\
    \      max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, string.len(class_name) - string.len(max_extension)) + max_extension\nend",
  "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest[strength] == nil then\n\
    \      strongest[strength] = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. table.concat(strongest, '.')\nend", "  local strongest_extension = nil\n\
    \  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      strongest_extension = extension\n      max_strength = strength\n    end\n\
    \  end\n  return string.sub(class_name, 1, #class_name-1) .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = #extension:upper()\n    local sm = #extension:lower()\n    local\
    \ strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  if #strongest == 0 then\n    return class_name\n\
    \  end\n  table.sort(strongest)\n  return string.format(class_name .. '.%s', strongest[1])\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  local strongest_extension = strongest[1]\n  if\
    \ #strongest > 1 then\n    local strength_map = {}\n    for _, extension in ipairs(strongest)\
    \ do\n      local cap = string.upper(extension:sub(1, #extension))\n      local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      table.insert(strength_map, strength, extension)\n    end\n    local\
    \ max_strength = #strength_map\n    for _, extension in ipairs(strongest) do\n\
    \      local cap = string.upper(extension:sub(1, #extension))\n      local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n      local strength = cap\
    \ - sm\n      if strength > 0 then\n        if strength_map[strength] == nil then\n\
    \          table.insert(strongest, extension)\n        end\n      end\n    end\n\
    \    strongest_extension = strongest[1]\n  end\n  return class_name .. '.' ..\
    \ strongest_extension\nend", "  local max_strength = -1\n  local max_extension\
    \ = \"\"\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. \".\" .. max_extension\nend", "  local strongest_extension = nil\n  local\
    \ max_strength = -1\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return string.format(class_name .. '.%s', strongest_extension)\nend",
  "  local strongest_extension = {}\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      if #strongest_extension\
    \ == 0 then\n        strongest_extension = extension\n      else\n        if strength\
    \ > #strongest_extension then\n          strongest_extension = extension\n   \
    \     end\n      end\n    end\n  end\n  return string.format(class_name .. '.%s',\
    \ strongest_extension)\nend", "  local strongest = extensions[1]\n  for i = 2,\
    \ #extensions do\n    if extensions[i] - strongest > 0 then\n      strongest =\
    \ extensions[i]\n    end\n  end\n  return class_name .. '.' .. strongest\nend",
  "\tlocal strongest_extension = {}\n\tfor _, extension in ipairs(extensions) do\n\
    \t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\tif cap\
    \ > 1 then\n\t\t\t\ttable.insert(strongest_extension, string.format('%s.%s', class_name,\
    \ extension))\n\t\t\telse\n\t\t\t\ttable.insert(strongest_extension, string.format('%s.%s',\
    \ class_name, extension:sub(1, #extension)))\n\t\t\tend\n\t\tend\n\tend\n\ttable.sort(strongest_extension,\
    \ function(a, b) return a:tonumber() > b:tonumber() end)\n\treturn strongest_extension[1]\n\
    end", "  local strongest_extension = nil\n  local extension_strengths = {}\n \
    \ for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    table.insert(extension_strengths, strength)\n\
    \  end\n  table.sort(extension_strengths)\n  for _, strength in ipairs(extension_strengths)\
    \ do\n    if strength == 0 then\n      break\n    end\n    if strongest_extension\
    \ == nil then\n      strongest_extension = class_name\n    else\n      if strength\
    \ > extension_strengths[#extension_strengths] then\n        strongest_extension\
    \ = class_name\n      end\n    end\n  end\n  return strongest_extension\nend",
  "  local max_strength = -1\n  local max_extension = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > max_strength then\n      max_strength = strength\n   \
    \   max_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. max_extension .. '.' .. class_name\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > 0 then\n      if strongest_extension_strength == -1 then\n\
    \        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif strongest_extension_strength > cap_diff then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest_extension = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension, function(a, b)\
    \ return strength > b end)\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. strongest_extension[1]\nend", "    local strongest_extension = nil\n    local\
    \ strongest_extension_strength = -1\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = #extension:upper()\n        local sm = #extension:lower()\n\
    \        local cap_diff = cap - sm\n        if cap_diff > 0 then\n           \
    \ local strength = cap_diff / cap\n            if strength > strongest_extension_strength\
    \ then\n                strongest_extension_strength = strength\n            \
    \    strongest_extension = extension\n            end\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_diff\
    \ = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\n\
    end", "    local max_strength = -1\n    local max_extension = \"\"\n    for _,\
    \ extension in ipairs(extensions) do\n        local cap = #extension:upper()\n\
    \        local sm = #extension:lower()\n        local strength = cap - sm\n  \
    \      if strength > max_strength then\n            max_strength = strength\n\
    \            max_extension = extension\n        end\n    end\n    return class_name\
    \ .. \".\" .. max_extension\nend", "  local strongest_extension = nil\n  local\
    \ strongest_extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local cap_diff = cap - sm\n    local strongest_extension_strength = cap_diff\
    \ / cap\n    if strongest_extension_strength > strongest_extension_strength then\n\
    \      strongest_extension = extension\n      strongest_extension_strength = strongest_extension_strength\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  local\
    \ strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n   \
    \ local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a.strength < b.strength end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strongest[strength] == nil then\n\
    \      strongest[strength] = extension\n    end\n  end\n  local strongest_extension\
    \ = strongest[1]\n  if #strongest > 1 then\n    for _, extension in ipairs(strongest)\
    \ do\n      if extension > strongest_extension then\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = nil\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      if strongest\
    \ == nil then\n        strongest = extension\n      else\n        if strength\
    \ > strongest:len() then\n          strongest = extension\n        end\n     \
    \ end\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(strongest))..strongest\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension == 1 then\n    return\
    \ class_name .. '.' .. strongest_extension[1]\n  else\n    local strongest_extension_strength\
    \ = #strongest_extension\n    if #strongest_extension > 1 then\n      local strongest_extension_strength_sorted\
    \ = table.sort(strongest_extension_strength)\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted[1]\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local strongest_extension_strength_sorted\
    \ = strongest_extension_strength_sorted\n      local ", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_diff\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, string.len(class_name) - #strongest_extension) ..\
    \ strongest_extension\nend", "  local strongest_extensions = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return strength > b end)\n  return class_name .. '.' .. strongest_extensions[1]\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  local extension_strengths\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local extension_strength\
    \ = string.gsub(extension, \"[A-Z]\", \"\") - string.gsub(extension, \"[a-z]\"\
    , \"\")\n    extension_strengths[extension_strength] = extension\n  end\n  for\
    \ _, extension_strength in ipairs(extension_strengths) do\n    if extension_strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = extension_strength\n\
    \      strongest_extension = extension_strengths[extension_strength]\n    end\n\
    \  end\n  return string.gsub(class_name, \".\", strongest_extension)\nend", " \
    \   local strongest = extensions[1]\n    for i = 2, #extensions do\n        local\
    \ cap = string.upper(extensions[i])\n        local sm = string.lower(extensions[i])\n\
    \        if cap - sm > 0 then\n            strongest = extensions[i]\n       \
    \ end\n    end\n    return class_name .. '.' .. strongest\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest_extension = nil\n    local strongest_extension_strength\
    \ = -1\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension + 1),\
    \ #extension))\n        local cap_diff = cap - sm\n        if cap_diff > 0 then\n\
    \            if cap_diff > strongest_extension_strength then\n               \
    \ strongest_extension_strength = cap_diff\n                strongest_extension\
    \ = extension\n            end\n        end\n    end\n    return string.sub(class_name,\
    \ 1, #class_name-1) .. strongest_extension .. string.sub(class_name, #class_name)\n\
    end", "\tlocal strongest = {}\n\tfor _, extension in ipairs(extensions) do\n\t\
    \tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension)\
    \ + 1))\n\t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest)\n\treturn string.format(class_name\
    \ .. '.%s', strongest[1])\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strongest_extension_strength == nil then\n\
    \      strongest_extension_strength = strength\n      strongest_extension = extension\n\
    \    elseif strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. strongest_extension\nend", "   \
    \ local strongest = {}\n    for _, extension in ipairs(extensions) do\n      \
    \  local cap = string.upper(extension:sub(1, #extension))\n        local sm =\
    \ string.lower(extension:sub((#extension) + 1))\n        local strength = cap\
    \ - sm\n        if strength > 0 then\n            table.insert(strongest, extension)\n\
    \        end\n    end\n    table.sort(strongest)\n    return class_name .. '.'\
    \ .. table.concat(strongest, '.')\nend", "    local strongest_extension = nil\n\
    \    local strongest_extension_strength = -1\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local cap_diff\
    \ = cap - sm\n        if cap_diff > 0 then\n            if strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n                strongest_extension_strength\
    \ = cap_diff\n                strongest_extension = extension\n            end\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "    local strongest = {}\n    for _, extension in ipairs(extensions) do\n     \
    \   local cap = string.upper(extension:sub(1, #extension))\n        local sm =\
    \ string.lower(extension:sub((#extension) + 1))\n        local strength = cap\
    \ - sm\n        if strength > 0 then\n            table.insert(strongest, extension)\n\
    \        end\n    end\n    table.sort(strongest)\n    return class_name .. '.'\
    \ .. strongest[1]\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == -1 or cap_diff > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_diff\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest =\
    \ {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  if #strongest == 1 then\n    return class_name\
    \ .. '.' .. strongest[1]\n  else\n    local strongest_extensions = {}\n    for\
    \ _, strongest in ipairs(strongest) do\n      for _, strongest_extension in ipairs(strongest)\
    \ do\n        if strongest_extension ~= strongest then\n          table.insert(strongest_extensions,\
    \ strongest_extension)\n        end\n      end\n    end\n    table.sort(strongest_extensions)\n\
    \    return class_name .. '.' .. strongest_extensions[1]\n  end\nend", "  local\
    \ strongest = {}\n  for _, extension in ipairs(extensions) do\n    local cap =\
    \ string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return string.format(class_name\
    \ .. '.%s', strongest[1])\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extension = nil\n  local\
    \ strongest_extension_strength = -1\n  local extension_strengths = {}\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_strength = cap - sm\n    local extension_strength = extension_strengths[cap_strength]\n\
    \    if extension_strength == nil then\n      extension_strength = cap_strength\n\
    \    end\n    extension_strengths[cap_strength] = extension_strength + 1\n   \
    \ if extension_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = extension_strength\n      strongest_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a:upper() < b:upper() end)\n  return class_name .. '.' .. strongest_extensions[1]\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if #strongest_extension\
    \ == 0 then\n        strongest_extension = extension\n      elseif strength >\
    \ #strongest_extension then\n        strongest_extension = extension\n      end\n\
    \    end\n  end\n  return class_name .. '.' .. strongest_extension\nend", "  local\
    \ strongest_extension = nil\n  local strongest_extension_strength = -1\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = #extension:upper()\n    local sm = #extension:lower()\n    local\
    \ strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.concat(strongest, '.')\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strongest_extension_strength == nil then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    elseif strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local max_strength = -1\n  for _,\
    \ extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      strongest_extension\
    \ = extension\n      max_strength = strength\n    end\n  end\n  return class_name\
    \ .. '.' .. strongest_extension\nend", "    local strongest_extension = nil\n\
    \    local strongest_extension_strength = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local cap_diff\
    \ = cap - sm\n        if cap_diff > 0 then\n            if strongest_extension_strength\
    \ == nil then\n                strongest_extension_strength = cap_diff\n     \
    \           strongest_extension = extension\n            elseif cap_diff > strongest_extension_strength\
    \ then\n                strongest_extension_strength = cap_diff\n            \
    \    strongest_extension = extension\n            end\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "  local strongest_extensions\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength == 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n    elseif strength > 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n      break\n    elseif strength < 0 then\n      table.insert(strongest_extensions,\
    \ extension)\n    end\n  end\n  if #strongest_extensions > 1 then\n    table.sort(strongest_extensions)\n\
    \  end\n  return string.sub(class_name, 1, #class_name-1) .. strongest_extensions[1]\n\
    end", "  local strongest_extension = nil\n  local max_strength = -1\n  for _,\
    \ extension in ipairs(extensions) do\n    local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n    if strength >\
    \ max_strength then\n      max_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - string.len(strongest_extension)) + strongest_extension\nend", "    local max_strength\
    \ = -1\n    local max_extension = nil\n    for _, extension in ipairs(extensions)\
    \ do\n        local strength = string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1,\
    \ #extension)))\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            max_extension = extension\n        end\n    end\n  \
    \  return string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "  local max_strength = -1\n  local max_extension = nil\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extension, extension)\n\
    \    end\n  end\n  if #strongest_extension == 1 then\n    return class_name ..\
    \ '.' .. strongest_extension[1]\n  else\n    local max_strength = #strongest_extension\n\
    \    for _, extension in ipairs(strongest_extension) do\n      if max_strength\
    \ > #extension then\n        max_strength = #extension\n      end\n    end\n \
    \   return class_name .. '.' .. strongest_extension[max_strength]\n  end\nend",
  "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n    local\
    \ cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return string.format(class_name\
    \ .. '.%s', strongest[1])\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ > strongest_extension_strength then\n      strongest_extension_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest_extension\nend", "  local strongest_extension = nil\n  local\
    \ max_strength = -1\n  for _, extension in ipairs(extensions) do\n    local cap\
    \ = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "    local strongest_extensions\
    \ = {}\n    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1,\
    \ #extension))\n        local strength = cap - sm\n        if strength > 0 then\n\
    \            table.insert(strongest_extensions, {extension, strength})\n     \
    \   end\n    end\n    table.sort(strongest_extensions, function(a, b) return a.strength\
    \ > b.strength end)\n    return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength\
    \ = -1\n\tlocal extension_strengths = {}\n\tfor _, extension in ipairs(extensions)\
    \ do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\t\tlocal sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n\t\tlocal extension_strength\
    \ = cap - sm\n\t\textension_strengths[extension_strength] = extension\n\tend\n\
    \tlocal max_strength = #extension_strengths\n\tfor _, extension_strength in ipairs(extension_strengths)\
    \ do\n\t\tif extension_strength > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension = extension_strengths[extension_strength]\n\
    \t\tend\n\tend\n\treturn class_name .. '.' .. strongest_extension\nend", "   \
    \ local strongest_extension = nil\n    local strongest_extension_strength = nil\n\
    \    for _, extension in ipairs(extensions) do\n        local cap = string.upper(extension:sub(1,\
    \ #extension))\n        local sm = string.lower(extension:sub((#extension) + 1))\n\
    \        local cap_diff = cap - sm\n        if cap_diff ~= 0 then\n          \
    \  if strongest_extension_strength == nil then\n                strongest_extension_strength\
    \ = cap_diff\n                strongest_extension = extension\n            elseif\
    \ cap_diff > strongest_extension_strength then\n                strongest_extension_strength\
    \ = cap_diff\n                strongest_extension = extension\n            end\n\
    \        end\n    end\n    return class_name .. '.' .. strongest_extension\nend",
  "  local strongest_extension = nil\n  local max_strength = -1\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength > max_strength then\n      max_strength = strength\n\
    \      strongest_extension = extension\n    end\n  end\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. strongest_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_diff = cap -\
    \ sm\n    if cap_diff > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_diff\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "  local strongest = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  if #strongest == 0 then\n    return class_name\n\
    \  else\n    local strongest_extension = strongest[1]\n    for _, extension in\
    \ ipairs(strongest) do\n      if extension:sub(1, #strongest_extension) == strongest_extension\
    \ then\n        strongest_extension = extension\n      end\n    end\n    return\
    \ class_name .. '.' .. strongest_extension\n  end\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  table.sort(strongest_extension)\n  return class_name\
    \ .. '.' .. strongest_extension[1]\nend", "  local strongest = extensions[1]\n\
    \  for i = 2, #extensions do\n    if extensions[i] - extensions[i-1] > 0 then\n\
    \      strongest = extensions[i]\n    end\n  end\n  return class_name .. '.' ..\
    \ strongest\nend", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = extensions[1]\n  for i = 2, #extensions do\n    if\
    \ extensions[i] > strongest then\n      strongest = extensions[i]\n    end\n \
    \ end\n  return class_name .. '.' .. strongest\nend", "  local strongest_extension\
    \ = {}\n  local capitals = {}\n  local smalls = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    capitals[#capitals + 1] = string.upper(extension:sub(1, #extension))\n\
    \    smalls[#smalls + 1] = string.lower(extension:sub(1, #extension))\n  end\n\
    \  capitals = table.sort(capitals)\n  smalls = table.sort(smalls)\n  for _, capital\
    \ in ipairs(capitals) do\n    for _, small in ipairs(smalls) do\n      if capital:sub(1,\
    \ #capital) == small then\n        table.insert(strongest_extension, string.sub(class_name,\
    \ 1, #class_name) .. '.' .. capital)\n        break\n      end\n    end\n  end\n\
    \  if #strongest_extension == 1 then\n    return strongest_extension[1]\n  end\n\
    \  return nil\nend", "  local strongest_extensions = {}\n  for _, extension in\
    \ ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b)\n    return a.strength < b.strength\n  end)\n  return class_name .. '.' ..\
    \ strongest_extensions[1].extension\nend", "  local strongest_extensions = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].extension\n\
    end", "  local strongest = {}\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return string.sub(class_name,\
    \ 1, #class_name-1) .. strongest[1]\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strongest_extension_strength == nil then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    elseif strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extensions = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[2]\nend", "  local strongest_extension = {}\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = #extension:upper()\n\
    \    local sm = #extension:lower()\n    local strength = cap - sm\n    if strength\
    \ == 0 then\n      -- The extension's name is all uppercase\n      strongest_extension[extension]\
    \ = extension\n    elseif strength > 0 then\n      -- The extension's name is\
    \ all lowercase\n      strongest_extension[extension:lower()] = extension\n  \
    \  end\n  end\n  return class_name .. '.' .. table.concat(strongest_extension,\
    \ ' ')\nend", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = nil\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > 0 then\n      if strongest_extension_strength\
    \ == nil then\n        strongest_extension_strength = cap_diff\n        strongest_extension\
    \ = extension\n      elseif cap_diff > strongest_extension_strength then\n   \
    \     strongest_extension_strength = cap_diff\n        strongest_extension = extension\n\
    \      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local cap_diff = cap - sm\n    if cap_diff > strongest_extension_strength\
    \ then\n      strongest_extension_strength = cap_diff\n      strongest_extension\
    \ = extension\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "    local strongest = {}\n    for _, extension in ipairs(extensions) do\n\
    \        local cap = string.upper(extension:sub(1, #extension))\n        local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n        local strength =\
    \ cap - sm\n        if strength == 0 then\n            error(\"Extension name\
    \ contains no uppercase letters.\")\n        end\n        if strength > 0 then\n\
    \            table.insert(strongest, extension)\n        end\n    end\n    table.sort(strongest)\n\
    \    return class_name .. \".\" .. table.concat(strongest, \".\")\nend", "  local\
    \ strongest_extensions = {}\n  for _, extension in ipairs(extensions) do\n   \
    \ local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extensions,\
    \ {extension, strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a,\
    \ b) return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \         . strongest_extensions[1]:sub(3)\nend", "  local max_strength = -1\n\
    \  local max_extension = nil\n  for _, extension in ipairs(extensions) do\n  \
    \  local extension_strength = string.upper(extension:sub(1, #extension) - string.lower(extension:sub(1,\
    \ #extension)))\n    if extension_strength > max_strength then\n      max_strength\
    \ = extension_strength\n      max_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, string.len(class_name) - string.len(max_extension))\
    \ + max_extension\nend", "\tlocal strongest_extension = nil\n\tlocal max_strength\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength\
    \ = strength\n\t\t\tstrongest_extension = extension\n\t\tend\n\tend\n\treturn\
    \ string.sub(class_name, 1, string.len(class_name) - string.len(strongest_extension))\
    \ + strongest_extension\nend", "\tlocal strongest, strength = nil, -1\n\tfor _,\
    \ extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal diff = cap - sm\n\t\tif diff > strength then\n\t\t\tstrongest = class_name\n\
    \t\t\tstrength = diff\n\t\tend\n\tend\n\treturn strongest\nend", "  local strongest_extension\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest_extension,\
    \ extension)\n    end\n  end\n  if #strongest_extension > 1 then\n    table.sort(strongest_extension)\n\
    \  end\n  return string.format(class_name .. '.%s', strongest_extension[1])\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a[2] > b[2] end)\n  return class_name .. '.' .. strongest_extensions[1].\n\
    \    . strongest_extensions[#strongest_extensions]\nend", "  local strongest =\
    \ {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  local strongest_extension = strongest[1]\n  if\
    \ #strongest > 1 then\n    for _, extension in ipairs(strongest) do\n      if\
    \ extension:sub(1, #extension) == strongest_extension then\n        strongest_extension\
    \ = extension\n      end\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  local extension_strengths = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local extension_strength = string.gsub(extension, \"[A-Z]\", \"\") -\
    \ string.gsub(extension, \"[a-z]\", \"\")\n    extension_strengths[extension_strength]\
    \ = extension\n    if extension_strength > strongest_extension_strength then\n\
    \      strongest_extension_strength = extension_strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.gsub(class_name, strongest_extension,\
    \ extension_strengths[strongest_extension_strength])\nend", "  local strongest\
    \ = nil\n  local strongest_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strongest_strength == nil then\n      strongest_strength = strength\n\
    \      strongest = extension\n    elseif strength > strongest_strength then\n\
    \      strongest_strength = strength\n      strongest = extension\n    end\n \
    \ end\n  return class_name .. '.' .. strongest\nend", "  local strongest_extension\
    \ = nil\n  local max_strength = -1\n  for _, extension in ipairs(extensions) do\n\
    \    local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      strongest_extension = extension\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "  local strongest\
    \ = {}\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  if #strongest == 1 then\n    return class_name\
    \ .. '.' .. strongest[1]\n  else\n    local strongest_extensions = {}\n    for\
    \ _, extension in ipairs(strongest) do\n      table.insert(strongest_extensions,\
    \ extension)\n    end\n    table.sort(strongest_extensions)\n    return class_name\
    \ .. '.' .. strongest_extensions[1]\n  end\nend", "  local strongest = {}\n  for\
    \ _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest, function(a, b) return strength\
    \ == -1 and 1 or strength end)\n  return string.sub(class_name, 1, string.len(class_name)\
    \ - #strongest[1]) + strongest[1]\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1, #extension))\n  \
    \  local strength = cap - sm\n    if strength > 0 then\n      table.insert(strongest,\
    \ extension)\n    end\n  end\n  table.sort(strongest)\n  return class_name ..\
    \ '.' .. table.unpack(strongest)[1]\nend", "  local strongest_extension = nil\n\
    \  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local strength\
    \ = cap - sm\n    if strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ string.sub(class_name, 1, #class_name-1) .. '.' .. strongest_extension\nend",
  "\tlocal strongest_extension = nil\n\tlocal strongest_extension_strength = -1\n\t\
    local strongest_extension_strength_counter = 0\n\tlocal strongest_extension_strength_counter_max\
    \ = -1\n\tfor _, extension in ipairs(extensions) do\n\t\tlocal extension_strength\
    \ = string.upper(extension:sub(1, string.len(extension) - 1))\n\t\tif strongest_extension_strength_counter\
    \ == 0 then\n\t\t\tstrongest_extension_strength = extension_strength\n\t\t\tstrongest_extension_strength_counter\
    \ = 1\n\t\telseif strongest_extension_strength_counter == 1 then\n\t\t\tif extension_strength\
    \ > strongest_extension_strength then\n\t\t\t\tstrongest_extension_strength =\
    \ extension_strength\n\t\t\t\tstrongest_extension = extension\n\t\t\tend\n\t\t\
    elseif extension_strength > strongest_extension_strength then\n\t\t\tstrongest_extension_strength\
    \ = extension_strength\n\t\t\tstrongest_extension_strength_counter = 1\n\t\telseif\
    \ extension_strength == strongest_extension_strength then\n\t\t\tstrongest_extension_strength_counter\
    \ = strongest_extension_strength_counter + 1\n\t\telseif extension_strength >\
    \ strongest_extension_strength_counter_max then\n\t\t\tstrongest_extension_strength_counter_max\
    \ = extension_strength\n\t\t\tstrongest_extension_strength_counter = 1\n\t\tend\n\
    \tend\n\tif strongest_extension_strength_counter == 1 then\n\t\tstrongest_extension\
    \ = extensions[#extensions]\n\tend\n\treturn string.sub(class_name, 1, string.len(class_name)\
    \ - 1) + '.' .. strongest_extension\nend", "  local strongest = {}\n  for _, extension\
    \ in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1, #extension))\n\
    \    local sm = string.lower(extension:sub((#extension) + 1))\n    local strength\
    \ = cap - sm\n    if strength == 0 then\n      table.insert(strongest, extension)\n\
    \    elseif strength > 0 then\n      table.insert(strongest, extension)\n    \
    \  break\n    end\n  end\n  if #strongest == 0 then\n    return class_name\n \
    \ end\n  local strongest_extension = strongest[1]\n  for i = 2, #strongest do\n\
    \    if strongest[i] ~= strongest_extension then\n      strongest_extension =\
    \ strongest[i]\n    end\n  end\n  return class_name .. '.' .. strongest_extension\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > 0 then\n      if strongest_extension_strength\
    \ == -1 or strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
