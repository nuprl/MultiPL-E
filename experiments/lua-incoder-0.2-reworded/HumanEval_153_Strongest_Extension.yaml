name: HumanEval_153_Strongest_Extension
language: lua
prompt: "-- You will be given the name of a class (a string) and a table of extensions.\n\
  -- The extensions are to be used to load additional classes to the class. The\n\
  -- strength of the extension is as follows: Let CAP be the number of the uppercase\n\
  -- letters in the extension's name, and let SM be the number of lowercase letters\
  \ \n-- in the extension's name, the strength is given by the fraction CAP - SM.\
  \ \n-- You should find the strongest extension and return a string in this \n--\
  \ format: ClassName.StrongestExtensionName.\n-- If there are two or more extensions\
  \ with the same strength, you should\n-- choose the one that comes first in the\
  \ table.\n-- For example, if you are given \"Slices\" as the class and a table of\
  \ the\n-- extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n--\
  \ return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
  \ \n-- (its strength is -1).\n-- Example:\n-- >>> Strongest_Extension('my_class',\
  \ {'AA', 'Be', 'CC'})\n-- 'my_class.AA'\nlocal function Strongest_Extension(class_name,\
  \ extensions)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = Strongest_Extension\n\
  \    lu.assertEquals(candidate('Watashi', {'tEN', 'niNE', 'eIGHt8OKe'}), 'Watashi.eIGHt8OKe')\n\
  \    lu.assertEquals(candidate('Boku123', {'nani', 'NazeDa', 'YEs.WeCaNe', '32145tggg'}),\
  \ 'Boku123.YEs.WeCaNe')\n    lu.assertEquals(candidate('__YESIMHERE', {'t', 'eMptY',\
  \ 'nothing', 'zeR00', 'NuLl__', '123NoooneB321'}), '__YESIMHERE.NuLl__')\n    lu.assertEquals(candidate('K',\
  \ {'Ta', 'TAR', 't234An', 'cosSo'}), 'K.TAR')\n    lu.assertEquals(candidate('__HAHA',\
  \ {'Tab', '123', '781345', '-_-'}), '__HAHA.123')\n    lu.assertEquals(candidate('YameRore',\
  \ {'HhAas', 'okIWILL123', 'WorkOut', 'Fails', '-_-'}), 'YameRore.okIWILL123')\n\
  \    lu.assertEquals(candidate('finNNalLLly', {'Die', 'NowW', 'Wow', 'WoW'}), 'finNNalLLly.WoW')\n\
  \    lu.assertEquals(candidate('_', {'Bb', '91245'}), '_.Bb')\n    lu.assertEquals(candidate('Sp',\
  \ {'671235', 'Bb'}), 'Sp.671235')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local strongest_extension = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = #extension:upper()\n    local sm = #extension:lower()\n\
    \    local strength = cap - sm\n    if strongest_extension[strength] == nil then\n\
    \      strongest_extension[strength] = extension\n    elseif strongest_extension[strength]\
    \ < extension then\n      strongest_extension[strength] = extension\n    end\n\
    \  end\n  return class_name .. '.' .. table.concat(strongest_extension, ' ')\n\
    end", "  local strongest_extensions = {}\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      table.insert(strongest_extensions, {extension,\
    \ strength})\n    end\n  end\n  table.sort(strongest_extensions, function(a, b)\
    \ return a.strength < b.strength end)\n  return string.sub(class_name, 1, #class_name)\
    \ .. strongest_extensions[1].extension\nend", "\tlocal strongest_extension = {}\n\
    \tfor _, extension in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1,\
    \ #extension))\n\t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\
    \t\tlocal strength = cap - sm\n\t\tif strength > 0 then\n\t\t\ttable.insert(strongest_extension,\
    \ extension)\n\t\tend\n\tend\n\ttable.sort(strongest_extension)\n\treturn string.sub(class_name,\
    \ 1, #class_name) .. '.' .. strongest_extension[1]\nend", "  local max_strength\
    \ = -1\n  local max_extension\n  for _, extension in ipairs(extensions) do\n \
    \   local cap = string.upper(extension:sub(1, #extension))\n    local sm = string.lower(extension:sub((#extension)\
    \ + 1))\n    local strength = cap - sm\n    if strength > max_strength then\n\
    \      max_strength = strength\n      max_extension = extension\n    end\n  end\n\
    \  return class_name .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local cap_strength = cap\
    \ - sm\n    if cap_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "    local strongest_extension\
    \ = nil\n    local max_strength = -1\n    for _, extension in ipairs(extensions)\
    \ do\n        local cap = string.upper(extension:sub(1, #extension))\n       \
    \ local sm = string.lower(extension:sub((#extension) + 1))\n        local strength\
    \ = cap - sm\n        if strength > max_strength then\n            max_strength\
    \ = strength\n            strongest_extension = extension\n        end\n    end\n\
    \    return class_name .. '.' .. strongest_extension\nend", "    local strongest,\
    \ strongest_strength = nil, -1\n    for _, extension in ipairs(extensions) do\n\
    \        local cap = string.upper(extension:sub(1, #extension))\n        local\
    \ sm = string.lower(extension:sub((#extension) + 1))\n        local strength =\
    \ cap - sm\n        if strength > strongest_strength then\n            strongest\
    \ = class_name\n            strongest_strength = strength\n        end\n    end\n\
    \    return strongest\nend", "  local max_strength = -1\n  local max_extension\n\
    \  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > max_strength then\n      max_strength\
    \ = strength\n      max_extension = extension\n    end\n  end\n  return class_name\
    \ .. '.' .. max_extension\nend", "  local strongest_extension = {}\n  local cap\
    \ = #class_name\n  local sm = #class_name:lower()\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap_ext = #extension:upper()\n    local sm_ext = #extension:lower()\n\
    \    local strength = cap - cap_ext - sm - sm_ext\n    if strength > 0 then\n\
    \      table.insert(strongest_extension, extension)\n    end\n  end\n  table.sort(strongest_extension)\n\
    \  return class_name .. '.' .. table.unpack(strongest_extension, 1)\nend", " \
    \   local max_strength = -1\n    local max_extension = nil\n    for _, extension\
    \ in ipairs(extensions) do\n        local strength = string.upper(extension:sub(1,\
    \ #extension) - string.lower(extension:sub(1, #extension)))\n        if strength\
    \ > max_strength then\n            max_strength = strength\n            max_extension\
    \ = extension\n        end\n    end\n    return class_name .. '.' .. max_extension\n\
    end", "\tlocal max_strength = -1\n\tlocal max_extension = ''\n\tfor _, extension\
    \ in ipairs(extensions) do\n\t\tlocal cap = string.upper(extension:sub(1, #extension))\n\
    \t\tlocal sm = string.lower(extension:sub((#extension) + 1))\n\t\tlocal strength\
    \ = cap - sm\n\t\tif strength > max_strength then\n\t\t\tmax_strength = strength\n\
    \t\t\tmax_extension = extension\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, #class_name-1) .. '.' .. max_extension\nend", "  local strongest_extension\
    \ = nil\n  local strongest_extension_strength = nil\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_strength\
    \ = #cap - #sm\n    if cap_strength > 0 then\n      if strongest_extension_strength\
    \ == nil then\n        strongest_extension_strength = cap_strength\n      elseif\
    \ cap_strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = cap_strength\n        strongest_extension = extension\n      end\n    end\n\
    \  end\n  return class_name .. '.' .. strongest_extension\nend", "\tlocal strongest\
    \ = extensions[1]\n\tfor i = 2, #extensions do\n\t\tlocal cap = string.upper(extensions[i])\n\
    \t\tlocal sm = string.lower(extensions[i])\n\t\tlocal diff = cap - sm\n\t\tif\
    \ diff > 0 then\n\t\t\tstrongest = extensions[i]\n\t\tend\n\tend\n\treturn string.sub(class_name,\
    \ 1, string.len(class_name) - string.len(strongest)) + strongest\nend", "  local\
    \ strongest = extensions[1]\n  for i = 2, #extensions do\n    if extensions[i]\
    \ - strongest > 0 then\n      strongest = extensions[i]\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest\nend", "  local strongest_extension = nil\n \
    \ local strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1, #extension))\n    local cap_strength\
    \ = cap - sm\n    if cap_strength > strongest_extension_strength then\n      strongest_extension_strength\
    \ = cap_strength\n      strongest_extension = extension\n    end\n  end\n  return\
    \ class_name .. '.' .. strongest_extension\nend", "    local max_strength = -1\n\
    \    local max_extension\n    for _, extension in ipairs(extensions) do\n    \
    \    local cap = string.upper(extension:sub(1, #extension))\n        local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n        local strength = cap\
    \ - sm\n        if strength > max_strength then\n            max_strength = strength\n\
    \            max_extension = extension\n        end\n    end\n    return class_name\
    \ .. '.' .. max_extension\nend\n</cell>\n<text>\nThe next cell contains some test\
    \ cases. Feel free to play around with them and see what happens.", "  local strongest\
    \ = extensions[1]\n  for i = 2, #extensions do\n    if extensions[i] > strongest\
    \ then\n      strongest = extensions[i]\n    end\n  end\n  return class_name ..\
    \ '.' .. strongest\nend", "  local strongest = extensions[1]\n  for i = 2, #extensions\
    \ do\n    local cap = #extensions[i]\n    local sm = #extensions[i]\n    local\
    \ strength = cap - sm\n    if strength > 0 then\n      if strength > strongest.strength\
    \ then\n        strongest.name = class_name\n        strongest.extension = extensions[i]\n\
    \        strongest.strength = strength\n      end\n    end\n  end\n  return strongest.name\n\
    end", "  local strongest_extension = nil\n  local strongest_extension_strength\
    \ = -1\n  for _, extension in ipairs(extensions) do\n    local cap = string.upper(extension:sub(1,\
    \ #extension))\n    local sm = string.lower(extension:sub((#extension) + 1))\n\
    \    local strength = cap - sm\n    if strength > strongest_extension_strength\
    \ then\n      strongest_extension_strength = strength\n      strongest_extension\
    \ = extension\n    end\n  end\n  return string.sub(class_name, 1, #class_name-1)\
    \ .. '.' .. strongest_extension\nend", "  local strongest_extension = nil\n  local\
    \ strongest_extension_strength = -1\n  for _, extension in ipairs(extensions)\
    \ do\n    local cap = string.upper(extension:sub(1, #extension))\n    local sm\
    \ = string.lower(extension:sub((#extension) + 1))\n    local strength = cap -\
    \ sm\n    if strength > 0 then\n      if strongest_extension_strength == -1 or\
    \ strength > strongest_extension_strength then\n        strongest_extension_strength\
    \ = strength\n        strongest_extension = extension\n      end\n    end\n  end\n\
    \  return class_name .. '.' .. strongest_extension\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
