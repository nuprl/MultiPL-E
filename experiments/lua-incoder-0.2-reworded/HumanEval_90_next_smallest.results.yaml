language: lua
name: HumanEval_90_next_smallest
results:
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    elseif\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple188hs7.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmple188hs7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmffd8l7s.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmffd8l7s.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while\
    \ index < #lst do\n    if lst[index] < smallest then\n      smallest = lst[index]\n\
    \    end\n    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjp_ga12q.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjp_ga12q.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = i\n    elseif v < smallest then\n  \
    \    smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil\
    \ then\n    return smallest, smallest_idx\n  end\n  return nil, nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn32vxck7.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn32vxck7.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\
    \ return nil end\n  local smallest = lst[1]\n  local rest = lst[2:]\n  for i =\
    \ 2, #lst do\n    if rest[i] < smallest then\n      smallest = rest[i]\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0ms9qm5s.lua:15: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, smallest_idx\
    \ = nil, 0\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n      smallest_idx = i\n    end\n  end\n  if smallest == nil then\n\
    \    return nil\n  end\n  local next_idx = smallest_idx + 1\n  if next_idx > #lst\
    \ then\n    return nil\n  end\n  return lst[next_idx]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3xgp0glf.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmp3xgp0glf.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp3xgp0glf.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\
    \ return nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5re40wd.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmph5re40wd.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 1\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33fqzc6f.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33fqzc6f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5wusd6r.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpi5wusd6r.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4z15iv1.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpp4z15iv1.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  local rest = lst[2:]\n  for\
    \ i = 2, #lst do\n    if rest[i] < smallest then\n      smallest = rest[i]\n \
    \   end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmptp01ca3m.lua:17: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5wusd6r.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpi5wusd6r.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i = 1, #lst do\n    if smallest_idx then\n      if\
    \ lst[i] < smallest[smallest_idx] then\n        smallest = lst\n        smallest_idx\
    \ = i\n      end\n    else\n      smallest = lst\n      smallest_idx = i\n   \
    \ end\n  end\n  return smallest[smallest_idx]\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9dzyxihz.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp9dzyxihz.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 1\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2osce6m.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj2osce6m.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  return smallest_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv472nofu.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv472nofu.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44i3z3hf.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp44i3z3hf.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 1\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2osce6m.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj2osce6m.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst == nil then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local rest = lst[2:]\n  for i = 2,\
    \ #lst do\n    if rest[i] < smallest then\n      smallest = rest[i]\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe3k5ifce.lua:17: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, smallest_idx\
    \ = nil, -1\n  for i, v in ipairs(lst) do\n    if smallest == nil or v < smallest\
    \ then\n      smallest, smallest_idx = v, i\n    end\n  end\n  if smallest ~=\
    \ nil then\n    return smallest, smallest_idx\n  end\n  return nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4iq_tr8w.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4iq_tr8w.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4z15iv1.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpp4z15iv1.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5dyepm5.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpc5dyepm5.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\
    \ return nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5re40wd.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmph5re40wd.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = idx\n    elseif v < smallest then\n\
    \      smallest = v\n      smallest_idx = idx\n    end\n  end\n  if smallest ~=\
    \ nil then\n    return smallest_idx\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkealbvvm.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkealbvvm.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  else\n      if v < smallest then\n        smallest = v\n      end\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaguv52p8.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaguv52p8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp4z15iv1.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpp4z15iv1.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, value in ipairs(lst) do\n    if smallest == nil\
    \ or value < smallest then\n      smallest = value\n      smallest_idx = idx\n\
    \    end\n  end\n  if smallest_idx ~= nil then\n    return lst[smallest_idx]\n\
    \  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbwaqmyk3.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpbwaqmyk3.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i = 1, #lst do\n    if smallest == nil then\n    \
    \  smallest = lst[i]\n      smallest_idx = i\n    else\n      if lst[i] < smallest\
    \ then\n        smallest = lst[i]\n        smallest_idx = i\n      end\n    end\n\
    \  end\n  if smallest == nil then\n    return nil\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphf19uxi9.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphf19uxi9.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr031q2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujr031q2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst[1] == nil then\n \
    \   return nil\n  end\n  local smallest = lst[1]\n  local rest = lst[2:]\n  local\
    \ new_smallest = rest[1]\n  if new_smallest < smallest then\n    return new_smallest\n\
    \  end\n  return next_smallest(rest)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxu2pfef6.lua:17: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6q_5fsp.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw6q_5fsp.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = i\n    elseif v < smallest then\n  \
    \    smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil\
    \ then\n    return smallest, smallest_idx\n  end\n  return nil, nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn32vxck7.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn32vxck7.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, smallest_idx\
    \ = nil, 1\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n      smallest_idx = i\n    end\n  end\n  if smallest == nil then\n\
    \    return nil\n  end\n  return lst[smallest_idx + 1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpuvwxpn89.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpuvwxpn89.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpuvwxpn89.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst[1] == nil then\n \
    \   return nil\n  end\n  local smallest = lst[1]\n  local rest = lst[2:]\n  for\
    \ i = 2, #lst do\n    if rest[i] < smallest then\n      smallest = rest[i]\n \
    \   end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqlvyvjgh.lua:17: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmffd8l7s.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmffd8l7s.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 1\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33fqzc6f.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33fqzc6f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr031q2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujr031q2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, value in ipairs(lst) do\n    if smallest == nil or value < smallest then\n\
    \      smallest = value\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3747hzeh.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3747hzeh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst[1] == nil then return\
    \ nil end\n  local smallest = lst[1]\n  lst[1] = lst[2]\n  lst[2] = smallest\n\
    \  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf8ujfb7k.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpf8ujfb7k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = i\n    elseif v < smallest then\n  \
    \    smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil\
    \ then\n    return smallest, smallest_idx\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg9o8j4qb.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg9o8j4qb.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 1\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33fqzc6f.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33fqzc6f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, value in ipairs(lst) do\n    if smallest == nil\
    \ or value < smallest then\n      smallest = value\n      smallest_idx = idx\n\
    \    end\n  end\n  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb65ulxwv.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpb65ulxwv.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = idx\n    elseif v < smallest then\n\
    \      smallest = v\n      smallest_idx = idx\n    end\n  end\n  if smallest ~=\
    \ nil then\n    return smallest_idx\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkealbvvm.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkealbvvm.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  return smallest_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv472nofu.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv472nofu.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr031q2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujr031q2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 1\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj2osce6m.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj2osce6m.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr031q2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujr031q2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    elseif\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmple188hs7.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmple188hs7.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = idx\n    elseif v < smallest then\n\
    \      smallest = v\n      smallest_idx = idx\n    end\n  end\n  if smallest ~=\
    \ nil then\n    return smallest_idx\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkealbvvm.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkealbvvm.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\
    \ return nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph5re40wd.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmph5re40wd.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  return smallest_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprciv0_2y.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprciv0_2y.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr031q2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujr031q2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr031q2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujr031q2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, value in ipairs(lst) do\n    if smallest == nil or value < smallest then\n\
    \      smallest = value\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3747hzeh.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3747hzeh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst:len() == 0 then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  local rest = lst:sub(2)\n\
    \  for i = 2, lst:len() do\n    if rest[i] < smallest then\n      smallest = rest[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptlnhzlg6.lua:13:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmptlnhzlg6.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmptlnhzlg6.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpujr031q2.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpujr031q2.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = i\n    elseif v < smallest then\n  \
    \    smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil\
    \ then\n    return smallest_idx\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx3ilm8yr.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpx3ilm8yr.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, value in ipairs(lst) do\n    if smallest == nil or value < smallest then\n\
    \      smallest = value\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3747hzeh.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3747hzeh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5h2nlas.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpc5h2nlas.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, value in ipairs(lst) do\n    if smallest == nil then\n      smallest = value\n\
    \    elseif value < smallest then\n      smallest = value\n    end\n  end\n  return\
    \ smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl0x_o0uv.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpl0x_o0uv.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw6q_5fsp.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw6q_5fsp.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst[1] == nil then\n \
    \   return nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst\
    \ and lst[i] < smallest do\n    smallest = lst[i]\n    i = i + 1\n  end\n  if\
    \ i == #lst then\n    return smallest\n  end\n  return nil\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe8g3ooia.lua:31:\
    \ expected: 2, actual: nil\nstack traceback:\n\t/tmp/tmpe8g3ooia.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    else\n\
    \      if lst[i] < smallest then\n        smallest = lst[i]\n      end\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmpffync.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptmpffync.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc5h2nlas.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpc5h2nlas.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst == nil then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k_xcgd6.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8k_xcgd6.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst[1] == nil then return\
    \ nil end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst and lst[i]\
    \ < smallest do\n    smallest = lst[i]\n    i = i + 1\n  end\n  if i == #lst then\
    \ return nil end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp11r0gr4s.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp11r0gr4s.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp44i3z3hf.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp44i3z3hf.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, value in ipairs(lst) do\n    if smallest == nil\
    \ then\n      smallest = value\n      smallest_idx = idx\n    elseif value < smallest\
    \ then\n      smallest = value\n      smallest_idx = idx\n    end\n  end\n  if\
    \ smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvsh2hwe_.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvsh2hwe_.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 1\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33fqzc6f.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33fqzc6f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx +\
    \ 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1ynmjp7.lua:31:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpw1ynmjp7.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = idx\n    elseif v < smallest then\n\
    \      smallest = v\n      smallest_idx = idx\n    end\n  end\n  if smallest ~=\
    \ nil then\n    return smallest, smallest_idx\n  end\n  return nil, nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpks98xv_z.lua:33:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpks98xv_z.lua:33: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index <= #lst\
    \ do\n    local current = lst[index]\n    if current < smallest then\n      smallest\
    \ = current\n    end\n    index = index + 1\n  end\n  return smallest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpthroyj9m.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpthroyj9m.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst == nil then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2cl8trgj.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2cl8trgj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    else\n\
    \      if lst[i] < smallest then\n        smallest = lst[i]\n      end\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmpffync.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptmpffync.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, value in ipairs(lst) do\n    if smallest == nil\
    \ or value < smallest then\n      smallest = value\n      smallest_idx = idx\n\
    \    end\n  end\n  return smallest_idx\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2sl0j8uz.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2sl0j8uz.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, smallest_idx\
    \ = nil, 0\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n      smallest,\
    \ smallest_idx = v, i\n    elseif v < smallest then\n      smallest, smallest_idx\
    \ = v, i\n    end\n  end\n  return smallest_idx\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe9mgxn49.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe9mgxn49.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst:len() == 0 then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, lst:len() do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9kjfeuuh.lua:13:\
    \ attempt to call method 'len' (a nil value)\nstack traceback:\n\t/tmp/tmp9kjfeuuh.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp9kjfeuuh.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst[1] == nil then\n \
    \   return nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index\
    \ < #lst and lst[index] < smallest do\n    smallest = lst[index]\n    index =\
    \ index + 1\n  end\n  if smallest == lst[index] then\n    return nil\n  end\n\
    \  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm54x1e8h.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm54x1e8h.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i = 1, #lst do\n    if smallest == nil or lst[i] <\
    \ smallest then\n      smallest = lst[i]\n      smallest_idx = i\n    end\n  end\n\
    \  return smallest_idx\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4ktatf4.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy4ktatf4.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = idx\n    end\n \
    \ end\n  if smallest ~= nil then\n    return lst[smallest_idx]\n  end\n  return\
    \ nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi5wusd6r.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpi5wusd6r.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    else\n\
    \      if lst[i] < smallest then\n        smallest = lst[i]\n      end\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmpffync.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptmpffync.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n  \
    \  elseif v < smallest then\n      smallest = v\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpolt89agb.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpolt89agb.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, smallest_idx\
    \ = nil, 1\n  for i, v in ipairs(lst) do\n    if smallest == nil or v < smallest\
    \ then\n      smallest, smallest_idx = v, i\n    end\n  end\n  return smallest_idx\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjwzhp5yy.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjwzhp5yy.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if next(lst) == nil then\n\
    \    return nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if\
    \ lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmffd8l7s.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmffd8l7s.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, value in ipairs(lst) do\n    if smallest == nil or value < smallest then\n\
    \      smallest = value\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3747hzeh.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3747hzeh.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil or lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpad6673as.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpad6673as.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil or\
    \ v < smallest then\n      smallest = v\n      smallest_idx = i\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  return lst[smallest_idx +\
    \ 1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw1ynmjp7.lua:31:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpw1ynmjp7.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst == nil then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2cl8trgj.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2cl8trgj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 1, #lst do\n    if smallest == nil then\n      smallest = lst[i]\n    else\n\
    \      if lst[i] < smallest then\n        smallest = lst[i]\n      end\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptmpffync.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptmpffync.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for idx, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = idx\n    elseif v < smallest then\n\
    \      smallest = v\n      smallest_idx = idx\n    end\n  end\n  if smallest ~=\
    \ nil then\n    return smallest_idx, smallest\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_3le5pme.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_3le5pme.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = lst[1]\n\
    \  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6alrjb3m.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6alrjb3m.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    local candidate = lst[i]\n    if candidate < smallest then\n      smallest\
    \ = candidate\n    end\n    i = i + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0__dzaep.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0__dzaep.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = i\n    elseif v < smallest then\n  \
    \    smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest ~= nil\
    \ then\n    return smallest_idx\n  else\n    return nil\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd4grd32s.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd4grd32s.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 1\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33fqzc6f.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33fqzc6f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local index = 2\n  while index < #lst\
    \ do\n    if lst[index] < smallest then\n      smallest = lst[index]\n    end\n\
    \    index = index + 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaxiasj77.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpaxiasj77.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  local\
    \ smallest_idx = nil\n  for i, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      smallest_idx = i\n    elseif v < smallest then\n  \
    \    smallest = v\n      smallest_idx = i\n    end\n  end\n  if smallest == nil\
    \ then\n    return nil\n  end\n  local next_idx = smallest_idx + 1\n  if next_idx\
    \ > #lst then\n    return nil\n  end\n  return lst[next_idx]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkkkttl67.lua:38:\
    \ expected: 2, actual: 4\nstack traceback:\n\t/tmp/tmpkkkttl67.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 2\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphetkmwyp.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphetkmwyp.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local rest = lst[2:]\n  for i = 2,\
    \ #lst do\n    if rest[i] < smallest then\n      smallest = rest[i]\n    end\n\
    \  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiuomtacu.lua:17: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if lst == nil then return\
    \ nil end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n  end\n  return smallest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2cl8trgj.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2cl8trgj.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  local i = 1\n  while i < #lst do\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    i = i +\
    \ 1\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp33fqzc6f.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp33fqzc6f.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ _, v in ipairs(lst) do\n    if smallest == nil or v < smallest then\n      smallest\
    \ = v\n    end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0vxrzlyx.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0vxrzlyx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest, second =\
    \ lst[1], lst[2]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n      smallest,\
    \ second = lst[i], smallest\n    end\n  end\n  return second\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = next_smallest\n    lu.assertEquals(candidate({1,\
    \ 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9zv0j6x.lua:26:\
    \ expected: 2, actual: 5\nstack traceback:\n\t/tmp/tmpo9zv0j6x.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  if #lst == 0 then\n    return\
    \ nil\n  end\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return smallest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = next_smallest\n\
    \    lu.assertEquals(candidate({1, 2, 3, 4, 5}), 2)\n    lu.assertEquals(candidate({5,\
    \ 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({1, 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1,\
    \ 1}), None)\n    lu.assertEquals(candidate({-35, 34, 12, -45}), -35)\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1jk37pw7.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1jk37pw7.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750370
- exit_code: 1
  program: "-- You are given a table of integers.\n-- Write a function next_smallest()\
    \ that returns the 2nd smallest element of the table.\n-- Return None if there\
    \ is no such element.\n-- >>> next_smallest({1, 2, 3, 4, 5})\n-- 2\n-- >>> next_smallest({5,\
    \ 1, 4, 3, 2})\n-- 2\n-- >>> next_smallest({})\n-- None\n-- >>> next_smallest({1,\
    \ 1})\n-- None\nlocal function next_smallest(lst)\n  local smallest = nil\n  for\
    \ i = 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n  end\n  return smallest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = next_smallest\n    lu.assertEquals(candidate({1, 2, 3, 4, 5}),\
    \ 2)\n    lu.assertEquals(candidate({5, 1, 4, 3, 2}), 2)\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({1,\
    \ 1, 1, 1, 0}), 1)\n    lu.assertEquals(candidate({1, 1}), None)\n    lu.assertEquals(candidate({-35,\
    \ 34, 12, -45}), -35)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpubo0vohp.lua:15:\
    \ attempt to compare number with nil\nstack traceback:\n\t/tmp/tmpubo0vohp.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpubo0vohp.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750370
