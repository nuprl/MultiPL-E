name: HumanEval_109_move_one_ball
language: lua
prompt: "-- We have a table 'arr' of N integers arr[1], arr[2], ..., arr[N].The\n\
  -- numbers in the table will be randomly ordered. Your task is to determine if\n\
  -- it is possible to get a table sorted in non-decreasing order by performing \n\
  -- the following operation on the given table:\n-- You are allowed to perform right\
  \ shift operation any number of times.\n-- One right shift operation means shifting\
  \ all elements of the table by one\n-- position in the right direction. The last\
  \ element of the table will be moved to\n-- the starting position in the table i.e.\
  \ 0th index. \n-- If it is possible to obtain the sorted table by performing the\
  \ above operation\n-- then return true else return false.\n-- If the given table\
  \ is empty then return true.\n-- Note: The given table is guaranteed to have unique\
  \ elements.\n-- For Example:\n-- >>> move_one_ball({3, 4, 5, 1, 2})\n-- true\n--\
  \ Explanation: By performin 2 right shift operations, non-decreasing order can\n\
  -- be achieved for the given table.\n-- >>> move_one_ball({3, 5, 4, 1, 2})\n-- false\n\
  -- Explanation:It is not possible to get non-decreasing order for the given\n--\
  \ table by performing any number of right shift operations.\nlocal function move_one_ball(arr)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = move_one_ball\n\
  \    lu.assertEquals(candidate({3, 4, 5, 1, 2}), true)\n    lu.assertEquals(candidate({3,\
  \ 5, 10, 1, 2}), true)\n    lu.assertEquals(candidate({4, 3, 1, 2}), false)\n  \
  \  lu.assertEquals(candidate({3, 5, 4, 1, 2}), false)\n    lu.assertEquals(candidate({}),\
  \ true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: []
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
