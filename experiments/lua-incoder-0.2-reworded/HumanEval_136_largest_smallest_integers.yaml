name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a table (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a table.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  -- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})\n-- {None, 1}\n-- >>> largest_smallest_integers({})\n\
  -- {None, None}\n-- >>> largest_smallest_integers({0})\n-- {None, None}\nlocal function\
  \ largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #lst == 0 then\n    return {None, None}\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative < i then\n          max_negative = i\n        end\n    \
    \  end\n    elseif lst[i] > 0 then\n      if min_positive == nil then\n      \
    \  min_positive = i\n      else\n        if min_positive > i then\n          min_positive\
    \ = i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local smallest, largest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest, largest = v, v\n    elseif\
    \ v < smallest then\n      smallest, largest = v, v\n    end\n  end\n  if smallest\
    \ == nil then\n    return {nil, largest}\n  end\n  if largest < smallest then\n\
    \    return {smallest, largest}\n  end\n  return {smallest, largest}\nend", " \
    \ if #lst == 0 then\n    return {None, None}\n  end\n  local smallest = lst[1]\n\
    \  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return {smallest, largest}\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if max_negative > v then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if min_positive < v then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local max_negative = nil\n  local min_positive = nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = v\n      else\n        if v > max_negative then\n\
    \          max_negative = v\n        end\n      end\n    else\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        if v < min_positive\
    \ then\n          min_positive = v\n        end\n      end\n    end\n  end\n \
    \ if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\n  return {nil, nil}\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest ==\
    \ nil then\n        largest = i\n      else\n        largest = largest\n     \
    \ end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest\
    \ = i\n      else\n        smallest = smallest\n      end\n    end\n  end\n  if\
    \ largest ~= nil and smallest ~= nil then\n    return largest, smallest\n  else\n\
    \    return nil, nil\n  end\nend", "  local function helper(lst)\n    local largest\
    \ = nil\n    local smallest = nil\n    for _, v in ipairs(lst) do\n      if v\
    \ < 0 then\n        if largest == nil then\n          largest = v\n        else\n\
    \          largest = largest\n        end\n      elseif largest ~= nil then\n\
    \        if smallest == nil then\n          smallest = v\n        else\n     \
    \     smallest = smallest\n        end\n      else\n        largest = v\n    \
    \  end\n    end\n    return largest, smallest\n  end\n  return helper(lst)\nend",
  "  local max_negative, min_positive = nil, nil\n  for _, v in ipairs(lst) do\n \
    \   if v < 0 then\n      if max_negative == nil then\n        max_negative = v\n\
    \      else\n        if v > max_negative then\n          max_negative = v\n  \
    \      end\n      end\n    elseif v > 0 then\n      if min_positive == nil then\n\
    \        min_positive = v\n      else\n        if v < min_positive then\n    \
    \      min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return max_negative, min_positive\n\
    \  else\n    return nil, nil\n  end\nend", "  local max_negative, min_positive\n\
    \  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative == nil then\n    return\
    \ {nil, min_positive}\n  else\n    return {max_negative, min_positive}\n  end\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative > i then\n          max_negative =\
    \ i\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = i\n      else\n        if min_positive < i then\n       \
    \   min_positive = i\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if\
    \ max_negative == nil then\n        max_negative = v\n      else\n        if v\
    \ > max_negative then\n          max_negative = v\n        end\n      end\n  \
    \  elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\n  return {nil,\
    \ nil}\nend", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n  end\n  if smallest == nil\
    \ and largest == nil then\n    return nil\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ largest, smallest = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest == nil then\n        largest = v\n      else\n        largest\
    \ = largest * 10 + v\n      end\n    elseif v > 0 then\n      if smallest == nil\
    \ then\n        smallest = v\n      else\n        smallest = smallest * 10 + v\n\
    \      end\n    end\n  end\n  if smallest ~= nil and largest ~= nil then\n   \
    \ return {largest, smallest}\n  end\nend", "  local smallest, largest = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest, largest\
    \ = v, v\n    elseif v < smallest then\n      smallest, largest = v, v\n    end\n\
    \  end\n  if smallest == nil then\n    return nil, nil\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest, largest = value, value\n  \
    \  elseif value < smallest then\n      smallest, largest = value, value\n    end\n\
    \  end\n  if smallest == nil then\n    return {None, None}\n  end\n  if largest\
    \ == nil then\n    return {smallest, smallest}\n  end\n  return {smallest, largest}\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return nil\n\
    \  end\n  if largest == nil then\n    return smallest\n  end\n  return largest,\
    \ smallest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
