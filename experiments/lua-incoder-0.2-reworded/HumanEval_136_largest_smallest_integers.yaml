name: HumanEval_136_largest_smallest_integers
language: lua
prompt: "-- Create a function that returns a table (a, b), where 'a' is\n-- the largest\
  \ of negative integers, and 'b' is the smallest\n-- of positive integers in a table.\n\
  -- If there is no negative or positive integers, return them as None.\n-- Examples:\n\
  -- >>> largest_smallest_integers({2, 4, 1, 3, 5, 7})\n-- {None, 1}\n-- >>> largest_smallest_integers({})\n\
  -- {None, None}\n-- >>> largest_smallest_integers({0})\n-- {None, None}\nlocal function\
  \ largest_smallest_integers(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = largest_smallest_integers\n\
  \    lu.assertEquals(candidate({2, 4, 1, 3, 5, 7}), {None, 1})\n    lu.assertEquals(candidate({2,\
  \ 4, 1, 3, 5, 7, 0}), {None, 1})\n    lu.assertEquals(candidate({1, 3, 2, 4, 5,\
  \ 6, -2}), {-2, 1})\n    lu.assertEquals(candidate({4, 5, 3, 6, 2, 7, -7}), {-7,\
  \ 2})\n    lu.assertEquals(candidate({7, 3, 8, 4, 9, 2, 5, -9}), {-9, 2})\n    lu.assertEquals(candidate({}),\
  \ {None, None})\n    lu.assertEquals(candidate({0}), {None, None})\n    lu.assertEquals(candidate({-1,\
  \ -3, -5, -6}), {-1, None})\n    lu.assertEquals(candidate({-1, -3, -5, -6, 0}),\
  \ {-1, None})\n    lu.assertEquals(candidate({-6, -4, -4, -3, 1}), {-3, 1})\n  \
  \  lu.assertEquals(candidate({-6, -4, -4, -3, -100, 1}), {-3, 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if #lst == 0 then\n    return {None, None}\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative < i then\n          max_negative = i\n        end\n    \
    \  end\n    elseif lst[i] > 0 then\n      if min_positive == nil then\n      \
    \  min_positive = i\n      else\n        if min_positive > i then\n          min_positive\
    \ = i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local smallest, largest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest, largest = v, v\n    elseif\
    \ v < smallest then\n      smallest, largest = v, v\n    end\n  end\n  if smallest\
    \ == nil then\n    return {nil, largest}\n  end\n  if largest < smallest then\n\
    \    return {smallest, largest}\n  end\n  return {smallest, largest}\nend", " \
    \ if #lst == 0 then\n    return {None, None}\n  end\n  local smallest = lst[1]\n\
    \  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return {smallest, largest}\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if max_negative > v then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if min_positive < v then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local max_negative = nil\n  local min_positive = nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = v\n      else\n        if v > max_negative then\n\
    \          max_negative = v\n        end\n      end\n    else\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        if v < min_positive\
    \ then\n          min_positive = v\n        end\n      end\n    end\n  end\n \
    \ if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\n  return {nil, nil}\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if largest ==\
    \ nil then\n        largest = i\n      else\n        largest = largest\n     \
    \ end\n    elseif lst[i] > 0 then\n      if smallest == nil then\n        smallest\
    \ = i\n      else\n        smallest = smallest\n      end\n    end\n  end\n  if\
    \ largest ~= nil and smallest ~= nil then\n    return largest, smallest\n  else\n\
    \    return nil, nil\n  end\nend", "  local function helper(lst)\n    local largest\
    \ = nil\n    local smallest = nil\n    for _, v in ipairs(lst) do\n      if v\
    \ < 0 then\n        if largest == nil then\n          largest = v\n        else\n\
    \          largest = largest\n        end\n      elseif largest ~= nil then\n\
    \        if smallest == nil then\n          smallest = v\n        else\n     \
    \     smallest = smallest\n        end\n      else\n        largest = v\n    \
    \  end\n    end\n    return largest, smallest\n  end\n  return helper(lst)\nend",
  "  local max_negative, min_positive = nil, nil\n  for _, v in ipairs(lst) do\n \
    \   if v < 0 then\n      if max_negative == nil then\n        max_negative = v\n\
    \      else\n        if v > max_negative then\n          max_negative = v\n  \
    \      end\n      end\n    elseif v > 0 then\n      if min_positive == nil then\n\
    \        min_positive = v\n      else\n        if v < min_positive then\n    \
    \      min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return max_negative, min_positive\n\
    \  else\n    return nil, nil\n  end\nend", "  local max_negative, min_positive\n\
    \  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative == nil then\n    return\
    \ {nil, min_positive}\n  else\n    return {max_negative, min_positive}\n  end\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative > i then\n          max_negative =\
    \ i\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = i\n      else\n        if min_positive < i then\n       \
    \   min_positive = i\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if\
    \ max_negative == nil then\n        max_negative = v\n      else\n        if v\
    \ > max_negative then\n          max_negative = v\n        end\n      end\n  \
    \  elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\n  return {nil,\
    \ nil}\nend", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n  end\n  if smallest == nil\
    \ and largest == nil then\n    return nil\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ largest, smallest = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest == nil then\n        largest = v\n      else\n        largest\
    \ = largest * 10 + v\n      end\n    elseif v > 0 then\n      if smallest == nil\
    \ then\n        smallest = v\n      else\n        smallest = smallest * 10 + v\n\
    \      end\n    end\n  end\n  if smallest ~= nil and largest ~= nil then\n   \
    \ return {largest, smallest}\n  end\nend", "  local smallest, largest = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest, largest\
    \ = v, v\n    elseif v < smallest then\n      smallest, largest = v, v\n    end\n\
    \  end\n  if smallest == nil then\n    return nil, nil\n  end\n  return smallest,\
    \ largest\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest, largest = value, value\n  \
    \  elseif value < smallest then\n      smallest, largest = value, value\n    end\n\
    \  end\n  if smallest == nil then\n    return {None, None}\n  end\n  if largest\
    \ == nil then\n    return {smallest, smallest}\n  end\n  return {smallest, largest}\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return nil\n\
    \  end\n  if largest == nil then\n    return smallest\n  end\n  return largest,\
    \ smallest\nend", "  local max_negative = nil\n  local min_positive = nil\n  for\
    \ _, v in ipairs(lst) do\n    if v <= 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        if max_negative < v then\n    \
    \      max_negative = v\n        end\n      end\n    elseif v > 0 then\n     \
    \ if min_positive == nil then\n        min_positive = v\n      else\n        if\
    \ min_positive > v then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ {max_negative, min_positive}\n  end\n  return {nil, nil}\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n  \
    \    largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    return nil\n  elseif\
    \ smallest == nil then\n    return largest\n  else\n    return largest, smallest\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  if largest == nil\
    \ then\n    largest = smallest\n  end\n  return largest, smallest\nend", "  if\
    \ #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n \
    \ local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local min_value\
    \ = nil\n  local max_value = nil\n  for _, value in ipairs(lst) do\n    if min_value\
    \ == nil then\n      min_value = value\n      max_value = value\n    else\n  \
    \    if value < min_value then\n        min_value = value\n      elseif value\
    \ > max_value then\n        max_value = value\n      end\n    end\n  end\n  if\
    \ min_value == nil then\n    return {nil, min_value}\n  else\n    if max_value\
    \ == nil then\n      return {min_value, nil}\n    else\n      return {min_value,\
    \ max_value}\n    end\n  end\nend", "  local function is_negative(num)\n    return\
    \ num < 0\n  end\n  local function is_positive(num)\n    return num > 0\n  end\n\
    \  local function is_zero(num)\n    return num == 0\n  end\n  local function is_negative_integer(num)\n\
    \    return is_negative(num) and is_integer(num)\n  end\n  local function is_positive_integer(num)\n\
    \    return is_positive(num) and is_integer(num)\n  end\n  local function is_zero_integer(num)\n\
    \    return is_zero(num) and is_integer(num)\n  end\n  local function is_negative_integer_or_zero(num)\n\
    \    return is_negative_integer(num) or is_zero_integer(num)\n  end\n  local function\
    \ is_positive_integer_or_zero(num)\n    return is_positive_integer(num) or is_zero_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero(num)\n    return is_zero_integer(num)\
    \ or is_zero(num)\n  end\n  local function is_negative_integer_or_zero_integer(num)\n\
    \    return is_negative_integer_or_zero(num) and is_integer(num)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer(num)\n    return is_positive_integer_or_zero(num)\
    \ and is_integer(num)\n  end\n  local function is_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero(num) and is_integer(num)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero(num)\n    return is_negative_integer_or_zero_integer(num)\
    \ or is_zero_integer_or_zero(num)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(num)\n\
    \    return is_positive_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero(num)\n    return\
    \ is_zero_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n  end\n\
    \  local function is_negative_integer_or_zero_integer_or_zero_integer(num)\n \
    \   return is_negative_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_negative_integer_or_zero_integer_or_zero", "  local\
    \ function is_negative_integer(x)\n    return x < 0 and x ~= math.floor(x)\n \
    \ end\n  local function is_positive_integer(x)\n    return x ~= math.floor(x)\
    \ and x ~= math.ceil(x)\n  end\n  local function is_integer(x)\n    return x ~=\
    \ math.floor(x) and x ~= math.ceil(x)\n  end\n  local function is_float(x)\n \
    \   return x ~= math.floor(x) and x ~= math.ceil(x)\n  end\n  local function is_number(x)\n\
    \    return x ~= nil and x ~= math.floor(x) and x ~= math.ceil(x)\n  end\n  local\
    \ function is_string(x)\n    return x ~= nil and x ~= math.floor(x) and x ~= math.ceil(x)\n\
    \  end\n  local function is_table(x)\n    return x ~= nil and x ~= math.floor(x)\
    \ and x ~= math.ceil(x)\n  end\n  local function is_nil(x)\n    return x ~= nil\n\
    \  end\n  local function is_boolean(x)\n    return x ~= nil\n  end\n  local function\
    \ is_function(x)\n    return x ~= nil\n  end\n  local function is_error(x)\n \
    \   return x ~= nil\n  end\n  local function is_table(x)\n    return x ~= nil\n\
    \  end\n  local function is_function(x)\n    return x ~= nil\n  end\n  local function\
    \ is_string(x)\n    return x ~= nil\n  end\n  local function is_number(x)\n  \
    \  return x ~= nil\n  end\n  local function is_boolean(x)\n    return x ~= nil\n\
    \  end\n  local function is_nil(x)\n    return x ~= nil\n  end\n  local function\
    \ is_error(x)\n    return x ~= nil\n  end\n  local function is_table(x)\n    return\
    \ x ~= nil\n  end\n  local function is_function(x)\n    return x ~= nil\n  end\n\
    \  local function is_string(x)\n    return x ~= nil\n  end\n  local function is_number(x)\n\
    \    return x ~= nil\n  end\n  local function is_boolean(x)\n    return x ~= nil\n\
    \  end\n  local function is_nil(x)\n    return x ~= nil\n  end\n  local function\
    \ is_error(x)\n    return x ~= nil\n  end\n  local function is_table(x)\n    return\
    \ x ~= nil\n  end\n  local function is_function(x)\n    return x ~= nil\n  end\n\
    \  local function is_string(x)\n    return x ~= nil\n  end\n  local function is_number(x)\n\
    \    return x ~= nil\n  end", "  local largest, smallest = nil, nil\n  for i =\
    \ 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  if\
    \ largest == nil then\n    largest = smallest\n  end\n  return largest, smallest\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, value\
    \ in ipairs(lst) do\n    if value < 0 then\n      if max_negative == nil then\n\
    \        max_negative = value\n      else\n        if max_negative > value then\n\
    \          max_negative = value\n        end\n      end\n    elseif value > 0\
    \ then\n      if min_positive == nil then\n        min_positive = value\n    \
    \  else\n        if min_positive < value then\n          min_positive = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local largest, smallest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest == nil then\n        largest = v\n \
    \     else\n        largest = largest * 10 + v\n      end\n    elseif v > 0 then\n\
    \      if smallest == nil then\n        smallest = v\n      else\n        smallest\
    \ = smallest * 10 + v\n      end\n    end\n  end\n  if largest ~= nil and smallest\
    \ ~= nil then\n    return {largest, smallest}\n  end\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n  \
    \    smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n    return\
    \ nil\n  end\n  return largest, smallest\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n  \
    \    if max_negative == nil then\n        max_negative = i\n      else\n     \
    \   if max_negative < i then\n          max_negative = i\n        end\n      end\n\
    \    else\n      if min_positive == nil then\n        min_positive = i\n     \
    \ else\n        if min_positive > i then\n          min_positive = i\n       \
    \ end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~=\
    \ nil then\n    return max_negative, min_positive\n  end\n  return nil, nil\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = v\n      else\n        if v < min_positive then\n       \
    \   min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  local largest = nil\n  local smallest\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    elseif lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  if largest == nil then\n    return nil\n  elseif smallest == nil then\n   \
    \ return largest\n  else\n    return largest, smallest\n  end\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] < largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  if largest == nil then\n    largest = nil\n  end\n  if smallest\
    \ == nil then\n    smallest = nil\n  end\n  return largest, smallest\nend", " \
    \ local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst do\n\
    \    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative > i then\n          max_negative =\
    \ i\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = i\n      else\n        if min_positive < i then\n       \
    \   min_positive = i\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return { max_negative, min_positive\
    \ }\n  else\n    return { nil, nil }\n  end\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     max_negative = max_negative > v ? max_negative : v\n      end\n    elseif\
    \ v > 0 then\n      if min_positive == nil then\n        min_positive = v\n  \
    \    else\n        min_positive = min_positive < v ? min_positive : v\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ {max_negative, min_positive}\n  else\n    return {nil, nil}\n  end\nend", " \
    \ local smallest = nil\n  local largest = nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n  \
    \    largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n  \
    \    largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = smallest\n\
    \  end\n  return largest, smallest\nend", "  local largest, smallest = nil, nil\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if largest == nil then\n\
    \        largest = v\n      else\n        largest = largest\n      end\n    elseif\
    \ v > 0 then\n      if smallest == nil then\n        smallest = v\n      else\n\
    \        smallest = smallest\n      end\n    end\n  end\n  if largest == nil then\n\
    \    return nil\n  elseif smallest == nil then\n    return largest\n  else\n \
    \   return largest, smallest\n  end\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <= 0 then\n     \
    \ if max_negative == nil then\n        max_negative = v\n      else\n        max_negative\
    \ = max_negative > v ? max_negative : v\n      end\n    elseif v >= 0 then\n \
    \     if min_positive == nil then\n        min_positive = v\n      else\n    \
    \    min_positive = min_positive < v ? min_positive : v\n      end\n    end\n\
    \  end\n  return max_negative or min_positive or {None, None}\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  if largest == nil and smallest == nil then\n\
    \    return {nil, nil}\n  end\n  return {largest, smallest}\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative > i then\n          max_negative = i\n        end\n    \
    \  end\n    else\n      if min_positive == nil then\n        min_positive = i\n\
    \      else\n        if min_positive < i then\n          min_positive = i\n  \
    \      end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local smallest, largest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < smallest then\n      smallest = v\n    end\n    if v > largest\
    \ then\n      largest = v\n    end\n  end\n  if smallest == nil and largest ==\
    \ nil then\n    return nil\n  end\n  return largest, smallest\nend", "  local\
    \ max_negative, min_positive = nil, nil\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      if max_negative == nil then\n        max_negative = v\n  \
    \    else\n        if v > max_negative then\n          max_negative = v\n    \
    \    end\n      end\n    elseif v > 0 then\n      if min_positive == nil then\n\
    \        min_positive = v\n      else\n        if v < min_positive then\n    \
    \      min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n  end\n  if smallest == nil\
    \ and largest == nil then\n    return nil\n  end\n  return largest, smallest\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst\
    \ do\n    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative > i then\n          max_negative =\
    \ i\n        end\n      end\n    elseif lst[i] > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = i\n      else\n        if min_positive <\
    \ i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\n  return {nil, nil}\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local min_value = nil\n  local max_value\
    \ = nil\n  for _, value in ipairs(lst) do\n    if min_value == nil then\n    \
    \  min_value = value\n      max_value = value\n    else\n      if value < min_value\
    \ then\n        min_value = value\n      elseif value > max_value then\n     \
    \   max_value = value\n      end\n    end\n  end\n  if min_value == nil then\n\
    \    return {nil, min_value}\n  elseif max_value == nil then\n    return {min_value,\
    \ nil}\n  else\n    return {min_value, max_value}\n  end\nend", "  local smallest,\
    \ largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n  \
    \    smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest =\
    \ lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n    return\
    \ nil\n  end\n  return largest, smallest\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     max_negative = max_negative > v ? max_negative : v\n      end\n    elseif\
    \ v > 0 then\n      if min_positive == nil then\n        min_positive = v\n  \
    \    else\n        min_positive = min_positive < v ? min_positive : v\n      end\n\
    \    end\n  end\n  return max_negative or min_positive or {None, None}\nend",
  "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\n  return {nil, nil}\nend", "  local smallest, largest = nil, nil\n  for\
    \ i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n   \
    \ end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil and largest == nil then\n    return nil\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  local function\
    \ is_negative(num)\n    return num < 0\n  end", "  local smallest, largest = nil,\
    \ nil\n  for i = 1, #lst do\n    local value = lst[i]\n    if value < smallest\
    \ then\n      smallest = value\n    elseif value > largest then\n      largest\
    \ = value\n    end\n  end\n  if smallest == nil then\n    return nil\n  end\n\
    \  if largest == nil then\n    return smallest\n  end\n  return {smallest, largest}\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  if\
    \ #lst == 0 then\n    return {None, None}\n  end\n  local smallest = lst[1]\n\
    \  local largest = lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return {smallest, largest}\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if max_negative > v then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if min_positive < v then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end", "  local largest, smallest = nil, nil\n  for i = 1, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  if largest == nil\
    \ then\n    largest = smallest\n  end\n  return largest, smallest\nend", "  local\
    \ largest, smallest = nil, nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if largest == nil then\n        largest = v\n      else\n        largest\
    \ = largest * 10 + v\n      end\n    elseif v > 0 then\n      if smallest == nil\
    \ then\n        smallest = v\n      else\n        smallest = smallest * 10 + v\n\
    \      end\n    end\n  end\n  if largest == nil then\n    return nil\n  elseif\
    \ smallest == nil then\n    return largest\n  else\n    return {largest, smallest}\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for i,\
    \ v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        max_negative = max_negative > v\
    \ ? max_negative : v\n      end\n    elseif v > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        min_positive = min_positive\
    \ < v ? min_positive : v\n      end\n    end\n  end\n  if max_negative ~= nil\
    \ and min_positive ~= nil then\n    return {max_negative, min_positive}\n  end\n\
    \  return {nil, nil}\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = i\n      else\n        if max_negative < i\
    \ then\n          max_negative = i\n        end\n      end\n    else\n      if\
    \ min_positive == nil then\n        min_positive = i\n      else\n        if min_positive\
    \ > i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\n  return nil\nend", "  if #lst == 0 then\n    return {None,\
    \ None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if largest < lst[i] then\n      largest = lst[i]\n    end\n\
    \    if smallest > lst[i] then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ {largest, smallest}\nend", "  local largest = nil\n  local smallest = nil\n\
    \  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return largest\n  else\n    return smallest\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for i\
    \ = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n  \
    \      max_negative = i\n      else\n        if max_negative > i then\n      \
    \    max_negative = i\n        end\n      end\n    elseif lst[i] > 0 then\n  \
    \    if min_positive == nil then\n        min_positive = i\n      else\n     \
    \   if min_positive < i then\n          min_positive = i\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ {max_negative, min_positive}\n  end\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local smallest, largest = nil, nil\n \
    \ for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return largest\n  else\n    return smallest, largest\n\
    \  end\nend", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n  \
    \  if lst[i] < smallest then\n      smallest = lst[i]\n    end\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n  end\n  if smallest == nil\
    \ then\n    smallest, largest = nil, nil\n  elseif largest == nil then\n    smallest,\
    \ largest = smallest, smallest\n  else\n    smallest, largest = smallest, largest\n\
    \  end\n  return smallest, largest\nend", "  local largest, smallest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  if largest == nil then\n    largest = smallest\n  end\n  return largest, smallest\n\
    end", "  local max_negative, min_positive\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      max_negative = v\n    elseif v > 0 then\n      min_positive\
    \ = v\n    end\n  end\n  if max_negative and min_positive then\n    return {max_negative,\
    \ min_positive}\n  else\n    return {None, None}\n  end\nend", "  if #lst == 0\
    \ then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  if largest == smallest then\n    return {None, None}\n  end\n\
    \  return {largest, smallest}\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = i\n      else\n        if max_negative < i\
    \ then\n          max_negative = i\n        end\n      end\n    elseif lst[i]\
    \ > 0 then\n      if min_positive == nil then\n        min_positive = i\n    \
    \  else\n        if min_positive > i then\n          min_positive = i\n      \
    \  end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~=\
    \ nil then\n    return {max_negative, min_positive}\n  end\n  return nil\nend",
  "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = smallest\n\
    \  end\n  return largest, smallest\nend", "  local smallest, largest = nil, nil\n\
    \  for _, value in ipairs(lst) do\n    if smallest == nil then\n      smallest,\
    \ largest = value, value\n    else\n      if value < smallest then\n        smallest,\
    \ largest = value, value\n      elseif value > largest then\n        smallest,\
    \ largest = smallest, value\n      end\n    end\n  end\n  return smallest, largest\n\
    end", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n\
    \    if smallest == nil then\n      smallest, largest = value, value\n    elseif\
    \ value < smallest then\n      smallest, largest = value, value\n    end\n  end\n\
    \  if smallest == nil then\n    return {nil, largest}\n  elseif largest < smallest\
    \ then\n    return {smallest, largest}\n  else\n    return {smallest, largest}\n\
    \  end\nend", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest, largest = value, value\n  \
    \  else\n      if value < smallest then\n        smallest, largest = value, value\n\
    \      elseif value > largest then\n        smallest, largest = value, value\n\
    \      end\n    end\n  end\n  return smallest, largest\nend", "  local function\
    \ is_negative(num)\n    return num < 0\n  end\n  local function is_positive(num)\n\
    \    return num > 0\n  end\n  local function is_zero(num)\n    return num == 0\n\
    \  end\n  local function is_none(num)\n    return num == nil\n  end\n  local function\
    \ is_integer(num)\n    return type(num) == \"number\"\n  end\n  local function\
    \ is_table(num)\n    return type(num) == \"table\"\n  end\n  local function is_list(num)\n\
    \    return type(num) == \"table\"\n  end\n  local function is_tuple(num)\n  \
    \  return type(num) == \"table\"\n  end\n  local function is_function(num)\n \
    \   return type(num) == \"function\"\n  end\n  local function is_number(num)\n\
    \    return type(num) == \"number\"\n  end\n  local function is_boolean(num)\n\
    \    return type(num) == \"boolean\"\n  end\n  local function is_string(num)\n\
    \    return type(num) == \"string\"\n  end\n  local function is_nil(num)\n   \
    \ return type(num) == \"nil\"\n  end\n  local function is_list(num)\n    return\
    \ type(num) == \"table\"\n  end\n  local function is_tuple(num)\n    return type(num)\
    \ == \"table\"\n  end\n  local function is_function(num)\n    return type(num)\
    \ == \"function\"\n  end\n  local function is_number(num)\n    return type(num)\
    \ == \"number\"\n  end\n  local function is_boolean(num)\n    return type(num)\
    \ == \"boolean\"\n  end\n  local function is_string(num)\n    return type(num)\
    \ == \"string\"\n  end\n  local function is_nil(num)\n    return type(num) ==\
    \ \"nil\"\n  end\n  local function is_list(num)\n    return type(num) == \"table\"\
    \n  end\n  local function is_tuple(num)\n    return type(num) == \"table\"\n \
    \ end\n  local function is_function(num)\n    return type(num) == \"function\"\
    \n  end\n  local function is_number(num)\n    return type(num) == \"number\"\n\
    \  end\n  local function is_boolean(num)\n    return type(num) == \"boolean\"\n\
    \  end\n  local function is_string(num)\n    return type(num) == \"string\"\n\
    \  end\n  local function is_nil(num)\n    return type(num) == \"nil\"\n  end\n\
    \  local function is_list(num)\n    return type(num) == \"table\"\n  end\n  local\
    \ function is_tuple(num)\n    return type(num) == \"table\"\n  end\n  local function\
    \ is_function(num)\n    return type(num) == \"function\"\n  end\n  local function\
    \ is_number(num)\n    return type(num) == \"number\"\n  end\n  local function\
    \ is_boolean(num)\n    return type(num) == \"boolean\"", "  local largest = nil\n\
    \  local smallest = nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = nil\n  end\n\
    \  if smallest == nil then\n    smallest = nil\n  end\n  return largest, smallest\n\
    end", "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if v > max_negative then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if v < min_positive then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  end\nend", "  local largest, smallest = nil, nil\n  for _, value in ipairs(lst)\
    \ do\n    if value < 0 then\n      if largest == nil then\n        largest = value\n\
    \      else\n        largest = largest * 10 + value\n      end\n    elseif largest\
    \ and value < smallest then\n      smallest = value\n    end\n  end\n  return\
    \ largest, smallest\nend", "  local largest, smallest = nil, nil\n  for i, v in\
    \ ipairs(lst) do\n    if v < 0 then\n      if largest == nil then\n        largest\
    \ = v\n      else\n        largest = largest * 10 + v\n      end\n    elseif v\
    \ > 0 then\n      if smallest == nil then\n        smallest = v\n      else\n\
    \        smallest = smallest * 10 + v\n      end\n    end\n  end\n  if largest\
    \ ~= nil and smallest ~= nil then\n    return largest, smallest\n  end\n  return\
    \ nil, nil\nend", "  local smallest, largest = nil, nil\n  for _, v in ipairs(lst)\
    \ do\n    if smallest == nil then\n      smallest, largest = v, v\n    elseif\
    \ v < smallest then\n      smallest, largest = v, v\n    end\n  end\n  if smallest\
    \ == nil then\n    return {None, None}\n  end\n  if largest == nil then\n    return\
    \ {smallest, smallest}\n  end\n  return {smallest, largest}\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if max_negative < v then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if min_positive > v then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = smallest\n\
    \  end\n  return largest, smallest\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = i\n      else\n        if max_negative <\
    \ i then\n          max_negative = i\n        end\n      end\n    else\n     \
    \ if min_positive == nil then\n        min_positive = i\n      else\n        if\
    \ min_positive > i then\n          min_positive = i\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ {max_negative, min_positive}\n  end\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = i\n      else\n        if max_negative <\
    \ i then\n          max_negative = i\n        end\n      end\n    elseif lst[i]\
    \ > 0 then\n      if min_positive == nil then\n        min_positive = i\n    \
    \  else\n        if min_positive > i then\n          min_positive = i\n      \
    \  end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~=\
    \ nil then\n    return {max_negative, min_positive}\n  end\n  return {nil, nil}\n\
    end", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n\
    \    if smallest == nil then\n      smallest, largest = value, value\n    else\n\
    \      if value < smallest then\n        smallest, largest = value, value\n  \
    \    elseif value > largest then\n        smallest, largest = value, value\n \
    \     end\n    end\n  end\n  if smallest == nil then\n    return {nil, largest}\n\
    \  else\n    return {smallest, largest}\n  end\nend", "  local smallest, largest\
    \ = nil, nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if\
    \ smallest == nil then\n        smallest, largest = value, value\n      else\n\
    \        largest, smallest = value, value\n      end\n    elseif smallest == nil\
    \ then\n      smallest, largest = value, value\n    elseif value > smallest then\n\
    \      largest, smallest = value, value\n    end\n  end\n  if smallest == nil\
    \ then\n    return {nil, largest}\n  elseif largest == nil then\n    return {smallest,\
    \ nil}\n  else\n    return {smallest, largest}\n  end\nend", "  local largest\
    \ = nil\n  local smallest = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if largest == nil then\n        largest = lst[i]\n      else\n        largest\
    \ = largest * 10 + lst[i]\n      end\n    elseif lst[i] > 0 then\n      if smallest\
    \ == nil then\n        smallest = lst[i]\n      else\n        smallest = smallest\
    \ * 10 + lst[i]\n      end\n    end\n  end\n  if smallest == nil then\n    return\
    \ largest\n  else\n    return largest, smallest\n  end\nend", "  if #lst == 0\
    \ then\n    return {None, None}\n  end", "  local function is_negative(x)\n  \
    \  return x < 0 and x or nil\n  end\n  local function is_positive(x)\n    return\
    \ x > 0 and x or nil\n  end\n  local function is_zero(x)\n    return x == 0 and\
    \ x or nil\n  end\n  local function is_negative_integer(x)\n    return is_negative(x)\
    \ and is_integer(x) or nil\n  end\n  local function is_positive_integer(x)\n \
    \   return is_positive(x) and is_integer(x) or nil\n  end\n  local function is_zero_integer(x)\n\
    \    return is_zero(x) and is_integer(x) or nil\n  end\n  local function is_negative_integer_or_zero(x)\n\
    \    return is_negative_integer(x) or is_zero_integer(x)\n  end\n  local function\
    \ is_positive_integer_or_zero(x)\n    return is_positive_integer(x) or is_zero_integer(x)\n\
    \  end\n  local function is_zero_integer_or_zero(x)\n    return is_zero_integer(x)\
    \ or is_zero(x)\n  end\n  local function is_negative_integer_or_zero_integer(x)\n\
    \    return is_negative_integer_or_zero(x) and is_integer(x) or nil\n  end\n \
    \ local function is_positive_integer_or_zero_integer(x)\n    return is_positive_integer_or_zero(x)\
    \ and is_integer(x) or nil\n  end\n  local function is_zero_integer_or_zero_integer(x)\n\
    \    return is_zero_integer_or_zero(x) and is_integer(x) or nil\n  end\n  local\
    \ function is_negative_integer_or_zero_integer_or_zero(x)\n    return is_negative_integer_or_zero_integer(x)\
    \ or is_zero_integer_or_zero(x)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(x)\n\
    \    return is_positive_integer_or_zero_integer(x) or is_zero_integer_or_zero(x)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero(x)\n    return\
    \ is_zero_integer_or_zero(x) or is_zero(x)\n  end\n  local function is_negative_integer_or_zero_integer_or_zero_integer(x)\n\
    \    return is_negative_integer_or_zero_integer_or_zero(x) and is_integer(x) or\
    \ nil\n  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(x)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(x) and is_integer(x) or\
    \ nil\n  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(x)\n\
    \    return is_zero_integer_or_zero_integer_or_zero(x) and is_integer(x) or nil\n\
    \  end\n  local function is_negative_integer_", "  local largest, smallest = nil,\
    \ nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  if largest == nil then\n    largest = smallest\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i]\
    \ then\n      largest = lst[i]\n    end\n    if smallest > lst[i] then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = smallest\n\
    \  end\n  return largest, smallest\nend", "  if #lst == 0 then\n    return {None,\
    \ None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ {largest, smallest}\nend", "  local function helper(lst)\n    local max_val\
    \ = nil\n    local min_val = nil\n    for _, v in ipairs(lst) do\n      if v <\
    \ 0 then\n        if max_val == nil then\n          max_val = v\n        else\n\
    \          max_val = v\n        end\n      elseif v > 0 then\n        if min_val\
    \ == nil then\n          min_val = v\n        else\n          min_val = v\n  \
    \      end\n      end\n    end\n    if max_val and min_val then\n      return\
    \ {max_val, min_val}\n    else\n      return nil\n    end\n  end\n  return helper(lst)\n\
    end", "  local function is_negative(num)\n    return num < 0\n  end\n  local function\
    \ is_positive(num)\n    return num > 0\n  end\n  local function is_zero(num)\n\
    \    return num == 0\n  end\n  local function is_negative_integer(num)\n    return\
    \ is_negative(num) and is_integer(num)\n  end\n  local function is_positive_integer(num)\n\
    \    return is_positive(num) and is_integer(num)\n  end\n  local function is_zero_integer(num)\n\
    \    return is_zero(num) and is_integer(num)\n  end\n  local function is_negative_integer_or_zero(num)\n\
    \    return is_negative_integer(num) or is_zero_integer(num)\n  end\n  local function\
    \ is_positive_integer_or_zero(num)\n    return is_positive_integer(num) or is_zero_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero(num)\n    return is_zero_integer(num)\
    \ or is_zero(num)\n  end\n  local function is_negative_integer_or_zero_integer(num)\n\
    \    return is_negative_integer_or_zero(num) and is_integer(num)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer(num)\n    return is_positive_integer_or_zero(num)\
    \ and is_integer(num)\n  end\n  local function is_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero(num) and is_integer(num)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero(num)\n    return is_negative_integer_or_zero_integer(num)\
    \ or is_zero_integer_or_zero(num)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(num)\n\
    \    return is_positive_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero(num)\n    return\
    \ is_zero_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n  end\n\
    \  local function is_negative_integer_or_zero_integer_or_zero_integer(num)\n \
    \   return is_negative_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_negative_integer_or_zero_integer_or_zero", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil then\n\
    \    return nil\n  end\n  return largest, smallest\nend", "  local largest = nil\n\
    \  local smallest = nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = nil\n  end\n\
    \  if smallest == nil then\n    smallest = nil\n  end\n  return largest, smallest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest, largest = value, value\n    else\n      if value\
    \ < smallest then\n        smallest, largest = value, value\n      elseif value\
    \ > largest then\n        smallest, largest = value, value\n      end\n    end\n\
    \  end\n  if smallest == nil then\n    return nil, largest\n  end\n  return smallest,\
    \ largest\nend", "  if #lst == 0 then\n    return {None, None}\n  end", "  local\
    \ max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if\
    \ lst[i] < 0 then\n      if max_negative == nil then\n        max_negative = i\n\
    \      else\n        if max_negative > i then\n          max_negative = i\n  \
    \      end\n      end\n    else\n      if min_positive == nil then\n        min_positive\
    \ = i\n      else\n        if min_positive < i then\n          min_positive =\
    \ i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end", "  local smallest, largest = nil,\
    \ nil\n  for _, value in ipairs(lst) do\n    if smallest == nil then\n      smallest,\
    \ largest = value, value\n    else\n      if value < smallest then\n        smallest,\
    \ largest = value, value\n      elseif value > largest then\n        smallest,\
    \ largest = value, value\n      end\n    end\n  end\n  if smallest == nil then\n\
    \    return {nil, largest}\n  else\n    return {smallest, largest}\n  end\nend",
  "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if max_negative < v then\n          max_negative =\
    \ v\n        end\n      end\n    elseif v > 0 then\n      if min_positive == nil\
    \ then\n        min_positive = v\n      else\n        if min_positive > v then\n\
    \          min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  local largest, smallest = nil,\
    \ nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return largest\n  else\n    return largest, smallest\n\
    \  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest\
    \ = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ largest = nil\n  local smallest = nil\n  for _, v in ipairs(lst) do\n    if\
    \ v < 0 then\n      if largest == nil then\n        largest = v\n      else\n\
    \        largest = largest * 10 + v\n      end\n    elseif v > 0 then\n      if\
    \ smallest == nil then\n        smallest = v\n      else\n        smallest = smallest\
    \ * 10 + v\n      end\n    end\n  end\n  if largest ~= nil and smallest ~= nil\
    \ then\n    return {largest, smallest}\n  end\n  return {nil, nil}\nend", "  local\
    \ smallest = nil\n  local largest = nil\n  for i = 1, #lst do\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return\
    \ largest\n  elseif largest == nil then\n    return smallest\n  else\n    return\
    \ {smallest, largest}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if largest < lst[i] then\n      largest = lst[i]\n    end\n    if smallest\
    \ > lst[i] then\n      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\n\
    end", "  local function is_negative(num)\n    return num < 0\n  end\n  local function\
    \ is_positive(num)\n    return num > 0\n  end\n  local function is_zero(num)\n\
    \    return num == 0\n  end\n  local function is_none(num)\n    return num ==\
    \ nil\n  end\n  local function is_integer(num)\n    return type(num) == \"number\"\
    \n  end\n  local function is_table(num)\n    return type(num) == \"table\"\n \
    \ end\n  local function is_list(num)\n    return type(num) == \"table\"\n  end\n\
    \  local function is_tuple(num)\n    return type(num) == \"table\"\n  end\n  local\
    \ function is_number(num)\n    return type(num) == \"number\"\n  end\n  local\
    \ function is_integer(num)\n    return type(num) == \"number\"\n  end\n  local\
    \ function is_boolean(num)\n    return type(num) == \"boolean\"\n  end\n  local\
    \ function is_string(num)\n    return type(num) == \"string\"\n  end\n  local\
    \ function is_function(num)\n    return type(num) == \"function\"\n  end\n  local\
    \ function is_none(num)\n    return num == nil\n  end\n  local function is_list(num)\n\
    \    return type(num) == \"table\"\n  end\n  local function is_tuple(num)\n  \
    \  return type(num) == \"table\"\n  end\n  local function is_table(num)\n    return\
    \ type(num) == \"table\"\n  end\n  local function is_number(num)\n    return type(num)\
    \ == \"number\"\n  end\n  local function is_integer(num)\n    return type(num)\
    \ == \"number\"\n  end\n  local function is_boolean(num)\n    return type(num)\
    \ == \"boolean\"\n  end\n  local function is_string(num)\n    return type(num)\
    \ == \"string\"\n  end\n  local function is_function(num)\n    return type(num)\
    \ == \"function\"\n  end\n  local function is_none(num)\n    return num == nil\n\
    \  end\n  local function is_list(num)\n    return type(num) == \"table\"\n  end\n\
    \  local function is_tuple(num)\n    return type(num) == \"table\"\n  end\n  local\
    \ function is_table(num)\n    return type(num) == \"table\"\n  end\n  local function\
    \ is_number(num)\n    return type(num) == \"number\"\n  end\n  local function\
    \ is_integer(num)\n    return type(num) == \"number\"\n  end\n  local function\
    \ is_boolean(num)\n    return type(num) == \"boolean\"\n  end\n  local function\
    \ is_string(num)\n    return type(num) == \"string\"\n  end\n  local function\
    \ is_function(num)\n    return type(num) == \"function\"\n  end\n  local function\
    \ is_none(num)\n    return num == nil\n  end\n  ", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, value in ipairs(lst) do\n    if value <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = value\n  \
    \    else\n        if value > max_negative then\n          max_negative = value\n\
    \        end\n      end\n    else\n      if min_positive == nil then\n       \
    \ min_positive = value\n      else\n        if value < min_positive then\n   \
    \       min_positive = value\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if largest < lst[i] then\n      largest = lst[i]\n \
    \   end\n    if smallest > lst[i] then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if max_negative >\
    \ v then\n          max_negative = v\n        end\n      end\n    elseif v > 0\
    \ then\n      if min_positive == nil then\n        min_positive = v\n      else\n\
    \        if min_positive < v then\n          min_positive = v\n        end\n \
    \     end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  end\n  return {nil, nil}\nend", " \
    \ if #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  if #lst ==\
    \ 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return {largest, smallest}\nend", "  local largest, smallest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  if largest == nil then\n    largest = smallest\n  end\n  return\
    \ largest, smallest\nend", "  local smallest, largest = nil, nil\n  for _, value\
    \ in ipairs(lst) do\n    if smallest == nil then\n      smallest, largest = value,\
    \ value\n    elseif value < smallest then\n      smallest, largest = value, value\n\
    \    end\n  end\n  if smallest == nil then\n    return nil, nil\n  end\n  return\
    \ smallest, largest\nend", "  local max_negative = nil\n  local min_positive =\
    \ nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if max_negative <\
    \ v then\n          max_negative = v\n        end\n      end\n    else\n     \
    \ if min_positive == nil then\n        min_positive = v\n      else\n        if\
    \ min_positive > v then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  if max_negative == nil and min_positive == nil then\n    return\
    \ {nil, nil}\n  else\n    if max_negative == nil then\n      return {min_positive,\
    \ min_positive}\n    else\n      return {max_negative, max_negative}\n    end\n\
    \  end\nend", "  local max_negative = nil\n  local min_positive = nil\n  for _,\
    \ v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        max_negative = max_negative > v\
    \ ? max_negative : v\n      end\n    elseif v > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = v\n      else\n        min_positive = min_positive\
    \ < v ? min_positive : v\n      end\n    end\n  end\n  if max_negative ~= nil\
    \ and min_positive ~= nil then\n    return {max_negative, min_positive}\n  else\n\
    \    return {nil, nil}\n  end\nend", "  local function is_negative(num)\n    return\
    \ num < 0\n  end\n  local function is_positive(num)\n    return num > 0\n  end\n\
    \  local function is_zero(num)\n    return num == 0\n  end\n  local function is_none(num)\n\
    \    return num == nil\n  end\n  local function is_integer(num)\n    return type(num)\
    \ == 'number' and num % 1 == 0\n  end\n  local function is_table(num)\n    return\
    \ type(num) == 'table'\n  end\n  local function is_list(num)\n    return type(num)\
    \ == 'table' and num:type() == 'list'\n  end\n  local function is_tuple(num)\n\
    \    return type(num) == 'table' and num:type() == 'tuple'\n  end\n  local function\
    \ is_dict(num)\n    return type(num) == 'table' and num:type() == 'dict'\n  end\n\
    \  local function is_set(num)\n    return type(num) == 'table' and num:type()\
    \ == 'set'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return type(num) ==\
    \ 'function'\n  end\n  local function is_function(num)\n    return ", "  local\
    \ max_negative, min_positive\n  local max_negative_value = nil\n  local min_positive_value\
    \ = nil\n  for _, value in ipairs(lst) do\n    if value <= 0 then\n      if max_negative_value\
    \ == nil then\n        max_negative = value\n        max_negative_value = value\n\
    \      else\n        if max_negative_value < value then\n          max_negative\
    \ = value\n          max_negative_value = value\n        end\n      end\n    else\n\
    \      if min_positive_value == nil then\n        min_positive = value\n     \
    \   min_positive_value = value\n      else\n        if min_positive_value > value\
    \ then\n          min_positive = value\n          min_positive_value = value\n\
    \        end\n      end\n    end\n  end\n  if max_negative == nil then\n    return\
    \ {max_negative_value}\n  else\n    if min_positive == nil then\n      return\
    \ {max_negative, min_negative_value}\n    else\n      return {max_negative, min_negative,\
    \ min_positive}\n    end\n  end\nend", "  if #lst == 0 then\n    return {None,\
    \ None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n  return\
    \ {largest, smallest}\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = v\n      else\n        if v > max_negative\
    \ then\n          max_negative = v\n        end\n      end\n    elseif v > 0 then\n\
    \      if min_positive == nil then\n        min_positive = v\n      else\n   \
    \     if v < min_positive then\n          min_positive = v\n        end\n    \
    \  end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  end\n  return {nil, nil}\nend", " \
    \ local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst do\n\
    \    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative > i then\n          max_negative =\
    \ i\n        end\n      end\n    elseif lst[i] > 0 then\n      if min_positive\
    \ == nil then\n        min_positive = i\n      else\n        if min_positive <\
    \ i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    else\n   \
    \   if min_positive == nil then\n        min_positive = value\n      else\n  \
    \      if value < min_positive then\n          min_positive = value\n        end\n\
    \      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  else\n    return {nil, nil}\n  end\n\
    end", "  local smallest, largest = nil, nil\n  for _, value in ipairs(lst) do\n\
    \    if smallest == nil then\n      smallest, largest = value, value\n    else\n\
    \      if value < smallest then\n        smallest, largest = value, value\n  \
    \    elseif value > largest then\n        smallest, largest = value, value\n \
    \     end\n    end\n  end\n  if smallest == nil then\n    return nil, largest\n\
    \  end\n  return smallest, largest\nend", "  if #lst == 0 then\n    return {None,\
    \ None}\n  end\n  local smallest = lst[1]\n  local largest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return\
    \ {smallest, largest}\nend", "  local smallest = nil\n  local largest = nil\n\
    \  for _, v in ipairs(lst) do\n    if smallest == nil then\n      smallest = v\n\
    \      largest = v\n    elseif v < smallest then\n      smallest = v\n    end\n\
    \    if v > largest then\n      largest = v\n    end\n  end\n  if smallest ==\
    \ nil then\n    return largest\n  elseif largest == nil then\n    return smallest\n\
    \  else\n    return {smallest, largest}\n  end\nend", "  local max_negative =\
    \ nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative > i then\n          max_negative = i\n        end\n    \
    \  end\n    elseif lst[i] > 0 then\n      if min_positive == nil then\n      \
    \  min_positive = i\n      else\n        if min_positive < i then\n          min_positive\
    \ = i\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  if #lst\
    \ == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local\
    \ smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n    \
    \  largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if max_negative > v then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if min_positive < v then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    smallest, largest\
    \ = nil, nil\n  elseif largest == nil then\n    smallest, largest = smallest,\
    \ smallest\n  else\n    smallest, largest = smallest, largest\n  end\n  return\
    \ smallest, largest\nend", "  local smallest, largest = nil, nil\n  for _, v in\
    \ ipairs(lst) do\n    if smallest == nil then\n      smallest, largest = v, v\n\
    \    elseif v < smallest then\n      smallest, largest = v, v\n    end\n  end\n\
    \  if smallest == nil then\n    return nil, nil\n  end\n  return smallest, largest\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local smallest,\
    \ largest = lst[1], lst[1]\n  for i = 2, #lst do\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n  end\n  return {smallest, largest}\nend", "  local smallest,\
    \ largest = nil, nil\n  for _, value in ipairs(lst) do\n    if smallest == nil\
    \ then\n      smallest, largest = value, value\n    elseif value < smallest then\n\
    \      smallest, largest = value, value\n    end\n  end\n  if smallest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  if #lst ==\
    \ 0 then\n    return {nil, 0}\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  if largest == nil then\n    return {nil, 0}\n  end\n  if smallest\
    \ == nil then\n    return {largest, 0}\n  end\n  return {largest, smallest}\n\
    end", "  local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n  end\n  if smallest == nil and largest == nil\
    \ then\n    return nil\n  end\n  return largest, smallest\nend", "  local smallest_negative,\
    \ largest_positive\n  local function is_negative(num)\n    return num < 0\n  end\n\
    \  local function is_positive(num)\n    return num > 0\n  end\n  local function\
    \ is_zero(num)\n    return num == 0\n  end\n  local function is_negative_integer(num)\n\
    \    return is_negative(num) and is_integer(num)\n  end\n  local function is_positive_integer(num)\n\
    \    return is_positive(num) and is_integer(num)\n  end\n  local function is_zero_integer(num)\n\
    \    return is_zero(num) and is_integer(num)\n  end\n  local function is_negative_integer_or_zero(num)\n\
    \    return is_negative_integer(num) or is_zero_integer(num)\n  end\n  local function\
    \ is_positive_integer_or_zero(num)\n    return is_positive_integer(num) or is_zero_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero(num)\n    return is_zero_integer(num)\
    \ or is_zero(num)\n  end\n  local function is_negative_integer_or_zero_integer(num)\n\
    \    return is_negative_integer_or_zero(num) and is_integer(num)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer(num)\n    return is_positive_integer_or_zero(num)\
    \ and is_integer(num)\n  end\n  local function is_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero(num) and is_integer(num)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero(num)\n    return is_negative_integer_or_zero_integer(num)\
    \ or is_zero_integer_or_zero(num)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(num)\n\
    \    return is_positive_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero(num)\n    return\
    \ is_zero_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n  end\n\
    \  local function is_negative_integer_or_zero_integer_or_zero_integer(num)\n \
    \   return is_negative_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function ", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    else\n   \
    \   if min_positive == nil then\n        min_positive = value\n      else\n  \
    \      if value < min_positive then\n          min_positive = value\n        end\n\
    \      end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return {max_negative, min_positive}\n  end\nend", "  local smallest, largest\
    \ = nil, nil\n  for _, value in ipairs(lst) do\n    if value < smallest then\n\
    \      smallest, largest = value, smallest\n    elseif value > largest then\n\
    \      smallest, largest = largest, value\n    end\n  end\n  if smallest == nil\
    \ then\n    return {nil, largest}\n  else\n    return {smallest, largest}\n  end\n\
    end", "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest =\
    \ lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local\
    \ largest = nil\n  local smallest = nil\n  for i = 1, #lst do\n    if lst[i] >\
    \ largest then\n      largest = lst[i]\n    elseif lst[i] < smallest then\n  \
    \    smallest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return\
    \ {largest, largest}\n  else\n    return {smallest, largest}\n  end\nend", " \
    \ if #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n  \
    \    largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = smallest\n\
    \  end\n  return largest, smallest\nend", "  local largest, smallest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n\
    \    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return largest, smallest\nend", "  local function helper(lst)\n    local max_val\
    \ = nil\n    local min_val = nil\n    for _, v in ipairs(lst) do\n      if max_val\
    \ == nil then\n        max_val = v\n        min_val = v\n      elseif v > max_val\
    \ then\n        max_val = v\n      elseif v < min_val then\n        min_val =\
    \ v\n      end\n    end\n    return max_val, min_val\n  end\n  if #lst == 0 then\n\
    \    return {nil, nil}\n  end\n  local max_val, min_val = helper(lst)\n  if max_val\
    \ == nil then\n    return {nil, nil}\n  end\n  local max_idx = nil\n  for i, v\
    \ in ipairs(lst) do\n    if v == max_val then\n      max_idx = i\n    end\n  end\n\
    \  if max_idx == nil then\n    return {nil, nil}\n  end\n  local min_idx = nil\n\
    \  for i, v in ipairs(lst) do\n    if v == min_val then\n      min_idx = i\n \
    \   end\n  end\n  if min_idx == nil then\n    return {nil, nil}\n  end\n  local\
    \ max_val, min_val = helper(lst)\n  if max_val == nil then\n    return {nil, nil}\n\
    \  end\n  local max_idx = nil\n  for i, v in ipairs(lst) do\n    if v == max_val\
    \ then\n      max_idx = i\n    end\n  end\n  if max_idx == nil then\n    return\
    \ {nil, nil}\n  end\n  local min_idx = nil\n  for i, v in ipairs(lst) do\n   \
    \ if v == min_val then\n      min_idx = i\n    end\n  end\n  if min_idx == nil\
    \ then\n    return {nil, nil}\n  end\n  local max_val, min_val = helper(lst)\n\
    \  if max_val == nil then\n    return {nil, nil}\n  end\n  local max_idx = nil\n\
    \  for i, v in ipairs(lst) do\n    if v == max_val then\n      max_idx = i\n \
    \   end\n  end\n  if max_idx == nil then\n    return {nil, nil}\n  end\n  local\
    \ min_idx = nil\n  for i, v in ipairs(lst) do\n    if v == min_val then\n    \
    \  min_idx = i\n    end\n  end\n  if min_idx == nil then\n    return {nil, nil}\n\
    \  end\n  local max_val, min_val = helper(lst)\n  if max_val == nil then\n   \
    \ return {nil, nil}\n  end\n  local max_idx = nil\n  for i, v in ipairs(lst) do",
  "  local max_negative = nil\n  local min_positive = nil\n  for i = 1, #lst do\n\
    \    if lst[i] < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = i\n      else\n        if max_negative < i then\n          max_negative =\
    \ i\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = i\n      else\n        if min_positive > i then\n       \
    \   min_positive = i\n        end\n      end\n    end\n  end\n  if max_negative\
    \ ~= nil and min_positive ~= nil then\n    return {max_negative, min_positive}\n\
    \  else\n    return {nil, nil}\n  end\nend", "  local function is_negative(num)\n\
    \    return num < 0\n  end\n  local function is_positive(num)\n    return num\
    \ > 0\n  end\n  local function is_zero(num)\n    return num == 0\n  end\n  local\
    \ function is_negative_integer(num)\n    return is_negative(num) and is_integer(num)\n\
    \  end\n  local function is_positive_integer(num)\n    return is_positive(num)\
    \ and is_integer(num)\n  end\n  local function is_zero_integer(num)\n    return\
    \ is_zero(num) and is_integer(num)\n  end\n  local function is_negative_integer_or_zero(num)\n\
    \    return is_negative_integer(num) or is_zero_integer(num)\n  end\n  local function\
    \ is_positive_integer_or_zero(num)\n    return is_positive_integer(num) or is_zero_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero(num)\n    return is_zero_integer(num)\
    \ or is_zero(num)\n  end\n  local function is_negative_integer_or_zero_integer(num)\n\
    \    return is_negative_integer_or_zero(num) and is_integer(num)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer(num)\n    return is_positive_integer_or_zero(num)\
    \ and is_integer(num)\n  end\n  local function is_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero(num) and is_integer(num)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero(num)\n    return is_negative_integer_or_zero_integer(num)\
    \ or is_zero_integer_or_zero(num)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(num)\n\
    \    return is_positive_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero(num)\n    return\
    \ is_zero_integer_or_zero_integer(num) or is_zero_integer_or_zero(num)\n  end\n\
    \  local function is_negative_integer_or_zero_integer_or_zero_integer(num)\n \
    \   return is_negative_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_negative_integer_or_zero_integer_or_zero", "  local\
    \ smallest, largest = nil, nil\n  for _, v in ipairs(lst) do\n    if smallest\
    \ == nil then\n      smallest, largest = v, v\n    elseif v < smallest then\n\
    \      smallest, largest = v, v\n    end\n  end\n  if smallest == nil then\n \
    \   return nil, nil\n  end\n  return smallest, largest\nend", "  local smallest\
    \ = nil\n  local largest = nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    smallest =\
    \ 0\n  end\n  if largest == nil then\n    largest = 0\n  end\n  return largest,\
    \ smallest\nend", "  local max_negative = nil\n  local min_positive = nil\n  for\
    \ _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil then\n\
    \        max_negative = v\n      else\n        if v > max_negative then\n    \
    \      max_negative = v\n        end\n      end\n    elseif v > 0 then\n     \
    \ if min_positive == nil then\n        min_positive = v\n      else\n        if\
    \ v < min_positive then\n          min_positive = v\n        end\n      end\n\
    \    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n    return\
    \ {max_negative, min_positive}\n  end\n  return {nil, nil}\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n  \
    \    largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = smallest\n\
    \  end\n  return largest, smallest\nend", "  local smallest, largest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    smallest, largest = nil, nil\n  elseif largest\
    \ == nil then\n    smallest, largest = smallest, smallest\n  else\n    smallest,\
    \ largest = smallest, largest\n  end\n  return smallest, largest\nend", "  local\
    \ smallest, largest = nil, nil\n  for i = 1, #lst do\n    local value = lst[i]\n\
    \    if value < smallest then\n      smallest = value\n    end\n    if value >\
    \ largest then\n      largest = value\n    end\n  end\n  if smallest == nil and\
    \ largest == nil then\n    return nil\n  end\n  return largest, smallest\nend",
  "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  local smallest\
    \ = nil\n  local largest = nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return {nil,\
    \ largest}\n  elseif largest == nil then\n    return {smallest, nil}\n  else\n\
    \    return {smallest, largest}\n  end\nend", "  if #lst == 0 then\n    return\
    \ {None, None}\n  end\n  local largest = lst[1]\n  local smallest = lst[1]\n \
    \ for i = 2, #lst do\n    if lst[i] > largest then\n      largest = lst[i]\n \
    \   end\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n  end\n\
    \  return {largest, smallest}\nend", "  local smallest, largest = nil, nil\n \
    \ for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil then\n    return nil\n  end\n  if largest == nil then\n\
    \    return smallest\n  end\n  return largest, smallest\nend", "  local smallest\
    \ = nil\n  local largest = nil\n  for i = 1, #lst do\n    local value = lst[i]\n\
    \    if value < 0 then\n      if smallest == nil then\n        smallest = value\n\
    \      else\n        smallest = nil\n      end\n    elseif smallest == nil then\n\
    \      largest = value\n    else\n      if value < smallest then\n        smallest\
    \ = value\n      elseif value > largest then\n        largest = value\n      end\n\
    \    end\n  end\n  if smallest == nil then\n    return {largest, smallest}\n \
    \ else\n    return {smallest, largest}\n  end\nend", "  local max_negative = nil\n\
    \  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0 then\n\
    \      if max_negative == nil then\n        max_negative = v\n      else\n   \
    \     if v > max_negative then\n          max_negative = v\n        end\n    \
    \  end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if v < min_positive then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  end\nend", "  local\
    \ largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest\
    \ then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n     \
    \ smallest = lst[i]\n    end\n  end\n  if largest == nil then\n    largest = smallest\n\
    \  end\n  return largest, smallest\nend", "  local max_negative = nil\n  local\
    \ min_positive = nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n\
    \      if max_negative == nil then\n        max_negative = value\n      else\n\
    \        if max_negative > value then\n          max_negative = value\n      \
    \  end\n      end\n    elseif value > 0 then\n      if min_positive == nil then\n\
    \        min_positive = value\n      else\n        if min_positive < value then\n\
    \          min_positive = value\n        end\n      end\n    end\n  end\n  if\
    \ max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local function is_negative(num)\n    return num\
    \ < 0\n  end\n  local function is_positive(num)\n    return num > 0\n  end\n \
    \ local function is_zero(num)\n    return num == 0\n  end\n  local function is_negative_integer(num)\n\
    \    return is_negative(num) and is_integer(num)\n  end\n  local function is_positive_integer(num)\n\
    \    return is_positive(num) and is_integer(num)\n  end\n  local function is_zero_integer(num)\n\
    \    return is_zero(num) and is_integer(num)\n  end\n  local function is_negative_integer_or_zero(num)\n\
    \    return is_negative_integer(num) or is_zero_integer(num)\n  end\n  local function\
    \ is_positive_integer_or_zero(num)\n    return is_positive_integer(num) or is_zero_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero(num)\n    return is_zero_integer(num)\
    \ or is_zero_integer(num)\n  end\n  local function is_negative_integer_or_zero_integer(num)\n\
    \    return is_negative_integer_or_zero(num) and is_integer(num)\n  end\n  local\
    \ function is_positive_integer_or_zero_integer(num)\n    return is_positive_integer_or_zero(num)\
    \ and is_integer(num)\n  end\n  local function is_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero(num) and is_integer(num)\n  end\n  local function\
    \ is_negative_integer_or_zero_integer_or_zero(num)\n    return is_negative_integer_or_zero_integer(num)\
    \ or is_zero_integer_or_zero_integer(num)\n  end\n  local function is_positive_integer_or_zero_integer_or_zero(num)\n\
    \    return is_positive_integer_or_zero_integer(num) or is_zero_integer_or_zero_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero(num)\n    return\
    \ is_zero_integer_or_zero_integer(num) or is_zero_integer_or_zero_integer(num)\n\
    \  end\n  local function is_negative_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_negative_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_positive_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_positive_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_zero_integer_or_zero_integer_or_zero_integer(num)\n\
    \    return is_zero_integer_or_zero_integer_or_zero(num) and is_integer(num)\n\
    \  end\n  local function is_negative_integer_or_zero", "  local largest = nil\n\
    \  local smallest = nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n\
    \      largest = lst[i]\n    elseif lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  if largest == nil then\n    largest = nil\n  end\n  if smallest\
    \ == nil then\n    smallest = nil\n  end\n  return largest, smallest\nend", " \
    \ local smallest, largest = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest\
    \ then\n      smallest = lst[i]\n    end\n    if lst[i] > largest then\n     \
    \ largest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return nil\n\
    \  end\n  if largest == nil then\n    return smallest\n  end\n  return largest,\
    \ smallest\nend", "  local max_negative = nil\n  local min_positive = nil\n  for\
    \ i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative == nil then\n\
    \        max_negative = i\n      else\n        if max_negative > i then\n    \
    \      max_negative = i\n        end\n      end\n    else\n      if min_positive\
    \ == nil then\n        min_positive = i\n      else\n        if min_positive <\
    \ i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\n  return {nil, nil}\nend", "  local smallest, largest\
    \ = nil, nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n  \
    \  end\n  end\n  if smallest == nil and largest == nil then\n    return nil\n\
    \  end\n  return largest, smallest\nend", "  local smallest = nil\n  local largest\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest =\
    \ lst[i]\n    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n\
    \  end\n  if smallest == nil then\n    return largest\n  elseif largest == nil\
    \ then\n    return smallest\n  else\n    return {smallest, largest}\n  end\nend",
  "  if #lst == 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n\
    \  local smallest = lst[1]\n  for i = 2, #lst do\n    if largest < lst[i] then\n\
    \      largest = lst[i]\n    end\n    if smallest > lst[i] then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return {largest, smallest}\nend", "  if #lst ==\
    \ 0 then\n    return {None, None}\n  end\n  local largest = lst[1]\n  local smallest\
    \ = lst[1]\n  for i = 2, #lst do\n    if lst[i] > largest then\n      largest\
    \ = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n  end\n  return {largest, smallest}\nend", "  local smallest = nil\n\
    \  local largest = nil\n  for _, v in ipairs(lst) do\n    if smallest == nil then\n\
    \      smallest = v\n      largest = v\n    elseif v < smallest then\n      smallest\
    \ = v\n    end\n    if v > largest then\n      largest = v\n    end\n  end\n \
    \ if smallest == nil then\n    return {nil, largest}\n  elseif largest == nil\
    \ then\n    return {smallest, nil}\n  else\n    return {smallest, largest}\n \
    \ end\nend", "  local largest = nil\n  local smallest = nil\n  for i = 1, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  if largest == nil\
    \ then\n    return nil\n  end\n  if smallest == nil then\n    return largest\n\
    \  end\n  return {largest, smallest}\nend", "  local max_negative, min_positive\n\
    \  for _, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = v\n      else\n        if v > max_negative then\n\
    \          max_negative = v\n        end\n      end\n    elseif v > 0 then\n \
    \     if min_positive == nil then\n        min_positive = v\n      else\n    \
    \    if v < min_positive then\n          min_positive = v\n        end\n     \
    \ end\n    end\n  end\n  if max_negative == nil then\n    return nil\n  elseif\
    \ min_positive == nil then\n    return max_negative\n  else\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = i\n      else\n        if max_negative > i\
    \ then\n          max_negative = i\n        end\n      end\n    else\n      if\
    \ min_positive == nil then\n        min_positive = i\n      else\n        if min_positive\
    \ < i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n      if max_negative ==\
    \ nil then\n        max_negative = i\n      else\n        if max_negative > i\
    \ then\n          max_negative = i\n        end\n      end\n    else\n      if\
    \ min_positive == nil then\n        min_positive = i\n      else\n        if min_positive\
    \ < i then\n          min_positive = i\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n\
    \  end\n  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst\
    \ do\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i]\
    \ < smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest,\
    \ smallest}\nend", "  local largest, smallest = nil, nil\n  for i, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if largest == nil then\n        largest = v\n \
    \     else\n        largest = largest * 10 + v\n      end\n    elseif v > 0 then\n\
    \      if smallest == nil then\n        smallest = v\n      else\n        smallest\
    \ = smallest * 10 + v\n      end\n    end\n  end\n  return largest, smallest\n\
    end", "  local min_value = nil\n  local max_value = nil\n  for _, value in ipairs(lst)\
    \ do\n    if min_value == nil then\n      min_value = value\n      max_value =\
    \ value\n    else\n      if value < min_value then\n        min_value = value\n\
    \      elseif value > max_value then\n        max_value = value\n      end\n \
    \   end\n  end\n  if min_value == nil then\n    return {nil, min_value}\n  else\n\
    \    if max_value == nil then\n      return {min_value, nil}\n    else\n     \
    \ return {min_value, max_value}\n    end\n  end\nend", "  local max_negative =\
    \ nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v < 0\
    \ then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        max_negative = max_negative > v ? max_negative : v\n      end\n    elseif\
    \ v > 0 then\n      if min_positive == nil then\n        min_positive = v\n  \
    \    else\n        min_positive = min_positive < v ? min_positive : v\n      end\n\
    \    end\n  end\n  return max_negative, min_positive\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for _, v in ipairs(lst) do\n    if v <\
    \ 0 then\n      if max_negative == nil then\n        max_negative = v\n      else\n\
    \        if max_negative > v then\n          max_negative = v\n        end\n \
    \     end\n    elseif v > 0 then\n      if min_positive == nil then\n        min_positive\
    \ = v\n      else\n        if min_positive < v then\n          min_positive =\
    \ v\n        end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend",
  "  local max_negative = nil\n  local min_positive = nil\n  for _, v in ipairs(lst)\
    \ do\n    if v < 0 then\n      if max_negative == nil then\n        max_negative\
    \ = v\n      else\n        if max_negative < v then\n          max_negative =\
    \ v\n        end\n      end\n    else\n      if min_positive == nil then\n   \
    \     min_positive = v\n      else\n        if min_positive > v then\n       \
    \   min_positive = v\n        end\n      end\n    end\n  end\n  if max_negative\
    \ == nil and min_positive == nil then\n    return {nil, nil}\n  else\n    if max_negative\
    \ == nil then\n      return {nil, min_positive}\n    else\n      return {max_negative,\
    \ min_positive}\n    end\n  end\nend", "  if #lst == 0 then\n    return {None,\
    \ None}\n  end\n  local smallest = lst[1]\n  local largest = lst[1]\n  for i =\
    \ 2, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n    end\n\
    \    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n  return\
    \ {smallest, largest}\nend", "  local max_negative = nil\n  local min_positive\
    \ = nil\n  for _, value in ipairs(lst) do\n    if value < 0 then\n      if max_negative\
    \ == nil then\n        max_negative = value\n      else\n        if value > max_negative\
    \ then\n          max_negative = value\n        end\n      end\n    elseif value\
    \ == 0 then\n      if min_positive == nil then\n        min_positive = value\n\
    \      else\n        if value < min_positive then\n          min_positive = value\n\
    \        end\n      end\n    else\n      if max_negative == nil then\n       \
    \ max_negative = value\n      else\n        if value > max_negative then\n   \
    \       max_negative = value\n        end\n      end\n      if min_positive ==\
    \ nil then\n        min_positive = value\n      else\n        if value < min_positive\
    \ then\n          min_positive = value\n        end\n      end\n    end\n  end\n\
    \  if max_negative ~= nil and min_positive ~= nil then\n    return {max_negative,\
    \ min_positive}\n  end\n  return {nil, nil}\nend", "  local smallest_negative\
    \ = nil\n  local smallest_positive = nil\n  local largest = nil\n  for i = 1,\
    \ #lst do\n    if lst[i] < 0 then\n      if smallest_negative == nil then\n  \
    \      smallest_negative = i\n      else\n        smallest_negative = smallest_negative\
    \ or i\n      end\n    elseif smallest_positive == nil then\n      smallest_positive\
    \ = i\n    else\n      smallest_positive = smallest_positive or i\n    end\n \
    \   if largest == nil then\n      largest = i\n    else\n      largest = largest\
    \ or i\n    end\n  end\n  if smallest_negative ~= nil and smallest_positive ~=\
    \ nil then\n    return {smallest_negative, smallest_positive}\n  elseif smallest_negative\
    \ ~= nil then\n    return {smallest_negative, largest}\n  elseif smallest_positive\
    \ ~= nil then\n    return {smallest_positive, largest}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  local max_negative = nil\n  local min_positive = nil\n\
    \  for i, v in ipairs(lst) do\n    if v < 0 then\n      if max_negative == nil\
    \ then\n        max_negative = v\n      else\n        if max_negative > v then\n\
    \          max_negative = v\n        end\n      end\n    elseif v > 0 then\n \
    \     if min_positive == nil then\n        min_positive = v\n      else\n    \
    \    if min_positive < v then\n          min_positive = v\n        end\n     \
    \ end\n    end\n  end\n  if max_negative ~= nil and min_positive ~= nil then\n\
    \    return nil, nil\n  elseif max_negative ~= nil then\n    return max_negative,\
    \ min_positive\n  elseif min_positive ~= nil then\n    return min_positive, max_negative\n\
    \  else\n    return nil, nil\n  end\nend", "  local smallest, largest = nil, nil\n\
    \  for i = 1, #lst do\n    if lst[i] < smallest then\n      smallest = lst[i]\n\
    \    end\n    if lst[i] > largest then\n      largest = lst[i]\n    end\n  end\n\
    \  if smallest == nil and largest == nil then\n    return nil\n  end\n  return\
    \ largest, smallest\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n\
    \  local largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n \
    \   if lst[i] > largest then\n      largest = lst[i]\n    end\n    if lst[i] <\
    \ smallest then\n      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\n\
    end", "  local largest, smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  if smallest == nil then\n    return\
    \ largest\n  else\n    return largest, smallest\n  end\nend", "  local largest,\
    \ smallest = nil, nil\n  for i = 1, #lst do\n    if lst[i] > largest then\n  \
    \    largest = lst[i]\n    end\n    if lst[i] < smallest then\n      smallest\
    \ = lst[i]\n    end\n  end\n  return largest, smallest\nend", "  local max_negative\
    \ = nil\n  local min_positive = nil\n  for i = 1, #lst do\n    if lst[i] < 0 then\n\
    \      if max_negative == nil then\n        max_negative = i\n      else\n   \
    \     if max_negative > i then\n          max_negative = i\n        end\n    \
    \  end\n    else\n      if min_positive == nil then\n        min_positive = i\n\
    \      else\n        if min_positive < i then\n          min_positive = i\n  \
    \      end\n      end\n    end\n  end\n  if max_negative ~= nil and min_positive\
    \ ~= nil then\n    return {max_negative, min_positive}\n  else\n    return {nil,\
    \ nil}\n  end\nend", "  if #lst == 0 then\n    return {None, None}\n  end\n  local\
    \ largest = lst[1]\n  local smallest = lst[1]\n  for i = 2, #lst do\n    if lst[i]\
    \ > largest then\n      largest = lst[i]\n    end\n    if lst[i] < smallest then\n\
    \      smallest = lst[i]\n    end\n  end\n  return {largest, smallest}\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
