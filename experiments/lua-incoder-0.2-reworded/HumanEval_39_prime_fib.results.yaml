language: lua
name: HumanEval_39_prime_fib
results:
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i <= n do\n    local p = prime_fib(i - 1)\n    if p * p > i then\
    \ return i end\n    i = i + 2\n  end\n  return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpst9ypl62.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpst9ypl62.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_hf72ao.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy_hf72ao.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function f(n)\n    if n == 1 then\n      return 1\n    end\n    if n\
    \ == 2 then\n      return 2\n    end\n    if n % 2 == 0 then\n      return f(n\
    \ - 1) + f(n - 2)\n    end\n    return f(n - 1) + f(n - 3)\n  end\n  return f(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn2d89w_.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqn2d89w_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = {\n    [1] = 1,\n    [2] = 1,\n  }\n  for i = 2, n do\n    fibs[i]\
    \ = fibs[i-1] + fibs[i-2]\n  end\n  return fibs[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqao0ssyf.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqao0ssyf.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local a = {}\n  local b = {}\n  local c = 0\n  local i = 1\n  while i <= n\
    \ do\n    table.insert(a, i)\n    table.insert(b, i)\n    i = i + 2\n  end\n \
    \ local j = 1\n  while j <= n do\n    if a[j] == b[j] then\n      c = c + a[j]\n\
    \      j = j + 1\n    else\n      if a[j] > b[j] then\n        local k = a[j]\n\
    \        a[j] = b[j]\n        b[j] = k\n      else\n        local k = b[j]\n \
    \       a[j] = b[j]\n        b[j] = k\n      end\n    end\n  end\n  return c\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsib01zq5.lua:45:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpsib01zq5.lua:45: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local m =\
    \ math.floor(math.sqrt(n))\n  if m == 1 then return n end\n  if m == 2 then return\
    \ prime_fib(n - 1) + prime_fib(n - 2) end\n  local a = prime_fib(n - 1)\n  local\
    \ b = prime_fib(n - 2)\n  return prime_fib(n + 1) + prime_fib(n + 2) + a * b\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjthyx1b2.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjthyx1b2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  end\n\
    \  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return prime_fib(n\
    \ / i) + prime_fib(n / i + 1)\n    end\n    i = i + 2\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv0gcf19.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyv0gcf19.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local e = 1\n  while e < n do\n    local f =\
    \ prime_fib(n / 2)\n    a = a + b\n    b = c + d\n    c = f + e\n    d = e + f\n\
    \    e = a + b\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj344g6kp.lua:36:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpj344g6kp.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_hf72ao.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy_hf72ao.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_hlblqbg.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_hlblqbg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 1 then return 2 end\n  if n == 2 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  while d <= n do\n    local tmp = a + b\n    a\
    \ = b\n    b = tmp + c\n    c = d\n    d = tmp\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy3taegwf.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy3taegwf.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_hf72ao.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy_hf72ao.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local m = a\n  while m <= b do\n    if m % 2\
    \ == 0 then\n      m = m + 1\n    else\n      if m > c then\n        m = m + 1\n\
    \      else\n        if m > d then\n          m = m + 1\n        else\n      \
    \    m = m + 2\n        end\n      end\n    end\n  end\n  return m\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphc20r8us.lua:43:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmphc20r8us.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0z96hc6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0z96hc6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local fib_n = prime_fib(n / 2)\n  return\
    \ fib_n + prime_fib(n / 3)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4p71w0_v.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4p71w0_v.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return n end\n  -- Recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- Recursive case\n  if n == 2 then return 3 end\n  --\
    \ Recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- Recursive\
    \ case\n  return prime_fib(3 * n + 1) - 1 -- n is odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8jap_6ar.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8jap_6ar.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local i = 3\n  while i * i <= n do\n \
    \   if n % i == 0 then return prime_fib(i * 3) end\n    i = i + 2\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcrddw3gj.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpcrddw3gj.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  if n % 3 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) + prime_fib(n - 3) end\n  -- recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprfw3hqrw.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprfw3hqrw.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    local result = prime_fib(n - 1)\n\
    \    return result + result\n  end\n  -- recursive case\n  local result = prime_fib(n\
    \ - 2)\n  return result + result + 1\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwr1elzl1.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwr1elzl1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n ==\
    \ 2 then return 2 end\n  -- Recursive case\n  if n == 3 then return 3 end\n  --\
    \ Recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- Recursive\
    \ case\n  return prime_fib(3 * n + 1) - 1 -- n is odd\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8k1ti_me.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8k1ti_me.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 then return true end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 4, n / 2, 2 do\n      if n % i == 0 then return false end\n    end\n    return\
    \ true\n  end\n  local function prime_fib(n)\n    local function is_prime(n)\n\
    \      if n == 1 then return true end\n      if n == 2 then return true end\n\
    \      if n % 2 == 0 then return false end\n      for i = 4, n / 2, 2 do\n   \
    \     if n % i == 0 then return false end\n      end\n      return true\n    end\n\
    \    local function prime_fib(n)\n      local function is_prime(n)\n        if\
    \ n == 1 then return true end\n        if n == 2 then return true end\n      \
    \  if n % 2 == 0 then return false end\n        for i = 4, n / 2, 2 do\n     \
    \     if n % i == 0 then return false end\n        end\n        return true\n\
    \      end\n      local function prime_fib(n)\n        local function is_prime(n)\n\
    \          if n == 1 then return true end\n          if n == 2 then return true\
    \ end\n          if n % 2 == 0 then return false end\n          for i = 4, n /\
    \ 2, 2 do\n            if n % i == 0 then return false end\n          end\n  \
    \        return true\n        end\n        local function prime_fib(n)\n     \
    \     local function is_prime(n)\n            if n == 1 then return true end\n\
    \            if n == 2 then return true end\n            if n % 2 == 0 then return\
    \ false end\n            for i = 4, n / 2, 2 do\n              if n % i == 0 then\
    \ return false end\n            end\n            return true\n          end\n\
    \          local function prime_fib(n)\n            local function is_prime(n)\n\
    \              if n == 1 then return true end\n              if n == 2 then return\
    \ true end\n              if n % 2 == 0 then return false end\n              for\
    \ i = 4, n / 2, 2 do\n                if n % i == 0 then return false end\n  \
    \            end\n              return true\n            end\n            local\
    \ function prime_fib(n)\n              local function is_prime(n)\n          \
    \      if n == 1 then return true end\n                if n == 2 then return true\
    \ end\n                if n % 2 == 0 then return false end\n                for\
    \ i = 4, n / 2, 2 do\n                  if n % i == 0 then return false end\n\
    \                end\n                return true\n              end\n       \
    \       local function prime_fib(n)\n                local function is_prime(n)\n\
    \                  if n == 1 then return true end\n                  if n == 2\
    \ then return true end\n                  if n % 2 == 0 then return false end\n\
    \                  for i = 4, n \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3j1u23o8.lua:88: ''do'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n == 2 then\n    return 1\n  elseif n\
    \ == 3 then\n    return 2\n  else\n    local fibs = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    return fibs and fibs or n\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprhhf6znr.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmprhhf6znr.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6m1btr.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppf6m1btr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local m =\
    \ math.floor(math.sqrt(n))\n  if n % m == 0 then\n    return prime_fib(n / m)\
    \ + prime_fib(n / m + 1)\n  else\n    return prime_fib(n / m) + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i7669i2.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1i7669i2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    local\
    \ tmp = fib[i]\n    fib[i] = fib[i - 1] + fib[i - 2]\n    fib[i - 2] = tmp\n \
    \ end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5rmljis.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe5rmljis.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 3\n  else\n    local fibs = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    return fibs and fibs or n\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppw2q3s7y.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppw2q3s7y.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp136r4e3d.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp136r4e3d.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xplxjsc.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3xplxjsc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6m1btr.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppf6m1btr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local f = prime_fib(n / 2)\n  if n % f\
    \ == 0 then return f end\n  return prime_fib(n / 2) + 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw7784vad.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpw7784vad.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local fibs = prime_fib(n / 2)\n  local\
    \ fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n / 3)\n  local fibs_4\
    \ = prime_fib(n / 4)\n  local fibs_5 = prime_fib(n / 5)\n  local fibs_6 = prime_fib(n\
    \ / 6)\n  local fibs_7 = prime_fib(n / 7)\n  local fibs_8 = prime_fib(n / 8)\n\
    \  local fibs_9 = prime_fib(n / 9)\n  local fibs_10 = prime_fib(n / 10)\n  local\
    \ fibs_11 = prime_fib(n / 11)\n  local fibs_12 = prime_fib(n / 12)\n  local fibs_13\
    \ = prime_fib(n / 13)\n  local fibs_14 = prime_fib(n / 14)\n  local fibs_15 =\
    \ prime_fib(n / 15)\n  local fibs_16 = prime_fib(n / 16)\n  local fibs_17 = prime_fib(n\
    \ / 17)\n  local fibs_18 = prime_fib(n / 18)\n  local fibs_19 = prime_fib(n /\
    \ 19)\n  local fibs_20 = prime_fib(n / 20)\n  local fibs_21 = prime_fib(n / 21)\n\
    \  local fibs_22 = prime_fib(n / 22)\n  local fibs_23 = prime_fib(n / 23)\n  local\
    \ fibs_24 = prime_fib(n / 24)\n  local fibs_25 = prime_fib(n / 25)\n  local fibs_26\
    \ = prime_fib(n / 26)\n  local fibs_27 = prime_fib(n / 27)\n  local fibs_28 =\
    \ prime_fib(n / 28)\n  local fibs_29 = prime_fib(n / 29)\n  local fibs_30 = prime_fib(n\
    \ / 30)\n  local fibs_31 = prime_fib(n / 31)\n  local fibs_32 = prime_fib(n /\
    \ 32)\n  local fibs_33 = prime_fib(n / 33)\n  \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3cmkk2bb.lua:68: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm3hjs2oe.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm3hjs2oe.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6m1btr.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppf6m1btr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpifsdssxo.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n < 5\
    \ then return prime_fib(n - 1) + prime_fib(n - 2) end\n  -- base case\n  if n\
    \ < 10 then return prime_fib(n - 1) + prime_fib(n - 2) end\n  -- recursive case\n\
    \  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n\
    \ - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqx1pwym.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwqx1pwym.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1no85bq.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu1no85bq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  local m = prime_fib(n - 1)\n  -- recursive case\n  if n %\
    \ 2 == 0 then\n    return m + prime_fib(n / 2)\n  else\n    return m * prime_fib(n\
    \ / 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibs55v_4.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpibs55v_4.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return n\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa9wpgt4i.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpa9wpgt4i.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 1 then return 1 end\n  if n == 2 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcc28s8yb.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = {\n    [1] = 1,\n    [2] = 1,\n  }\n  local i = 3\n  while i <=\
    \ n do\n    fibs[i] = fibs[i-1] + fibs[i-2]\n    i = i + 2\n  end\n  return fibs[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4gtr9atc.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4gtr9atc.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {1, 1, 1}\n  for i = 2, n do\n    fib[i] = fib[i - 1] + fib[i -\
    \ 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd53g0dy0.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd53g0dy0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_hf72ao.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy_hf72ao.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  while d < n do\n    local t = a + b\n    a =\
    \ b\n    b = t\n    c = c + d\n    d = t\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp19uus29y.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp19uus29y.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1no85bq.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu1no85bq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  if n % 5 == 0 then return prime_fib(n\
    \ / 5) end\n  return prime_fib(n / 2) + prime_fib(n / 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpar0j2gee.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpar0j2gee.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 5\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - i)\n    end\n\
    \    i = i + 2\n  end\n  return prime_fib(n / 2) + prime_fib(n / 3)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu_xkt2fh.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu_xkt2fh.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6m1btr.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppf6m1btr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = { [1] = 1 }\n  for i = 2, n do\n    fibs[i] = fibs[i-1] + fibs[i-2]\n\
    \  end\n  return fibs[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwgvzylkf.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwgvzylkf.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- recursive\
    \ case\n  if n % 3 == 0 then return prime_fib(n / 3) end\n  -- recursive case\n\
    \  return prime_fib(n / 2) + prime_fib(n / 3)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn_5hin40.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpn_5hin40.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  end\n\
    \  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return prime_fib(n\
    \ / i) + prime_fib(n / i + 1)\n    end\n    i = i + 2\n  end\n  return n\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyv0gcf19.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyv0gcf19.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0z96hc6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return prime_fib(n * n) + prime_fib(n - 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx4m04q4.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyx4m04q4.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpifsdssxo.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = { [1] = 3, [2] = 5, [3] = 8, [4] = 13, \n                [5] =\
    \ 21, [6] = 55, [7] = 89, [8] = 143, \n                [9] = 233, [10] = 377,\
    \ [11] = 611, \n                [12] = 839, [13] = 1095, [14] = 1465, \n     \
    \           [15] = 1613, [16] = 1749, [17] = 1894}\n  local fib\n  if n <= 1 then\
    \ return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then return 3 end\n\
    \  if n == 4 then return 5 end\n  if n == 5 then return 8 end\n  if n == 6 then\
    \ return 13 end\n  if n == 7 then return 21 end\n  if n == 8 then return 55 end\n\
    \  if n == 9 then return 89 end\n  if n == 10 then return 143 end\n  if n == 11\
    \ then return 233 end\n  if n == 12 then return 377 end\n  if n == 13 then return\
    \ 611 end\n  if n == 14 then return 839 end\n  if n == 15 then return 1095 end\n\
    \  if n == 16 then return 1465 end\n  if n == 17 then return 1613 end\n  if n\
    \ == 18 then return 1749 end\n  if n == 19 then return 1894 end\n  \n  -- if n\
    \ is prime then return n\n  if fibs[n] ~= nil then return fibs[n] end\n  \n  --\
    \ if n is even then return fibonacci(n-1) + fibonacci(n-2)\n  if n % 2 == 0 then\n\
    \    local fib1 = prime_fib(n - 1)\n    local fib2 = prime_fib(n - 2)\n    return\
    \ fib1 + fib2\n  end\n  \n  -- if n is odd then return fibonacci(n-1) + fibonacci(n-2)\n\
    \  fib1 = prime_fib(n - 1)\n  fib2 = prime_fib(n - 2)\n  return fib1 + fib2 +\
    \ fib1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_exvx03_.lua:58:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_exvx03_.lua:58: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0z96hc6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy369gt22.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy369gt22.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n < 2 then return false end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    local i\
    \ = 3\n    while i * i <= n do\n      if n % i == 0 then return false end\n  \
    \    i = i + 2\n    end\n    return true\n  end\n  local function fib(n)\n   \
    \ if n < 2 then return n end\n    return fib(n-1) + fib(n-2)\n  end\n  local function\
    \ prime_fib(n)\n    local fibs = { }\n    fibs[1] = 1\n    fibs[2] = 2\n    for\
    \ i = 4, n do\n      fibs[i] = fibs[i-1] + fibs[i-2]\n    end\n    return fibs[n]\n\
    \  end\n  return prime_fib(n)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm16jr0ex.lua:43:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm16jr0ex.lua:43: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local i = 3\n  while i * i <= n do\n \
    \   if n % i == 0 then return prime_fib(i * 3) end\n    i = i + 2\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhzuaf7f.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpvhzuaf7f.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local m = math.floor(math.sqrt(n))\n  if n % m == 0 then\n    return\
    \ prime_fib(n / m) + prime_fib(n / m + 1)\n  else\n    return prime_fib(n / m)\
    \ + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4vwb4yvz.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp4vwb4yvz.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x9qz5h1.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3x9qz5h1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  while d <= n do\n    if n % d == 0 then\n   \
    \   a = b\n      b = c\n      c = d\n      d = n\n    end\n    d = d + 1\n  end\n\
    \  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yl37rhu.lua:36:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_yl37rhu.lua:36: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 2 end\n  -- recursive case\n  if n == 3 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2i818xta.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp2i818xta.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 3) + prime_fib(n - 2)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpffg8eeex.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpffg8eeex.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local m =\
    \ math.floor(math.sqrt(n) + 1)\n  if n % m == 0 then\n    return prime_fib(n /\
    \ m) + prime_fib(n / m) -- fibonacci number\n  else\n    return prime_fib(n /\
    \ m) -- prime\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp48cv7plt.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp48cv7plt.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n - 1)\n    return\
    \ m + m\n  end\n  -- recursive case\n  local m = prime_fib(n - 2)\n  return m\
    \ + m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpun9dghp1.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpun9dghp1.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_hf72ao.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy_hf72ao.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1no85bq.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu1no85bq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local p = a\n  local q = b\n  while q < n do\n\
    \    if n % q == 0 then\n      p = p + q\n      q = c\n      c = d\n      d =\
    \ p\n    end\n    q = q + 2\n  end\n  return p\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe7p10zvz.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe7p10zvz.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 11 then\n    return 3\n  elseif n < 17 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_pboz5q.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq_pboz5q.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function f(n)\n    if n == 1 then\n      return 1\n    end\n    if n\
    \ == 2 then\n      return 2\n    end\n    if n % 2 == 0 then\n      return f(n\
    \ - 1) + f(n - 2)\n    end\n    return f(n - 1) + f(n - 3)\n  end\n  return f(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqn2d89w_.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqn2d89w_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_hf72ao.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy_hf72ao.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i <= n do\n    i = i + 2\n    if i % 2 == 0 then return i end\n \
    \ end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwa_6cegd.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwa_6cegd.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = {\n    [1] = 0,\n    [2] = 1,\n  }\n  for i = 2, n do\n    fibs[i]\
    \ = fibs[i-1] + fibs[i-2]\n  end\n  return fibs[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyowegeau.lua:26:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpyowegeau.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  while c < n do\n    c = a + b\n    a = b\n    b = c\n  end\n  return b\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkysikgs7.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkysikgs7.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  else\n \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rn2i4kg.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0rn2i4kg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n < 3 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  elseif n % 2 == 0 then\n    return prime_fib(n - 1)\
    \ + prime_fib(n - 3)\n  else\n    return prime_fib(n - 2) + prime_fib(n - 3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv6f1ppw1.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpv6f1ppw1.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  local i = 3\n  while i <= n do\n\
    \    fib[i] = fib[i - 1] + fib[i - 2]\n    i = i + 2\n  end\n  return fib[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhlhvj45.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfhlhvj45.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i) + prime_fib(n - i)\n    end\n   \
    \ i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5ariqf6m.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp5ariqf6m.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * i) + prime_fib(n\
    \ / i) end\n    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgblxewzn.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgblxewzn.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x9qz5h1.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3x9qz5h1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 then\n      return true\n    end\n\
    \    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n    \
    \  return false\n    end\n    for i = 4, n, 2 do\n      if n % i == 0 then\n \
    \       return false\n      end\n    end\n    return true\n  end\n  local function\
    \ prime_fib_helper(n)\n    if n == 1 then\n      return 2\n    end\n    if n ==\
    \ 2 then\n      return 3\n    end\n    if n % 2 == 0 then\n      return prime_fib_helper(n\
    \ - 1) + prime_fib_helper(n - 2)\n    end\n    local i = 3\n    while i * i <=\
    \ n do\n      if n % i == 0 then\n        return prime_fib_helper(n - 1) + prime_fib_helper(n\
    \ - 2)\n      end\n      i = i + 2\n    end\n    return n\n  end\n  return prime_fib_helper(n)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_yd8jhn_.lua:57:\
    \ expected: 5, actual: 3\nstack traceback:\n\t/tmp/tmp_yd8jhn_.lua:57: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- Recursive case\n  if n == 3 then return 2 end\n  --\
    \ Recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n - 1)\n    return\
    \ m + m\n  end\n  -- Recursive case\n  local m = prime_fib(n - 2)\n  return m\
    \ + m\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd15_9v_p.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpd15_9v_p.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local t = a\n  while b < n do\n    t = b\n  \
    \  b = c\n    c = d\n    d = t + d\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp74gae37w.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp74gae37w.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  else\n \
    \   return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0rn2i4kg.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0rn2i4kg.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0z96hc6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x9qz5h1.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3x9qz5h1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppn_m5u5i.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then\n    return 1\n  else\n    -- Recursive case\n\
    \    if n % 2 == 0 then\n      return prime_fib(n - 1) + prime_fib(n - 2)\n  \
    \  else\n      return prime_fib(n - 1)\n    end\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6xryg6to.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp6xryg6to.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmg0bdwg.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpgmg0bdwg.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return n end\n  -- Recursive case\n  if n < 5\
    \ then return prime_fib(n - 1) + prime_fib(n - 2) end\n  -- Recursive case\n \
    \ return prime_fib(n - 5) + prime_fib(n - 4)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy38tzwyr.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy38tzwyr.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppn_m5u5i.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  while b < c do\n    local m = b + c\n    if m > n then break end\n    if m\
    \ == n then return m end\n    if m % 2 == 0 then a = a + m end\n    local t =\
    \ b\n    b = c\n    c = t\n  end\n  return a\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzsv5il68.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzsv5il68.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local fibs = prime_fib(n / 2)\n  local\
    \ fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n / 2)\n  local fibs_4\
    \ = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n  local fibs_6 = prime_fib(n\
    \ / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local fibs_8 = prime_fib(n / 2)\n\
    \  local fibs_9 = prime_fib(n / 2)\n  local fibs_10 = prime_fib(n / 2)\n  local\
    \ fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n / 2)\n  local fibs_13\
    \ = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n  local fibs_15 = prime_fib(n\
    \ / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local fibs_17 = prime_fib(n / 2)\n\
    \  local fibs_18 = prime_fib(n / 2)\n  local fibs_19 = prime_fib(n / 2)\n  local\
    \ fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n / 2)\n  local fibs_22\
    \ = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n  local fibs_24 = prime_fib(n\
    \ / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local fibs_26 = prime_fib(n / 2)\n\
    \  local fibs_27 = prime_fib(n / 2)\n  local fibs_28 = prime_fib(n / 2)\n  local\
    \ fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n / 2)\n  local fibs_31\
    \ = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n  local fibs_33 = prime_fib(n\
    \ / 2)\n  local fibs_34 = prime_fi\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp67r3takt.lua:68: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  if fibs_2 == 1 then\
    \ return fibs end\n  local fibs_3 = prime_fib(n / 2)\n  if fibs_3 == 1 then return\
    \ fibs + fibs_2 end\n  local fibs_4 = prime_fib(n / 2)\n  if fibs_4 == 1 then\
    \ return fibs + fibs_2 + fibs_3 end\n  local fibs_5 = prime_fib(n / 2)\n  if fibs_5\
    \ == 1 then return fibs + fibs_2 + fibs_3 + fibs_4 end\n  return fibs + fibs_2\
    \ + fibs_3 + fibs_4 + fibs_5\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7txz60t8.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7txz60t8.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 11 then\n    return 3\n  elseif n < 17 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_pboz5q.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq_pboz5q.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  else\n    return prime_fib(n - 1) + prime_fib(n -\
    \ 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiypj2ywt.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpiypj2ywt.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy369gt22.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy369gt22.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  end\n  if n == 1 then\n    return 2\n  end\n\
    \  if n == 2 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(n / i) + prime_fib(n / i - 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2y5i1au.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_2y5i1au.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 11 then\n    return 3\n  elseif n < 17 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_pboz5q.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpq_pboz5q.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  elseif n % 2 == 0 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj52sjz8.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkj52sjz8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 2 end\n  -- recursive case\n  if n == 2 then return 3 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  -- recursive\
    \ case\n  local m = math.floor(math.sqrt(n))\n  return prime_fib(m) * prime_fib(m\
    \ - 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpas8h1hv6.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpas8h1hv6.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return n\n  end\n  -- recursive case\n \
    \ if n == 1 then\n    return 2\n  end\n  -- recursive case\n  if n == 2 then\n\
    \    return 3\n  end\n  -- recursive case\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  -- recursive case\n  if n % 3 == 0 then\n\
    \    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n  end\n  --\
    \ recursive case\n  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n -\
    \ 3) + prime_fib(n - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkgvjlfba.lua:40:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkgvjlfba.lua:40: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  while d < n do\n    local tmp = a + b\n    a\
    \ = b\n    b = tmp + c\n    c = d\n    d = tmp\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpswq0_9rl.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpswq0_9rl.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local m = a\n  while m <= b do\n    if m % 2\
    \ == 0 then\n      local t = m\n      m = c + t\n      c = t\n    else\n     \
    \ local t = m\n      m = d + t\n      d = t\n    end\n  end\n  return m\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8flm0rep.lua:39:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8flm0rep.lua:39: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 then return true end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 4, n, 2 do\n      if n % i == 0 then return false end\n    end\n    return true\n\
    \  end\n  local function fib(n)\n    if n == 1 then return 1 end\n    return fib(n-1)\
    \ + fib(n-2)\n  end\n  local function fib_prime(n)\n    if n == 1 then return\
    \ 1 end\n    if n == 2 then return true end\n    if n % 2 == 0 then return false\
    \ end\n    for i = 4, n, 2 do\n      if n % i == 0 then return false end\n   \
    \ end\n    return true\n  end\n  local function fib_prime_iterative(n)\n    local\
    \ function is_prime(n)\n      if n == 1 then return true end\n      if n == 2\
    \ then return true end\n      if n % 2 == 0 then return false end\n      for i\
    \ = 4, n, 2 do\n        if n % i == 0 then return false end\n      end\n     \
    \ return true\n    end\n    local function fib(n)\n      if n == 1 then return\
    \ 1 end\n      return fib(n-1) + fib(n-2)\n    end\n    local function fib_prime(n)\n\
    \      if n == 1 then return 1 end\n      if n == 2 then return true end\n   \
    \   if n % 2 == 0 then return false end\n      for i = 4, n, 2 do\n        if\
    \ n % i == 0 then return false end\n      end\n      return true\n    end\n  \
    \  local function fib_prime_iterative(n)\n      local function is_prime(n)\n \
    \       if n == 1 then return true end\n        if n == 2 then return true end\n\
    \        if n % 2 == 0 then return false end\n        for i = 4, n, 2 do\n   \
    \       if n % i == 0 then return false end\n        end\n        return true\n\
    \      end\n      local function fib(n)\n        if n == 1 then return 1 end\n\
    \        return fib(n-1) + fib(n-2)\n      end\n      local function fib_prime(n)\n\
    \        if n == 1 then return 1 end\n        if n == 2 then return true end\n\
    \        if n % 2 == 0 then return false end\n        for i = 4, n, 2 do\n   \
    \       if n % i == 0 then return false end\n        end\n        return true\n\
    \      end\n      local function fib_prime_iterative(n)\n        local function\
    \ is_prime(n)\n          if n == 1 then return true end\n          if n == 2 then\
    \ return true end\n          if n % 2 == 0 then return false end\n          for\
    \ i = 4, n, 2 do\n            if n % i == 0 then return false end\n          end\n\
    \          return true\n        end\n        local function fib(n)\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpg0itlxfq.lua:109: ''end'' expected (to close ''function''
    at line 91) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local p = a\n  local q = b\n  while q < n do\n\
    \    local tmp = q\n    q = p\n    p = c + d\n    d = tmp\n  end\n  return p\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3fb1lw99.lua:35:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3fb1lw99.lua:35: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {[1]=1;[2]=1;[3]=1}\n  for i=4,n,1 do\n    fib[i] = fib[i-1] +\
    \ fib[i-2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpppqkgl6k.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpppqkgl6k.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  local fibs = prime_fib(n - 1)\n  local fibs_2 = prime_fib(n\
    \ - 2)\n  return fibs + fibs_2\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7_hurvw0.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7_hurvw0.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  if n % 3 == 0 then return prime_fib(n - 1) +\
    \ prime_fib(n - 2) + prime_fib(n - 3) end\n  -- recursive case\n  return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmptnev3qdk.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmptnev3qdk.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(n / i) + prime_fib(n / i - 1)\n    end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyg_jbuem.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyg_jbuem.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    local fibs = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    return fibs and fibs or n\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy70qlmow.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy70qlmow.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7ll7n11.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpz7ll7n11.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cstj32d.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_cstj32d.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  local i = 3\n  while i <= n do\n\
    \    fib[i] = fib[i - 1] + fib[i - 2]\n    i = i + 2\n  end\n  return fib[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfhlhvj45.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpfhlhvj45.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local a = prime_fib(n / 2)\n  local b\
    \ = prime_fib(n / 3)\n  return a + b\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuz24m2wz.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpuz24m2wz.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local a =\
    \ prime_fib(n / 2)\n  local b = prime_fib(n / 2)\n  local c = prime_fib(n / 2)\n\
    \  local d = prime_fib(n / 2)\n  local m = a\n  while m <= b do\n    if m % 2\
    \ == 0 then\n      if m > c then return m end\n      c = m\n    else\n      if\
    \ m > d then return m end\n      d = m\n    end\n    m = a + b\n  end\n  return\
    \ d\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnn9722vj.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpnn9722vj.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i <= n do\n    if n % i == 0 then\n      return prime_fib(n / i)\
    \ + 1\n    end\n    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0g3w70tv.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0g3w70tv.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function fib(n)\n    if n < 2 then\n      return n\n    end\n    return\
    \ fib(n-1) + fib(n-2)\n  end\n  return fib(n - 1)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_2gd__qx.lua:25:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmp_2gd__qx.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppn_m5u5i.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i <= n do\n    local m = math.floor(math.sqrt(i))\n\
    \    if i % m == 0 then\n      return i\n    end\n    i = i + 2\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz27j0sz_.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpz27j0sz_.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {\n    [1] = 0,\n    [2] = 1,\n  }\n  local i = 3\n  while i <=\
    \ n do\n    fib[i] = fib[i - 1] + fib[i - 2]\n    i = i + 1\n  end\n  return fib[n]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpoecg0oa2.lua:28:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpoecg0oa2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i <= n do\n    local p = prime_fib(i - 1)\n    if\
    \ p * p > i then return i end\n    i = i + 2\n  end\n  return i\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdg56hb__.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpdg56hb__.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local a = prime_fib(n - 1)\n  local b = prime_fib(n - 2)\n  return b\
    \ + a end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp79q6_4rd.lua:20: ''<eof>'' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xplxjsc.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3xplxjsc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(n\
    \ / i) + prime_fib(n / i + 1) end\n    i = i + 2\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76saup2i.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp76saup2i.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = fib[1]\n  for i = 4, n do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j7kt1cj.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7j7kt1cj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppf6m1btr.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppf6m1btr.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 5\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return prime_fib(n - 1) + prime_fib(n - 2)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkme154b8.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkme154b8.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3xplxjsc.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3xplxjsc.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cstj32d.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_cstj32d.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 2 end\n  if n == 3 then\
    \ return 3 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return\
    \ prime_fib(n / i) + prime_fib(n / i + 1)\n    end\n    i = i + 2\n  end\n  return\
    \ n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9r1nr43.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpi9r1nr43.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy369gt22.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy369gt22.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then return 1 end\n  -- Recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- Recursive case\n  if n == 3 then return 2 end\n  --\
    \ Recursive case\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n -\
    \ 2) end\n  -- Recursive case\n  return prime_fib(n - 1) + prime_fib(n - 3)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppfd830ds.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppfd830ds.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fib = fibs + fibs + 1\n  return fib\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpka8ug0my.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpka8ug0my.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n do\n    fib[i] =\
    \ fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy_hf72ao.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy_hf72ao.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- Base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphfb3jk1y.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function f(n)\n    if n < 2 then return 1 end\n    local m = n % 2\n\
    \    return f(n - 1) + f(n - 2)\n  end\n  return f(n)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwvzk_4bt.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwvzk_4bt.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n == 1 then\n      return true\n    end\n\
    \    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n    \
    \  return false\n    end\n    local i = 3\n    while i * i <= n do\n      if n\
    \ % i == 0 then\n        return false\n      end\n      i = i + 2\n    end\n \
    \   return true\n  end\n  local function is_fibonacci(n)\n    if n == 1 then\n\
    \      return true\n    end\n    if n == 2 then\n      return true\n    end\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  local function is_prime_fibonacci(n)\n\
    \    if n == 1 then\n      return true\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    if n % 2 == 0 then\n      return false\n    end\n    local\
    \ i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return false\n\
    \      end\n      i = i + 2\n    end\n    return true\n  end\n  local function\
    \ is_fibonacci_prime(n)\n    if n == 1 then\n      return true\n    end\n    if\
    \ n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n      return\
    \ false\n    end\n    local i = 3\n    while i * i <= n do\n      if n % i ==\
    \ 0 then\n        return false\n      end\n      i = i + 2\n    end\n    return\
    \ true\n  end\n  local function is_prime_fibonacci_prime(n)\n    if n == 1 then\n\
    \      return true\n    end\n    if n == 2 then\n      return true\n    end\n\
    \    if n % 2 == 0 then\n      return false\n    end\n    local i = 3\n    while\
    \ i * i <= n do\n      if n % i == 0 then\n        return false\n      end\n \
    \     i = i + 2\n    end\n    return true\n  end\n  local function is_fibonacci_prime_fibonacci(n)\n\
    \    if n == 1 then\n      return true\n    end\n    if n == 2 then\n      return\
    \ true\n    end\n    if n % 2 == 0 then\n      return false\n    end\n    local\
    \ i = 3\n    while i * i <= n do\n      if n % i == 0 then\n        return false\n\
    \      end\n      i = i + 2\n    end\n    return true\n  end\n  local function\
    \ is_prime_fibonacci_prime_fibonacci(n)\n    if n == 1 then\n      return true\n\
    \    end\n    if n == 2 then\n      return true\n    end\n    if n % 2 == 0 then\n\
    \      return false\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphbjq7wq4.lua:137: ''end'' expected (to close ''if'' at line
    134) near ''lu''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  else\n \
    \   local fib = 1\n    local i = 1\n    while fib < n do\n      fib = fib + i\n\
    \      i = i + 2\n    end\n    return fib\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8f5z3fip.lua:31:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp8f5z3fip.lua:31: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local m = math.floor(math.sqrt(n))\n  if n % m == 0 then return prime_fib(n\
    \ - m) + prime_fib(n - m) end\n  return prime_fib(n - m)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt_dtuzp9.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpt_dtuzp9.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local fibs\
    \ = prime_fib(n / 2)\n  local fibs_2 = prime_fib(n / 2)\n  local fibs_3 = prime_fib(n\
    \ / 2)\n  local fibs_4 = prime_fib(n / 2)\n  local fibs_5 = prime_fib(n / 2)\n\
    \  local fibs_6 = prime_fib(n / 2)\n  local fibs_7 = prime_fib(n / 2)\n  local\
    \ fibs_8 = prime_fib(n / 2)\n  local fibs_9 = prime_fib(n / 2)\n  local fibs_10\
    \ = prime_fib(n / 2)\n  local fibs_11 = prime_fib(n / 2)\n  local fibs_12 = prime_fib(n\
    \ / 2)\n  local fibs_13 = prime_fib(n / 2)\n  local fibs_14 = prime_fib(n / 2)\n\
    \  local fibs_15 = prime_fib(n / 2)\n  local fibs_16 = prime_fib(n / 2)\n  local\
    \ fibs_17 = prime_fib(n / 2)\n  local fibs_18 = prime_fib(n / 2)\n  local fibs_19\
    \ = prime_fib(n / 2)\n  local fibs_20 = prime_fib(n / 2)\n  local fibs_21 = prime_fib(n\
    \ / 2)\n  local fibs_22 = prime_fib(n / 2)\n  local fibs_23 = prime_fib(n / 2)\n\
    \  local fibs_24 = prime_fib(n / 2)\n  local fibs_25 = prime_fib(n / 2)\n  local\
    \ fibs_26 = prime_fib(n / 2)\n  local fibs_27 = prime_fib(n / 2)\n  local fibs_28\
    \ = prime_fib(n / 2)\n  local fibs_29 = prime_fib(n / 2)\n  local fibs_30 = prime_fib(n\
    \ / 2)\n  local fibs_31 = prime_fib(n / 2)\n  local fibs_32 = prime_fib(n / 2)\n\
    \  local fibs_33 = prime_fib(n / 2)\n  local fibs_34 = prime_fib(n / 2)\n  local\
    \ fibs_35 = prime_fib(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp74_ttm80.lua:52: '')'' expected (to close ''('' at line 51)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0h8y83gz.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp0h8y83gz.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  local fib_n = prime_fib(n / 2)\n  local\
    \ fib\n  fib = fib_n + fib_n - 1\n  return fib\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjzkoznr2.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpjzkoznr2.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    local\
    \ tmp = fib[i]\n    fib[i] = fib[i - 1] + fib[i - 2]\n    fib[i - 2] = tmp\n \
    \ end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5rmljis.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe5rmljis.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return n\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwn1cpxoi.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n < 5\
    \ then return prime_fib(n - 1) + prime_fib(n - 2) end\n  -- base case\n  if n\
    \ < 10 then return prime_fib(n - 1) + prime_fib(n - 2) end\n  -- recursive case\n\
    \  return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n\
    \ - 4)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwqx1pwym.lua:26:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpwqx1pwym.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local function is_prime(n)\n    if n < 2 then return false end\n    if n ==\
    \ 2 then return true end\n    if n % 2 == 0 then return false end\n    for i =\
    \ 4, n, 2 do\n      if n % i == 0 then return false end\n    end\n    return true\n\
    \  end\n  local function fib(n)\n    if n < 2 then return n end\n    return fib(n-1)\
    \ + fib(n-2)\n  end\n  return fib(n - 1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqk045m7l.lua:32:\
    \ expected: 2, actual: 0\nstack traceback:\n\t/tmp/tmpqk045m7l.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  end\n  if n == 2 then\n    return 2\n  end\n\
    \  if n == 3 then\n    return 3\n  end\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  local i = 3\n  while i * i <= n do\n    if\
    \ n % i == 0 then\n      return prime_fib(i * i) + prime_fib(n - 1)\n    end\n\
    \    i = i + 2\n  end\n  return prime_fib(n * n) + prime_fib(n - 1)\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyx4m04q4.lua:38:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpyx4m04q4.lua:38: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1no85bq.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu1no85bq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0z96hc6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  elseif n % 2 == 0 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkj52sjz8.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpkj52sjz8.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n == 2 then\n    return 2\n  elseif n\
    \ == 3 then\n    return 5\n  else\n    local m = prime_fib(n - 1)\n    return\
    \ m + (m % n)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk380bg71.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpk380bg71.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(n\
    \ / i) + prime_fib(n / i + 1) end\n    i = i + 2\n  end\n  return n\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp76saup2i.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp76saup2i.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = 2\n  for i = 4, n, 1 do\n    local\
    \ tmp = fib[i]\n    fib[i] = fib[i - 1] + fib[i - 2]\n    fib[i - 2] = tmp\n \
    \ end\n  return fib[n]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe5rmljis.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpe5rmljis.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  elseif n < 5 then\n    return prime_fib(n -\
    \ 1) + prime_fib(n - 2)\n  else\n    return prime_fib(n - 1) + prime_fib(n - 3)\
    \ + prime_fib(n - 5)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp136r4e3d.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp136r4e3d.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return n end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local i = 3\n  while i <= n do\n    if n % i == 0 then return prime_fib(i\
    \ - 1) + prime_fib(i - 2) end\n    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppnv50qu_.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmppnv50qu_.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1no85bq.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu1no85bq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local m =\
    \ math.floor(math.sqrt(n))\n  if n % m == 0 then\n    return prime_fib(n / m)\
    \ + prime_fib(n / m + 1)\n  else\n    return prime_fib(n / m) + 1\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1i7669i2.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp1i7669i2.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  local m = math.floor(math.sqrt(n))\n  if n % m == 0 then\n    return\
    \ prime_fib(n / m) + prime_fib(n / m) + prime_fib(n / m)\n  else\n    return prime_fib(n\
    \ / m) + prime_fib(n / m) + prime_fib(n / m) + prime_fib(n / m)\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = prime_fib\n\
    \    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2), 3)\n\
    \    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4), 13)\n\
    \    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6), 233)\n\
    \    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8), 28657)\n\
    \    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpig6v7r2y.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpig6v7r2y.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local a = {}\n  local b = {}\n  local c = {}\n  local d = {}\n  local e = {}\n\
    \  local f = {}\n  local g = {}\n  local h = {}\n  local i = 1\n  while i <= n\
    \ do\n    local j = 1\n    while j <= i do\n      table.insert(a, i)\n      table.insert(b,\
    \ j)\n      table.insert(c, j)\n      table.insert(d, j)\n      table.insert(e,\
    \ j)\n      table.insert(f, j)\n      table.insert(g, j)\n      table.insert(h,\
    \ j)\n      j = j + 1\n    end\n    i = i + 1\n  end\n  local j = 1\n  while j\
    \ <= n do\n    local k = 1\n    while k <= n do\n      if a[k] == b[k] then\n\
    \        table.insert(c, a[k])\n        table.insert(d, b[k])\n        table.insert(e,\
    \ a[k])\n        table.insert(f, a[k])\n        table.insert(g, a[k])\n      \
    \  table.insert(h, a[k])\n        k = k + 1\n      else\n        local l = 1\n\
    \        while l <= n do\n          if a[k] == c[l] then\n            table.insert(d,\
    \ a[k])\n            table.insert(e, a[k])\n            table.insert(f, a[k])\n\
    \            table.insert(g, a[k])\n            table.insert(h, a[k])\n      \
    \      k = k + 1\n          elseif a[k] == d[l] then\n            table.insert(e,\
    \ a[k])\n            table.insert(f, a[k])\n            table.insert(g, a[k])\n\
    \            table.insert(h, a[k])\n            k = k + 1\n          elseif a[k]\
    \ == e[l] then\n            table.insert(f, a[k])\n            table.insert(g,\
    \ a[k])\n            table.insert(h, a[k])\n            k = k + 1\n          elseif\
    \ a[k] == f[l] then\n            table.insert(g, a[k])\n            table.insert(h,\
    \ a[k])\n            k = k + 1\n          elseif a[k] == g[l] then\n         \
    \   table.insert(h, a[k])\n            k = k + 1\n          else\n           \
    \ k = k + 1\n          end\n          l = l + 1\n        end\n        k = k +\
    \ 1\n      end\n      j = j + 1\n    end\n    j = j + 1\n  end\n  local m = 1\n\
    \  while m <= n do\n    if h[m] == m then\n      m = m + 1\n    else\n      local\
    \ n = 1\n      while n <= n do\n        if h[m] == h[n] then\n          m = m\
    \ + 1\n        else\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp86e962c1.lua:115: ''end'' expected (to close ''if'' at line
    95) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return n\n  else\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpys7uz23z.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpys7uz23z.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n - 1) + prime_fib(n - 2)\
    \ end\n  return prime_fib(n - 1) + prime_fib(n - 3)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_krxoumn.lua:23:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_krxoumn.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 5 then\n    return 2\n  elseif n\
    \ < 13 then\n    return 3\n  elseif n < 21 then\n    return 5\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cstj32d.lua:29:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp_cstj32d.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  if n % 3 ==\
    \ 0 then return prime_fib(n / 3) end\n  return prime_fib(3 * n + 1) + prime_fib(3\
    \ * n + 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3x9qz5h1.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp3x9qz5h1.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\n  -- recursive case\n \
    \ if n == 2 then\n    return 2\n  end\n  -- recursive case\n  if n == 3 then\n\
    \    return 5\n  end\n  -- recursive case\n  if n % 2 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2)\n  end\n  -- recursive case\n  if n % 3 == 0 then\n\
    \    return prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n  end\n  --\
    \ recursive case\n  if n % 5 == 0 then\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2) + prime_fib(n - 3) + prime_fib(n - 5)\n  end\n  -- recursive case\n  return\
    \ prime_fib(n - 1) + prime_fib(n - 2) + prime_fib(n - 3) + prime_fib(n - 5) +\
    \ prime_fib(n - 6)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjnzjv4z.lua:44:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpzjnzjv4z.lua:44: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 2 then return 1 end\n  -- recursive case\n  if n == 3 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n  end\n  -- recursive case\n  if n % 3 == 0 then\n    return prime_fib(n\
    \ - 1) + prime_fib(n - 2) + prime_fib(n - 3)\n  end\n  -- base case\n  return\
    \ prime_fib(n - 1) + prime_fib(n - 2)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmm9w1029.lua:34:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpmm9w1029.lua:34: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then return 1 end\n  -- recursive case\n  if n ==\
    \ 1 then return 1 end\n  -- recursive case\n  if n == 2 then return 2 end\n  --\
    \ recursive case\n  if n % 2 == 0 then\n    local m = prime_fib(n / 2)\n    return\
    \ m + prime_fib(n / 2)\n  end\n  -- recursive case\n  local m = prime_fib(n /\
    \ 2)\n  return prime_fib(n / 2) + m\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpg37z6a9q.lua:32:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpg37z6a9q.lua:32: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then\n      return prime_fib((n\
    \ / i) + 1)\n    end\n    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm5_qi89g.lua:30:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpm5_qi89g.lua:30: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  else\n    local fibs = prime_fib(n - 1) + prime_fib(n\
    \ - 2)\n    return fibs % n\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpitll8q_l.lua:24:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpitll8q_l.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fib = {}\n  fib[1] = 1\n  fib[2] = fib[1]\n  for i = 4, n do\n    fib[i]\
    \ = fib[i - 1] + fib[i - 2]\n  end\n  return fib[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7j7kt1cj.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmp7j7kt1cj.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\n  -- recursive case\n \
    \ if prime_fib(n-1) == 1 then\n    return n\n  end\n  -- recursive case\n  if\
    \ prime_fib(n-2) == 1 then\n    return n-1\n  end\n  -- recursive case\n  if prime_fib(n-3)\
    \ == 1 then\n    return n-2\n  end\n  -- recursive case\n  if prime_fib(n-4) ==\
    \ 1 then\n    return n-3\n  end\n  -- recursive case\n  if prime_fib(n-5) == 1\
    \ then\n    return n-4\n  end\n  -- recursive case\n  if prime_fib(n-6) == 1 then\n\
    \    return n-5\n  end\n  -- recursive case\n  if prime_fib(n-7) == 1 then\n \
    \   return n-6\n  end\n  -- recursive case\n  if prime_fib(n-8) == 1 then\n  \
    \  return n-7\n  end\n  -- recursive case\n  if prime_fib(n-9) == 1 then\n   \
    \ return n-8\n  end\n  -- recursive case\n  if prime_fib(n-10) == 1 then\n   \
    \ return n-9\n  end\n  -- recursive case\n  if prime_fib(n-11) == 1 then\n   \
    \ return n-10\n  end\n  -- recursive case\n  if prime_fib(n-12) == 1 then\n  \
    \  return n-11\n  end\n  -- recursive case\n  if prime_fib(n-13) == 1 then\n \
    \   return n-12\n  end\n  -- recursive case\n  if prime_fib(n-14) == 1 then\n\
    \    return n-13\n  end\n  -- recursive case\n  if prime_fib(n-15) == 1 then\n\
    \    return n-14\n  end\n  -- recursive case\n  if prime_fib(n-16) == 1 then\n\
    \    return n-15\n  end\n  -- recursive case\n  if prime_fib(n-17) == 1 then\n\
    \    return n-16\n  end\n  -- recursive case\n  if prime_fib(n-18) == 1 then\n\
    \    return n-17\n  end\n  -- recursive case\n  if prime_fib(n-19) == 1 then\n\
    \    return n-18\n  end\n  -- recursive case\n  if prime_fib(n-20) == 1 then\n\
    \    return n-19\n  end\n  -- recursive case\n  if prime_fib(n-21) == 1 then\n\
    \    return n-20\n  end\n  -- recursive case\n  if prime_fib(n-22) == 1 then\n\
    \    return n-21\n  end\n  -- recursive case\n  if prime_fib(n-23) == 1 then\n\
    \    return n-22\n  end\n  -- recursive case\n  if prime_fib(n-24\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5o_x3gnq.lua:111: '')'' expected (to close ''('' at line 110)
    near ''lu''

    '
  stdout: ''
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  local fibs = { 1, 1, 2 }\n  local i = 2\n  while i <= n do\n    fibs[i] = fibs[i-1]\
    \ + fibs[i-2]\n    i = i+1\n  end\n  return fibs[n]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuyap2vtk.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpuyap2vtk.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  -- base case\n  if n < 2 then\n    return 1\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_0z96hc6.lua:33: ''end'' expected (to close ''function'' at
    line 12) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then return 1 end\n  if n == 2 then return 1 end\n  if n == 3 then\
    \ return 2 end\n  if n % 2 == 0 then return prime_fib(n / 2) end\n  local i =\
    \ 3\n  while i * i <= n do\n    if n % i == 0 then return prime_fib(i * 3) end\n\
    \    i = i + 2\n  end\n  return n\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = prime_fib\n    lu.assertEquals(candidate(1), 2)\n    lu.assertEquals(candidate(2),\
    \ 3)\n    lu.assertEquals(candidate(3), 5)\n    lu.assertEquals(candidate(4),\
    \ 13)\n    lu.assertEquals(candidate(5), 89)\n    lu.assertEquals(candidate(6),\
    \ 233)\n    lu.assertEquals(candidate(7), 1597)\n    lu.assertEquals(candidate(8),\
    \ 28657)\n    lu.assertEquals(candidate(9), 514229)\n    lu.assertEquals(candidate(10),\
    \ 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpu1no85bq.lua:28:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpu1no85bq.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  else\n  \
    \  return prime_fib(n - 1) + prime_fib(n - 2)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy369gt22.lua:25:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpy369gt22.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750405
- exit_code: 1
  program: "-- prime_fib returns n-th number that is a Fibonacci number and it's also\
    \ prime.\n-- >>> prime_fib(1)\n-- 2\n-- >>> prime_fib(2)\n-- 3\n-- >>> prime_fib(3)\n\
    -- 5\n-- >>> prime_fib(4)\n-- 13\n-- >>> prime_fib(5)\n-- 89\nlocal function prime_fib(n)\n\
    \  if n < 2 then\n    return 1\n  elseif n < 3 then\n    return 2\n  elseif n\
    \ % 2 == 0 then\n    return prime_fib(n - 1) + prime_fib(n - 2)\n  else\n    return\
    \ prime_fib(n - 1) + prime_fib(n - 3)\n  end\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = prime_fib\n    lu.assertEquals(candidate(1),\
    \ 2)\n    lu.assertEquals(candidate(2), 3)\n    lu.assertEquals(candidate(3),\
    \ 5)\n    lu.assertEquals(candidate(4), 13)\n    lu.assertEquals(candidate(5),\
    \ 89)\n    lu.assertEquals(candidate(6), 233)\n    lu.assertEquals(candidate(7),\
    \ 1597)\n    lu.assertEquals(candidate(8), 28657)\n    lu.assertEquals(candidate(9),\
    \ 514229)\n    lu.assertEquals(candidate(10), 433494437)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqs8p9owf.lua:27:\
    \ expected: 2, actual: 1\nstack traceback:\n\t/tmp/tmpqs8p9owf.lua:27: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750404
