name: HumanEval_76_is_simple_power
language: lua
prompt: "-- Your task is to write a function that returns true if a number x is a\
  \ simple\n-- power of n and false in other cases.\n-- x is a simple power of n if\
  \ n**int=x\n-- For example:\n-- >>> is_simple_power(1, 4)\n-- true\n-- >>> is_simple_power(2,\
  \ 2)\n-- true\n-- >>> is_simple_power(8, 2)\n-- true\n-- >>> is_simple_power(3,\
  \ 2)\n-- false\n-- >>> is_simple_power(3, 1)\n-- false\n-- >>> is_simple_power(5,\
  \ 3)\n-- false\nlocal function is_simple_power(x, n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_simple_power\n\
  \    lu.assertEquals(candidate(16, 2), true)\n    lu.assertEquals(candidate(143214,\
  \ 16), false)\n    lu.assertEquals(candidate(4, 2), true)\n    lu.assertEquals(candidate(9,\
  \ 3), true)\n    lu.assertEquals(candidate(16, 4), true)\n    lu.assertEquals(candidate(24,\
  \ 2), false)\n    lu.assertEquals(candidate(128, 4), false)\n    lu.assertEquals(candidate(12,\
  \ 6), false)\n    lu.assertEquals(candidate(1, 1), true)\n    lu.assertEquals(candidate(1,\
  \ 12), true)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n == 1 then return true end\n  if x == 1 then return false end\n\
    \  if x ~= n then return false end\n  local i = 1\n  while i < n do\n    if x\
    \ ~= n then\n      x = x * x\n    end\n    i = i + 1\n  end\n  return true\nend",
  "  if n == 1 then\n    return true\n  end\n  if x == 1 then\n    return false\n\
    \  end\n  if x == 0 then\n    return false\n  end\n  if n % 2 == 0 then\n    return\
    \ is_simple_power(x / 2, n-1)\n  end\n  return is_simple_power(x, n-1)\nend",
  "  if x == n then\n    return true\n  end\n  if x < n then\n    return false\n \
    \ end\n  local i = 1\n  while i <= n do\n    if x%n == 0 then\n      return false\n\
    \    end\n    x = x*x\n    i = i + 1\n  end\n  return true\nend", "  if x == n\
    \ then\n    return true\n  end\n  if x < n then\n    return false\n  end\n  local\
    \ i = 1\n  while i <= n do\n    local t = x * x\n    if t > n then\n      return\
    \ false\n    end\n    if t % n == 0 then\n      return true\n    end\n    i =\
    \ i + 1\n  end\n  return false\nend", "  if n == 1 then\n    return x == 1\n \
    \ else\n    return x % n == 0 and is_simple_power(x / n, n)\n  end\nend", "  if\
    \ x == n then\n    return true\n  elseif x < n then\n    return false\n  else\n\
    \    return is_simple_power(x//n, n) or is_simple_power(x, n-1)\n  end\nend",
  "  if n == 1 then\n    return x == 1\n  else\n    return x % n == 0 and is_simple_power(x\
    \ / n, n)\n  end\nend", "  if x == n then\n    return true\n  end\n  if x < n\
    \ then\n    return false\n  end\n  local r = 1\n  while n > 1 do\n    r = r *\
    \ x\n    n = n - 1\n  end\n  return r == x\nend", "  if x == n then\n    return\
    \ true\n  elseif x < n then\n    return false\n  else\n    return is_simple_power(x,\
    \ n-1)\n  end\nend", "  if n == 1 then\n    return x == 1\n  else\n    return\
    \ x % n == 0 and is_simple_power(x / n, n)\n  end\nend", "  if n == 1 then\n \
    \   return x == 1\n  else\n    return x % n == 0 and is_simple_power(x / n, n)\n\
    \  end\nend", "  if n == 1 then\n    return true\n  end\n  if n == 0 then\n  \
    \  return false\n  end\n  if n <= 0 then\n    return false\n  end\n  if x == 1\
    \ then\n    return true\n  end\n  if x == 0 then\n    return false\n  end\n  if\
    \ x == -1 then\n    return false\n  end\n  if x == -2 then\n    return false\n\
    \  end\n  if x == -3 then\n    return false\n  end\n  if x == -4 then\n    return\
    \ false\n  end\n  if x == -5 then\n    return false\n  end\n  if x == -6 then\n\
    \    return false\n  end\n  if x == -7 then\n    return false\n  end\n  if x ==\
    \ -8 then\n    return false\n  end\n  if x == -9 then\n    return false\n  end\n\
    \  if x == -10 then\n    return false\n  end\n  if x == -11 then\n    return false\n\
    \  end\n  if x == -12 then\n    return false\n  end\n  if x == -13 then\n    return\
    \ false\n  end\n  if x == -14 then\n    return false\n  end\n  if x == -15 then\n\
    \    return false\n  end\n  if x == -16 then\n    return false\n  end\n  if x\
    \ == -17 then\n    return false\n  end\n  if x == -18 then\n    return false\n\
    \  end\n  if x == -19 then\n    return false\n  end\n  if x == -20 then\n    return\
    \ false\n  end\n  if x == -21 then\n    return false\n  end\n  if x == -22 then\n\
    \    return false\n  end\n  if x == -23 then\n    return false\n  end\n  if x\
    \ == -24 then\n    return false\n  end\n  if x == -25 then\n    return false\n\
    \  end\n  if x == -26 then\n    return false\n  end\n  if x == -27 then\n    return\
    \ false\n  end\n  if x == -28 then\n    return false\n  end\n  if x == -29 then\n\
    \    return false\n  end\n  if x == -30 then\n    return false\n  end\n  if x\
    \ == -31 then\n    return false\n  end\n  if x == -32 then\n    return false\n\
    \  end\n  if x == -33 then\n    return false\n  end\n  if x == -34 then\n    return\
    \ false\n  end\n  if x == -35 then\n    return false\n  end\n  if x == -36 then\n\
    \    return false\n  end\n  if x == -37 then\n    return false\n  end\n  if x\
    \ == -38 then\n    return false\n  end\n  if x == -39 then\n    return false\n\
    \  end\n  if x == -40 then\n    return false\n  end\n  if x == -41 then\n    return\
    \ false\n  end\n  if x == -42 then\n    return false", "  if n == 0 then return\
    \ true end\n  if n == 1 then return x == 1 end\n  if n % 2 == 0 then return x\
    \ == (x * x) or is_simple_power(x, n / 2) end\n  return x == (x * x) or is_simple_power(x,\
    \ n / 2) or is_simple_power(x, n / 2)\nend", "  if n == 1 then\n    return x ==\
    \ 1\n  else\n    return x % n == 0 and is_simple_power(x / n, n)\n  end\nend",
  "  if n == 1 then return true end\n  if x == 1 then return false end\n  if x ==\
    \ 0 then return false end\n  if x == -1 then return false end\n  if n == -1 then\
    \ return false end\n  if x == -n then return true end\n  if x == -n*n then return\
    \ true end\n  if n == -n*n then return true end\n  if x == -n*(n-1) or x == -n*(n+1)\
    \ then return true end\n  return false\nend", "  if n == 1 then return true end\n\
    \  if n == 0 then return false end\n  if n == -1 then return is_simple_power(x,\
    \ n+1) end\n  if x < 0 then return false end\n  if x < 1 then return is_simple_power(x,\
    \ n) end\n  if x == 1 then return true end\n  if x == 0 then return false end\n\
    \  if x == -1 then return is_simple_power(x, n) end\n  if x == -2 then return\
    \ is_simple_power(x, n-1) end\n  if x == -3 then return is_simple_power(x, n-2)\
    \ end\n  if x == -4 then return is_simple_power(x, n-3) end\n  if x == -5 then\
    \ return is_simple_power(x, n-4) end\n  if x == -6 then return is_simple_power(x,\
    \ n-5) end\n  if x == -7 then return is_simple_power(x, n-6) end\n  if x == -8\
    \ then return is_simple_power(x, n-7) end\n  if x == -9 then return is_simple_power(x,\
    \ n-8) end\n  if x == -10 then return is_simple_power(x, n-9) end\n  if x == -11\
    \ then return is_simple_power(x, n-10) end\n  if x == -12 then return is_simple_power(x,\
    \ n-11) end\n  if x == -13 then return is_simple_power(x, n-12) end\n  if x ==\
    \ -14 then return is_simple_power(x, n-13) end\n  if x == -15 then return is_simple_power(x,\
    \ n-14) end\n  if x == -16 then return is_simple_power(x, n-15) end\n  if x ==\
    \ -17 then return is_simple_power(x, n-16) end\n  if x == -18 then return is_simple_power(x,\
    \ n-17) end\n  if x == -19 then return is_simple_power(x, n-18) end\n  if x ==\
    \ -20 then return is_simple_power(x, n-19) end\n  if x == -21 then return is_simple_power(x,\
    \ n-20) end\n  if x == -22 then return is_simple_power(x, n-21) end\n  if x ==\
    \ -23 then return is_simple_power(x, n-22) end\n  if x == -24 then return is_simple_power(x,\
    \ n-23) end\n  if x == -25 then return is_simple_power(x, n-24) end\n  if x ==\
    \ -26 then return is_simple_power(x, n-25) end\n  if x == -27 then return is_simple_power(x,\
    \ n-26) end\n  if x == -28 then return is_simple_power(x, n-27) end\n  if x ==\
    \ -29 then return is_simple_power(x, n-28) end\n  if x == -30 then return is_simple_power(x,\
    \ n-29) end", "  if n == 1 then\n    return true\n  end\n  if n == 0 then\n  \
    \  return false\n  end\n  if n == -1 then\n    return false\n  end\n  if x ==\
    \ 1 then\n    return true\n  end\n  if x == 0 then\n    return false\n  end\n\
    \  if x == -1 then\n    return false\n  end\n  if x == -2 then\n    return false\n\
    \  end\n  if x == -3 then\n    return false\n  end\n  if x == -4 then\n    return\
    \ false\n  end\n  if x == -5 then\n    return false\n  end\n  if x == -6 then\n\
    \    return false\n  end\n  if x == -7 then\n    return false\n  end\n  if x ==\
    \ -8 then\n    return false\n  end\n  if x == -9 then\n    return false\n  end\n\
    \  if x == -10 then\n    return false\n  end\n  if x == -11 then\n    return false\n\
    \  end\n  if x == -12 then\n    return false\n  end\n  if x == -13 then\n    return\
    \ false\n  end\n  if x == -14 then\n    return false\n  end\n  if x == -15 then\n\
    \    return false\n  end\n  if x == -16 then\n    return false\n  end\n  if x\
    \ == -17 then\n    return false\n  end\n  if x == -18 then\n    return false\n\
    \  end\n  if x == -19 then\n    return false\n  end\n  if x == -20 then\n    return\
    \ false\n  end\n  if x == -21 then\n    return false\n  end\n  if x == -22 then\n\
    \    return false\n  end\n  if x == -23 then\n    return false\n  end\n  if x\
    \ == -24 then\n    return false\n  end\n  if x == -25 then\n    return false\n\
    \  end\n  if x == -26 then\n    return false\n  end\n  if x == -27 then\n    return\
    \ false\n  end\n  if x == -28 then\n    return false\n  end\n  if x == -29 then\n\
    \    return false\n  end\n  if x == -30 then\n    return false\n  end\n  if x\
    \ == -31 then\n    return false\n  end\n  if x == -32 then\n    return false\n\
    \  end\n  if x == -33 then\n    return false\n  end\n  if x == -34 then\n    return\
    \ false\n  end\n  if x == -35 then\n    return false\n  end\n  if x == -36 then\n\
    \    return false\n  end\n  if x == -37 then\n    return false\n  end\n  if x\
    \ == -38 then\n    return false\n  end\n  if x == -39 then\n    return false\n\
    \  end\n  if x == -40 then\n    return false\n  end\n  if x == -41 then\n    return\
    \ false\n  end\n  if x == -42 then\n    return false\n", "  if n == 1 then\n \
    \   return true\n  end\n  if n == 0 then\n    return false\n  end\n  if n % 2\
    \ == 0 then\n    return is_simple_power(x, n / 2)\n  end\n  if n % 3 == 0 then\n\
    \    return is_simple_power(x, n / 3)\n  end\n  return false\nend", "  if x ==\
    \ n then\n    return true\n  elseif x < n then\n    return false\n  else\n   \
    \ return is_simple_power(x, n-1)\n  end\nend", "  if n == 0 then return true end\n\
    \  if n == 1 then return x == 1 end\n  if n == 2 then return x == x end\n  if\
    \ n % 2 == 0 then return x == (x * x) or is_simple_power(x, n / 2) end\n  return\
    \ false\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
