name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return table of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[i] = string\n  end\n  while true do\n    longest = longest\
    \ - 1\n    for i = 1, longest do\n      if string.sub(i, i + 1) ~= string[i +\
    \ 1] then\n        longest = longest - 1\n        break\n      end\n    end\n\
    \    if longest == 0 then\n      break\n    end\n    prefixes[longest] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  local shortest = #string\n  while longest > 0 do\n\
    \    local prefix = string[longest]\n    shortest = #string\n    for i = longest\
    \ + 1, 1, -1 do\n      if string[i] == prefix then\n        shortest = #string\n\
    \        prefixes[#prefixes + 1] = prefix\n      end\n    end\n    longest = shortest\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local prefix = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ local longest, shortest\n  for _, c in string.gmatch('(.-)') do\n    longest\
    \ = longest or c\n    shortest = shortest or c\n    prefixes[c] = true\n  end\n\
    \  prefixes[longest] = true\n  prefixes[shortest] = true\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = { }\n\
    \  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string:sub(i, i)\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(i,\
    \ i)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local longest, shortest = string.len(), string\n  for i = 1,\
    \ string.len() do\n    local prefix = string:sub(i, i)\n    longest, shortest\
    \ = longest, #prefix + string\n    prefixes[prefix] = true\n  end\n  for i = 1,\
    \ string.len() do\n    local prefix = string:sub(i, i)\n    if prefixes[prefix]\
    \ then\n      prefixes[prefix] = true\n    else\n      prefixes[prefix] = false\n\
    \    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\
    \ = string\n  while true do\n    prefixes[#prefixes + 1] = prefix\n    prefix\
    \ = prefix .. string\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes +\
    \ 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = { }\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes,\
    \ function(a, b)\n    return #a > #b\n  end)\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[string.sub(string,1,i)] = true\n  end\n  return prefixes\n\
    end", "  local prefixes = { string }\n  while true do\n    local new_prefixes\
    \ = { }\n    for _, prefix in ipairs(prefixes) do\n      new_prefixes[#new_prefixes\
    \ + 1] = prefix .. string.sub(string, 1, string.len(prefix))\n    end\n    prefixes\
    \ = new_prefixes\n  end\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  local shortest = 1\n  while shortest <= longest do\n    prefixes[#prefixes\
    \ + 1] = string[shortest]\n    shortest = shortest + 1\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(i, i)\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  table.sort(prefixes)\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  table.sort(prefixes, function(a, b) return #a < #b end)\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length = length\
    \ + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  table.sort(prefixes,\
    \ function(a, b) return #a > #b end)\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes + 1]\
    \ = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\n\
    \      break\n    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  local shortest = 1\n  while shortest <= longest\
    \ do\n    prefixes[#prefixes + 1] = string[shortest]\n    shortest = shortest\
    \ + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  local shortest\
    \ = 1\n  while shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n\
    \    shortest = shortest + 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local longest = #string\n  for i = 1, longest do\n    local prefix =\
    \ string:sub(1, i)\n    prefixes[prefix] = true\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(i, i)\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[string.sub(string,1,i)] = true\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes +\
    \ 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = { }\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1]\
    \ = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n\
    \  while shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n\
    \    shortest = shortest + 1\n  end\n  return prefixes\nend", "  local prefixes\
    \ = {}\n  local prefix = ''\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n\
    \    if prefix:sub(1, #prefix) == prefix then\n      table.insert(prefixes, prefix)\n\
    \    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest\
    \ = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest = #string\n  for i =\
    \ 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ local prefix = string\n  while true do\n    prefixes[#prefixes + 1] = prefix\n\
    \    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then break end\n \
    \ end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n\
    \    prefixes[string.sub(string,i,i)] = true\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  table.sort(prefixes, function(a, b)\n    return #a < #b\n \
    \ end)\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local prefix_length = 1\n  local current_prefix = prefixes[#prefixes]\n\
    \  while true do\n    local new_prefix = string\n    for i = 1, prefix_length\
    \ do\n      new_prefix = new_prefix:sub(1, prefix_length)\n      if new_prefix\
    \ ~= current_prefix then\n        table.insert(prefixes, new_prefix)\n      end\n\
    \    end\n    prefix_length = prefix_length + 1\n    if prefix_length >= #string\
    \ then\n      break\n    end\n    current_prefix = prefixes[#prefixes]\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local length = 0\n  for i\
    \ = 1, #string do\n    length = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n    prefixes[i]\
    \ = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  local longest, shortest = string.gsub(string,\
    \ '^%s*', '')\n  for i = 1, #string do\n    local prefix = string[1:i]\n    local\
    \ suffix = string[#string + i]\n    if prefix ~= '' then\n      table.insert(prefixes,\
    \ prefix)\n    end\n    if suffix ~= '' then\n      table.insert(prefixes, suffix)\n\
    \    end\n  end\n  if longest ~= '' then\n    table.insert(prefixes, longest)\n\
    \  end\n  if shortest ~= '' then\n    table.insert(prefixes, shortest)\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local len = #string\n  for\
    \ i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ local longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1]\
    \ = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ i = #string\n  while i do\n    prefixes[#prefixes + 1] = string[i]\n    i =\
    \ i - 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n\
    \  return prefixes\nend", "  local prefixes = { }\n  local i = 1\n  while i <=\
    \ #string do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local longest, shortest\n  for _, c in string.gmatch(\"(.-)\"\
    ) do\n    if not shortest or #c < #shortest then\n      longest, shortest = c,\
    \ c\n    end\n    prefixes[c] = true\n  end\n  prefixes[longest] = true\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = { string\
    \ }\n  while true do\n    local new_prefixes = { }\n    for _, prefix in ipairs(prefixes)\
    \ do\n      new_prefixes[#new_prefixes + 1] = prefix .. string.sub(string, 1,\
    \ #prefix)\n    end\n    prefixes = new_prefixes\n  end\nend", "  local prefixes\
    \ = {}\n  local longest, shortest\n  for _, c in string.gmatch('(.-)') do\n  \
    \  longest, shortest = longest, c or shortest\n    prefixes[c] = true\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[string.sub(string,1,i)] = true\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local length = 1\n  while true do\n    local prefix = string\n\
    \    for i = 1, length do\n      prefix = prefix .. string[i]\n    end\n    table.insert(prefixes,\
    \ prefix)\n    length = length + 1\n    if length == #string then\n      break\n\
    \    end\n  end\n  return prefixes\nend", "  local prefixes = { string }\n  local\
    \ i = #string\n  while i > 0 do\n    prefixes[#prefixes + 1] = prefixes[#prefixes]..string[i]\n\
    \    i = i - 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ prefix_length = 1\n  for i = 1, #string do\n    local prefix = string:sub(i,\
    \ i)\n    prefixes[prefix] = prefix\n    prefix_length = prefix_length + #prefix\n\
    \  end\n  return prefixes, prefix_length\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ #string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i\
    \ = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local prefix_length = 1\n  for i = 1, #string do\n   \
    \ local prefix = string:sub(1, prefix_length)\n    table.insert(prefixes, prefix)\n\
    \    prefix_length = prefix_length + #prefix\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = { }\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = { }\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,i,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local length = 0\n  for i = 1, #string do\n    length = length + 1\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local length = #string\n  for i = 1, length do\n    prefixes[#prefixes + 1]\
    \ = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = { }\n  local i = 1\n  while i <= #string\
    \ do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ #string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  local shortest = 1\n  while shortest <= longest do\n  \
    \  local prefix = string[shortest]\n    prefixes[prefix] = true\n    shortest\
    \ = shortest + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes, function(a,\
    \ b) return #a < #b end)\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ length = 1\n  while true do\n    local prefix = string\n    for i = 1, length\
    \ do\n      prefix = prefix .. string[i]\n    end\n    table.insert(prefixes,\
    \ prefix)\n    length = length + 1\n    if length == #string then\n      break\n\
    \    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix\
    \ = ''\n  for i = 1, #string do\n    prefix = prefix .. string[i]\n    if prefix:sub(1,\
    \ #prefix) == prefix then\n      table.insert(prefixes, prefix)\n    end\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  prefixes[#prefixes + 1] = string:sub(i, i)\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string:sub(i, i)\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = { }\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix = string\n\
    \  while true do\n    prefixes[#prefixes + 1] = prefix\n    prefix = prefix:sub(1,\
    \ #prefix)\n    if prefix == \"\" then break end\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    local prefix = string[shortest]\n    prefixes[prefix]\
    \ = true\n    shortest = shortest + 1\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local longest_prefix = \"\"\n  for i = 1, #string do\n    local\
    \ prefix = string:sub(i, i)\n    if prefix ~= longest_prefix then\n      prefixes[longest_prefix]\
    \ = true\n      longest_prefix = prefix\n    end\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ #string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i\
    \ = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  table.sort(prefixes)\n\
    \  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n  \
    \  table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend", " \
    \ local prefixes = { string }\n  while true do\n    local new_prefixes = { }\n\
    \    for _, prefix in ipairs(prefixes) do\n      new_prefixes[#new_prefixes +\
    \ 1] = prefix\n    end\n    prefixes = new_prefixes\n  end\nend", "  local prefixes\
    \ = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes + 1]\
    \ = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[i] = string[1:i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local i = 1\n  while\
    \ i <= #string do\n    prefixes[string.sub(string,1,i)] = true\n    i = i + 1\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ #string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i\
    \ = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local length\
    \ = #string\n  for i = 1, length do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local len\
    \ = #string\n  for i = 1, len do\n    prefixes[#prefixes + 1] = string:sub(i,\
    \ i)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local prefix =\
    \ {}\n  local i = 1\n  while i <= #string do\n    prefix[i] = string\n    i =\
    \ i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n   \
    \ i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n\
    \    i = i + 1\n  end\n  i = 2\n  while i <= #string do\n    prefix[i] = string\n",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local len = #string\n\
    \  for i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = { }\n\
    \  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {\
    \ }\n  local length = #string\n  for i = 1, length do\n    prefixes[string.sub(i,\
    \ i)] = true\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ len = #string\n  for i = 1, len do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local length = 1\n  while true do\n    table.insert(prefixes,\
    \ string:sub(1, length))\n    length = length + 1\n    if length == #string then\n\
    \      break\n    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local prefix = string\n  while true do\n    prefixes[#prefixes + 1] = prefix\n\
    \    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then break end\n \
    \ end\n  return prefixes\nend", "  local prefixes = { }\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", " \
    \ local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n  \
    \  prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = { string }\n  while true do\n    local new_prefixes = { }\n    for\
    \ _, prefix in ipairs(prefixes) do\n      new_prefixes[#new_prefixes + 1] = prefix\
    \ .. string\n    end\n    prefixes = new_prefixes\n  end\nend", "  local prefixes\
    \ = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1,\
    \ #string[i])\n  end\n  return prefixes\nend", "  local prefixes = {}\n  local\
    \ longest = #string\n  local shortest = 1\n  while shortest <= longest do\n  \
    \  prefixes[#prefixes + 1] = string[shortest]\n    shortest = shortest + 1\n \
    \ end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n\
    \    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  local prefix = nil\n  for i = 1, #string do\n    prefix = prefix\
    \ .. string[i]\n    if prefixes[prefix] == nil then\n      prefixes[prefix] =\
    \ true\n    end\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[string.sub(string,1,i)] = true\n  end\n\
    \  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  local i = 1\n  while i <= longest do\n    prefixes[#prefixes + 1] = string[1:i]\n\
    \    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  local longest = #string\n\
    \  for i = 1, longest do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1,\
    \ #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)] =\
    \ true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  for i = 1, longest do\n    prefixes[i] = string\n\
    \  end\n  for i = 1, longest do\n    for j = 1, longest do\n      if i > j then\n\
    \        prefixes[i] = prefixes[i] .. string[j]\n      end\n    end\n  end\n \
    \ return prefixes\nend", "  local prefixes = { }\n  local longest = #string\n\
    \  for i = 1, longest do\n    local prefix = string:sub(i, i)\n    prefixes[#prefixes\
    \ + 1] = prefix\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for\
    \ i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend", "  local\
    \ prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(i,\
    \ i)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\n\
    end", "  local prefixes = {}\n  local prefix = nil\n  for i = 1, #string do\n\
    \    prefix = prefix .. string[i]\n    if prefixes[prefix] == nil then\n     \
    \ prefixes[prefix] = true\n    end\n  end\n  return prefixes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
