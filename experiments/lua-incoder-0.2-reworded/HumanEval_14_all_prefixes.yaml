name: HumanEval_14_all_prefixes
language: lua
prompt: "-- Return table of all prefixes from shortest to longest of the input string\n\
  -- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
  \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
  \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
  \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local prefixes = {}\n  local longest = #string\n  for i = 1, longest\
    \ do\n    prefixes[i] = string\n  end\n  while true do\n    longest = longest\
    \ - 1\n    for i = 1, longest do\n      if string.sub(i, i + 1) ~= string[i +\
    \ 1] then\n        longest = longest - 1\n        break\n      end\n    end\n\
    \    if longest == 0 then\n      break\n    end\n    prefixes[longest] = string\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  local longest = #string\n  local shortest = #string\n  while longest > 0 do\n\
    \    local prefix = string[longest]\n    shortest = #string\n    for i = longest\
    \ + 1, 1, -1 do\n      if string[i] == prefix then\n        shortest = #string\n\
    \        prefixes[#prefixes + 1] = prefix\n      end\n    end\n    longest = shortest\n\
    \  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  local prefix = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ local longest, shortest\n  for _, c in string.gmatch('(.-)') do\n    longest\
    \ = longest or c\n    shortest = shortest or c\n    prefixes[c] = true\n  end\n\
    \  prefixes[longest] = true\n  prefixes[shortest] = true\n  return prefixes\n\
    end", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = { }\n\
    \  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend", "  local prefixes = {}\n\
    \  for i = 1, #string do\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n \
    \ return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n   \
    \ prefixes[#prefixes + 1] = string:sub(i, i)\n  end\n  return prefixes\nend",
  "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] = string:sub(i,\
    \ i)\n  end\n  return prefixes\nend", "  local prefixes = {}\n  for i = 1, #string\
    \ do\n    prefixes[#prefixes + 1] = string[i]:sub(1, #string[i])\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n  end\n  return prefixes\nend", "  local prefixes = {}\n \
    \ for i = 1, #string do\n    prefixes[#prefixes + 1] = string[i]\n  end\n  return\
    \ prefixes\nend", "  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes\
    \ + 1] = string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
