name: HumanEval_7_filter_by_substring
language: lua
prompt: "-- Filter an input table of strings only for ones that contain given substring\n\
  -- >>> filter_by_substring({}, 'a')\n-- {}\n-- >>> filter_by_substring({'abc', 'bacd',\
  \ 'cde', 'array'}, 'a')\n-- {'abc', 'bacd', 'array'}\nlocal function filter_by_substring(strings,\
  \ substring)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = filter_by_substring\n\
  \    lu.assertEquals(candidate({}, 'john'), {})\n    lu.assertEquals(candidate({'xxx',\
  \ 'asd', 'xxy', 'john doe', 'xxxAAA', 'xxx'}, 'xxx'), {'xxx', 'xxxAAA', 'xxx'})\n\
  \    lu.assertEquals(candidate({'xxx', 'asd', 'aaaxxy', 'john doe', 'xxxAAA', 'xxx'},\
  \ 'xx'), {'xxx', 'aaaxxy', 'xxxAAA', 'xxx'})\n    lu.assertEquals(candidate({'grunt',\
  \ 'trumpet', 'prune', 'gruesome'}, 'run'), {'grunt', 'prune'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      result[#result + 1] = str\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, true) then\n      result[#result + 1] = string\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring) then\n      result[#result + 1] = string\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for _, string in ipairs(strings)\
    \ do\n    if string.find(substring) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string.find(substring) then\n      result[#result\
    \ + 1] = string\n    end\n  end\n  return result\nend", "  local result = {}\n\
    \  for _, string in ipairs(strings) do\n    if string.find(substring, 1, true)\
    \ then\n      result[#result + 1] = string\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      result[#result + 1] = string\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, str in ipairs(strings) do\n    if string.find(str,\
    \ substring) then\n      result[#result + 1] = str\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      result[#result + 1] = string\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, true) then\n      result[#result + 1] = string\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string.find(substring) then\n      result[#result\
    \ + 1] = string\n    end\n  end\n  return result\nend", "  local result = {}\n\
    \  for _, string in ipairs(strings) do\n    if string.find(substring) then\n \
    \     result[#result + 1] = string\n    end\n  end\n  return result\nend", " \
    \ local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, true) then\n      result[#result + 1] = string\n    end\n  end\n  return\
    \ result\nend", "  local result = {}\n  for _, string in ipairs(strings) do\n\
    \    if string.find(substring, 1, true) then\n      result[#result + 1] = string\n\
    \    end\n  end\n  return result\nend", "  local result = {}\n  for _, string\
    \ in ipairs(strings) do\n    if string.find(substring) then\n      result[#result\
    \ + 1] = string\n    end\n  end\n  return result\nend", "  local result = {}\n\
    \  for _, string in ipairs(strings) do\n    if string.find(substring) then\n \
    \     result[#result + 1] = string\n    end\n  end\n  return result\nend", " \
    \ local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      result[#result + 1] = string\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring)\
    \ then\n      result[#result + 1] = string\n    end\n  end\n  return result\n\
    end", "  local result = {}\n  for _, string in ipairs(strings) do\n    if string.find(substring,\
    \ 1, true) then\n      result[#result + 1] = string\n    end\n  end\n  return\
    \ result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
