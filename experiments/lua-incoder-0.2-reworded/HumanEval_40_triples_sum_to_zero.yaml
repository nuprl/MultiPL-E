name: HumanEval_40_triples_sum_to_zero
language: lua
prompt: "-- triples_sum_to_zero takes a table of integers as an input.\n-- it returns\
  \ true if there are three distinct elements in the table that\n-- sum to zero, and\
  \ false otherwise.\n-- >>> triples_sum_to_zero({1, 3, 5, 0})\n-- false\n-- >>> triples_sum_to_zero({1,\
  \ 3, -2, 1})\n-- true\n-- >>> triples_sum_to_zero({1, 2, 3, 7})\n-- false\n-- >>>\
  \ triples_sum_to_zero({2, 4, -5, 3, 9, 7})\n-- true\n-- >>> triples_sum_to_zero({1})\n\
  -- false\nlocal function triples_sum_to_zero(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = triples_sum_to_zero\n\
  \    lu.assertEquals(candidate({1, 3, 5, 0}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -1}), false)\n    lu.assertEquals(candidate({1, 3, -2, 1}), true)\n    lu.assertEquals(candidate({1,\
  \ 2, 3, 7}), false)\n    lu.assertEquals(candidate({1, 2, 5, 7}), false)\n    lu.assertEquals(candidate({2,\
  \ 4, -5, 3, 9, 7}), true)\n    lu.assertEquals(candidate({1}), false)\n    lu.assertEquals(candidate({1,\
  \ 3, 5, -100}), false)\n    lu.assertEquals(candidate({100, 3, 5, -100}), false)\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n\
    \  return sum == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum\
    \ = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for _, v in ipairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local zeros = 0\n\
    \  local sum = 0\n  for i = 1, #l do\n    sum = sum + l[i]\n    if sum == 0 then\n\
    \      zeros = zeros + 1\n    end\n  end\n  return zeros == 3\nend", "  local\
    \ sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n  return sum\
    \ == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n\
    \  end\n  return sum == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n\
    \    sum = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for _,\
    \ v in pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local\
    \ zero = 0\n  local count = 0\n  for _, v in ipairs(l) do\n    count = count +\
    \ 1\n    zero = zero + v\n    if zero > 0 then\n      return false\n    end\n\
    \  end\n  return count == 3\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n\
    \    sum = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for _,\
    \ v in ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local\
    \ sum = 0\n  for _, v in pairs(l) do\n    sum = sum + v\n  end\n  return sum ==\
    \ 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n \
    \ end\n  return sum == 0\nend", "  local sum = 0\n  for _, v in ipairs(l) do\n\
    \    sum = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for _,\
    \ v in pairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local\
    \ s = #l\n  if s == 0 then\n    return true\n  end\n  local t = {l[1]}\n  for\
    \ i = 2, s do\n    if l[i] ~= t[#t] then\n      return false\n    end\n    t[#t]\
    \ = l[i]\n  end\n  return true\nend", "  local sum = 0\n  for _, v in ipairs(l)\
    \ do\n    sum = sum + v\n  end\n  return sum == 0\nend", "  local sum = 0\n  for\
    \ _, v in ipairs(l) do\n    sum = sum + v\n  end\n  return sum == 0\nend", " \
    \ local sum = 0\n  for _, v in ipairs(l) do\n    sum = sum + v\n  end\n  return\
    \ sum == 0\nend", "  local zero = 0\n  local sum = 0\n  for i = 1, #l do\n   \
    \ sum = sum + l[i]\n    if sum == zero then return false end\n  end\n  return\
    \ true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
