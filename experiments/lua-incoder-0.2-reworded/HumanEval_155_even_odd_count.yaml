name: HumanEval_155_even_odd_count
language: lua
prompt: "-- Given an integer. return a table that has the number of even and odd digits\
  \ respectively.\n-- Example:\n-- >>> even_odd_count(-12)\n-- {1, 1}\n-- >>> even_odd_count(123)\n\
  -- {1, 2}\nlocal function even_odd_count(num)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = even_odd_count\n\
  \    lu.assertEquals(candidate(7), {0, 1})\n    lu.assertEquals(candidate(-78),\
  \ {1, 1})\n    lu.assertEquals(candidate(3452), {2, 2})\n    lu.assertEquals(candidate(346211),\
  \ {3, 3})\n    lu.assertEquals(candidate(-345821), {3, 3})\n    lu.assertEquals(candidate(-2),\
  \ {1, 0})\n    lu.assertEquals(candidate(-45347), {2, 3})\n    lu.assertEquals(candidate(0),\
  \ {1, 0})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local even, odd = {}, {}\n  for i = 1, math.floor(math.log(num, 2))\
    \ do\n    local remainder = math.fmod(num, 2)\n    if remainder == 0 then\n  \
    \    table.insert(even, i)\n    else\n      table.insert(odd, i)\n    end\n  \
    \  num = math.floor(num / 2)\n  end\n  return { even = even, odd = odd }\nend",
  "  local even, odd = {}, {}\n  local i = 1\n  while i <= math.floor(math.log(num,\
    \ 2)) do\n    local remainder = math.fmod(num, 2)\n    if remainder == 0 then\n\
    \      even[#even+1] = i\n    else\n      odd[#odd+1] = i\n    end\n    num =\
    \ math.floor(num / 2)\n    i = i + 1\n  end\n  return even, odd\nend", "  local\
    \ even = {}\n  local odd = {}\n  for i = 1, math.floor(math.log(num, 2)) do\n\
    \    if num % 2 == 0 then\n      table.insert(even, i)\n    else\n      table.insert(odd,\
    \ i)\n    end\n  end\n  return { even = even, odd = odd }\nend", "    local even\
    \ = {}\n    local odd = {}\n    for i = 1, math.floor(math.log(num, 2)) do\n \
    \       if num % 2 == 0 then\n            table.insert(even, i)\n        else\n\
    \            table.insert(odd, i)\n        end\n        num = math.floor(num /\
    \ 2)\n    end\n    return { even = even, odd = odd }\nend", "    local even =\
    \ {}\n    local odd = {}\n    for i = 1, math.floor(math.log(num, 2)) do\n   \
    \     if num % 2 == 0 then\n            even[i] = 1\n        else\n          \
    \  odd[i] = 1\n        end\n        num = math.floor(num / 2)\n    end\n    return\
    \ { even = even, odd = odd }\nend", "  local even, odd = {}, {}\n  for i = 1,\
    \ math.floor(math.log(num, 2)) do\n    local n = math.floor(num / math.pow(10,\
    \ i))\n    if n % 2 == 0 then\n      table.insert(even, n)\n    else\n      table.insert(odd,\
    \ n)\n    end\n  end\n  return even, odd\nend", "  local even, odd = 1, 1\n  while\
    \ num > 0 do\n    even = even + num % 2\n    odd = odd + num % 2\n    num = math.floor(num\
    \ / 2)\n  end\n  return { even = even, odd = odd }\nend", "  local even, odd =\
    \ 1, 1\n  while num > 0 do\n    even = even * 10 + num % 10\n    odd = odd * 10\
    \ + num % 10\n    num = num / 10\n  end\n  return {even, odd}\nend", "  local\
    \ even = {}\n  local odd = {}\n  local i = 1\n  while i <= math.floor(math.log(num,\
    \ 2)) do\n    if num % i == 0 then\n      table.insert(even, i)\n    else\n  \
    \    table.insert(odd, i)\n    end\n    i = i + 1\n  end\n  return { even = even,\
    \ odd = odd }\nend", "  local even = {}\n  local odd = {}\n  for i = 1, math.floor(math.log(num,\
    \ 2)) do\n    local remainder = math.fmod(num, 2)\n    if remainder == 0 then\n\
    \      table.insert(even, i)\n    else\n      table.insert(odd, i)\n    end\n\
    \    num = math.floor(num / 2)\n  end\n  return { even = even, odd = odd }\nend",
  "  local even = {}\n  local odd = {}\n  local n = math.floor(num)\n  while n > 0\
    \ do\n    local remainder = n % 2\n    if remainder == 0 then\n      even[#even+1]\
    \ = remainder\n    else\n      odd[#odd+1] = remainder\n    end\n    n = math.floor(n\
    \ / 2)\n  end\n  return { even = even, odd = odd }\nend", "  local even = {}\n\
    \  local odd = {}\n  local n = math.floor(num)\n  while n ~= 0 do\n    if n %\
    \ 2 == 0 then\n      table.insert(even, n)\n    else\n      table.insert(odd,\
    \ n)\n    end\n    n = math.floor(n/10)\n  end\n  return { even = even, odd =\
    \ odd }\nend", "    local even = {}\n    local odd = {}\n    for i = 1, math.floor(math.log(num,\
    \ 2)) do\n        if num % 2 == 0 then\n            table.insert(even, i)\n  \
    \      else\n            table.insert(odd, i)\n        end\n        num = math.floor(num\
    \ / 2)\n    end\n    return { even = even, odd = odd }\nend", "  local even, odd\
    \ = {}, {}\n  local n = math.floor(num)\n  while n do\n    even[#even+1] = n%2\n\
    \    odd.[#odd+1] = n/2\n    n = math.floor(n/2)\n  end\n  return even, odd\n\
    end", "  local even, odd = {}, {}\n  for i = 1, math.floor(math.log(num, 2)) do\n\
    \    local digit = math.floor(num / math.pow(10, i))\n    if digit % 2 == 0 then\n\
    \      table.insert(even, digit)\n    else\n      table.insert(odd, digit)\n \
    \   end\n  end\n  return table.concat(even, \"-\"), table.concat(odd, \"-\")\n\
    end", "  local even, odd = 1, 1\n  while num > 0 do\n    even = even + num % 2\n\
    \    odd = odd + num % 2\n    num = math.floor(num / 2)\n  end\n  return { even,\
    \ odd }\nend", "  local even = {}\n  local odd = {}\n  local i = 1\n  while i\
    \ <= math.floor(math.log(num, 2)) do\n    if num % i == 0 then\n      table.insert(even,\
    \ i)\n    else\n      table.insert(odd, i)\n    end\n    i = i + 1\n  end\n  return\
    \ { even = even, odd = odd }\nend", "  local even, odd = {}, {}\n  for i = 1,\
    \ math.floor(math.log(num, 2)) do\n    local digit = math.floor(num / math.pow(10,\
    \ i))\n    if digit % 2 == 0 then\n      table.insert(even, digit)\n    else\n\
    \      table.insert(odd, digit)\n    end\n  end\n  return even, odd\nend", " \
    \ local even, odd = {}, {}\n  for i = 1, math.floor(math.log(num, 2)) do\n   \
    \ local digit = math.floor(num / math.pow(10, i))\n    if digit % 2 == 0 then\n\
    \      table.insert(even, digit)\n    else\n      table.insert(odd, digit)\n \
    \   end\n  end\n  return even, odd\nend", "  local even, odd = {}, {}\n  local\
    \ num_str = tostring(num)\n  local num_len = #num_str\n  local i = 0\n  while\
    \ i < num_len do\n    local digit = tonumber(num_str:sub(i, i+1))\n    if digit\
    \ % 2 == 0 then\n      table.insert(even, digit)\n    else\n      table.insert(odd,\
    \ digit)\n    end\n    i = i + 1\n  end\n  return table.concat(even, \"-\"), table.concat(odd,\
    \ \"-\")\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
