language: lua
name: HumanEval_12_longest
results:
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength, longestString = nil, 0, nil\n\
    \  for _, string in ipairs(strings) do\n    if longestLength == nil then\n   \
    \   longest = string\n      longestLength = #string\n    elseif #string > longestLength\
    \ then\n      longest, longestLength, longestString = string, #string, string\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLen = nil, 0\n    for _, str in\
    \ ipairs(strings) do\n        if str and str:len() > longestLen then\n       \
    \     longest, longestLen = str, str:len()\n        end\n    end\n    return longest\
    \ or strings[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  for _, str in ipairs(strings) do\n\
    \    if str and #str > #longest then\n      longest = str\n    end\n  end\n  return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3pu1m38b.lua:12:\
    \ attempt to get length of local 'longest' (a nil value)\nstack traceback:\n\t\
    /tmp/tmp3pu1m38b.lua:12: in function 'candidate'\n\t/tmp/tmp3pu1m38b.lua:23: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == nil then break end\n    longest, longestLen = str, #str\n\
    \  end\n  if longest == nil then return end\n  for i = 1, longestLen do\n    if\
    \ strings[longest:sub(1, i)] == nil then break end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp24wftp70.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmp24wftp70.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLen = nil, 0\n    for _, str in\
    \ pairs(strings) do\n        local len = #str\n        if len > longestLen then\n\
    \            longest, longestLen = str, len\n        end\n    end\n    return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    local len = #str\n  \
    \  if len > longestLen then\n      longest, longestLen = str, len\n    end\n \
    \ end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = -1\n  for _,\
    \ s in pairs(strings) do\n    local len = #s\n    if len > longest_len then\n\
    \      longest = s\n      longest_len = len\n    end\n  end\n  return longest\
    \ or strings[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = -1\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest, longest_len = str, len\n    end\n  end\n  return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nlkb6i5.lua:29:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp2nlkb6i5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in pairs(strings) do\n        if str == \"\" then break end\n        if str\
    \ == longestLength then break end\n        if str == nil then break end\n    \
    \    if str > longestLength then\n            longest, longestLength = str, str\n\
    \        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpndlrg78m.lua:15:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpndlrg78m.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmpndlrg78m.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23pk3sr.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpb23pk3sr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vvdtsvd.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp3vvdtsvd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    if strings[i]:len() > longest_len\
    \ then\n      longest_len = strings[i]:len()\n    end\n  end\n  return strings[#strings]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgvr3x3gp.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpgvr3x3gp.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = -1\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest, longest_len = str, len\n    end\n  end\n  return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) ~= nil then\n    local longest = next(strings)\n\
    \    for _, s in ipairs(strings) do\n      if #s > #longest then\n        longest\
    \ = s\n      end\n    end\n    return longest\n  end\n  return nil\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqc3byi8p.lua:13:\
    \ attempt to get length of local 'longest' (a number value)\nstack traceback:\n\
    \t/tmp/tmpqc3byi8p.lua:13: in function 'candidate'\n\t/tmp/tmpqc3byi8p.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vvdtsvd.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp3vvdtsvd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longest_len = strings[1], 1\n  for i = 2, #strings do\n    local len = #strings[i]\n\
    \    if len > longest_len then\n      longest, longest_len = strings[i], len\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vvdtsvd.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp3vvdtsvd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestlen = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    if str and #str > longestlen then\n      longest, longestlen = str,\
    \ #str\n    end\n  end\n  return longest or strings[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_len = -1\n  local longest_string\n  for _,\
    \ string in ipairs(strings) do\n    local len = #string\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_string = string\n    end\n  end\n\
    \  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then break end\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz_f_dvy.lua:13:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmptz_f_dvy.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmptz_f_dvy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz_f_dvy.lua:13:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmptz_f_dvy.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmptz_f_dvy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength, longestString = nil, 0, nil\n\
    \  for _, str in ipairs(strings) do\n    if str == \"\" then break end\n    local\
    \ length = #str\n    if length > longestLength then\n      longest, longestLength,\
    \ longestString = str, length, str\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz_f_dvy.lua:13:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmptz_f_dvy.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmptz_f_dvy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longest_len = strings[1], 1\n  for i = 2, #strings do\n    if strings[i] ==\
    \ strings[longest_len] then\n      longest_len = i\n    else\n      if longest_len\
    \ > #strings then\n        return nil\n      else\n        longest = strings[longest_len]\n\
    \        longest_len = i\n      end\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjf4_my0i.lua:33:\
    \ expected: \"x\"\nactual: \"y\"\nstack traceback:\n\t/tmp/tmpjf4_my0i.lua:33:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_length = nil\n  for\
    \ _, str in ipairs(strings) do\n    local length = #str\n    if longest_length\
    \ == nil then\n      longest = str\n      longest_length = length\n    elseif\
    \ longest_length < length then\n      longest = str\n      longest_length = length\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        if str == \"\" then\n            return nil\n\
    \        end\n        local length = #str\n        if length > longestLength then\n\
    \            longest, longestLength = str, length\n        end\n    end\n    return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() >\
    \ longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zsv7yu8.lua:15:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmp_zsv7yu8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp_zsv7yu8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpur82ch5g.lua:14:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpur82ch5g.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpur82ch5g.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      break\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfidlhl7.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpbfidlhl7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local maxlen\
    \ = -1\n  local maxstring = next(strings)\n  for i = 1, #strings do\n    local\
    \ len = string.len(strings[i])\n    if len > maxlen then\n      maxlen = len\n\
    \      maxstring = strings[i]\n    end\n  end\n  return maxstring\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest, longestLength = nil, 0\n  for i = 1, #strings do\n    local length\
    \ = strings[i]\n    if length > longestLength then\n      longest, longestLength\
    \ = strings[i], length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplesraehg.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmplesraehg.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmplesraehg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest,\
    \ longest_len = strings[1], 1\n  for i = 2, #strings do\n    if strings[i] ==\
    \ strings[longest] then\n      longest_len = longest_len + 1\n    else\n     \
    \ if longest_len > #longest then\n        longest, longest_len = strings[i], longest_len\n\
    \      end\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpijbaw40l.lua:29:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpijbaw40l.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() >\
    \ longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zsv7yu8.lua:15:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmp_zsv7yu8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp_zsv7yu8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest, longestLength = nil, 0\n  for i = 1, #strings do\n    local length\
    \ = strings[i]\n    if length > longestLength then\n      longest, longestLength\
    \ = strings[i], length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplesraehg.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmplesraehg.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmplesraehg.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength, longestString = nil, 0,\
    \ nil\n    for _, string in ipairs(strings) do\n        if longestLength == nil\
    \ then\n            longest, longestLength, longestString = string, 1, string\n\
    \        elseif longestLength > #string then\n            longest, longestLength,\
    \ longestString = string, #string, string\n        end\n    end\n    return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpunf9ze5d.lua:25:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmpunf9ze5d.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength, longestString = nil, 0, nil\n\
    \  for _, str in pairs(strings) do\n    if longestLength == nil then\n      longest,\
    \ longestLength, longestString = str, 1, str\n    else\n      if #str > longestLength\
    \ then\n        longest, longestLength, longestString = str, #str, str\n     \
    \ end\n    end\n  end\n  if #strings == 0 then\n    return nil\n  end\n  return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = nil\n    local longest_len = -1\n    for\
    \ _, str in ipairs(strings) do\n        local len = #str\n        if len > longest_len\
    \ then\n            longest = str\n            longest_len = len\n        end\n\
    \    end\n    return longest or strings[1]\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    if str and #str > longestLength then\n      longest, longestLength =\
    \ str, #str\n    end\n  end\n  return longest or strings[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == nil then break end\n    if longestLen ~= nil and #str > longestLen\
    \ then longest, longestLen = str, #str end\n  end\n  return longest\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength, longestString = nil, 0, nil\n\
    \  for _, str in ipairs(strings) do\n    if str == \"\" then\n      break\n  \
    \  end\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength, longestString = str, length, str\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        if str == \"\" then\n            return nil\n\
    \        end\n        if str == \"\\n\" then\n            return str\n       \
    \ end\n        if str == \"\\r\" then\n            return str\n        end\n \
    \       longest, longestLength = str, #str\n    end\n    return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpwxlcq77p.lua:30:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpwxlcq77p.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = -1\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest, longest_len = str, len\n    end\n  end\n  return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = nil\n    local longestLength = nil\n \
    \   for _, str in ipairs(strings) do\n        local length = #str\n        if\
    \ length > longestLength then\n            longest = str\n            longestLength\
    \ = length\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmh7v6ciz.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmpmh7v6ciz.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpmh7v6ciz.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest, longestLength\
    \ = str, #str\n  end\n  return longest, longestLength\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi7i45ne.lua:24:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpxi7i45ne.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) ~= nil then\n    local longest = next(strings)\n\
    \    for i = 1, #strings do\n      if strings[i] ~= longest then\n        longest\
    \ = strings[i]\n      end\n    end\n    return longest\n  else\n    return nil\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9n577a3.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpo9n577a3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest = str\n    longestLen\
    \ = #str\n  end\n  if #strings == 0 then\n    return nil\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpuaj7wd9s.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpuaj7wd9s.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      break\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfidlhl7.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpbfidlhl7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = nil\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest, longest_len = str, len\n    end\n  end\n  return longest or strings[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppha74u6a.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppha74u6a.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmppha74u6a.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then return\
    \ strings[i] end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpia9viqwy.lua:23:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpia9viqwy.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinxmtslx.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpinxmtslx.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpinxmtslx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz_f_dvy.lua:13:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmptz_f_dvy.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmptz_f_dvy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longestLength = 0\n  for _,\
    \ str in pairs(strings) do\n    local length = #str\n    if length > longestLength\
    \ then\n      longest = str\n      longestLength = length\n    end\n  end\n  return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinxmtslx.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpinxmtslx.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpinxmtslx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() >\
    \ longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zsv7yu8.lua:15:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmp_zsv7yu8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp_zsv7yu8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestlen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longestlen then\n      longest, longestlen\
    \ = str, len\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() >\
    \ longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zsv7yu8.lua:15:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmp_zsv7yu8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp_zsv7yu8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, s in ipairs(strings)\
    \ do\n    local length = #s\n    if length > longestLength then\n      longest,\
    \ longestLength = s, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vvdtsvd.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp3vvdtsvd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]:len()\n  for i = 2, #strings do\n    local len = strings[i]:len()\n\
    \    if len > longest_len then\n      longest_len = len\n    end\n  end\n  return\
    \ strings[#strings]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpf0irdtfw.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpf0irdtfw.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        if str == \"\" then\n            return nil\n\
    \        end\n        if longestLength < #str then\n            longest, longestLength\
    \ = str, #str\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn7t1y9n3.lua:24:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpn7t1y9n3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23pk3sr.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpb23pk3sr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest_len\
    \ = strings[1]\n  for i = 2, #strings do\n    local len = strings[i]\n    if len\
    \ > longest_len then\n      longest_len = len\n    end\n  end\n  return longest_len\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpui6gls_m.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpui6gls_m.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    if longestLen < #str\
    \ then\n      longest, longestLen = str, #str\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, s in pairs(strings)\
    \ do\n    local length = #s\n    if length > longestLength then\n      longest,\
    \ longestLength = s, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength, longestString = nil, 0, nil\n\
    \  for _, string in pairs(strings) do\n    if longestLength == nil then\n    \
    \  longest = string\n      longestLength = #string\n    elseif #string > longestLength\
    \ then\n      longest, longestLength, longestString = string, #string, string\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then break end\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq86l9vqn.lua:27:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmpq86l9vqn.lua:27: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nlkb6i5.lua:29:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp2nlkb6i5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp170ng34i.lua:13:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmp170ng34i.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmp170ng34i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    if longestLen > #str\
    \ then\n      longest, longestLen = str, #str\n    end\n  end\n  return longest,\
    \ longestLen\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbe2x1mpj.lua:26:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmpbe2x1mpj.lua:26: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest, longestLength\
    \ = str, #str\n  end\n  return longest, longestLength\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi7i45ne.lua:24:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpxi7i45ne.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    if str == nil then break end\n    if longestLength == nil then\n   \
    \   longest, longestLength = str, #str\n    else\n      longestLength = math.max(longestLength,\
    \ #str)\n    end\n  end\n  if longestLength > 0 then\n    return longest\n  end\n\
    \  return nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7pfq494.lua:29:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmpv7pfq494.lua:29: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      return longest\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdykafkg.lua:27:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpjdykafkg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23pk3sr.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpb23pk3sr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local maxlen\
    \ = -1\n  local maxstr = next(strings)\n  for i = 1, #strings do\n    local len\
    \ = string.len(strings[i])\n    if len > maxlen then\n      maxlen = len\n   \
    \   maxstr = strings[i]\n    end\n  end\n  return maxstr\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i] ~= longest\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvutzld7e.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpvutzld7e.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest = str\n    longestLen\
    \ = #str\n  end\n  if longest == nil then\n    return nil\n  end\n  if longestLen\
    \ > longestLen then\n    return longest\n  end\n  local maxLen = 0\n  for _, str\
    \ in ipairs(strings) do\n    if #str > maxLen then\n      maxLen = #str\n    end\n\
    \  end\n  return longest:sub(1, maxLen)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbtk3poay.lua:37:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpbtk3poay.lua:37:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      return longest\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjdykafkg.lua:27:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpjdykafkg.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = -1\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest = str\n      longest_len = len\n    end\n  end\n  return longest\
    \ or strings[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest = str\n    longestLength\
    \ = #str\n  end\n  return longest and longestLength and longest or nil\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy9io7czy.lua:25:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpy9io7czy.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local length = #str\n        if length > longestLength\
    \ then\n            longest, longestLength = str, length\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, s in ipairs(strings)\
    \ do\n    if longestLength < #s then\n      longest, longestLength = s, #s\n \
    \   end\n  end\n  return longest or strings[1]\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    local len = #str\n    if len > longestLen then\n      longest, longestLen\
    \ = str, len\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longestLen then\n      longest, longestLen\
    \ = str, len\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_len = -1\n  local longest_string\n  for _,\
    \ string in ipairs(strings) do\n    local len = #string\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_string = string\n    end\n  end\n\
    \  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longest_len = nil, 0\n  for i = 1, #strings do\n    local len = string.len(strings[i])\n\
    \    if len > longest_len then\n      longest, longest_len = strings[i], len\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  for _, s in ipairs(strings) do\n\
    \    if longest == nil then\n      longest = s\n    elseif #longest < #s then\n\
    \      longest = s\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest = nil\n    local length = 0\n    for _,\
    \ s in ipairs(strings) do\n        length = length + #s\n        if length > #longest\
    \ then\n            longest = s\n        end\n    end\n    return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpymrngzft.lua:14:\
    \ attempt to get length of local 'longest' (a nil value)\nstack traceback:\n\t\
    /tmp/tmpymrngzft.lua:14: in function 'candidate'\n\t/tmp/tmpymrngzft.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest, longestLength\
    \ = str, #str\n  end\n  return longest, longestLength\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxi7i45ne.lua:24:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpxi7i45ne.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) ~= nil then\n    local longest = next(strings)\n\
    \    for i = 1, #strings do\n      if strings[i] ~= longest then\n        longest\
    \ = strings[i]\n      end\n    end\n    return longest\n  else\n    return nil\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo9n577a3.lua:27:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpo9n577a3.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest_len = -1\n    local longest_str = \"\"\n\
    \    for _, str in ipairs(strings) do\n        local len = #str\n        if len\
    \ > longest_len then\n            longest_len = len\n            longest_str =\
    \ str\n        end\n    end\n    return longest_str\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1nldze2r.lua:25:\
    \ expected: nil, actual: \"\"\nstack traceback:\n\t/tmp/tmp1nldze2r.lua:25: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23pk3sr.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpb23pk3sr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then break end\n    local len = #str\n    if len > longestLen\
    \ then\n      longest, longestLen = str, len\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz_f_dvy.lua:13:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmptz_f_dvy.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmptz_f_dvy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinxmtslx.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpinxmtslx.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpinxmtslx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23pk3sr.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpb23pk3sr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longest_len = nil, 0\n  for i = 1, #strings do\n    local len = #strings[i]\n\
    \    if len > longest_len then\n      longest, longest_len = strings[i], len\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      break\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbfidlhl7.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpbfidlhl7.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == nil then break end\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest = str\n    longestLen\
    \ = #str\n  end\n  return longest, longestLen\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxd2ah49x.lua:25:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpxd2ah49x.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, s in ipairs(strings) do\n    if #s > longestLength\
    \ then\n      longest, longestLength = s, #s\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyh9v_4gx.lua:28:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpyh9v_4gx.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23pk3sr.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpb23pk3sr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        if str == \"\" then\n            return nil\n\
    \        end\n        local length = #str\n        if length > longestLength then\n\
    \            longest, longestLength = str, length\n        end\n    end\n    return\
    \ longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      continue\n    end\n    local length = #str\n\
    \    if length > longestLength then\n      longest, longestLength = str, length\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmpph4jx5.lua:14: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longestLen then\n      longest, longestLen\
    \ = str, len\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest_len = -1\n  local longest_string\n  for _,\
    \ string in ipairs(strings) do\n    local len = #string\n    if len > longest_len\
    \ then\n      longest_len = len\n      longest_string = string\n    end\n  end\n\
    \  return longest_string\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() >\
    \ longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_zsv7yu8.lua:15:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmp_zsv7yu8.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp_zsv7yu8.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] < #longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzifb697c.lua:27:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmpzifb697c.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_length = nil\n  for\
    \ _, str in ipairs(strings) do\n    local length = #str\n    if longest_length\
    \ == nil then\n      longest_length = length\n      longest = str\n    elseif\
    \ length > longest_length then\n      longest_length = length\n      longest =\
    \ str\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vvdtsvd.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp3vvdtsvd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength = nil, 0\n    for _, str\
    \ in ipairs(strings) do\n        local len = #str\n        if len > longestLength\
    \ then\n            longest, longestLength = str, len\n        end\n    end\n\
    \    return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return nil end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptz_f_dvy.lua:13:\
    \ attempt to index local 'longest' (a number value)\nstack traceback:\n\t/tmp/tmptz_f_dvy.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmptz_f_dvy.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then return end\n  local longest_len\
    \ = -1\n  local longest_str = nil\n  for _, str in ipairs(strings) do\n    local\
    \ len = #str\n    if len > longest_len then\n      longest_len = len\n      longest_str\
    \ = str\n    end\n  end\n  return longest_str\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpksqf0kaq.lua:17: ''='' expected near ''end''

    '
  stdout: ''
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if next(strings) == nil then\n    return nil\n  end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i] ~= longest\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvutzld7e.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpvutzld7e.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLen = nil, 0\n  for _, str in pairs(strings)\
    \ do\n    local len = #str\n    if len > longestLen then\n      longest, longestLen\
    \ = str, len\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #longest[1] < #strings[i][1]\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwqx01ri.lua:15:\
    \ attempt to get length of field '?' (a nil value)\nstack traceback:\n\t/tmp/tmplwqx01ri.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmplwqx01ri.lua:26: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = nil\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest, longest_len = str, len\n    end\n  end\n  return longest or strings[1]\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppha74u6a.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmppha74u6a.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmppha74u6a.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nlkb6i5.lua:29:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp2nlkb6i5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest then\n\
    \      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb23pk3sr.lua:26:\
    \ expected: \"x\"\nactual: \"z\"\nstack traceback:\n\t/tmp/tmpb23pk3sr.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = nil\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest, longest_len = str, len\n    end\n  end\n  return longest\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9ph296n0.lua:14:\
    \ attempt to compare nil with number\nstack traceback:\n\t/tmp/tmp9ph296n0.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp9ph296n0.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longest_len = nil, 0\n  for i = 1, #strings do\n    local len = #strings[i]\n\
    \    if len > longest_len then\n      longest, longest_len = strings[i], len\n\
    \    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpinxmtslx.lua:16:\
    \ attempt to compare number with string\nstack traceback:\n\t/tmp/tmpinxmtslx.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmpinxmtslx.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength, longestString = nil, 0, nil\n\
    \  for _, str in ipairs(strings) do\n    if str == \"\" then\n      break\n  \
    \  end\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength, longestString = str, length, str\n    end\n  end\n  return longest\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = -1\n  for _,\
    \ s in pairs(strings) do\n    local len = #s\n    if len > longest_len then\n\
    \      longest = s\n      longest_len = len\n    end\n  end\n  return longest\
    \ or strings[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nlkb6i5.lua:29:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp2nlkb6i5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == nil then break end\n    if longestLength > #str then longest,\
    \ longestLength = str, #str end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6bd8nlxy.lua:22:\
    \ expected: \"x\"\nactual: nil\nstack traceback:\n\t/tmp/tmp6bd8nlxy.lua:22: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3vvdtsvd.lua:28:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp3vvdtsvd.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n    local longest, longestLength, longestString = nil, 0,\
    \ nil\n    for _, str in ipairs(strings) do\n        local length = #str\n   \
    \     if length > longestLength then\n            longest, longestLength, longestString\
    \ = str, length, str\n        end\n    end\n    return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
    \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = longest\n    lu.assertEquals(candidate({}),\
    \ None)\n    lu.assertEquals(candidate({'x', 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x',\
    \ 'yyy', 'zzzz', 'www', 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 0
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  local longest = nil\n  local longest_len = -1\n  for _,\
    \ str in ipairs(strings) do\n    local len = #str\n    if len > longest_len then\n\
    \      longest = str\n      longest_len = len\n    end\n  end\n  return longest\
    \ or strings[1]\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750489
- exit_code: 1
  program: "-- Out of table of strings, return the longest one. Return the first one\
    \ in case of multiple\n-- strings of the same length. Return None in case the\
    \ input table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b',\
    \ 'c'})\n-- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function\
    \ longest(strings)\n  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = longest\n    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x',\
    \ 'y', 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www',\
    \ 'kkkk', 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2nlkb6i5.lua:29:\
    \ expected: \"zzzz\"\nactual: \"x\"\nstack traceback:\n\t/tmp/tmp2nlkb6i5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750489
