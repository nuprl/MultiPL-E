language: lua
name: HumanEval_34_unique
results:
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local ret = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      table.insert(ret, v)\n      seen[v] = true\n    end\n  end\n  return\
    \ ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpox97d4v7.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmpox97d4v7.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsixsbyyc.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpsixsbyyc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv19zey.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpvhv19zey.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local t = {}\n  for k,\
    \ v in pairs(u) do t[k] = v end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg7sr6y_.lua:15:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmphg7sr6y_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local t = {}\n  for k,\
    \ v in pairs(u) do t[k] = v end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg7sr6y_.lua:15:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmphg7sr6y_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[tostring(l[i])]\
    \ then\n      table.insert(out, l[i])\n    else\n      seen[tostring(l[i])] =\
    \ true\n    end\n  end\n  return out\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphxnv21f2.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmphxnv21f2.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if v == nil then break end\n    table.insert(u,\
    \ v)\n  end\n  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo0ydvmjo.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpo0ydvmjo.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local ret = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(ret, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx29fq26e.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpx29fq26e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ljh6s28.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0ljh6s28.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv19zey.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpvhv19zey.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local t = {}\n  for k,\
    \ v in pairs(u) do t[k] = v end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphg7sr6y_.lua:15:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmphg7sr6y_.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local j\
    \ = 1\n  local k\n  local v\n  while i <= #u do\n    k = i\n    while k <= #u\
    \ do\n      v = u[k]\n      if v == false then break end\n      k = k + 1\n  \
    \  end\n    if k > #u then\n      table.insert(l, k)\n      i = i + 1\n    else\n\
    \      j = j + 1\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmvbanc7.lua:31:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpgmvbanc7.lua:31: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function(t, k) u[k] or t[k] end })\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgvtfbexv.lua:7: ''='' expected near ''or''

    '
  stdout: ''
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      result[#result + 1] = v\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx3uye2n.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpsx3uye2n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        if j > i then\n          table.insert(u, v)\n          table.insert(u,\
    \ j - 1)\n        end\n      end\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt76_gb27.lua:30:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpt76_gb27.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv19zey.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpvhv19zey.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local ret = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(ret, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx29fq26e.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpx29fq26e.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5891t1j9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5891t1j9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5891t1j9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5891t1j9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      result[#result + 1] = v\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx3uye2n.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpsx3uye2n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == false\
    \ then break end\n      v = v + 1\n    end\n    table.insert(l, v)\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66a7qkfm.lua:23:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp66a7qkfm.lua:23: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ljh6s28.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0ljh6s28.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local j\
    \ = 1\n  local k\n  local v\n  while i <= #u do\n    k = i\n    while k < #u and\
    \ u[k] do\n      k = k + 1\n    end\n    if k > i then\n      v = u[i]\n     \
    \ u[i] = u[k]\n      u[k] = v\n      i = i + 1\n      j = j + 1\n    end\n  end\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7p56_4hv.lua:30:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmp7p56_4hv.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        table.insert(u, v)\n        table.insert(u, j - 1)\n   \
    \     break\n      end\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpisbb6uyt.lua:29:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpisbb6uyt.lua:29: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = nil\n        break\n      end\n\
    \    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz5eb5nsj.lua:25:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpz5eb5nsj.lua:25: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function() return u end })\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0moho9l9.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0moho9l9.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5891t1j9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5891t1j9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ljh6s28.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0ljh6s28.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv19zey.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpvhv19zey.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = nil\n      end\n    end\n \
    \ end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hofvfuk.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp1hofvfuk.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if v == nil then\n      break\n    end\n\
    \    table.insert(u, v)\n  end\n  return u\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wtzha45.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp7wtzha45.lua:18: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsixsbyyc.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpsixsbyyc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ljh6s28.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0ljh6s28.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsixsbyyc.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpsixsbyyc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ljh6s28.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0ljh6s28.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsixsbyyc.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpsixsbyyc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      result[#result + 1] = v\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx3uye2n.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpsx3uye2n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until i == #l\n  return v\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbplqdsh9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: 0\nstack traceback:\n\t/tmp/tmpbplqdsh9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return i\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpl_nsvfa8.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: 11\nstack traceback:\n\t/tmp/tmpl_nsvfa8.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5891t1j9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5891t1j9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local t = {}\n  for v\
    \ in pairs(u) do t[v] = true end\n  return t\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfoxj1481.lua:15:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpfoxj1481.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        table.insert(u, v + j - 1)\n      end\n    end\n  end\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd9zkz8g.lua:27:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmppd9zkz8g.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        if j < #u then\n          u[j] = nil\n          table.insert(l,\
    \ v)\n        end\n      end\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpdrqxjo17.lua:30:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpdrqxjo17.lua:30: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv19zey.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpvhv19zey.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5891t1j9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5891t1j9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        table.insert(u, v + j - 1)\n      end\n    end\n  end\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd9zkz8g.lua:27:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmppd9zkz8g.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    if v == nil then\n      break\n    end\n\
    \    table.insert(u, v)\n  end\n  return u\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7wtzha45.lua:18:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp7wtzha45.lua:18: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0ljh6s28.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0ljh6s28.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function() return u end })\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0moho9l9.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0moho9l9.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until i == #l\n  return v\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbplqdsh9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: 0\nstack traceback:\n\t/tmp/tmpbplqdsh9.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsixsbyyc.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpsixsbyyc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5891t1j9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5891t1j9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until i > #l\n  return v\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze8n7t46.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: 123\nstack traceback:\n\t/tmp/tmpze8n7t46.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv19zey.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpvhv19zey.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local ret = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(ret, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return ret\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbvxdzr_o.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpbvxdzr_o.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5891t1j9.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 2, 9, 0, 123}\nstack traceback:\n\
    \t/tmp/tmp5891t1j9.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      result[#result + 1] = v\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsx3uye2n.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpsx3uye2n.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local j\
    \ = 1\n  local k\n  local v\n  while i <= #u do\n    k = i\n    while k < #u and\
    \ u[k] do\n      k = k + 1\n    end\n    if k > i then\n      v = l[i]\n     \
    \ l[i] = l[k]\n      l[k] = v\n      i = k\n    end\n  end\n  return l\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0fk9vxyn.lua:29:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0fk9vxyn.lua:29: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        if j > i then\n          table.insert(u, v)\n          table.insert(u,\
    \ j - 1)\n        end\n      end\n    end\n  end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt76_gb27.lua:30:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpt76_gb27.lua:30: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] then\n\
    \        table.insert(l, v)\n        break\n      end\n    end\n  end\n  return\
    \ l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8rw25tu_.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp8rw25tu_.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp06r7nwvp.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: nil\nstack traceback:\n\t/tmp/tmp06r7nwvp.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n        break\n    \
    \  end\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkoun1zm4.lua:25:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpkoun1zm4.lua:25: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local j\
    \ = 1\n  local k\n  local v\n  while i <= #u do\n    k = i\n    while i + j <=\
    \ #u do\n      v = u[k]\n      if v == false then break end\n      if u[i + j\
    \ + 1] ~= v then\n        u[k] = nil\n        k = k - 1\n      end\n      j =\
    \ j + 1\n    end\n    i = i + 1\n  end\n  local result = {}\n  for k, v in pairs(u)\
    \ do result[k] = v end\n  return result\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1qpo9dw9.lua:32:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmp1qpo9dw9.lua:32: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = nil\n      end\n    end\n \
    \ end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1hofvfuk.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp1hofvfuk.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvhv19zey.lua:22:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpvhv19zey.lua:22: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until i > #l\n  return v\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
    \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9,\
    \ 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpze8n7t46.lua:19:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: 123\nstack traceback:\n\t/tmp/tmpze8n7t46.lua:19:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function() return u end })\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0moho9l9.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0moho9l9.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] then\n\
    \        local k = i\n        while k < #u and u[k] do k = k + 1 end\n       \
    \ table.insert(l, v)\n        for j = k + 1, #u do\n          u[j] = nil\n   \
    \     end\n      end\n    end\n  end\n  return l\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_sbh1jg4.lua:28:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp_sbh1jg4.lua:28: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1 , #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp299o1i_0.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp299o1i_0.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsixsbyyc.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmpsixsbyyc.lua:13: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpokry1yzy.lua:16:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0, 2, 3, 3, 3, 5, 5, 9, 123}\nstack\
    \ traceback:\n\t/tmp/tmpokry1yzy.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.010 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        table.insert(u, v + j)\n      end\n    end\n  end\n  return\
    \ u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0,\
    \ 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0almxc8t.lua:27:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmp0almxc8t.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpt4xew3kn.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmpt4xew3kn.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfvz6estp.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpfvz6estp.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function() return u end })\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = unique\n    lu.assertEquals(candidate({5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0moho9l9.lua:13:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp0moho9l9.lua:13: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[i] then\n\
    \        local j = i\n        while j < #u and u[j] do\n          j = j + 1\n\
    \        end\n        table.insert(u, v + j - 1)\n      end\n    end\n  end\n\
    \  return u\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppd9zkz8g.lua:27:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {0=true, 2=true, 3=true, 5=true, 9=true,\
    \ 123=true}\nstack traceback:\n\t/tmp/tmppd9zkz8g.lua:27: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}),\
    \ {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi7673trg.lua:20:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 3}\nstack traceback:\n\t/tmp/tmpi7673trg.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750485
- exit_code: 1
  program: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = unique\n    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123}), {0, 2, 3, 5, 9, 123})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4v1kbiys.lua:24:\
    \ expected: {0, 2, 3, 5, 9, 123}\nactual: {5, 3, 5, 2, 3, 3, 9, 0, 123}\nstack\
    \ traceback:\n\t/tmp/tmp4v1kbiys.lua:24: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750485
