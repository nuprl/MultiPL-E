name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return a table of the words.\n\
  -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
  \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
  \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)')\
    \ do\n    table.insert(words, word)\n  end\n  return words\nend", "  local words\
    \ = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if words == nil then\n    words = {}\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)(,|$)') do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, w)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n   \
    \ table.insert(words, w)\n  end\n  return words\nend", "  local words = { }\n\
    \  for w in s:gmatch('[^,]+') do table.insert(words, w) end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  assert(#words == 1)\n  return words\nend", "  local words = { }\n  for word\
    \ in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n\
    \  return words\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ \"g\") do\n    table.insert(words, word)\n  end\n  return words\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
