name: HumanEval_101_words_string
language: lua
prompt: "-- You will be given a string of words separated by commas or spaces. Your\
  \ task is\n-- to split the string into words and return a table of the words.\n\
  -- For example:\n-- >>> words_string('Hi, my name is John')\n-- {'Hi', 'my', 'name',\
  \ 'is', 'John'}\n-- >>> words_string('One, two, three, four, five, six')\n-- {'One',\
  \ 'two', 'three', 'four', 'five', 'six'}\nlocal function words_string(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = words_string\n\
  \    lu.assertEquals(candidate('Hi, my name is John'), {'Hi', 'my', 'name', 'is',\
  \ 'John'})\n    lu.assertEquals(candidate('One, two, three, four, five, six'), {'One',\
  \ 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate('Hi, my\
  \ name'), {'Hi', 'my', 'name'})\n    lu.assertEquals(candidate('One,, two, three,\
  \ four, five, six,'), {'One', 'two', 'three', 'four', 'five', 'six'})\n    lu.assertEquals(candidate(''),\
  \ {})\n    lu.assertEquals(candidate('ahmed     , gamal'), {'ahmed', 'gamal'})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)')\
    \ do\n    table.insert(words, word)\n  end\n  return words\nend", "  local words\
    \ = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if words == nil then\n    words = {}\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)(,|$)') do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, w)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n   \
    \ table.insert(words, w)\n  end\n  return words\nend", "  local words = { }\n\
    \  for w in s:gmatch('[^,]+') do table.insert(words, w) end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  assert(#words == 1)\n  return words\nend", "  local words = { }\n  for word\
    \ in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n\
    \  return words\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ \"g\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, '([^,]+)')\n  local table = {}\n  for _, word in ipairs(words)\
    \ do\n    table[#table + 1] = word\n  end\n  return table\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  local words = {}\n  for _, word in pairs(words) do\n    words[#words + 1] =\
    \ word\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ string.gmatch(s, '([^,]+)')\n  if #words == 0 then\n    return {}\n  end\n \
    \ return words\nend", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)',\
    \ \"c\") do\n    table.insert(words, w)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if #words == 0 then\n    return {}\n  end\n  return words\nend", "  local words\
    \ = string.gmatch(s, '([^,]+)')\n  if #words == 0 then\n    return {}\n  end\n\
    \  local result = {}\n  for i = 1, #words do\n    table.insert(result, words[i])\n\
    \  end\n  return result\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, w)\n  end\n  return words\nend",
  "  local words = string.gmatch(s, '([^,]+)')\n  if #words == 0 then\n    return\
    \ {}\n  end\n  local words = {}\n  for i = 1, #words do\n    words[i] = words[i]\n\
    \  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '[^,]+') do\n    table.insert(words, w)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if #words == 0 then\n    return {}\n  end\n  return words\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = string.gmatch(s, '([^,]+)')\n  if #words == 0 then\n    return\
    \ nil\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if #words == 0 then\n    return {}\n  end\n  local words = {}\n  for i = 1,\
    \ #words do\n    words[#words + 1] = words[i]\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n   \
    \ table.insert(words, word)\n  end\n  return words\nend", "  local words = { }\n\
    \  for w in string.gmatch(s, '[^,]+') do\n    table.insert(words, w)\n  end\n\
    \  return words\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ \"c\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, w)\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n   \
    \ table.insert(words, word)\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ '([^,]+)')\n  if words == nil then\n    return nil\n  end\n  local words = {}\n\
    \  for _, word in ipairs(words) do\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "  local words = { }\n  for w in s:gmatch(\"[^,]+\") do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = string.gmatch(s, '([^,]+)') -- Split string into words\n  local\
    \ words = {}\n  for _, word in ipairs(words) do words[#words + 1] = word end\n\
    \  return words\nend", "  local words = { }\n  for word in string.gmatch(s, '[^,]+')\
    \ do\n    table.insert(words, word)\n  end\n  return words\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', \"c\") do\n\
    \    table.insert(words, w)\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ '([^,]+)')\n  local result = {}\n  for i = 1, #words do\n    table.insert(result,\
    \ words[i])\n  end\n  return result\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, w)\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n   \
    \ table.insert(words, word)\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ '([^,]+)') -- Split on commas\n  if #words == 0 then\n    words = string.gmatch(s,\
    \ '([^ ]+)') -- Split on spaces\n  end\n  return words\nend", "  local words =\
    \ string.gmatch(s, '([^,]+)')\n  local words = {}\n  for _, word in ipairs(words)\
    \ do\n    words[#words + 1] = word\n  end\n  return words\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words, w)\n\
    \  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)(,|$)') do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '[^,]+') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = { }\n  for w in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', \"c\") do\n\
    \    table.insert(words, w)\n  end\n  return words\nend", "  local words = { }\n\
    \  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words, w)\n  end\n\
    \  return words\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ \"g\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, w)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ string.gmatch(s, '([^,]+)') -- Split on commas\n  if #words == 0 then -- If\
    \ no commas, split on spaces\n    words = string.gmatch(s, '([^ ]+)') -- Split\
    \ on spaces\n  end\n  return words\nend", "  local words = { }\n  for word in\
    \ string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return\
    \ words\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ \"c\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if words == nil then\n    return nil\n  end\n  local words = {}\n  for _, word\
    \ in ipairs(words) do\n    words[#words + 1] = word\n  end\n  return words\nend",
  "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if #words == 0 then\n    return {}\n  end\n  local result = {}\n  for i = 1,\
    \ #words do\n    table.insert(result, words[i])\n  end\n  return result\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = string.gmatch(s, '([^,]+)')\n  if #words == 0 then\n    return\
    \ {}\n  end\n  local table = {}\n  for i = 1, #words do\n    table[i] = words[i]\n\
    \  end\n  return table\nend", "  local words = string.gmatch(s, '([^,]+)') --\
    \ Split on commas\n  local words = {}\n  for _, word in ipairs(words) do\n   \
    \ words[#words + 1] = word -- Append the word onto the end of the array\n  end\n\
    \  return words\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ 1) do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '[^,]+') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n   \
    \ table.insert(words, word)\n  end\n  return words\nend", "  local words = { }\n\
    \  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n \
    \ if #words == 0 then\n    return nil\n  end\n  return words\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n   \
    \ table.insert(words, word)\n  end\n  return words\nend", "  local words = { }\n\
    \  for w in s:gmatch(\"[^,]+\") do\n    table.insert(words, w)\n  end\n  return\
    \ words\nend", "  local words = string.gmatch(s, '([^,]+)') -- Split on commas\n\
    \  if #words == 0 then\n    words = string.gmatch(s, '(%S+)') -- Split on spaces\n\
    \  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, w)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '[^,]+') do\n    table.insert(words, w)\n  end\n  return words\nend", "  local\
    \ words = string.gmatch(s, '([^,]+)')\n  local table = {}\n  for _, word in pairs(words)\
    \ do\n    table.insert(words, word)\n  end\n  return table\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)(,|$)') do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)') do\n   \
    \ table.insert(words, word)\n  end\n  return words\nend", "  local words = { }\n\
    \  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words, w)\n  end\n\
    \  return words\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ \"c\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\
    \ -- Split on commas\n  if #words == 0 then -- No commas\n    words = string.gmatch(s,\
    \ '([^ ]+)') -- Split on spaces\n    if #words == 0 then -- No spaces\n      return\
    \ {s} -- No words\n    end\n  end\n  return words\nend", "  local words = { }\n\
    \  for word in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n \
    \ if words then\n    local table = {}\n    for _, word in ipairs(words) do\n \
    \     table.insert(words, word)\n    end\n    return table\n  end\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n   \
    \ table.insert(words, w)\n  end\n  return words\nend", "  local words = { }\n\
    \  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if #words == 0 then\n    return {}\n  end\n  local words = {}\n  for i = 1,\
    \ #words do\n    words[#words + 1] = words[i]\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '[^,]+') do\n    table.insert(words, w)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = string.gmatch(s, '([^,]+)') -- Split string into words\n\
    \  local words = {}\n  for _, word in ipairs(words) do\n    words[#words + 1]\
    \ = word -- Add each word to the table\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)(,|$)') do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '[^,]+') do\n    table.insert(words, word)\n  end\n  return words\nend", " \
    \ local words = { }\n  for w in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  local words = {}\n  for _, word in ipairs(words) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for w in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, w)\n  end\n  return words\nend", " \
    \ local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n   \
    \ table.insert(words, word)\n  end\n  return words\nend", "  local words = { }\n\
    \  for w in string.gmatch(s, '([^,]+)(,|$)') do\n    table.insert(words, w)\n\
    \  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if #words == 0 then\n    return {}\n  end\n  return words\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '[^,]+') do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)(,|$)') do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for w in string.gmatch(s, '[^,]+') do\n    table.insert(words, w)\n \
    \ end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '[^,]+') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"g\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for w in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words,\
    \ w)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for w in string.gmatch(s, '([^,]+)(,|$)') do\n \
    \   table.insert(words, w)\n  end\n  return words\nend", "  local words = string.gmatch(s,\
    \ '([^,]+)')\n  assert(#words == 1, 'words_string expects a string of words separated\
    \ by commas')\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', \"c\") do\n    table.insert(words, word)\n  end\n  return words\n\
    end", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"g\") do\n\
    \    table.insert(words, word)\n  end\n  return words\nend", "  local words =\
    \ string.gmatch(s, '([^,]+)') -- Split on commas or spaces.\n  local result =\
    \ {}\n  for _, word in ipairs(words) do\n    table.insert(result, word)\n  end\n\
    \  return result\nend", "  local words = { }\n  for word in string.gmatch(s, '([^,]+)',\
    \ \"g\") do\n    table.insert(words, word)\n  end\n  return words\nend", "  local\
    \ words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for w in s:gmatch('[^,]+')\
    \ do\n    table.insert(words, w)\n  end\n  return words\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)(,|$)') do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\
    \ -- Split string into words\n  local words = {}\n  for _, word in ipairs(words)\
    \ do words[#words + 1] = word end\n  return words\nend", "  local words = { }\n\
    \  for word in string.gmatch(s, '([^,]+)', 1) do\n    table.insert(words, word)\n\
    \  end\n  return words\nend", "  local words = { }\n  for word in string.gmatch(s,\
    \ '([^,]+)', 1) do\n    table.insert(words, word)\n  end\n  return words\nend",
  "  local words = { }\n  for word in string.gmatch(s, '([^,]+)') do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend", "  local words = string.gmatch(s, '([^,]+)')\n\
    \  if #words == 0 then\n    return nil\n  end\n  local table = {}\n  for i = 1,\
    \ #words do\n    table[i] = words[i]\n  end\n  return table\nend", "  local words\
    \ = { }\n  for word in string.gmatch(s, '([^,]+)', \"c\") do\n    table.insert(words,\
    \ word)\n  end\n  return words\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
