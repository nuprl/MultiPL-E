name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ setmetatable(l, { __index = u })\nend", "  local seen = {}\n  local ret = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      table.insert(ret,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return ret\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  return u\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while\
    \ i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true then\
    \ break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local t = {}\n  for k, v in pairs(u) do t[k] = v end\n  return t\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local t = {}\n  for k, v in pairs(u) do t[k] = v end\n  return t\nend", " \
    \ local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for i = 1,\
    \ #l do\n    if seen[tostring(l[i])] then\n      table.insert(out, l[i])\n   \
    \ else\n      seen[tostring(l[i])] = true\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do\n    if v == nil then break end\n    table.insert(u, v)\n\
    \  end\n  return u\nend", "  local seen = {}\n  local ret = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(ret, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return ret\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u\
    \ })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then break end\n    end\n   \
    \ table.insert(l, v)\n  end\n  return l\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  local t = {}\n  for k, v in pairs(u) do t[k]\
    \ = v end\n  return t\nend", "  local seen = {}\n  local out = {}\n  for i = 1,\
    \ #l do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n   \
    \   seen[l[i]] = true\n    end\n  end\n  return out\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n  \
    \    table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local j = 1\n  local k\n  local v\n  while i <= #u do\n    k\
    \ = i\n    while k <= #u do\n      v = u[k]\n      if v == false then break end\n\
    \      k = k + 1\n    end\n    if k > #u then\n      table.insert(l, k)\n    \
    \  i = i + 1\n    else\n      j = j + 1\n    end\n  end\n  return l\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function(t, k) u[k] or t[k] end })\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return\
    \ u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local\
    \ i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n\
    \      if u[v] == true then\n        table.insert(l, v)\n        u[v] = false\n\
    \      end\n    end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local seen = {}\n  local\
    \ result = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      result[#result\
    \ + 1] = v\n    else\n      seen[v] = true\n    end\n  end\n  return result\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i =\
    \ 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n    \
    \  if u[i] then\n        local j = i\n        while j < #u and u[j] do\n     \
    \     j = j + 1\n        end\n        if j > i then\n          table.insert(u,\
    \ v)\n          table.insert(u, j - 1)\n        end\n      end\n    end\n  end\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[v] == true then break end\n    end\n    table.insert(l, v)\n\
    \  end\n  return l\nend", "  local seen = {}\n  local ret = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(ret, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return ret\nend", "  local seen = {}\n\
    \  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] == nil then\n      seen[v] = true\n      out[#out\
    \ + 1] = v\n    end\n  end\n  return out\nend", "  local seen = {}\n  local result\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      result[#result\
    \ + 1] = v\n    else\n      seen[v] = true\n    end\n  end\n  return result\n\
    end", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i =\
    \ 1\n  local v\n  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return\
    \ v\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n\
    \  end\n  table.sort(u)\n  return u\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n\
    \    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[v] == false then break end\n      v = v + 1\n    end\n    table.insert(l,\
    \ v)\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v]\
    \ = true end\n  return setmetatable(l, { __index = u })\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[v] == true then\n        table.insert(l, v)\n        break\n\
    \      end\n    end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local j\
    \ = 1\n  local k\n  local v\n  while i <= #u do\n    k = i\n    while k < #u and\
    \ u[k] do\n      k = k + 1\n    end\n    if k > i then\n      v = u[i]\n     \
    \ u[i] = u[k]\n      u[k] = v\n      i = i + 1\n      j = j + 1\n    end\n  end\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  repeat\n    v =\
    \ l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend", "  local seen = {}\n\
    \  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] =\
    \ true end\n  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i = i + 1\n\
    \  until not u[v]\n  return v\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[i] then\n        local j = i\n        while\
    \ j < #u and u[j] do\n          j = j + 1\n        end\n        table.insert(u,\
    \ v)\n        table.insert(u, j - 1)\n        break\n      end\n    end\n  end\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i\
    \ + 1, #u do\n      if u[v] == true then\n        table.insert(l, v)\n       \
    \ u[v] = nil\n        break\n      end\n    end\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = function() return u end })\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u })\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] =\
    \ true end\n  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i = i + 1\n\
    \  until not u[v]\n  return v\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i\
    \ = i + 1\n  until not u[v]\n  return v\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil\
    \ then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return\
    \ out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local\
    \ i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n\
    \      if u[v] == true then\n        table.insert(l, v)\n        u[v] = false\n\
    \      end\n    end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        break\n      end\n    end\n  end\n  return l\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n \
    \ while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend",
  "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] ==\
    \ true then\n        table.insert(l, v)\n        u[v] = nil\n      end\n    end\n\
    \  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    if\
    \ v == nil then\n      break\n    end\n    table.insert(u, v)\n  end\n  return\
    \ u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ setmetatable(l, { __index = u })\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        break\n      end\n    end\n  end\n  return l\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend", "  local seen\
    \ = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n  \
    \    table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n  return\
    \ out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local\
    \ i = 1\n  local v\n  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n\
    \  return v\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[v] == true then\n        table.insert(l, v)\n        break\n\
    \      end\n    end\n  end\n  return l\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i = i + 1\n  until not\
    \ u[v]\n  return v\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return u\nend", "  local seen = {}\n  local result = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      result[#result + 1] = v\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return result\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  repeat\n\
    \    v = l[i]\n    i = i + 1\n  until i == #l\n  return v\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n \
    \ while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  repeat\n \
    \   v = l[i]\n    i = i + 1\n  until not u[v]\n  return i\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n \
    \ while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return setmetatable(l, { __index = u })\nend", "  local seen = {}\n \
    \ local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] == nil then\n   \
    \   seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n  return out\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local t = {}\n  for v in pairs(u) do t[v] = true end\n  return t\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[i] then\n        local j = i\n        while j < #u and u[j] do\n\
    \          j = j + 1\n        end\n        table.insert(u, v + j - 1)\n      end\n\
    \    end\n  end\n  return u\nend", "  local seen = {}\n  local out = {}\n  for\
    \ _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n\
    \      seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[i] then\n        local j = i\n        while j < #u and u[j] do\n\
    \          j = j + 1\n        end\n        if j < #u then\n          u[j] = nil\n\
    \          table.insert(l, v)\n        end\n      end\n    end\n  end\n  return\
    \ l\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l do\n    if seen[l[i]]\
    \ then\n      table.insert(out, l[i])\n    else\n      seen[l[i]] = true\n   \
    \ end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\n\
    \    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend", "  local u\
    \ = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  repeat\n \
    \   v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend", "  local u =\
    \ {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[i] then\n        local j = i\n        while\
    \ j < #u and u[j] do\n          j = j + 1\n        end\n        table.insert(u,\
    \ v + j - 1)\n      end\n    end\n  end\n  return u\nend", "  local u = {}\n \
    \ for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index\
    \ = u })\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    if v == nil then\n      break\n\
    \    end\n    table.insert(u, v)\n  end\n  return u\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = function() return u end })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i = i + 1\n  until i ==\
    \ #l\n  return v\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i\
    \ + 1, #u do\n      if u[v] == true then\n        table.insert(l, v)\n       \
    \ u[v] = false\n      end\n    end\n  end\n  return l\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while\
    \ i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true then\n\
    \        table.insert(l, v)\n        u[v] = false\n      end\n    end\n  end\n\
    \  return l\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local seen = {}\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  return u\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u })\n\
    end", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if\
    \ seen[v] == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n\
    \  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  repeat\n    v = l[i]\n    i = i + 1\n  until not u[v]\n  return v\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local\
    \ v\n  repeat\n    v = l[i]\n    i = i + 1\n  until i > #l\n  return v\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local seen = {}\n  local out\
    \ = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n\
    \    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", " \
    \ local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local ret = {}\n  for i = 1,\
    \ #l do\n    if seen[l[i]] then\n      table.insert(ret, l[i])\n    else\n   \
    \   seen[l[i]] = true\n    end\n  end\n  return ret\nend", "  local seen = {}\n\
    \  local out = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out,\
    \ l[i])\n    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ == nil then\n      seen[v] = true\n      out[#out + 1] = v\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local seen = {}\n  local\
    \ out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  for _, v\
    \ in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\n\
    end", "  local seen = {}\n  local result = {}\n  for _, v in ipairs(l) do\n  \
    \  if seen[v] then\n      result[#result + 1] = v\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return result\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local j = 1\n  local k\n  local v\n  while i <= #u do\n    k\
    \ = i\n    while k < #u and u[k] do\n      k = k + 1\n    end\n    if k > i then\n\
    \      v = l[i]\n      l[i] = l[k]\n      l[k] = v\n      i = k\n    end\n  end\n\
    \  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[i] then\n        local j = i\n        while\
    \ j < #u and u[j] do\n          j = j + 1\n        end\n        if j > i then\n\
    \          table.insert(u, v)\n          table.insert(u, j - 1)\n        end\n\
    \      end\n    end\n  end\n  return u\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] then\n\
    \        table.insert(l, v)\n        break\n      end\n    end\n  end\n  return\
    \ l\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i\
    \ = i + 1\n  until not u[v]\n  return v\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do\n    table.insert(u, v)\n  end\n  table.sort(u)\n  return u\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n        break\n    \
    \  end\n    end\n  end\n  return l\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n\
    \    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local j\
    \ = 1\n  local k\n  local v\n  while i <= #u do\n    k = i\n    while i + j <=\
    \ #u do\n      v = u[k]\n      if v == false then break end\n      if u[i + j\
    \ + 1] ~= v then\n        u[k] = nil\n        k = k - 1\n      end\n      j =\
    \ j + 1\n    end\n    i = i + 1\n  end\n  local result = {}\n  for k, v in pairs(u)\
    \ do result[k] = v end\n  return result\nend", "  local seen = {}\n  local out\
    \ = {}\n  for i = 1, #l do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n\
    \    else\n      seen[l[i]] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = nil\n      end\n    end\n \
    \ end\n  return l\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l\
    \ do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return out\nend", "  local seen = {}\n  local out\
    \ = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l do\n\
    \    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then break end\n    end\n   \
    \ table.insert(l, v)\n  end\n  return l\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u })\nend",
  "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  repeat\n    v = l[i]\n    i = i + 1\n  until i >\
    \ #l\n  return v\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true\
    \ end\n  return setmetatable(l, { __index = u })\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = function()\
    \ return u end })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1 , #u do\n      if u[v] then\n        local k = i\n        while\
    \ k < #u and u[k] do k = k + 1 end\n        table.insert(l, v)\n        for j\
    \ = k + 1, #u do\n          u[j] = nil\n        end\n      end\n    end\n  end\n\
    \  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1 , #u do\n      if u[v] == true then\n        table.insert(l,\
    \ v)\n        u[v] = false\n      end\n    end\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return u\nend", "  local\
    \ seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n\
    \      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n  end\n\
    \  return out\nend", "  local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u,\
    \ v)\n  end\n  table.sort(u)\n  return u\nend", "  local u = {}\n  for _, v in\
    \ ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n\
    \    v = i\n    for i = i + 1, #u do\n      if u[i] then\n        local j = i\n\
    \        while j < #u and u[j] do\n          j = j + 1\n        end\n        table.insert(u,\
    \ v + j)\n      end\n    end\n  end\n  return u\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u\
    \ })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ setmetatable(l, { __index = u })\nend", "  local seen = {}\n  local out = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n\
    \    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l,\
    \ { __index = u })\nend", "  local seen = {}\n  local out = {}\n  for i = 1, #l\
    \ do\n    if seen[l[i]] then\n      table.insert(out, l[i])\n    else\n      seen[l[i]]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = function() return u\
    \ end })\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local i = 1\n  local v\n  while i <= #u do\n    v = i\n    for i = i + 1, #u\
    \ do\n      if u[v] == true then\n        table.insert(l, v)\n        u[v] = false\n\
    \      end\n    end\n  end\n  return l\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[i] then\n        local j = i\n        while\
    \ j < #u and u[j] do\n          j = j + 1\n        end\n        table.insert(u,\
    \ v + j - 1)\n      end\n    end\n  end\n  return u\nend", "  local seen = {}\n\
    \  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v] then\n      table.insert(out,\
    \ v)\n    else\n      seen[v] = true\n    end\n  end\n  return out\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        u[v] = false\n      end\n    end\n\
    \  end\n  return l\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
