name: HumanEval_34_unique
language: lua
prompt: "-- Return sorted unique elements in a table\n-- >>> unique({5, 3, 5, 2, 3,\
  \ 3, 9, 0, 123})\n-- {0, 2, 3, 5, 9, 123}\nlocal function unique(l)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = unique\n\
  \    lu.assertEquals(candidate({5, 3, 5, 2, 3, 3, 9, 0, 123}), {0, 2, 3, 5, 9, 123})\n\
  end\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  return\
    \ setmetatable(l, { __index = u })\nend", "  local seen = {}\n  local ret = {}\n\
    \  for _, v in ipairs(l) do\n    if seen[v] == nil then\n      table.insert(ret,\
    \ v)\n      seen[v] = true\n    end\n  end\n  return ret\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  return u\nend", "  local u = {}\n\
    \  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n  while\
    \ i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true then\
    \ break end\n    end\n    table.insert(l, v)\n  end\n  return l\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local t = {}\n  for k, v in pairs(u) do t[k] = v end\n  return t\nend", " \
    \ local u = {}\n  for _, v in ipairs(l) do\n    table.insert(u, v)\n  end\n  table.sort(u)\n\
    \  return u\nend", "  local u = {}\n  for _, v in ipairs(l) do u[v] = true end\n\
    \  local t = {}\n  for k, v in pairs(u) do t[k] = v end\n  return t\nend", " \
    \ local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for i = 1,\
    \ #l do\n    if seen[tostring(l[i])] then\n      table.insert(out, l[i])\n   \
    \ else\n      seen[tostring(l[i])] = true\n    end\n  end\n  return out\nend",
  "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n    if seen[v]\
    \ then\n      table.insert(out, v)\n    else\n      seen[v] = true\n    end\n\
    \  end\n  return out\nend", "  local seen = {}\n  local out = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(out, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do\n    if v == nil then break end\n    table.insert(u, v)\n\
    \  end\n  return u\nend", "  local seen = {}\n  local ret = {}\n  for _, v in\
    \ ipairs(l) do\n    if seen[v] then\n      table.insert(ret, v)\n    else\n  \
    \    seen[v] = true\n    end\n  end\n  return ret\nend", "  local u = {}\n  for\
    \ _, v in ipairs(l) do u[v] = true end\n  return setmetatable(l, { __index = u\
    \ })\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l) do\n\
    \    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v] = true\n\
    \    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  return setmetatable(l, { __index = u })\nend", "  local\
    \ u = {}\n  for _, v in ipairs(l) do u[v] = true end\n  local i = 1\n  local v\n\
    \  while i <= #u do\n    v = i\n    for i = i + 1, #u do\n      if u[v] == true\
    \ then\n        table.insert(l, v)\n        break\n      end\n    end\n  end\n\
    \  return l\nend", "  local seen = {}\n  local out = {}\n  for _, v in ipairs(l)\
    \ do\n    if seen[v] then\n      table.insert(out, v)\n    else\n      seen[v]\
    \ = true\n    end\n  end\n  return out\nend", "  local u = {}\n  for _, v in ipairs(l)\
    \ do u[v] = true end\n  local i = 1\n  local v\n  while i <= #u do\n    v = i\n\
    \    for i = i + 1, #u do\n      if u[v] == true then break end\n    end\n   \
    \ table.insert(l, v)\n  end\n  return l\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
