language: lua
name: HumanEval_14_all_prefixes
results:
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[i] = string\n  end\n  while true do\n    longest = longest - 1\n\
    \    for i = 1, longest do\n      if string.sub(i, i + 1) ~= string[i + 1] then\n\
    \        longest = longest - 1\n        break\n      end\n    end\n    if longest\
    \ == 0 then\n      break\n    end\n    prefixes[longest] = string\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = #string\n\
    \  while longest > 0 do\n    local prefix = string[longest]\n    shortest = #string\n\
    \    for i = longest + 1, 1, -1 do\n      if string[i] == prefix then\n      \
    \  shortest = #string\n        prefixes[#prefixes + 1] = prefix\n      end\n \
    \   end\n    longest = shortest\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq7o_1jk4.lua:130: ''end'' expected (to close ''while'' at
    line 118) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest, shortest\n  for _, c in string.gmatch('(.-)')\
    \ do\n    longest = longest or c\n    shortest = shortest or c\n    prefixes[c]\
    \ = true\n  end\n  prefixes[longest] = true\n  prefixes[shortest] = true\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpei4hjv18.lua:7:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpei4hjv18.lua:7: in function 'candidate'\n\t/tmp/tmpei4hjv18.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uu_6fov.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp4uu_6fov.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax_s6ss8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpax_s6ss8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax_s6ss8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpax_s6ss8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest, shortest = string.len(), string\n  for\
    \ i = 1, string.len() do\n    local prefix = string:sub(i, i)\n    longest, shortest\
    \ = longest, #prefix + string\n    prefixes[prefix] = true\n  end\n  for i = 1,\
    \ string.len() do\n    local prefix = string:sub(i, i)\n    if prefixes[prefix]\
    \ then\n      prefixes[prefix] = true\n    else\n      prefixes[prefix] = false\n\
    \    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7dwzbo63.lua:6:\
    \ bad argument #1 to 'len' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp7dwzbo63.lua:6: in function 'candidate'\n\t/tmp/tmp7dwzbo63.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix .. string\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do\n    prefixes[#prefixes + 1]\
    \ = string\n  end\n  table.sort(prefixes, function(a, b)\n    return #a > #b\n\
    \  end)\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm7kjukte.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpm7kjukte.lua:19: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcegc3hm6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpcegc3hm6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string }\n  while true do\n    local new_prefixes = { }\n\
    \    for _, prefix in ipairs(prefixes) do\n      new_prefixes[#new_prefixes +\
    \ 1] = prefix .. string.sub(string, 1, string.len(prefix))\n    end\n    prefixes\
    \ = new_prefixes\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n   \
    \ shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa86dgy4l.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpa86dgy4l.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax_s6ss8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpax_s6ss8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  table.sort(prefixes)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovdo51ei.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpovdo51ei.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  table.sort(prefixes, function(a, b) return #a < #b end)\n \
    \ return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_3siwm_.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpz_3siwm_.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  table.sort(prefixes,\
    \ function(a, b) return #a > #b end)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmplxxxq5k4.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\n\
    \      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyi9vnosg.lua:20:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpyi9vnosg.lua:20: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n   \
    \ shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa86dgy4l.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpa86dgy4l.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n   \
    \ shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa86dgy4l.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpa86dgy4l.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   local prefix = string:sub(1, i)\n    prefixes[prefix] = true\n  end\n  return\
    \ prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe1dqnud0.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpe1dqnud0.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax_s6ss8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpax_s6ss8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcegc3hm6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpcegc3hm6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcegc3hm6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpcegc3hm6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do\n    prefixes[#prefixes + 1]\
    \ = string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmcy6sfw2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpmcy6sfw2.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n   \
    \ shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa86dgy4l.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpa86dgy4l.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = ''\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    if prefix:sub(1, #prefix) == prefix then\n      table.insert(prefixes,\
    \ prefix)\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw4m1dd_.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpaw4m1dd_.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpaw4m1dd_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\
    \ break end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfq78wox.lua:18:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpzfq78wox.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,i,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaqlbfm6w.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmpaqlbfm6w.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  table.sort(prefixes, function(a, b)\n    return #a < #b\n \
    \ end)\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpblcoerhx.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpblcoerhx.lua:19: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix_length = 1\n  local current_prefix = prefixes[#prefixes]\n\
    \  while true do\n    local new_prefix = string\n    for i = 1, prefix_length\
    \ do\n      new_prefix = new_prefix:sub(1, prefix_length)\n      if new_prefix\
    \ ~= current_prefix then\n        table.insert(prefixes, new_prefix)\n      end\n\
    \    end\n    prefix_length = prefix_length + 1\n    if prefix_length >= #string\
    \ then\n      break\n    end\n    current_prefix = prefixes[#prefixes]\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplxwumzmo.lua:28:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmplxwumzmo.lua:28: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvecpkyr4.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[i] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpra_2alwl.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest, shortest = string.gsub(string, '^%s*',\
    \ '')\n  for i = 1, #string do\n    local prefix = string[1:i]\n    local suffix\
    \ = string[#string + i]\n    if prefix ~= '' then\n      table.insert(prefixes,\
    \ prefix)\n    end\n    if suffix ~= '' then\n      table.insert(prefixes, suffix)\n\
    \    end\n  end\n  if longest ~= '' then\n    table.insert(prefixes, longest)\n\
    \  end\n  if shortest ~= '' then\n    table.insert(prefixes, shortest)\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpx3bpnvj0.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = #string\n  while i do\n    prefixes[#prefixes\
    \ + 1] = string[i]\n    i = i - 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uu_6fov.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp4uu_6fov.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest, shortest\n  for _, c in string.gmatch(\"\
    (.-)\") do\n    if not shortest or #c < #shortest then\n      longest, shortest\
    \ = c, c\n    end\n    prefixes[c] = true\n  end\n  prefixes[longest] = true\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6gcixuja.lua:7:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmp6gcixuja.lua:7: in function 'candidate'\n\t/tmp/tmp6gcixuja.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string }\n  while true do\n    local new_prefixes = { }\n\
    \    for _, prefix in ipairs(prefixes) do\n      new_prefixes[#new_prefixes +\
    \ 1] = prefix .. string.sub(string, 1, #prefix)\n    end\n    prefixes = new_prefixes\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest, shortest\n  for _, c in string.gmatch('(.-)')\
    \ do\n    longest, shortest = longest, c or shortest\n    prefixes[c] = true\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxbcza9w7.lua:7:\
    \ bad argument #2 to 'gmatch' (string expected, got no value)\nstack traceback:\n\
    \t/tmp/tmpxbcza9w7.lua:7: in function 'candidate'\n\t/tmp/tmpxbcza9w7.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcegc3hm6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpcegc3hm6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 1\n  while true do\n    local prefix\
    \ = string\n    for i = 1, length do\n      prefix = prefix .. string[i]\n   \
    \ end\n    table.insert(prefixes, prefix)\n    length = length + 1\n    if length\
    \ == #string then\n      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf83xakyr.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpf83xakyr.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpf83xakyr.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string }\n  local i = #string\n  while i > 0 do\n    prefixes[#prefixes\
    \ + 1] = prefixes[#prefixes]..string[i]\n    i = i - 1\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpaj2idfjr.lua:17:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpaj2idfjr.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix_length = 1\n  for i = 1, #string do\n \
    \   local prefix = string:sub(i, i)\n    prefixes[prefix] = prefix\n    prefix_length\
    \ = prefix_length + #prefix\n  end\n  return prefixes, prefix_length\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjo2vqks8.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=\"a\", d=\"d\", f=\"f\", g=\"g\", h=\"h\", s=\"s\"}\nstack traceback:\n\t\
    /tmp/tmpjo2vqks8.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix_length = 1\n  for i = 1, #string do\n \
    \   local prefix = string:sub(1, prefix_length)\n    table.insert(prefixes, prefix)\n\
    \    prefix_length = prefix_length + #prefix\n  end\n  return prefixes\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphfcqxonm.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"as\", \"asdf\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack traceback:\n\
    \t/tmp/tmphfcqxonm.lua:19: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do\n    prefixes[#prefixes + 1]\
    \ = string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0__gbr8_.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp0__gbr8_.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,i,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5fsqk7oq.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, d=true, f=true, g=true, h=true, s=true}\nstack traceback:\n\t/tmp/tmp5fsqk7oq.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 0\n  for i = 1, #string do\n    length\
    \ = length + 1\n    prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpvecpkyr4.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpssn2qv7q.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uu_6fov.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp4uu_6fov.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    local prefix = string[shortest]\n    prefixes[prefix]\
    \ = true\n    shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17_rox8p.lua:10:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp17_rox8p.lua:10: in function\
    \ 'candidate'\n\t/tmp/tmp17_rox8p.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  table.sort(prefixes, function(a, b) return #a < #b end)\n \
    \ return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz_3siwm_.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpz_3siwm_.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 1\n  while true do\n    local prefix\
    \ = string\n    for i = 1, length do\n      prefix = prefix .. string[i]\n   \
    \ end\n    table.insert(prefixes, prefix)\n    length = length + 1\n    if length\
    \ == #string then\n      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpf83xakyr.lua:10:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpf83xakyr.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpf83xakyr.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = ''\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    if prefix:sub(1, #prefix) == prefix then\n      table.insert(prefixes,\
    \ prefix)\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaw4m1dd_.lua:8:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpaw4m1dd_.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpaw4m1dd_.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax_s6ss8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpax_s6ss8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax_s6ss8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpax_s6ss8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uu_6fov.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp4uu_6fov.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\
    \ break end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfq78wox.lua:18:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpzfq78wox.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    local prefix = string[shortest]\n    prefixes[prefix]\
    \ = true\n    shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp17_rox8p.lua:10:\
    \ table index is nil\nstack traceback:\n\t/tmp/tmp17_rox8p.lua:10: in function\
    \ 'candidate'\n\t/tmp/tmp17_rox8p.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest_prefix = \"\"\n  for i = 1, #string do\n\
    \    local prefix = string:sub(i, i)\n    if prefix ~= longest_prefix then\n \
    \     prefixes[longest_prefix] = true\n      longest_prefix = prefix\n    end\n\
    \  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpho97znhp.lua:21:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\"=true, a=true, d=true, f=true, g=true, s=true}\nstack traceback:\n\t/tmp/tmpho97znhp.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  table.sort(prefixes)\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpovdo51ei.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpovdo51ei.lua:17: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string }\n  while true do\n    local new_prefixes = { }\n\
    \    for _, prefix in ipairs(prefixes) do\n      new_prefixes[#new_prefixes +\
    \ 1] = prefix\n    end\n    prefixes = new_prefixes\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[i] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpra_2alwl.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = #string\n  for i = 1, length do\n   \
    \ table.insert(prefixes, string:sub(1, i))\n  end\n  return prefixes\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8mrz9ohy.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmp8mrz9ohy.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = {}\n  local i = 1\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n    i = i + 1\n  end\n  i = 2\n  while i <= #string\
    \ do\n    prefix[i] = string\n\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq7o_1jk4.lua:130: ''end'' expected (to close ''while'' at
    line 118) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4uu_6fov.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp4uu_6fov.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local length = #string\n  for i = 1, length do\n  \
    \  prefixes[string.sub(i, i)] = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpje91qzm9.lua:17:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"\"=true, \"1\"=true}\nstack traceback:\n\t/tmp/tmpje91qzm9.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local len = #string\n  for i = 1, len do\n    prefixes[#prefixes\
    \ + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp84vmwwdh.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local length = 1\n  while true do\n    table.insert(prefixes,\
    \ string:sub(1, length))\n    length = length + 1\n    if length == #string then\n\
    \      break\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = string\n  while true do\n    prefixes[#prefixes\
    \ + 1] = prefix\n    prefix = prefix:sub(1, #prefix)\n    if prefix == \"\" then\
    \ break end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzfq78wox.lua:18:\
    \ expected: {}\nactual: {\"\"}\nstack traceback:\n\t/tmp/tmpzfq78wox.lua:18: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  for i = 1, #string do\n    prefixes[#prefixes + 1]\
    \ = string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0__gbr8_.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmp0__gbr8_.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: -1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { string }\n  while true do\n    local new_prefixes = { }\n\
    \    for _, prefix in ipairs(prefixes) do\n      new_prefixes[#new_prefixes +\
    \ 1] = prefix .. string\n    end\n    prefixes = new_prefixes\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750553
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local shortest = 1\n  while\
    \ shortest <= longest do\n    prefixes[#prefixes + 1] = string[shortest]\n   \
    \ shortest = shortest + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa86dgy4l.lua:19:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpa86dgy4l.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = nil\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    if prefixes[prefix] == nil then\n      prefixes[prefix]\
    \ = true\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mxbv1gc.lua:8:\
    \ attempt to concatenate local 'prefix' (a nil value)\nstack traceback:\n\t/tmp/tmp7mxbv1gc.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp7mxbv1gc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcegc3hm6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpcegc3hm6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  local i = 1\n  while i <=\
    \ longest do\n    prefixes[#prefixes + 1] = string[1:i]\n    i = i + 1\n  end\n\
    \  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa0betr3p.lua:9: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[#prefixes + 1] = string[1:i]\n  end\n  return prefixes\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = all_prefixes\n\
    \    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp92watfus.lua:8: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[1:i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpipca_hkm.lua:7: '']'' expected near '':''

    '
  stdout: ''
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcegc3hm6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpcegc3hm6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmasuxgc2.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\", \"asdfgh\"}\nstack\
    \ traceback:\n\t/tmp/tmpmasuxgc2.lua:16: in function 'test_humaneval'\n\nRan 1\
    \ tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcegc3hm6.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmpcegc3hm6.lua:16: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local i = 1\n  while i <= #string do\n    prefixes[string.sub(string,1,i)]\
    \ = true\n    i = i + 1\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp585xrnfl.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {a=true, as=true, asd=true, asdf=true, asdfg=true, asdfgh=true}\nstack traceback:\n\
    \t/tmp/tmp585xrnfl.lua:18: in function 'test_humaneval'\n\nRan 1 tests in 0.000\
    \ seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local longest = #string\n  for i = 1, longest do\n \
    \   prefixes[i] = string\n  end\n  for i = 1, longest do\n    for j = 1, longest\
    \ do\n      if i > j then\n        prefixes[i] = prefixes[i] .. string[j]\n  \
    \    end\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqucjadqo.lua:13:\
    \ attempt to concatenate field '?' (a nil value)\nstack traceback:\n\t/tmp/tmpqucjadqo.lua:13:\
    \ in function 'candidate'\n\t/tmp/tmpqucjadqo.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = { }\n  local longest = #string\n  for i = 1, longest do\n\
    \    local prefix = string:sub(i, i)\n    prefixes[#prefixes + 1] = prefix\n \
    \ end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpa44brm8d.lua:18:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpa44brm8d.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpsb9ktb4r.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {}\nstack traceback:\n\t/tmp/tmpsb9ktb4r.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string[i]:sub(1, #string[i])\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6vzh3wxv.lua:7:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmp6vzh3wxv.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp6vzh3wxv.lua:16: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    prefixes[#prefixes + 1] =\
    \ string:sub(i, i)\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpax_s6ss8.lua:16:\
    \ expected: {\"a\", \"as\", \"asd\", \"asdf\", \"asdfg\", \"asdfgh\"}\nactual:\
    \ {\"a\", \"s\", \"d\", \"f\", \"g\", \"h\"}\nstack traceback:\n\t/tmp/tmpax_s6ss8.lua:16:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750548
- exit_code: 0
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  for i = 1, #string do\n    table.insert(prefixes, string:sub(1,\
    \ i))\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = all_prefixes\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('asdfgh'),\
    \ {'a', 'as', 'asd', 'asdf', 'asdfg', 'asdfgh'})\n    lu.assertEquals(candidate('WWW'),\
    \ {'W', 'WW', 'WWW'})\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750548
- exit_code: 1
  program: "-- Return table of all prefixes from shortest to longest of the input\
    \ string\n-- >>> all_prefixes('abc')\n-- {'a', 'ab', 'abc'}\nlocal function all_prefixes(string)\n\
    \  local prefixes = {}\n  local prefix = nil\n  for i = 1, #string do\n    prefix\
    \ = prefix .. string[i]\n    if prefixes[prefix] == nil then\n      prefixes[prefix]\
    \ = true\n    end\n  end\n  return prefixes\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = all_prefixes\n    lu.assertEquals(candidate(''),\
    \ {})\n    lu.assertEquals(candidate('asdfgh'), {'a', 'as', 'asd', 'asdf', 'asdfg',\
    \ 'asdfgh'})\n    lu.assertEquals(candidate('WWW'), {'W', 'WW', 'WWW'})\nend\n\
    \nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7mxbv1gc.lua:8:\
    \ attempt to concatenate local 'prefix' (a nil value)\nstack traceback:\n\t/tmp/tmp7mxbv1gc.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp7mxbv1gc.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750548
