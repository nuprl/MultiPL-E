language: lua
name: HumanEval_19_sort_numbers
results:
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  local numbers = numbers:g\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzz4eozed.lua:30: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphhrqr5uw.lua:7: unfinished string near ''''(^|[%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])(%a+)([%z])''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjtfsdnov.lua:7: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4issjigd.lua:24: unfinished string near ''''(^| )([0-9]+)(
    |$)''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp2ei_1xz.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(%a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(\
    \ %\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0sqg37lp.lua:9: unfinished string near ''''(%a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)(
    %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %a+)( %''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n    local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n    local numbers = string.gsub(numbers, ',', '') -- Remove commas\n\
    \    local numbers = string.gsub(numbers, '%', '') -- Remove percents\n    local\
    \ numbers = string.gsub(numbers, '&', '') -- Remove ampersands\n    local numbers\
    \ = string.gsub(numbers, '$', '') -- Remove dollar signs\n    local numbers =\
    \ string.gsub(numbers, '!', '') -- Remove exclamation marks\n    local numbers\
    \ = string.gsub(numbers, '@', '') -- Remove @ signs\n    local numbers = string.gsub(numbers,\
    \ '(', '') -- Remove parentheses\n    local numbers = string.gsub(numbers, ')',\
    \ '') -- Remove parentheses\n    local numbers = string.gsub(numbers, '[', '')\
    \ -- Remove brackets\n    local numbers = string.gsub(numbers, ']', '') -- Remove\
    \ brackets\n    local numbers = string.gsub(numbers, '{', '') -- Remove brackets\n\
    \    local numbers = string.gsub(numbers, '}', '') -- Remove brackets\n    local\
    \ numbers = string.gsub(numbers, '<', '') -- Remove angle brackets\n    local\
    \ numbers = string.gsub(numbers, '>', '') -- Remove angle brackets\n    local\
    \ numbers = string.gsub(numbers, '/', '') -- Remove slashes\n    local numbers\
    \ = string.gsub(numbers, '\\\\', '') -- Remove backslashes\n    local numbers\
    \ = string.gsub(numbers, '|', '') -- Remove pipes\n    local numbers = string.gsub(numbers,\
    \ '?', '') -- Remove question marks\n    local numbers = string.gsub(numbers,\
    \ '*', '') -- Remove asterisks\n    local numbers = string.gsub(numbers, '=',\
    \ '') -- Remove equals\n    local numbers = string.gsub(numbers, '\"', '') --\
    \ Remove double quotes\n    local numbers = string.gsub(numbers, '|', '') -- Remove\
    \ pipes\n    local numbers = string.gsub(numbers, '!', '') -- Remove exclamation\
    \ marks\n    local numbers = string.gsub(numbers, '@', '') -- Remove @ signs\n\
    \    local numbers = string.gsub(numbers, '(', '') -- Remove parentheses\n   \
    \ local numbers = string.gsub(numbers, ')', '') -- Remove parentheses\n    local\
    \ numbers = string.gsub(numbers, '[', '') -- \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp91cnms1z.lua:47: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %2$3')\n  local numbers = numbers:gsub('( %z+)( %z+)','%2$1 %3\
    \ %2$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3')\n\
    \  local numbers = numbers:gsub('( %z+)( %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3\
    \ %5$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)( %z+)( %z+)','%2$1\
    \ %3 %2$3 %4$3 %5$3 %6$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)(\
    \ %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3 %5$3 %6$3 %7$3')\n  local numbers = numbers:gsub('(\
    \ %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)','%2$1 %3 %2$3 %4$3 %5$3 %6$3 %7$3\
    \ %8$3')\n  local numbers = numbers:gsub('( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)(\
    \ %z+)( %z+)','%2$1 %3 %2$3 %4$3 %5$3 %6$3 %7$3 %8$3 %9$3')\n  local numbers =\
    \ numbers:gsub('( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)( %z+)','%2$1\
    \ %3 %2$3 %4$3 %5$3 %6$3 %7$3 %8$3 %9$3 %10$3')\n  local numbers = numbers:gsub('(\
    \ %z+)( %z+)( %z+)( %\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpllepq0nf.lua:16: unfinished string near ''''( %z+)( %z+)(
    %z+)( %''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2\
    \ %3 %4 %5 %6 %7 %8 %9'):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnrtf7tcl.lua:7: unfinished string near ''''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(%S+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(%S+)', '\\1')\n  local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn58kh6io.lua:37: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%a+)', '%d'):gsub('(%b+)',\
    \ '%d'):gsub('(%c+)', '%d'):gsub('(%d+)', '%d'):gsub('(%e+)', '%d'):gsub('(%f+)',\
    \ '%d'):gsub('(%g+)', '%d'):gsub('(%h+)', '%d'):gsub('(%i+)', '%d'):gsub('(%j+)',\
    \ '%d'):gsub('(%k+)', '%d'):gsub('(%l+)', '%d'):gsub('(%m+)', '%d'):gsub('(%M+)',\
    \ '%d'):gsub('(%n+)', '%d'):gsub('(%o+)', '%d'):gsub('(%p+)', '%d'):gsub('(%q+)',\
    \ '%d'):gsub('(%r+)', '%d'):gsub('(%s+)', '%d'):gsub('(%t+)', '%d'):gsub('(%u+)',\
    \ '%d'):gsub('(%v+)', '%d'):gsub('(%w+)', '%d'):gsub('(%x+)', '%d'):gsub('(%y+)',\
    \ '%d'):gsub('(%z+)', '%d'):gsub('(%A+)', '%d'):gsub('(%B+)', '%d'):gsub('(%C+)',\
    \ '%d'):gsub('(%D+)', '%d'):gsub('(%E+)', '%d'):gsub('(%F+)', '%d'):gsub('(%G+)',\
    \ '%d'):gsub('(%H+)', '%d'):gsub('(%I+)', '%d'):gsub('(%J+)', '%d'):gsub('(%K+)',\
    \ '%d'):gsub('(%L+)', '%d'):gsub('(%M+)', '%d'):gsub('(%N+)', '%d'):gsub('(%O+)',\
    \ '%d'):gsub('(%P+)', '%d'):gsub('(%Q+)', '%d'):gsub('(%R+)', '%d'):gsub('(%s+)',\
    \ '%d'):gsub('(%T+)', '%d'):gsub('(%U+)', '%d'):gsub('(%V+)', '%d'):gsub('(%W+)',\
    \ '%d'):gsub('(%X+)', '%d'):gsub('(%Y\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpowb205kw.lua:7: unfinished string near ''''(%Y''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^| )(.-)(\
    \ |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( \nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpryzrqffo.lua:7: unfinished string near ''''( )(.-)( ''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w', '')\n  local numbers_sorted = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    \  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local\
    \ numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index\
    \ = {}\n  local numbers_sorted_index = {}\n  local numbers_sorted_index = {}\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2_64y8vg.lua:79: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeu8n9bq3.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  local num_list\
    \ = numbers:gsub(\"%w+\", \"\"):gsub(\"%d+\", \"\"):gsub(\"%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0fazy6yg.lua:8: unfinished string near ''"%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers .. ' ' .. number\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpho1gsvqh.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpho1gsvqh.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpho1gsvqh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ function(_, digits, number)\n    return tonumber(number) or tonumber(digits)\n\
    \  end)\n  table.sort(numbers)\n  return table.concat(numbers, \" \")\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq7pdrr80.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpq7pdrr80.lua:10: in function 'candidate'\n\t/tmp/tmpq7pdrr80.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers\
    \ = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\\
    1 ')\n  local numbers = numbers:gsub('(%w+) ', '\\1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ', '\\1 ')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpnkcwu6ik.lua:36: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)(\
    \ )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)( \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcw8gg5n_.lua:7: unfinished string near ''''( )(.-)( ''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\3\\2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\3')\n   \
    \ local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\\
    2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers\
    \ = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\\
    2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers\
    \ = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\\
    2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers\
    \ = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\\
    2')\n    local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers\
    \ = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n    local numbers = numbers:gsub('\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxr4rwgyq.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdb4ldfzk.lua:28: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '%1 %3 %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3\
    \ %2')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '%1 %3 %2')\n\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwc1oikw_.lua:35: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- remove leading minus sign\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp8nfd9de8.lua:27: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d', '%1 '):gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers\
    \ = numbers:gsub('%1 ', '%0 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n\
    \  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  local numbers = numbers:gsub('%0\
    \ ', '%1 ')\n  local numbers = numbers:gsub('%0 ', '%1 ')\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpn9mt7kcv.lua:51: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]+', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuxgpyo_5.lua:28: unfinished string near ''''(^''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpab2bznb2.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpab2bznb2.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpab2bznb2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- Remove spaces\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\2') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub('(^|-)([^0-9]+)$',\
    \ '\\1') -- Remove leading minus sign\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyxrmaih5.lua:27: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers .. ' ' .. number\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpho1gsvqh.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpho1gsvqh.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpho1gsvqh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6tktiosk.lua:51: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', '%1\
    \ '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5gsrwm9t.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1a70qta.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpw1a70qta.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpw1a70qta.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. ' '\n\
    \  end\n  sorted_numbers = sorted_numbers:gsub(' ', ' ')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%d')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d')\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmppc0r9zw0.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmppc0r9zw0.lua:8: in function 'candidate'\n\t/tmp/tmppc0r9zw0.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_spaces\
    \ = #numbers - 1\n  local num_digits = #sorted_numbers - 1\n  local num_zeros\
    \ = #sorted_numbers - num_spaces\n  local num_ones = #sorted_numbers - num_digits\
    \ - num_spaces\n  local num_twos = #sorted_numbers - num_digits - num_spaces -\
    \ num_zeros\n  local num_threes = #sorted_numbers - num_digits - num_spaces -\
    \ num_zeros - num_ones\n  local num_fours = #sorted_numbers - num_digits - num_spaces\
    \ - num_zeros - num_ones - num_twos\n  local num_fives = #sorted_numbers - num_digits\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes\n  local num_sixes\
    \ = #sorted_numbers - num_digits - num_spaces - num_zeros - num_ones - num_twos\
    \ - num_threes - num_fours\n  local num_sevens = #sorted_numbers - num_digits\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\n\
    \  local num_eights = #sorted_numbers - num_digits - num_spaces - num_zeros -\
    \ num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes\n  local\
    \ num_nines = #sorted_numbers - num_digits - num_spaces - num_zeros - num_ones\
    \ - num_twos - num_threes - num_fours - num_fives - num_sixes - num_sevens\n \
    \ local num_tens = #sorted_numbers - num_digits - num_spaces - num_zeros - num_ones\
    \ - num_twos - num_threes - num_fours - num_fives - num_sixes - num_sevens - num_eights\n\
    \  local num_elevens = #sorted_numbers - num_digits - num_spaces - num_zeros -\
    \ num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes - num_sevens\
    \ - num_eights - num_nines\n  local num_twelves = #sorted_numbers - num_digits\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\
    \ - num_sixes - num_sevens - num_eights - num_nines - num_tens\n  local num_thirteens\
    \ = #sorted_numbers - num_digits - num_spaces - num_zeros - num_ones - num_twos\
    \ - num_threes - num_fours - num_fives - num_sixes - num_sevens - num_eights -\
    \ num_nines - num_tens - num_elevens\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7_fnnlp3.lua:35: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. ' '\n\
    \  end\n  table.sort(table.unpack(sorted_numbers))\n  return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdpnoiaf.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxdpnoiaf.lua:8: in function 'candidate'\n\t/tmp/tmpxdpnoiaf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpihzi4c8a.lua:28:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmpihzi4c8a.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    ):map(function(number)\n    return tonumber(number)\n  end)\n  table.sort(numbers_array)\n\
    \  return table.concat(numbers_array)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpousa_j4v.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpousa_j4v.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpousa_j4v.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo2zp702o.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpo2zp702o.lua:8: in function 'candidate'\n\t/tmp/tmpo2zp702o.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3bbnlkko.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3z883a4y.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ hyphens\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n\
    \  local numbers = string.gsub(numbers, '%z', '') -- Remove %z\n  local numbers\
    \ = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers,\
    \ '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers, '%n', '') --\
    \ Remove %n\n  local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n \
    \ local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers\
    \ = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers,\
    \ '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers, '%n', '') --\
    \ Remove %n\n  local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n \
    \ local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers\
    \ = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers,\
    \ '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers, '%n', '') --\
    \ Remove %n\n  local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n \
    \ local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers\
    \ = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers,\
    \ '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers, '%n', '') --\
    \ Remove %n\n  local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n \
    \ local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers\
    \ = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers,\
    \ '%n', '') -- Remove %n\n  local numbers = string.gsub(numbers, '%n', '') --\
    \ Remove %n\n  local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n \
    \ local numbers = string.gsub(numbers, '%n', '') -- Remove %n\n  local numbers\
    \ = string.gsub(numbers, '%n', '') -- Remove %n\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprbgy8lkp.lua:49: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_spaces\
    \ = #numbers - 1\n  local num_digits = #sorted_numbers - 1\n  local num_zeros\
    \ = #sorted_numbers - num_spaces\n  local num_ones = #sorted_numbers - num_spaces\
    \ - num_zeros\n  local num_twos = #sorted_numbers - num_spaces - num_zeros - num_ones\n\
    \  local num_threes = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos\n\
    \  local num_fours = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos\
    \ - num_threes\n  local num_fives = #sorted_numbers - num_spaces - num_zeros -\
    \ num_ones - num_twos - num_threes - num_fours\n  local num_sixes = #sorted_numbers\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\n\
    \  local num_sevens = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos\
    \ - num_threes - num_fours - num_fives - num_sixes\n  local num_eights = #sorted_numbers\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\
    \ - num_sixes - num_sevens\n  local num_nines = #sorted_numbers - num_spaces -\
    \ num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes\
    \ - num_sevens - num_eights\n  local num_tens = #sorted_numbers - num_spaces -\
    \ num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes\
    \ - num_sevens - num_eights - num_nines\n  local num_elevens = #sorted_numbers\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\
    \ - num_sixes - num_sevens - num_eights - num_nines - num_tens\n  local num_twelves\
    \ = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos - num_threes\
    \ - num_fours - num_fives - num_sixes - num_sevens - num_eights - num_nines -\
    \ num_tens - num_elevens\n  local num_thirteens = #sorted_numbers - num_spaces\
    \ - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes\
    \ - num_sevens - num_eights - num_nines - num_tens - \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp29faai4_.lua:24: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, \"\
    [^0-9]+\", \"\")\n    local numbers = table.sort(numbers)\n    local result =\
    \ \"\"\n    for _, number in ipairs(numbers) do\n        result = result .. number\n\
    \    end\n    return result\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzxos2zeo.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmpzxos2zeo.lua:8: in function 'candidate'\n\t/tmp/tmpzxos2zeo.lua:19: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for i = 1, #numbers_array do\n    local number\
    \ = tonumber(numbers_array[i])\n    if number ~= nil then\n      sorted_numbers\
    \ = sorted_numbers + numbers_array[i]\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplhn2yvgw.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmplhn2yvgw.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmplhn2yvgw.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9vnu7qd.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpy9vnu7qd.lua:8: in function 'candidate'\n\t/tmp/tmpy9vnu7qd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[%z\\- ]', '')\
    \ -- Remove non-numbers\n  local numbers = string.gsub(numbers, '%z', '') -- Remove\
    \ leading zeros\n  local numbers = string.gsub(numbers, '%z+', '') -- Remove leading\
    \ +\n  local numbers = string.gsub(numbers, '%z*', '') -- Remove leading +\n \
    \ local numbers = string.gsub(numbers, '%z?(%d+)', '') -- Remove leading +\n \
    \ local numbers = string.gsub(numbers, '%d+', '') -- Remove trailing +\n  local\
    \ numbers = string.gsub(numbers, '%d*', '') -- Remove trailing +\n  local numbers\
    \ = string.gsub(numbers, '%d?(%d+)', '') -- Remove trailing +\n  local numbers\
    \ = string.gsub(numbers, '%d+', '') -- Remove trailing +\n  local numbers = string.gsub(numbers,\
    \ '%d*', '') -- Remove trailing +\n  local numbers = string.gsub(numbers, '%d?(%d+)',\
    \ '') -- Remove trailing +\n  local numbers = string.gsub(numbers, '%d+', '')\
    \ -- Remove trailing +\n  local numbers = string.gsub(numbers, '%d*', '') -- Remove\
    \ trailing +\n  local numbers = string.gsub(numbers, '%d?(%d+)', '') -- Remove\
    \ trailing +\n  local numbers = string.gsub(numbers, '%d+', '') -- Remove trailing\
    \ +\n  local numbers = string.gsub(numbers, '%d*', '') -- Remove trailing +\n\
    \  local numbers = string.gsub(numbers, '%d?(%d+)', '') -- Remove trailing +\n\
    \  local numbers = string.gsub(numbers, '%d+', '') -- Remove trailing +\n  local\
    \ numbers = string.gsub(numbers, '%d*', '') -- Remove trailing +\n  local numbers\
    \ = string.gsub(numbers, '%d?(%d+)', '') -- Remove trailing +\n  local numbers\
    \ = string.gsub(numbers, '%d+', '') -- Remove trailing +\n  local numbers = string.gsub(numbers,\
    \ '%d*', '') -- Remove trailing +\n  local numbers = string.gsub(numbers, '%d?(%d+)',\
    \ '') -- Remove trailing +\n  local numbers = string.gsub(numbers, '%d+', '')\
    \ -- Remove trailing +\n  local numbers = string.gsub(numbers, '%d*', '') -- Remove\
    \ trailing +\n  local numbers = string.gsub(numbers, '%d?(%d+)', '') -- Remove\
    \ trailing \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp960a0jof.lua:45: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[^0-9]', '') --\
    \ Remove non-numbers\n  local numbers = string.gsub(numbers, '^0', '') -- Remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- Remove leading\
    \ zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n\
    \  local numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n \
    \ local numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local\
    \ numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local numbers\
    \ = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local numbers =\
    \ string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers,\
    \ '^0', '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0',\
    \ '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '')\
    \ -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') --\
    \ Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- Remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- Remove leading\
    \ zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n\
    \  local numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n \
    \ local numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local\
    \ numbers = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local numbers\
    \ = string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local numbers =\
    \ string.gsub(numbers, '^0', '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers,\
    \ '^0', '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0',\
    \ '') -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '')\
    \ -- Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') --\
    \ Remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- Remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- Remove leading\
    \ zeroes\n  local numbers = string.gsub(numbers, '\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcct7dh10.lua:35: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ptry01p.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1a70qta.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpw1a70qta.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpw1a70qta.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\2\\3')\n  local numbers =\
    \ numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmply_lfcdb.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(' ')\n\
    \  local sorted_numbers = ''\n  for i = 1, #numbers_array do\n    local number\
    \ = tonumber(numbers_array[i])\n    if number then\n      sorted_numbers = sorted_numbers\
    \ + numbers_array[i]\n    end\n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb18xhq6n.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpb18xhq6n.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpb18xhq6n.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub('%d+', '%d '):gsub('%w+', '%d '):gsub('%d+',\
    \ '%d '):gsub('%w+', '%d '):gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprh7xl9fe.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- remove spaces\n  local numbers = string.gsub(numbers, '[^0-9]', '') --\
    \ remove non-numbers\n  local numbers = string.gsub(numbers, '^0', '') -- remove\
    \ leading zeros\n  local numbers = string.gsub(numbers, '^', '') -- remove leading\
    \ spaces\n  local numbers = string.gsub(numbers, '$', '') -- remove trailing spaces\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- remove leading plus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- remove trailing plus signs\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- remove leading plus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- remove trailing plus signs\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- remove leading plus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- remove trailing plus signs\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- remove leading plus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- remove trailing plus signs\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- remove leading plus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- remove trailing plus signs\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- remove trailing minus signs\n\
    \  local numbers = string.gsub(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmyqwy6mr.lua:33: '')'' expected (to close ''('' at line 32)
    near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. ' '\n\
    \  end\n  table.sort(table.unpack(sorted_numbers))\n  return table.concat(sorted_numbers,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxdpnoiaf.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpxdpnoiaf.lua:8: in function 'candidate'\n\t/tmp/tmpxdpnoiaf.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeu4h1dh8.lua:36: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo2zp702o.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpo2zp702o.lua:8: in function 'candidate'\n\t/tmp/tmpo2zp702o.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', ' ')\n  local \nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl_2lca0t.lua:36: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdx6eyk8h.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('\
    \ ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+',\
    \ ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub('%w+', ''):gsub(' ', ''):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2ptry01p.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+', '%1 '):gsub('%d+',\
    \ '%1 '):gsub('%d+', '%1 '):gsub\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbe78b5w4.lua:8: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpydyz2tnz.lua:7: unfinished string near ''''%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ dashes\n  local numbers = string.gsub(numbers, ',', '') -- Remove commas\n \
    \ local numbers = string.gsub(numbers, '%+', '') -- Remove plus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%', '') -- Remove percent signs\n  local numbers = string.gsub(numbers,\
    \ '%+%+', '') -- Remove double plus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-',\
    \ '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '')\
    \ -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove\
    \ minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus\
    \ signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-',\
    \ '') -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '')\
    \ -- Remove minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove\
    \ minus signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus\
    \ signs\n  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local\
    \ numbers = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers\
    \ = string.gsub(numbers, '%-', '') -- Remove minus signs\n  local numbers = string.gsub(numbers,\
    \ '%-', '') -- Remove minus signs\n  local number\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl1uf9vai.lua:45: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = {}\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    table.insert(numbers_table,\
    \ tonumber(number))\n  end\n  table.sort(numbers_table)\n  return table.concat(numbers_table,\
    \ '') -- Join back together with spaces.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1wk1das.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpq1wk1das.lua:8: in function 'candidate'\n\t/tmp/tmpq1wk1das.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', '%1\
    \ '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5gsrwm9t.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpab2bznb2.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpab2bznb2.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpab2bznb2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('(\
    \ )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub('(^|\
    \ )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('( )(.-)','%2'):gsub('( )','%2')\n\
    \  local numbers = numbers:gsub('(^| )(.-)( |$)','%2'):gsub('( )(.-)( )','%2'):gsub('(\
    \ )(.-)','%2'):gsub('( )','%2')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm3ey75v9.lua:17: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp80et0hs8.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  sorted_numbers = sorted_numbers:gsub('(%S+)(\
    \ +%S+)(%S+)', '\\1 \\2 \\3')\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp4ckaayz9.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp4ckaayz9.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp4ckaayz9.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(^|)([0-9]+)([^0-9]|$)',\
    \ '\\2 \\1')\n  return numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgmvivrqk.lua:17:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpgmvivrqk.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeu4h1dh8.lua:36: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local numbers = string.gsub(numbers, '[%z]', '') --\
    \ Remove leading zeros\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsh_a0bdv.lua:46: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local num_list\
    \ = numbers.split(' ')\n  for i = 1, #num_list do\n    local num_string = num_list[i]\n\
    \    local num_value = tonumber(num_string)\n    if num_value ~= nil then\n  \
    \    sorted_numbers = sorted_numbers .. num_string\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpc6clvp0o.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpc6clvp0o.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpc6clvp0o.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )' .. '(zero|one|two|three|four|five|six|seven|eight|nine)'\
    \ .. '( |$)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpwlmmhu4b.lua:15: unfinished string near ''''( |$)''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )', '\\\
    \\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(%w+)( )', '\\\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )', '\\\\2')\n  local numbers = numbers:gsub('(%w\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpem7qwt5h.lua:32: unfinished string near ''''(%w''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpogc7hmxz.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpogc7hmxz.lua:8: in function 'candidate'\n\t/tmp/tmpogc7hmxz.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- remove spaces\n  local numbers = string.gsub(numbers, '[^0-9]', '') --\
    \ remove non-numbers\n  local numbers = string.gsub(numbers, '^0', '') -- remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove leading\
    \ zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n\
    \  local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n \
    \ local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local\
    \ numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers\
    \ = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers =\
    \ string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers = string.gsub(numbers,\
    \ '^0', '') -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^0',\
    \ '') -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '')\
    \ -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') --\
    \ remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove leading\
    \ zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n\
    \  local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n \
    \ local numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local\
    \ numbers = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers\
    \ = string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers =\
    \ string.gsub(numbers, '^0', '') -- remove leading zeroes\n  local numbers = string.gsub(numbers,\
    \ '^0', '') -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^0',\
    \ '') -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '')\
    \ -- remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') --\
    \ remove leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^0', '') -- remove leading\
    \ zeroes\n  local numbers = string.gsub(numbers, '\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpb7vt0d8h.lua:35: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', '%1\
    \ '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5gsrwm9t.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpur7jhjah.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('[^0-9]', '')\n\
    \    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:gsub('\
    \ ', ' ')\n    local numbers = numbers:gsub(' ', ' ')\n    local numbers = numbers:\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpoivj5j7g.lua:50: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('%w+', '%1\
    \ '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers =\
    \ numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \    local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n    local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5gsrwm9t.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]+', '')\n\
    \  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)(\
    \ )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)(\
    \ )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)(\
    \ )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)(\
    \ )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)(\
    \ )(%a+)', '\\2\\3')\n  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n\
    \  local numbers = numbers:gsub('(%a+)( )(%a+)', '\\2\\3')\n  local numbers =\
    \ numbers:gsub('(%a+)( )(\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpex9r47ca.lua:29: unfinished string near ''''(%a+)( )(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d*%d+', ''):gsub('%d*%d*%d+', ''):gsub('%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+', ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d+',\
    \ ''):gsub('%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeu8n9bq3.lua:7: unfinished string near ''''%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*%d*''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp3tj_wwzw.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers .. ' ' .. number\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpho1gsvqh.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpho1gsvqh.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpho1gsvqh.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1a70qta.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpw1a70qta.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpw1a70qta.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[%z]+)',\
    \ '')\n    local numbers = numbers:gsub('(%z+)$', '')\n    local numbers = numbers:gsub('(%z+)%z+%z+',\
    \ '\\1')\n    local numbers = numbers:gsub('%z+%z+%z+%z+', '\\1')\n    local numbers\
    \ = numbers:gsub('%z+%z+%z+', '\\1')\n    local numbers = numbers:gsub('%z+%z+',\
    \ '\\1')\n    local numbers = numbers:gsub('%z+', '\\1')\n    local numbers =\
    \ numbers:gsub('%z+%z+%z+%z+', '\\1')\n    local numbers = numbers:gsub('%z+%z+%z+',\
    \ '\\1')\n    local numbers = numbers:gsub('%z+%z+', '\\1')\n    local numbers\
    \ = numbers:gsub('%z+', '\\1')\n    local numbers = numbers:gsub('%z+%z+%z+%z+',\
    \ '\\1')\n    local numbers = numbers:gsub('%z+%z+%z+', '\\1')\n    local numbers\
    \ = numbers:gsub('%z+%z+', '\\1')\n    local numbers = numbers:gsub('%z+', '\\\
    1')\n    local numbers = numbers:gsub('%z+%z+%z+%z+', '\\1')\n    local numbers\
    \ = numbers:gsub('%z+%z+%z+', '\\1')\n    local numbers = numbers:gsub('%z+%z+',\
    \ '\\1')\n    local numbers = numbers:gsub('%z+%z+%z+%z+', '\\1')\n    local numbers\
    \ = numbers:gsub('%z+%z+%z+', '\\1')\n    local numbers = numbers:gsub('%z+%z+',\
    \ '\\1')\n    local numbers = numbers:gsub('%z+', '\\1')\n    local numbers =\
    \ numbers:gsub('%z+%z+%z+%z+', '\\1')\n    local numbers = numbers:gsub('%z+%z+%z+',\
    \ '\\1')\n    local numbers = numbers:gsub('%z+%z\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0i7zzjuo.lua:31: unfinished string near ''''%z+%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\1')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    5')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\7')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\9')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\11')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\13')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\15')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\17')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\
    \\19')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\21')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\23')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\25')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\27')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\29')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\
    \\2\\\\31')\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppc9alulj.lua:35: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', ' ')\n  local numbers = numbers:gsub('(%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(\
    \ +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmprzpm1wfp.lua:9: unfinished string near ''''(%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)(
    +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%a+)( +%''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = {}\n  for _, number\
    \ in ipairs(numbers) do\n    table.insert(numbers_table, tonumber(number))\n \
    \ end\n  table.sort(numbers_table)\n  return table.concat(numbers_table, '') --\
    \ Join back together with spaces.\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp49iy8omo.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp49iy8omo.lua:8: in function 'candidate'\n\t/tmp/tmp49iy8omo.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeu4h1dh8.lua:36: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  sorted_numbers = sorted_numbers:sub(1,\
    \ -2)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx8rfiki4.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpx8rfiki4.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpx8rfiki4.lua:19: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[%z\\- ]', '')\
    \ -- Remove non-numeric characters\n  local numbers = string.gsub(numbers, '[%z\\\
    - ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\- ]', '') -- Remove non-numeric characters\n  local numbers = string.gsub(numbers,\
    \ '[%z\\\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpylups6__.lua:30: '')'' expected (to close ''('' at line 29)
    near ''luaunit''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpyhwv9c2z.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local\
    \ numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers =\
    \ numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n\
    \  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local\
    \ numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers\
    \ = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers =\
    \ numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', '')\n  local numbers = numbers:gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ '')\n  local numbers = numbers:gsub('%d+\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpjgpujb89.lua:26: unfinished string near ''''%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\3')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\4')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\5')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\6')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\7')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\8')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\\\9')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\10')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\11')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\12')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\13')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\14')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\15')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\16')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\17')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\18')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\19')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\\\20')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)', '\\\\21')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\22')\n  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzjz42xf1.lua:29: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('[^0-9]', '')\n\
    \  local numbers = numbers:gsub(' ', '') -- remove spaces\n  local numbers = numbers:gsub('(^|-)([1-9])',\
    \ '\\\\2') -- remove leading minus sign\n  local numbers = numbers:gsub('([1-9])(^|-)',\
    \ '\\\\2') -- remove trailing minus sign\n  local numbers = numbers:gsub('([1-9])$',\
    \ '\\1') -- remove trailing zero\n  local numbers = numbers:gsub('([1-9])', '\\\
    1') -- remove leading zero\n  return numbers\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplcjb3b1p.lua:20:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmplcjb3b1p.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local num_spaces\
    \ = #numbers - 1\n  for i = 1, num_spaces do\n    local num_digits = tonumber(numbers[i+1])\n\
    \    if num_digits == 0 then\n      sorted_numbers = sorted_numbers + ' '\n  \
    \  else\n      local num_digits_str = string.format('%0*d', num_digits, num_digits)\n\
    \      sorted_numbers = sorted_numbers + num_digits_str\n    end\n  end\n  return\
    \ sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp67dv4kte.lua:14:\
    \ invalid option '%*' to 'format'\nstack traceback:\n\t/tmp/tmp67dv4kte.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp67dv4kte.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9vnu7qd.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpy9vnu7qd.lua:8: in function 'candidate'\n\t/tmp/tmpy9vnu7qd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = numbers.split(\" \"\
    )\n  local sorted_numbers = \"\"\n  for _, number in ipairs(numbers_array) do\n\
    \    sorted_numbers = sorted_numbers + number .. \" \"\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbds2wze9.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpbds2wze9.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpbds2wze9.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpaqygkwb0.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    sorted_numbers\
    \ = sorted_numbers + number .. ' '\n  end\n  return sorted_numbers\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpab2bznb2.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpab2bznb2.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpab2bznb2.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%w+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%w+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%w+%d+%d+%w+%d+%d+%w+', ''):gsub('%d+%d+%w+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzs95ouxz.lua:7: unfinished string near ''''%d+%d+%w+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+%d+%d+%w+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_sorted = {}\n  local num_numbers\
    \ = #numbers\n  local num_digits = math.floor(math.log(num_numbers, 10))\n  local\
    \ num_digits_needed = num_digits + 1\n  local num_digits_remaining = num_digits\n\
    \  local num_digits_left_to_go = num_digits_needed\n  local num_digits_left_to_go_needed\
    \ = num_digits_needed\n  local num_digits_left_to_go_needed_remaining = num_digits_needed\n\
    \  local num_digits_left_to_go_needed_remaining_index = 0\n  local num_digits_left_to_go_needed_remaining_digit\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_index = 0\n  local\
    \ num_digits_left_to_go_needed_remaining_digit_string = ''\n  local num_digits_left_to_go_needed_remaining_digit_string_length\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_index\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string\
    \ = ''\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_index\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string\
    \ = ''\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_index\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string\
    \ = ''\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length_string\
    \ = ''\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length_string_length_index\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length_string_length_string\
    \ = ''\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length_string_length_string_length\
    \ = 0\n  local num_digits_left_to_go_needed_remaining_digit_string_length_string_length_string_length_string_length_string_length\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxzh7dxez.lua:47: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9b_q_f81.lua:7: unfinished string near ''''%d+%d+%w+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('( )([^ ]+)( )','%2$1 %3\
    \ %4')\n  local numbers = numbers:gsub('( )([^ ]+)','%2$1 %3')\n  local numbers\
    \ = numbers:gsub('( )([^ ]+)( )','%2$1 %3')\n  local numbers = numbers:gsub('(\
    \ )([^ ]+)','%2$1')\n  local numbers = numbers:gsub('( )([^ ]+)( )','%2$1')\n\
    \  local numbers = numbers:gsub('( )([^ ]+)','%2$1')\n  local numbers = numbers:gsub('(\
    \ )([^ ]+)( )','%2$1')\n  local numbers = numbers:gsub('( )([^ ]+)','%2$1')\n\
    \  local numbers = numbers:gsub('( )([^ ]+)( )','%2$1')\n  local numbers = numbers:gsub('(\
    \ )([^ ]+)','%2$1')\n  local numbers = numbers:gsub('( )([^ ]+)( )','%2$1')\n\
    \  local numbers = numbers:gsub('( )([^ ]+)','%2$1')\n  local numbers = numbers:gsub('(\
    \ )([^ ]+)( )','%2$1')\n  local numbers = numbers:gsub('( )([^ ]+)','%2$1')\n\
    \  local numbers = numbers:gsub('( )([^ ]+)( )','%2$1')\n  local numbers = numbers:gsub('(\
    \ )([^ ]+)','%2$1')\n  local numbers = numbers:gsub('( )([^ ]+)( )','%2$1')\n\
    \  local numbers = numbers:gsub('( )([^ ]+)','%2$1')\n  local numbers = numbers:gsub('(\
    \ )([^ ]+)( )','%2$1')\n  local numbers = numbers:gsub('( )([^ ]+)','%2$1')\n\
    \  local numbers = numbers:gsub('( )([^ ]+)( )','%2$1')\n  local numbers = numbers:gsub('(\
    \ )([^ ]+)','%2$1')\n  local numbers = numbers:gsub('( )([^\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7mpzg282.lua:30: unfinished string near ''''( )([^''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('\
    \ %w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_28wy29q.lua:24: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = {}\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    table.insert(numbers_table,\
    \ tonumber(number))\n  end\n  table.sort(numbers_table)\n  return table.concat(numbers_table,\
    \ '') -- Join back together with spaces.\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq1wk1das.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpq1wk1das.lua:8: in function 'candidate'\n\t/tmp/tmpq1wk1das.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[- ])(%d+)([^-\
    \ ]|$)', function(digits)\n        return tonumber(digits)\n    end)\n    table.sort(numbers)\n\
    \    return table.concat(numbers, \" \")\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp0ej1u0t2.lua:10:\
    \ bad argument #1 to 'sort' (table expected, got string)\nstack traceback:\n\t\
    /tmp/tmp0ej1u0t2.lua:10: in function 'candidate'\n\t/tmp/tmp0ej1u0t2.lua:17: in\
    \ function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+', ''):gsub('%w+',\
    \ ''):gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_ro9fi5t.lua:7: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$', '\\1\\2'):gsub('(^|%s):(%a+)$',\
    \ '\\1\\2'):gsub('(\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo58ppc8j.lua:7: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%w+',\
    \ ''):gsub('%d+%d+%d+%d+\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpydyz2tnz.lua:7: unfinished string near ''''%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\\
    1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\1\\3')\n  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgo77b1k5.lua:23: unfinished string near ''''(^|[%z])''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers_table = {}\n    for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n        table.insert(numbers_table,\
    \ tonumber(number))\n    end\n    table.sort(numbers_table)\n    return table.concat(numbers_table,\
    \ '') -- Join back together with spaces\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqhjfig54.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpqhjfig54.lua:8: in function 'candidate'\n\t/tmp/tmpqhjfig54.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)','%2%1%3')\n  local numbers = numbers:gsub('(^|[%z])(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0mlyjm9x.lua:22: unfinished string near ''''(^|[%z])(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\
    \\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local numbers =\
    \ numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z]+)([%d]+)([%z]+)$',\
    \ '\\\\2\\\\3')\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpiidtqttl.lua:36: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', '%1 %2 %3')\n  local numbers = numbers:gsub('%d+', '%1 %2\
    \ %3')\n  local numbers = numbers:gsub('%1 %2 %3', '%d+')\n  return numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphzsdagcg.lua:9:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmphzsdagcg.lua:9: in function\
    \ 'candidate'\n\t/tmp/tmphzsdagcg.lua:16: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([^ ]+)( |$)','%2$1 %3 %4')\n  local \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpeu4h1dh8.lua:36: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  local num_spaces\
    \ = #numbers - 1\n  local num_digits = #sorted_numbers - 1\n  local num_zeros\
    \ = #sorted_numbers - num_spaces\n  local num_ones = #sorted_numbers - num_spaces\
    \ - num_zeros\n  local num_twos = #sorted_numbers - num_spaces - num_zeros - num_ones\n\
    \  local num_threes = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos\n\
    \  local num_fours = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos\
    \ - num_threes\n  local num_fives = #sorted_numbers - num_spaces - num_zeros -\
    \ num_ones - num_twos - num_threes - num_fours\n  local num_sixes = #sorted_numbers\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\n\
    \  local num_sevens = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos\
    \ - num_threes - num_fours - num_fives - num_sixes\n  local num_eights = #sorted_numbers\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\
    \ - num_sixes - num_sevens\n  local num_nines = #sorted_numbers - num_spaces -\
    \ num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes\
    \ - num_sevens - num_eights\n  local num_tens = #sorted_numbers - num_spaces -\
    \ num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes\
    \ - num_sevens - num_eights - num_nines\n  local num_elevens = #sorted_numbers\
    \ - num_spaces - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives\
    \ - num_sixes - num_sevens - num_eights - num_nines - num_tens\n  local num_twelves\
    \ = #sorted_numbers - num_spaces - num_zeros - num_ones - num_twos - num_threes\
    \ - num_fours - num_fives - num_sixes - num_sevens - num_eights - num_nines -\
    \ num_tens - num_elevens\n  local num_thirteens = #sorted_numbers - num_spaces\
    \ - num_zeros - num_ones - num_twos - num_threes - num_fours - num_fives - num_sixes\
    \ - num_sevens - num_eights - num_nines - num_tens - \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp29faai4_.lua:24: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local sorted_numbers = ''\n    local numbers_array\
    \ = numbers.split(' ')\n    for _, number in pairs(numbers_array) do\n       \
    \ local number = tonumber(number)\n        if number ~= nil then\n           \
    \ sorted_numbers = sorted_numbers + tostring(number)\n        end\n    end\n \
    \   return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp1cwjynhp.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmp1cwjynhp.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmp1cwjynhp.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([%z]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([%z\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpp0jbf44u.lua:23: unfinished string near ''''(^| )([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsx47lwtl.lua:24: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdb4ldfzk.lua:28: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[- ])(%d+)',\
    \ '\\\\2'):gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([-\
    \ ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\\
    3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local numbers =\
    \ numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([-\
    \ ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\\
    3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local numbers =\
    \ numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([-\
    \ ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\\
    3')\n  local numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local numbers =\
    \ numbers:gsub('(%d+)([- ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([-\
    \ ])(%d+)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(%d+)([- ])(\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpo8w431pa.lua:27: unfinished string near ''''(%d+)([- ])(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n    local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpl9_1vetn.lua:31: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  local numbers = numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  local\
    \ numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsxeg_c3q.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers:gsub('%d', number)\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy9vnu7qd.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpy9vnu7qd.lua:8: in function 'candidate'\n\t/tmp/tmpy9vnu7qd.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpppp4fx0i.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([%z]+)(\
    \ |$)', '\\2\\3')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\\
    2')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n \
    \ local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n \
    \ local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^|\
    \ )([%z]+)( |$)', '\\1\\2')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)',\
    \ '\\1\\2')\n  local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n \
    \ local numbers = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n  local numbers\
    \ = numbers:gsub('(^| )([%z]+)( |$)', '\\1\\2')\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_bj4ze18.lua:38: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy32rz6at.lua:31: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\1')\n  local numbers\
    \ = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy32rz6at.lua:31: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  sorted_numbers\
    \ = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n\
    \  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n\
    \  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n\
    \  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n\
    \  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)',\
    \ '\\\\2')\n  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n\
    \  sorted_numbers = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  sorted_numbers\
    \ = sorted_numbers:gsub('(^|%s):(%a+)', '\\\\2')\n  \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9uzkoxf6.lua:41: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)( )(%w+)',\
    \ '\\2\\3')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\3')\n  local\
    \ numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers =\
    \ numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)(\
    \ )(%w+)', '\\1\\2')\n  local numbers = numbers:gsub('(%w+)( )(%w+)', '\\1\\2')\n\
    \  local numbers = numbers:gsub('\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpepr61qqh.lua:28: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)(\
    \ |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1\
    \ %3 %4')\n  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n\
    \  local numbers = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers\
    \ = numbers:gsub('(^| )([0-9]+)( |$)','%2$1 %3 %4')\n  local numbers = numbers:gsub('(^|\
    \ )([0-9]+)( |$)\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4issjigd.lua:24: unfinished string near ''''(^| )([0-9]+)(
    |$)''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpppp4fx0i.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second)\n    return second .. first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)',\
    \ function(_, first, second)\n    return first .. second\n  end)\n  local numbers\
    \ = numbers:gsub('(%w+)(%d+)', function(_, first, second)\n    return second ..\
    \ first\n  end)\n  local numbers = numbers:gsub('(%w+)(%d+)', function(_, first,\
    \ second\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpw45a9c7a.lua:59: '')'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_array = string.gmatch(numbers,\
    \ \"%w+\")\n  table.sort(numbers_array)\n  return table.concat(numbers_array)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpco_xlu3j.lua:8:\
    \ bad argument #1 to 'sort' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpco_xlu3j.lua:8: in function 'candidate'\n\t/tmp/tmpco_xlu3j.lua:15:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+',\
    \ '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n  local numbers =\
    \ numbers:gsub('%w+', '%1 %2')\n  local numbers = numbers:gsub('%w+', '%1 %2')\n\
    \  local numbers = numbers:gsub('%w+', '%1 %2')\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp6tktiosk.lua:51: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', ''):gsub('%d+', ''):gsub('%d', '%d'):gsub('%d+',\
    \ '%d+'):gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+'):gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+',\
    \ '%d+')\n  sorted_numbers = sorted_numbers:gsub('%d+', '%d+')\n  sorted_numbers\
    \ = sorted_numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpf439ppq2.lua:36: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2'):gsub('(^|%s):(%a+)$', '\\1\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxjiitewa.lua:19: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmphl59xwm7.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n    local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ hyphens\n    local numbers = string.gsub(numbers, '0', '') -- Remove zeros\n\
    \    local numbers = string.gsub(numbers, '1', '') -- Remove ones\n    local numbers\
    \ = string.gsub(numbers, '2', '') -- Remove twos\n    local numbers = string.gsub(numbers,\
    \ '3', '') -- Remove threes\n    local numbers = string.gsub(numbers, '4', '')\
    \ -- Remove fours\n    local numbers = string.gsub(numbers, '5', '') -- Remove\
    \ fives\n    local numbers = string.gsub(numbers, '6', '') -- Remove sixes\n \
    \   local numbers = string.gsub(numbers, '7', '') -- Remove sevens\n    local\
    \ numbers = string.gsub(numbers, '8', '') -- Remove eights\n    local numbers\
    \ = string.gsub(numbers, '9', '') -- Remove nines\n    local numbers = string.gsub(numbers,\
    \ ',', '') -- Remove commas\n    local numbers = string.gsub(numbers, '', '')\
    \ -- Remove spaces\n    local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ hyphens\n    local numbers = string.gsub(numbers, '0', '') -- Remove zeros\n\
    \    local numbers = string.gsub(numbers, '1', '') -- Remove ones\n    local numbers\
    \ = string.gsub(numbers, '2', '') -- Remove twos\n    local numbers = string.gsub(numbers,\
    \ '3', '') -- Remove threes\n    local numbers = string.gsub(numbers, '4', '')\
    \ -- Remove fours\n    local numbers = string.gsub(numbers, '5', '') -- Remove\
    \ fives\n    local numbers = string.gsub(numbers, '6', '') -- Remove sixes\n \
    \   local numbers = string.gsub(numbers, '7', '') -- Remove sevens\n    local\
    \ numbers = string.gsub(numbers, '8', '') -- Remove eights\n    local numbers\
    \ = string.gsub(numbers, '9', '') -- Remove nines\n    local numbers = string.gsub(numbers,\
    \ ',', '') -- Remove commas\n    local numbers = string.gsub(numbers, '', '')\
    \ -- Remove spaces\n    local numbers = string.gsub(numbers, '-', '') -- Remove\
    \ hyphens\n    local numbers = string.gsub(numbers, '0', '') -- Remove zeros\n\
    \    local numbers = string.gsub(numbers, '1', '') -- Remove ones\n    local numbers\
    \ = string.gsub(numbers, '2', '') -- Remove twos\n\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmps80mwyr7.lua:50: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- Remove spaces\n  local numbers = string.gsub(numbers, '[^0-9]', '') --\
    \ Remove non-numbers\n  local numbers = string.gsub(numbers, '^0', '') -- Remove\
    \ leading zeroes\n  local numbers = string.gsub(numbers, '^', '') -- Remove leading\
    \ spaces\n  local numbers = string.gsub(numbers, '$', '') -- Remove trailing spaces\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- Remove leading plusses\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- Remove trailing plusses\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- Remove leading plusses\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- Remove trailing plusses\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- Remove leading plusses\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- Remove trailing plusses\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- Remove leading plusses\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- Remove trailing plusses\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- Remove leading plusses\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+$', '') -- Remove trailing plusses\n\
    \  local numbers = string.gsub(numbers, '%-$', '') -- Remove trailing minusses\n\
    \  local numbers = string.gsub(numbers, '%+', '') -- Remove leading plusses\n\
    \  local numbers = string.gsub(numbers, '%-', '') -- Remove trailing \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpa4kvljw6.lua:45: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d%d+', ''):gsub('%d%d%d+', ''):gsub('%d%d%d%d+', ''):gsub('%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+', ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d+',\
    \ ''):gsub('%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpk_zeewqe.lua:7: unfinished string near ''''%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number .. \" \"\
    \n  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp29z23i4m.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp29z23i4m.lua:8: in function 'candidate'\n\t/tmp/tmp29z23i4m.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, ' ',\
    \ '') -- remove spaces\n  local numbers = string.gsub(numbers, '[%z]', '')  --\
    \ remove zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  -- remove\
    \ zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n\
    \  local numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local\
    \ numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local numbers\
    \ = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local numbers = string.gsub(numbers,\
    \ '[%z]', '')  -- remove zeros\n  local numbers = string.gsub(numbers, '[%z]',\
    \ '')  -- remove zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  --\
    \ remove zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  -- remove\
    \ zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n\
    \  local numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local\
    \ numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local numbers\
    \ = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local numbers = string.gsub(numbers,\
    \ '[%z]', '')  -- remove zeros\n  local numbers = string.gsub(numbers, '[%z]',\
    \ '')  -- remove zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  --\
    \ remove zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  -- remove\
    \ zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n\
    \  local numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local\
    \ numbers = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local numbers\
    \ = string.gsub(numbers, '[%z]', '')  -- remove zeros\n  local numbers = string.gsub(numbers,\
    \ '[%z]', '')  -- remove zeros\n  local numbers = string.gsub(numbers, '[%z]',\
    \ '')  -- remove zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  --\
    \ remove zeros\n  local numbers = string.gsub(numbers, '[%z]', '')  -- remove\
    \ zeros\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpe8m5rp0j.lua:46: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_table = { }\n  for _, number\
    \ in ipairs(string.gmatch(numbers, '%d+')) do\n    table.insert(numbers_table,\
    \ tonumber(number))\n  end\n  table.sort(numbers_table)\n  return table.concat(numbers_table,\
    \ ' ')\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpld3ya7ir.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got function)\nstack traceback:\n\
    \t/tmp/tmpld3ya7ir.lua:8: in function 'candidate'\n\t/tmp/tmpld3ya7ir.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\\
    3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n\
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)([^%z]|$)', '\\\\\
    2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpc1hkt58q.lua:23: unfinished string near ''''(^|[%z])''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  local numbers_array\
    \ = numbers.split(' ')\n  for _, number in ipairs(numbers_array) do\n    local\
    \ number = tonumber(number)\n    if number ~= nil then\n      sorted_numbers =\
    \ sorted_numbers + string.format('%d ', number)\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpxso1bcm5.lua:8:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpxso1bcm5.lua:8:\
    \ in function 'candidate'\n\t/tmp/tmpxso1bcm5.lua:21: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)', '\\2')\n  local numbers\
    \ = \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate =\
    \ sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp1u_dxxfa.lua:31: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = string.gsub(numbers, \"%w+\"\
    , \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers\
    \ = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.gsub(numbers,\
    \ \"%w+\", \"\")\n  local numbers = string.gsub(numbers, \"%w+\", \"\")\n  local\
    \ numbers = string.gsub(numbers, \"%w+\", \"\")\n  local numbers = string.\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp2_7ubz3t.lua:47: unexpected symbol near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n \
    \ local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%a+)([%z])', '\\\\2\\\
    \\3')\n  local \nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdqdldn3m.lua:36: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\\\2')\n  local numbers = numbers:gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdb4ldfzk.lua:28: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1\
    \ '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1\
    \ ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1\
    \ '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1\
    \ ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers\
    \ = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+',\
    \ '%1 '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1\
    \ '):gsub('%w+', '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+',\
    \ '%1 ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1\
    \ ')\n  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n\
    \  sorted_numbers = sorted_numbers:gsub('%w+', '%1 '):gsub('%w+', '%1 ')\n  \n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpggkkueap.lua:41: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpccgrderm.lua:7: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local\
    \ numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n    local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n    local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdx6eyk8h.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbh2smprh.lua:7: unfinished string near ''''(^|[%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z])(%d+)([%z''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers_as_strings = numbers.split(\"\
    \ \"):map(function(number)\n    return tonumber(number)\n  end)\n  table.sort(numbers_as_strings)\n\
    \  return table.concat(numbers_as_strings)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpy572hd7h.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpy572hd7h.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpy572hd7h.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = \"\"\n  for i = 1,\
    \ #numbers do\n    local number = tonumber(numbers[i])\n    if number ~= nil then\n\
    \      sorted_numbers = sorted_numbers .. number\n    end\n  end\n  return sorted_numbers\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpj1_3gt0p.lua:21:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpj1_3gt0p.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + ' ' .. number\n\
    \  end\n  return sorted_numbers\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr7jbka8n.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpr7jbka8n.lua:8: in function 'candidate'\n\t/tmp/tmpr7jbka8n.lua:17:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\\
    3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  \
    \  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local numbers =\
    \ numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\
    \\2\\\\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\
    \\1\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\\
    3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\1\\3')\n  \
    \  local numbers = numbers:gsub('(^|[%z])\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzzlp6ova.lua:23: unfinished string near ''''(^|[%z])''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp86m5be8n.lua:8: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(%w+) ','%1\
    \ ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n\
    \  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n\
    \  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n\
    \  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n\
    \  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers =\
    \ numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+) ','%1 ')\n\
    \  local numbers = numbers:gsub('(%w+) ','%1 ')\n  local numbers = numbers:gsub('(%w+)\
    \ ','%1 ')\n  local numbers = numbers:gsub\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcmmk_ve_.lua:36: function arguments expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+',\
    \ ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d',\
    \ ''):gsub('%w+', ''):gsub('%d+', ''):gsub('%d', ''):gsub('%w+', '\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpccgrderm.lua:7: unfinished string near ''''''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = ''\n  for _, number\
    \ in ipairs(numbers) do\n    sorted_numbers = sorted_numbers + number\n  end\n\
    \  table.sort(sorted_numbers)\n  return sorted_numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzclwvyzh.lua:8:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpzclwvyzh.lua:8: in function 'candidate'\n\t/tmp/tmpzclwvyzh.lua:18:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\\
    2\\\\3')\n    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n\
    \    local numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\2\\\\3')\n    local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppf0fzldx.lua:24: unfinished string near ''''(^|[%z])(%d+)''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|[%z])(%d+)([%z])',\
    \ '\\\\2\\\\3')\n  local numbers = numbers:gsub('(^|[%z])(%d+)', '\\\\2')\n  local\
    \ numbers = numbers:gsub('(^|[%z])(%d+)([%z])', '\\\\1\\\\3')\n  local numbers\
    \ = numbers:gsub('(^|[%z])(%d+)', '\\\\1')\n  return numbers\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = sort_numbers\n    lu.assertEquals(candidate(''),\
    \ '')\n    lu.assertEquals(candidate('three'), 'three')\n    lu.assertEquals(candidate('three\
    \ five nine'), 'three five nine')\n    lu.assertEquals(candidate('five zero four\
    \ seven nine eight'), 'zero four five seven eight nine')\n    lu.assertEquals(candidate('six\
    \ five four three two one zero'), 'zero one two three four five six')\nend\n\n\
    os.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps1xof95p.lua:20:\
    \ expected: \"zero four five seven eight nine\"\nactual: \"five zero four seven\
    \ nine eight\"\nstack traceback:\n\t/tmp/tmps1xof95p.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d+%d+', ''):gsub('%d+%d+%d+', ''):gsub('%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu602c_cq.lua:7: unfinished string near ''''%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local sorted_numbers = numbers.split(\" \"\
    )\n  table.sort(sorted_numbers)\n  return table.concat(sorted_numbers, \" \")\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpw1a70qta.lua:7:\
    \ attempt to call field 'split' (a nil value)\nstack traceback:\n\t/tmp/tmpw1a70qta.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpw1a70qta.lua:15: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\2')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers\
    \ = numbers:gsub('(^|%s):(%a+)$', '\\1')\n  local numbers = numbers:gsub('(^|%s):(%a+)$',\
    \ '\\1')\n  local numbers = numbers:\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = sort_numbers\n    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp5lx3qcc0.lua:30: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%d', ''):gsub('%w', '')\n  local numbers_sorted = {}\n  for i = 1,\
    \ #numbers do\n    table.insert(numbers_sorted, tonumber(numbers[i]))\n  end\n\
    \  table.sort(numbers_sorted)\n  local result = {}\n  for i = 1, #numbers do\n\
    \    table.insert(result, numbers[i])\n  end\n  return table.concat(result)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz4finope.lua:24:\
    \ expected: \"three\"\nactual: \"\"\nstack traceback:\n\t/tmp/tmpz4finope.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750377
- exit_code: 1
  program: "-- Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    -- Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n-- Return the string with numbers sorted from smallest\
    \ to largest\n-- >>> sort_numbers('three one five')\n-- 'one three five'\nlocal\
    \ function sort_numbers(numbers)\n  local numbers = numbers:gsub('%w+', ''):gsub('%d+',\
    \ ''):gsub('%w+%d+', ''):gsub('%d+%w+', ''):gsub('%d+%d+%w+', ''):gsub('%d+%d+%w+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+',\
    \ ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+', ''):gsub('%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sort_numbers\n\
    \    lu.assertEquals(candidate(''), '')\n    lu.assertEquals(candidate('three'),\
    \ 'three')\n    lu.assertEquals(candidate('three five nine'), 'three five nine')\n\
    \    lu.assertEquals(candidate('five zero four seven nine eight'), 'zero four\
    \ five seven eight nine')\n    lu.assertEquals(candidate('six five four three\
    \ two one zero'), 'zero one two three four five six')\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpxhrt1cl5.lua:7: unfinished string near ''''%d+%d+%w+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d+%d''

    '
  stdout: ''
  timestamp: 1659750377
