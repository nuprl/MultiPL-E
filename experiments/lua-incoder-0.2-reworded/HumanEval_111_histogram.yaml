name: HumanEval_111_histogram
language: lua
prompt: "-- Given a string representing a space separated lowercase letters, return\
  \ a table\n-- of the letter with the most repetition and containing the corresponding\
  \ count.\n-- If several letters have the same occurrence, return all of them.\n\
  -- Example:\n-- >>> histogram('a b c')\n-- {['a'] = 1, ['b'] = 1, ['c'] = 1}\n--\
  \ >>> histogram('a b b a')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('a b c a\
  \ b')\n-- {['a'] = 2, ['b'] = 2}\n-- >>> histogram('b b b b a')\n-- {['b'] = 4}\n\
  -- >>> histogram('')\n-- {}\nlocal function histogram(test)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = histogram\n\
  \    lu.assertEquals(candidate('a b b a'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a\
  \ b c a b'), {['a'] = 2, ['b'] = 2})\n    lu.assertEquals(candidate('a b c d g'),\
  \ {['a'] = 1, ['b'] = 1, ['c'] = 1, ['d'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('r\
  \ t g'), {['r'] = 1, ['t'] = 1, ['g'] = 1})\n    lu.assertEquals(candidate('b b\
  \ b b a'), {['b'] = 4})\n    lu.assertEquals(candidate('r t g'), {['r'] = 1, ['t']\
  \ = 1, ['g'] = 1})\n    lu.assertEquals(candidate(''), {})\n    lu.assertEquals(candidate('a'),\
  \ {['a'] = 1})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local result = {}\n  for letter, count in pairs(test:gmatch(\"%a+\"\
    )) do\n    result[letter] = result[letter] or 0\n    result[letter] = result[letter]\
    \ + 1\n  end\n  return result\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  local max = {}\n  for\
    \ letter, count in pairs(counts) do\n    local max = letter\n    if count > counts[max]\
    \ then\n      max = letter\n    end\n  end\n  local result = {}\n  for letter,\
    \ count in pairs(counts) do\n    if letter == max then\n      result[letter] =\
    \ count\n    end\n  end\n  return result\nend", "  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"%a\") do\n    counts[letter] = counts[letter] or 0\n\
    \    counts[letter] = counts[letter] + 1\n  end\n  local result = {}\n  for letter,\
    \ count in pairs(counts) do\n    result[letter] = count\n  end\n  return result\n\
    end", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\")\
    \ do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter, count\
    \ in pairs(test) do\n    result[letter] = result[letter] or count\n  end\n  return\
    \ result\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([^ ]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count > max[count] then\n      max[count] = letter\n    end\n  end\n\
    \  return max\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local letters = {}\n\
    \  for letter in string.gmatch(test, \"%a\") do\n    table.insert(letters, letter)\n\
    \  end\n  local counts = {}\n  for _, letter in ipairs(letters) do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ result = {}\n  for _, letter in ipairs(letters) do\n    result[letter] = counts[letter]\n\
    \  end\n  return result\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([%a]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts)\
    \ do\n    result[letter] = count\n  end\n  return result\nend", "  local counts\
    \ = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ result = {}\n  for letter, count in pairs(counts) do\n    result[letter] = count\n\
    \  end\n  return result\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([%a]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count > max[count] then\n      max[count] = letter\n    end\n  end\n\
    \  return max\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n \
    \   result[letter] = count\n  end\n  return result\nend", "  local counts = {}\n\
    \  for letter in string.gmatch(test, \"%a\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ result = {}\n  for letter, count in pairs(counts) do\n    result[letter] = count\n\
    \  end\n  return result\nend", "  local counts = {}\n  for letter in test:gmatch('([a-z]+)')\
    \ do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([^ ]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter,\
    \ count in pairs(counts) do\n    if count > max then\n      max = count\n    \
    \  maxLetter = letter\n    end\n  end\n  return maxLetter, max\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local result = {}\n \
    \ for letter, count in pairs(test) do\n    result[letter] = result[letter] or\
    \ count\n  end\n  return result\nend", "  local result = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    local count = result[letter] or 0\n    result[letter] = count\
    \ + 1\n  end\n  return result\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n \
    \   result[letter] = count\n  end\n  return result\nend", "  local result = {}\n\
    \  for letter, count in pairs(test) do\n    local letters = result[letter] or\
    \ {}\n    letters[letter] = count\n    result[letter] = letters\n  end\n  return\
    \ result\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    local count = result[letter] or 0\n    result[letter] = count\
    \ + 1\n  end\n  return result\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local letters = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n  \
    \  table.insert(letters, letter)\n  end\n  local counts = {}\n  for _, letter\
    \ in ipairs(letters) do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local max = {}\n  for _, letter in ipairs(letters)\
    \ do\n    local count = counts[letter]\n    if count > max[letter] then\n    \
    \  max[letter] = count\n    end\n  end\n  local result = {}\n  for _, letter in\
    \ ipairs(letters) do\n    if max[letter] == counts[letter] then\n      result[letter]\
    \ = counts[letter]\n    end\n  end\n  return result\nend", "  local counts = {}\n\
    \  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"([%a]+)\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local letters = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    letters[letter] = letters[letter] or 1\n    letters[letter] =\
    \ letters[letter] + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter,\
    \ count in pairs(letters) do\n    if count > max then\n      max = count\n   \
    \   maxLetter = letter\n    end\n  end\n  return maxLetter, max\nend", "  local\
    \ counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] =\
    \ counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend", "  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in test:gmatch('([a-z]+) ') do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local result = {}\n  for letter, count in pairs(test) do\n\
    \    result[letter] = result[letter] or count\n  end\n  return result\nend", " \
    \ local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    local count = counts[letter] or 0\n    counts[letter] = count\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter, count\
    \ in pairs(test) do\n    result[letter] = result[letter] or count\n  end\n  return\
    \ result\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in string.gmatch(test, \"%a\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"([^ ]+)\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([%a]+)\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"[%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local max = 0\n  local\
    \ result = {}\n  for letter, count in pairs(counts) do\n    if count > max then\n\
    \      max = count\n      result = {letter = letter, count = count}\n    end\n\
    \  end\n  return result\nend", "  local result = {}\n  for letter, count in pairs(test)\
    \ do\n    result[letter] = result[letter] or count\n  end\n  return result\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n   \
    \ table.insert(counts, letter)\n  end\n  local maxCount = 1\n  local maxLetter\
    \ = nil\n  for letter, count in pairs(counts) do\n    if count > maxCount then\n\
    \      maxCount = count\n      maxLetter = letter\n    end\n  end\n  local result\
    \ = {}\n  for letter, count in pairs(counts) do\n    if letter == maxLetter then\n\
    \      result[letter] = count\n    end\n  end\n  return result\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local letters = {}\n  for letter in string.gmatch(test, \"\
    ([a-z]+)\") do\n    table.insert(letters, letter)\n  end\n  local counts = {}\n\
    \  for _, letter in ipairs(letters) do\n    counts[letter] = counts[letter] or\
    \ 0\n    counts[letter] = counts[letter] + 1\n  end\n  local result = {}\n  for\
    \ _, letter in ipairs(letters) do\n    result[letter] = counts[letter]\n  end\n\
    \  return result\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local letters = {}\n  for letter in string.gmatch(test, \"%a\") do\n    table.insert(letters,\
    \ letter)\n  end\n  local counts = {}\n  for _, letter in ipairs(letters) do\n\
    \    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"[%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local result = {}\n  for letter in test:gmatch('%a') do\n    local count = result[letter]\
    \ or 0\n    result[letter] = count + 1\n  end\n  return result\nend", "  local\
    \ letters = {}\n  for letter in string.gmatch(test, \"%a\") do\n    table.insert(letters,\
    \ letter)\n  end\n  local counts = {}\n  for letter in pairs(letters) do\n   \
    \ counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter] +\
    \ 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    table.insert(counts, letter)\n  end\n  local result = {}\n  for _, letter\
    \ in ipairs(counts) do\n    local count = counts[letter]\n    if count > 1 then\n\
    \      result[letter] = count\n    end\n  end\n  return result\nend", "  local\
    \ counts = {}\n  for letter in test:gmatch('([a-z]+) ') do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([%a]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend", "  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"([%a]+)\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ max = 0\n  local maxLetter\n  for letter, count in pairs(counts) do\n    if\
    \ count > max then\n      max = count\n      maxLetter = letter\n    end\n  end\n\
    \  local result = {}\n  for letter, count in pairs(counts) do\n    if count ==\
    \ max then\n      result[letter] = count\n    end\n  end\n  if maxLetter == nil\
    \ then\n    return result\n  end\n  result[maxLetter] = max\n  return result\n\
    end", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\")\
    \ do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in string.gmatch(test, \"%a\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local letters = {}\n  local counts = {}\n\
    \  for letter in test:gmatch(\"[%a]+\") do\n    local count = letters[letter]\
    \ or 0\n    letters[letter] = count + 1\n    counts[letter] = counts[letter] or\
    \ 0\n    counts[letter] = counts[letter] + 1\n  end\n  return letters\nend", " \
    \ local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter, count\
    \ in pairs(test) do\n    local count = result[letter] or 0\n    result[letter]\
    \ = count + 1\n  end\n  return result\nend", "  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"%a\") do\n    counts[letter] = counts[letter] or 1\n\
    \    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    table.insert(counts, letter)\n  end\n  local maxCount = 1\n  local maxLetter\n\
    \  for letter, count in pairs(counts) do\n    if count > maxCount then\n     \
    \ maxCount = count\n      maxLetter = letter\n    end\n  end\n  return maxLetter,\
    \ maxCount\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"\
    %a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n \
    \   result[letter] = count\n  end\n  return result\nend", "  local counts = {}\n\
    \  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local result = {}\n  for letter, count in pairs(test) do\n    result[letter]\
    \ = result[letter] or count\n  end\n  return result\nend", "  local counts = {}\n\
    \  for letter in string.gmatch(test, \"([a-z]+) \") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local result = {}\n  for letter, count in pairs(test) do\n    local letters =\
    \ result[letter] or {}\n    letters[letter] = count\n    result[letter] = letters\n\
    \  end\n  return result\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local letters = {}\n\
    \  for letter in string.gmatch(test, \"%a\") do\n    table.insert(letters, letter)\n\
    \  end\n  local counts = {}\n  for letter in pairs(letters) do\n    table.insert(counts,\
    \ 0)\n  end\n  for letter in pairs(letters) do\n    local count = letters[letter]\n\
    \    for i = 1, #test do\n      if test[i] == letter then\n        count = count\
    \ + 1\n      end\n    end\n    counts[letter] = count\n  end\n  return counts\n\
    end", "  local result = {}\n  for letter, count in pairs(test) do\n    result[letter]\
    \ = result[letter] or 0\n    result[letter] = result[letter] + count\n  end\n\
    \  return result\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts)\
    \ do\n    result[letter] = count\n  end\n  return result\nend", "  local result\
    \ = {}\n  for letter in string.gmatch(test, \"([%a]+)\") do\n    local count =\
    \ result[letter] or 0\n    result[letter] = count + 1\n  end\n  return result\n\
    end", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n \
    \   counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter, count\
    \ in pairs(test) do\n    result[letter] = result[letter] or count\n  end\n  return\
    \ result\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in string.gmatch(test, \"%a\") do\n    local count = counts[letter]\
    \ or 0\n    counts[letter] = count + 1\n  end\n  return counts\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local result = {}\n  for letter, count in pairs(test) do\n   \
    \ local letters = result[letter] or {}\n    letters[letter] = letters[letter]\
    \ + 1 or count\n    result[letter] = letters\n  end\n  return result\nend", " \
    \ local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local result = {}\n  for letter, count in pairs(counts) do\n \
    \   result[letter] = count\n  end\n  return result\nend", "  local counts = {}\n\
    \  for letter in string.gmatch(test, \"([%a]+)\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  local max = {}\n  for\
    \ letter, count in pairs(counts) do\n    if count > max[count] then\n      max[count]\
    \ = letter\n    end\n  end\n  return max\nend", "  local counts = {}\n  for letter\
    \ in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter] or 0\n   \
    \ counts[letter] = counts[letter] + 1\n  end\n  return counts\nend", "  local\
    \ counts = {}\n  for letter in test:gmatch('%a') do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([%a]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch('([a-z]+)')\
    \ do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count > max[count] then\n      max[count] = letter\n    end\n  end\n\
    \  local result = {}\n  for letter, count in pairs(max) do\n    result[letter]\
    \ = count\n  end\n  return result\nend", "  local counts = {}\n  for letter in\
    \ test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local result = {}\n \
    \ for letter, count in pairs(test) do\n    local letterCount = result[letter]\
    \ or 0\n    result[letter] = letterCount + count\n  end\n  return result\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ max = {}\n  for letter, count in pairs(counts) do\n    if count > max[count]\
    \ then\n      max[count] = letter\n    end\n  end\n  return max\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in string.gmatch(test, \"([%a]+)\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in test:gmatch('%a') do\n    counts[letter] =\
    \ counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    table.insert(counts, letter)\n  end\n  local max = 0\n\
    \  local maxLetter\n  for letter, count in pairs(counts) do\n    if count > max\
    \ then\n      max = count\n      maxLetter = letter\n    end\n  end\n  local result\
    \ = {}\n  for letter, count in pairs(counts) do\n    if letter == maxLetter then\n\
    \      result[letter] = count\n    end\n  end\n  return result\nend", "  local\
    \ counts = {}\n  for letter in test:gmatch('([a-z]+) ') do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ max = {}\n  for letter, count in pairs(counts) do\n    if count > max[count]\
    \ then\n      max[count] = letter\n    end\n  end\n  return max\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([^\
    \ ]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local result = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      result = {letter = letter,\
    \ count = count}\n    end\n  end\n  return result\nend", "  local counts = {}\n\
    \  for letter in test:gmatch('%a') do\n    counts[letter] = counts[letter] or\
    \ 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend", " \
    \ local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts)\
    \ do\n    if count > max[count] then\n      max[count] = letter\n    end\n  end\n\
    \  local result = {}\n  for count, letter in pairs(max) do\n    result[letter]\
    \ = count\n  end\n  return result\nend", "  local result = {}\n  for letter, count\
    \ in pairs(test) do\n    result[letter] = result[letter] or 0\n    result[letter]\
    \ = result[letter] + count\n  end\n  return result\nend", "  local result = {}\n\
    \  for letter, count in pairs(test) do\n    local letters = result[letter] or\
    \ {}\n    letters[letter] = count\n    result[letter] = letters\n  end\n  return\
    \ result\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = 0\n  local maxLetter\n  for letter, count in pairs(counts)\
    \ do\n    if count > max then\n      max = count\n      maxLetter = letter\n \
    \   end\n  end\n  return maxLetter, max\nend", "  local counts = {}\n  for letter\
    \ in test:gmatch('%a') do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local result = {}\n \
    \ for letter in string.gmatch(test, \"([a-z]+)\") do\n    local count = result[letter]\
    \ or 0\n    result[letter] = count + 1\n  end\n  return result\nend", "  local\
    \ counts = {}\n  for letter in test:gmatch('%a') do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n   \
    \ table.insert(counts, letter)\n  end\n  local maxCount = 1\n  local maxLetter\n\
    \  for letter, count in pairs(counts) do\n    if count > maxCount then\n     \
    \ maxCount = count\n      maxLetter = letter\n    end\n  end\n  local result =\
    \ {}\n  for letter, count in pairs(counts) do\n    if letter == maxLetter then\n\
    \      result[letter] = count\n    end\n  end\n  return result\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"([^ ]+)\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\
    \ \") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([%a]+)\") do\n    table.insert(counts, letter)\n  end\n  local maxCount =\
    \ 1\n  local maxLetter\n  for letter, count in pairs(counts) do\n    if count\
    \ > maxCount then\n      maxCount = count\n      maxLetter = letter\n    end\n\
    \  end\n  local result = {}\n  for letter, count in pairs(counts) do\n    if letter\
    \ == maxLetter then\n      result[letter] = count\n    end\n  end\n  return result\n\
    end", "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n \
    \   counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  local max = {}\n  for letter, count in pairs(counts) do\n    if\
    \ count > max[count] then\n      max[count] = letter\n    end\n  end\n  return\
    \ max\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter, count\
    \ in pairs(test) do\n    local count = result[letter] or 0\n    result[letter]\
    \ = count + 1\n  end\n  return result\nend", "  local counts = {}\n  for letter\
    \ in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  local\
    \ max = {}\n  for letter, count in pairs(counts) do\n    if count > max[count]\
    \ then\n      max[count] = letter\n    end\n  end\n  return max\nend", "  local\
    \ result = {}\n  for letter, count in pairs(test:gmatch(\"([a-z]+)%s*\") .. test)\
    \ do\n    result[letter] = result[letter] or 0\n    result[letter] = result[letter]\
    \ + 1\n  end\n  return result\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"%a\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n\
    \    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local result = {}\n  for letter, count\
    \ in pairs(test) do\n    result[letter] = result[letter] or count\n  end\n  return\
    \ result\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in test:gmatch(\"\
    [%a]+\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+) \") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local counts = {}\n  for letter in test:gmatch(\"[%a]+\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    table.insert(counts, letter)\n  end\n  local maxCount = 1\n  local maxLetter\n\
    \  for letter, count in pairs(counts) do\n    if count > maxCount then\n     \
    \ maxCount = count\n      maxLetter = letter\n    end\n  end\n  local result =\
    \ {}\n  for letter, count in pairs(counts) do\n    if letter == maxLetter then\n\
    \      result[letter] = count\n    end\n  end\n  return result\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"%a\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\"\
    ) do\n    counts[letter] = counts[letter] or 0\n    counts[letter] = counts[letter]\
    \ + 1\n  end\n  return counts\nend", "  local counts = {}\n  for letter in string.gmatch(test,\
    \ \"([a-z]+)\") do\n    counts[letter] = counts[letter] or 1\n    counts[letter]\
    \ = counts[letter] + 1\n  end\n  return counts\nend", "  local counts = {}\n \
    \ for letter in test:gmatch(\"[%a]+\") do\n    counts[letter] = counts[letter]\
    \ or 0\n    counts[letter] = counts[letter] + 1\n  end\n  return counts\nend",
  "  local letters = {}\n  for letter in string.gmatch(test, \"%a\") do\n    table.insert(letters,\
    \ letter)\n  end\n  local counts = {}\n  for letter in pairs(letters) do\n   \
    \ table.insert(counts, 0)\n  end\n  for letter, count in pairs(letters) do\n \
    \   counts[letter] = counts[letter] + 1\n  end\n  return counts\nend", "  local\
    \ counts = {}\n  for letter in string.gmatch(test, \"([a-z]+)\") do\n    counts[letter]\
    \ = counts[letter] or 1\n    counts[letter] = counts[letter] + 1\n  end\n  return\
    \ counts\nend", "  local result = {}\n  for letter, count in pairs(test) do\n\
    \    result[letter] = result[letter] or count\n  end\n  return result\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
