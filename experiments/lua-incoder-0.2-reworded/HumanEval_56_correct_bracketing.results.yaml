language: lua
name: HumanEval_56_correct_bracketing
results:
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_brackets = brackets:sub(1, opening - 1)\n  local closing_brackets\
    \ = brackets:sub(closing + 1)\n  local opening_brackets_count = opening_brackets:count('<')\n\
    \  local closing_brackets_count = closing_brackets:count('>')\n  return opening_brackets_count\
    \ == closing_brackets_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tpj2g0i.lua:16:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp3tpj2g0i.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp3tpj2g0i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%[(%+)(%-)]+', function(x)\n    return\
    \ x:match('%[<>]')\n  end)\n  local closing_brackets = brackets:gsub('%[<>](%+)(%-)',\
    \ function(x)\n    return x:match('%[<>]')\n  end)\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n    opening_brackets:all() ~= closing_brackets:all()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdksre22u.lua:19:\
    \ attempt to call method 'all' (a nil value)\nstack traceback:\n\t/tmp/tmpdksre22u.lua:19:\
    \ in function 'candidate'\n\t/tmp/tmpdksre22u.lua:25: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for _,opening_bracket in ipairs(opening_brackets) do\n    if not closing_brackets[opening_bracket]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpbq_nut9r.lua:14:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpbq_nut9r.lua:14: in function 'candidate'\n\t/tmp/tmpbq_nut9r.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local close_brackets\
    \ = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return open_brackets:len() ==\
    \ close_brackets:len() and\n         open_brackets:gsub('(<)', ''):gsub('(>)',\
    \ '') == close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4wp8odm_.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4wp8odm_.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('%<', '(')\n  local closing = brackets:gsub('%>',\
    \ ')')\n  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66pwh6p8.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp66pwh6p8.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpqfqgna_z.lua:14: unfinished string near ''''%s*%''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:all(function(x)\n    return closing_brackets:find(x)\
    \ == nil\n  end)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm6ghlgdy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpm6ghlgdy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpm6ghlgdy.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%[(%+)(%-)]', function(x)\n    return\
    \ x:sub(1, 1)\n  end)\n  local closing_brackets = brackets:gsub('%[(%+)(%-)]',\
    \ function(x)\n    return x:sub(2, 2)\n  end)\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbz03n2qf.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbz03n2qf.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpum589kw9.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpum589kw9.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq1103ts.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyq1103ts.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len() and opening_brackets:sub(1,1)\
    \ == closing_brackets:sub(1,1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmps2eoco19.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmps2eoco19.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmps2eoco19.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+%)%>)', '')\n  local closing_brackets\
    \ = brackets:gsub('(%%(%+%)%>)', '')\n  local opening_brackets_count = opening_brackets:gsub('(%+%)',\
    \ '')\n  local closing_brackets_count = closing_brackets:gsub('(%+%)', '')\n \
    \ return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm4d5ot23.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm4d5ot23.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i] ~= '<' then\n         return\
    \ false\n      end\n      local opening = brackets[i + 1]\n      local closing\
    \ = brackets[i + 2]\n      if opening ~= closing then\n         return false\n\
    \      end\n      i = i + 3\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm13r6v5p.lua:29:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpm13r6v5p.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<%%(%+)(%>%+))', function(x)\n    return x:sub(1,\
    \ 1)\n  end)\n  local closing = brackets:gsub('(<%(%+)(%+%>%+))', function(x)\n\
    \    return x:sub(2, 2)\n  end)\n  return opening:len() == closing:len()\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm0go2vzc.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpm0go2vzc.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+'):gsub('(>)', '%L+%L+%s*'):gsub('(<%L+)(%L+)',\
    \ '%%%1%%%2%%'):gsub('(%L+%L+%L+)', '%%%1%%%2%%')\n  local closing_brackets =\
    \ brackets:gsub('(<)', '%s*%L+%L+'):gsub('(>)', '%L+%L+%s*'):gsub('(<%L+)(%L+)',\
    \ '%%%1%%%2%%'):gsub('(%L+%L+%L+)', '%%%1%%%2%%')\n  return opening_brackets:gsub('(%L+%L+)',\
    \ '%%%1%%%2%%') == closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpdczbp908.lua:12:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpdczbp908.lua:12: in function\
    \ 'candidate'\n\t/tmp/tmpdczbp908.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for _, bracket\
    \ in ipairs(brackets) do\n    if bracket:sub(1, 1) == '<' then\n      table.insert(opening_brackets,\
    \ bracket)\n    elseif bracket:sub(1, 1) == '>' then\n      table.insert(closing_brackets,\
    \ bracket)\n    end\n  end\n  return #opening_brackets == #closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe2kzwhav.lua:14:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpe2kzwhav.lua:14: in function 'candidate'\n\t/tmp/tmpe2kzwhav.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%+)%%(%*)%+%%(%+)(%>%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9lzsrchk.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return opening_brackets:gsub('%L+%L+',\
    \ '') ~= closing_brackets:gsub('%L+%L+', '')\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqxg_9zuq.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpqxg_9zuq.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1')\n  local closing = brackets:gsub('(>)','%1')\n\
    \  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcucrj3sk.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcucrj3sk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+'):gsub('(>)', '%s*%L+%L+')\n\
    \  local closing_brackets = brackets:gsub('(<)', '%s*%L+%L+'):gsub('(>)', '%s*%L+%L+')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps94kpc8y.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmps94kpc8y.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i+1] ~= closing_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66ogg0re.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp66ogg0re.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  local opening_open = opening_count > 0 and opening_count ~= opening_open\n\
    \  local closing_close = closing_count > 0 and closing_count ~= closing_close\n\
    \  return opening_open and closing_close\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpzceb9jep.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpzceb9jep.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpzceb9jep.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<%%(%+)(%*)%>)', function(match)\n  \
    \  return match == '<' and '>' or match\n  end)\n  return open_brackets:len()\
    \ == brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp1ax3cbql.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp1ax3cbql.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\0%s*%L'):gsub('(>)', '%1%L\\\
    0')\n  local closing_brackets = brackets:gsub('(<)', '%1%L\\0'):gsub('(>)', '\\\
    0%s*%L')\n  return opening_brackets:len() == closing_brackets:len()\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkekrergl.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpkekrergl.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets == closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9xtpiwo3.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9xtpiwo3.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:all(function(opening, closing)\n\
    \    return opening:sub(1,1) == '<' and closing:sub(1,1) == '>'\n  end)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqeub1nrm.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpqeub1nrm.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpqeub1nrm.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n   local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n   local opening_brackets_count = opening_brackets:gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()', '%s*'):gsub('%s*%b()',\
    \ '%s*'):gsub('%s*%\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpdvv4wwz3.lua:14: unfinished string near ''''%s*%''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcibmymbo.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpcibmymbo.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcibmymbo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcibmymbo.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpcibmymbo.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcibmymbo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:sub(1,\
    \ -1) == closing_brackets:sub(1, -1)\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp89opc7o_.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp89opc7o_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpb87uau5v.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpb87uau5v.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpb87uau5v.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('%b<>', ''):gsub('%b', '')\n  local close_brackets\
    \ = brackets:gsub('%b<>', ''):gsub('%b', '')\n  local open_brackets_count = open_brackets:len()\n\
    \  local close_brackets_count = close_brackets:len()\n  for i = 1, open_brackets_count\
    \ do\n    if open_brackets[i] ~= close_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpchrsyvxl.lua:12:\
    \ unbalanced pattern\nstack traceback:\n\t/tmp/tmpchrsyvxl.lua:12: in function\
    \ 'candidate'\n\t/tmp/tmpchrsyvxl.lua:27: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwak6uk3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppwak6uk3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:sub(1, -1) == closing_brackets:sub(1,\
    \ -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2000vjeh.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp2000vjeh.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp2000vjeh.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1, -1) == closing_brackets:sub(1,\
    \ -1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpv8_8ifzd.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpv8_8ifzd.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpv8_8ifzd.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local char = brackets[i]\n    if char == '<' then\n      table.insert(opening_brackets,\
    \ char)\n    elseif char == '>' then\n      table.insert(closing_brackets, char)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    local opening_char = opening_brackets[i]\n\
    \    local closing_char = closing_brackets[i]\n    if opening_char == closing_char\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgqa9keoc.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgqa9keoc.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%%(%+))', function(x)\n\
    \    return x:gsub('(%+)(%*)', function(y)\n      return y:gsub('(%+)(%*)', function(z)\n\
    \        return z:gsub('(%+)(%*)', function(w)\n          return w:gsub('(%+)(%*)',\
    \ function(x)\n            return x:gsub('(%+)(%*)', function(y)\n           \
    \   return y:gsub('(%+)(%*)', function(z)\n                return z:gsub('(%+)(%*)',\
    \ function(w)\n                  return w:gsub('(%+)(%*)', function(x)\n     \
    \               return x:gsub('(%+)(%*)', function(y)\n                      return\
    \ y:gsub('(%+)(%*)', function(z)\n                        return z:gsub('(%+)(%*)',\
    \ function(w)\n                          return w:gsub('(%+)(%*)', function(x)\n\
    \                            return x:gsub('(%+)(%*)', function(y)\n         \
    \                     return y:gsub('(%+)(%*)', function(z)\n                \
    \                return z:gsub('(%+)(%*)', function(w)\n                     \
    \             return w:gsub('(%+)(%*)', function(x)\n                        \
    \            return x:gsub('(%+)(%*)', function(y)\n                         \
    \             return y:gsub('(%+)(%*)', function(z)\n                        \
    \                return z:gsub('(%+)(%*)', function(w)\n                     \
    \                     return w:gsub('(%+)(%*)', function(x)\n                \
    \                            return x:gsub('(%+)(%*)', function(y)\n         \
    \                                     return y:gsub('(%+)(%*)', function(z)\n\
    \                                                return z:gsub('(%+)(%*)', function(w)\n\
    \                                                  return w:gsub('(%+)(%*)', function(x)\n\
    \                                                    return x:gsub('(%+)(%*)',\
    \ function(y)\n                                                      return y:gsub('(%+)(%*)',\
    \ function(z)\n                                                        return\
    \ z:gsub('(%+)(%*)', function(w)\n                                           \
    \               return w:gsub('(%+)(%*)', function(x)\n                      \
    \                                      return x:gsub('(%+)(%*)', function(y)\n\
    \                                                              return y:gsub('(%+)(%*)',\
    \ function(z)\n                                                              \
    \  return z:gsub('(%+)(%*)', function(w)\n                                   \
    \                               return w:gsub('(%+)(%*)', function(x)\n      \
    \                                                              return \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp0x5lj6x2.lua:46: ''end'' expected (to close ''function'' at
    line 44) near ''=''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  if opening ~= nil and opening ~= -1 and opening ~= opening_count then\n   \
    \ return false\n  end\n  if closing ~= nil and closing ~= -1 and closing ~= closing_count\
    \ then\n    return false\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8h4gx_4m.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp8h4gx_4m.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp8h4gx_4m.lua:28: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9reb1ooi.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      local opening = brackets[i]\n      local closing\
    \ = brackets[i+1]\n      if opening ~= closing then\n         return false\n \
    \     end\n   end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpc9d4prs9.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpc9d4prs9.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1','('):gsub('%1',')')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpm2ec9qm1.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpm2ec9qm1.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmpm2ec9qm1.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<', ''):gsub('%>', '')\n  local closing_brackets\
    \ = brackets:gsub('%>', ''):gsub('%>', '')\n  return opening_brackets:len() ==\
    \ closing_brackets:len() and\n         opening_brackets:sub(1, 1) == closing_brackets:sub(1,\
    \ 1)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyhocwknn.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpyhocwknn.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%[(%+)(%*)%]', function(match)\n  \
    \  local opening_bracket = match[1]\n    local closing_bracket = match[2]\n  \
    \  return opening_bracket ~= closing_bracket\n  end)\n  return opening_brackets\
    \ == nil\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp3lp_ceh7.lua:23:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp3lp_ceh7.lua:23:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*', '><'):gsub('<*', '><')\n  local\
    \ closing_brackets = brackets:gsub('>*', '>'):gsub('<*', '<')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp70v5roio.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp70v5roio.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw71sh_w6.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw71sh_w6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local close_brackets\
    \ = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return open_brackets:len()\
    \ == close_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk5d_vcfa.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpk5d_vcfa.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpk5d_vcfa.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%b()',\
    \ '%s*%d+'):gsub('%d+', '%d'):gsub('%d*', '%d'):gsub('%d?', '%d'):gsub('%d*',\
    \ '%d')\n  local closing_brackets_count = closing_brackets:gsub('%b()', '%s*%d+'):gsub('%d+',\
    \ '%d'):gsub('%d*', '%d'):gsub('%d?', '%d'):gsub('%d*', '%d')\n  return opening_brackets_count\
    \ == closing_brackets_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y926i5x.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2y926i5x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<%%(%+%)%>)', '')\n  local closing = brackets:gsub('(%%(%+%)%>)',\
    \ '')\n  return opening:len() == closing:len() and opening:len() > 0 and closing:len()\
    \ > 0\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpfn310mki.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpfn310mki.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbykz99jv.lua:34: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  return opening_count == closing_count and opening ~= nil and closing ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx46msbzn.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpx46msbzn.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpx46msbzn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sa5cqwb.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sa5cqwb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)$', '\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)(.+$)', '\\1')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2xw9pija.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2xw9pija.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)(>)', '\\2\\3')\n  local\
    \ closing_brackets = brackets:gsub('(<)([^>]+)(>)', '\\1\\3')\n  return opening_brackets\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4jz6qq6e.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp4jz6qq6e.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<', '%s*<%s*'):gsub('%>', '%s*>%s*'):gsub('%<',\
    \ '%s*<%s*'):gsub('%>', '%s*>%s*')\n  local closing_brackets = brackets:gsub('%<',\
    \ '%s*<%s*'):gsub('%>', '%s*>%s*'):gsub('%<', '%s*<%s*'):gsub('%>', '%s*>%s*')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp12258lr6.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp12258lr6.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp12258lr6.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('%b()', '%s*%c()')\n  local close_brackets\
    \ = brackets:gsub('%b()', '%c()%s*')\n  return open_brackets:sub(1, #open_brackets)\
    \ == close_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4hiqr0q_.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4hiqr0q_.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)','%2')\n  local closing_brackets\
    \ = brackets:gsub('(<%%(%+)(%*)%>)','%3')\n  return opening_brackets:len() ==\
    \ closing_brackets:len() and\n         opening_brackets:sub(1, opening_brackets:len())\
    \ == closing_brackets:sub(1, closing_brackets:len())\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxk07ttja.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxk07ttja.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%<', ''):gsub('%>', '')\n  local closing_brackets\
    \ = brackets:gsub('%>', ''):gsub('%>', '')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxe6xi395.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpxe6xi395.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcibmymbo.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpcibmymbo.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcibmymbo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpyq1103ts.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpyq1103ts.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ovg73su.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp5ovg73su.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp5ovg73su.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2'):gsub('(<<)',\
    \ '\\3'):gsub('(>>)', '\\4')\n  local closing_brackets = brackets:gsub('(<)',\
    \ '\\1'):gsub('(>)', '\\2'):gsub('(<<)', '\\3'):gsub('(>>)', '\\4')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpglvw0i8h.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpglvw0i8h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5ovg73su.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp5ovg73su.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp5ovg73su.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  local opening_brackets_count\
    \ = opening_brackets:gsub('%2','%1'):gsub('%1','%2'):gsub('%1','%1'):gsub('%1','%1')\n\
    \  local closing_brackets_count = closing_brackets:gsub('%2','%1'):gsub('%1','%2'):gsub('%1','%1'):gsub('%1','%1')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp2xpc9_24.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp2xpc9_24.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp2xpc9_24.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lddac5l.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp6lddac5l.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp6lddac5l.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:gsub('%1>','>'):gsub('%1<','<'):gsub('%1<<','<<'):gsub('%1>>','>>'):gsub('%1><<','<<'):gsub('%1>><','>><'):gsub('%1>>>','>>>')\n\
    \  local closing_brackets_count = closing_brackets:gsub('%1>','>'):gsub('%1<','<'):gsub('%1<<','<<'):gsub('%1>>','>>'):gsub('%1><<','<<'):gsub('%1>><','>><'):gsub('%1>>>','>>>')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpq_l56esh.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpq_l56esh.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmpq_l56esh.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<' then return false end\n   if brackets == '>' then return\
    \ true end\n   if brackets == '<>' then return false end\n   if brackets == '<>'\
    \ then return true end\n   if brackets == '<<' then return false end\n   if brackets\
    \ == '>>' then return true end\n   if brackets == '<<<' then return false end\n\
    \   if brackets == '>>>' then return true end\n   if brackets == '<<>>' then return\
    \ false end\n   if brackets == '<><>' then return false end\n   if brackets ==\
    \ '<><<' then return false end\n   if brackets == '<><>>' then return false end\n\
    \   if brackets == '<<<>>' then return false end\n   if brackets == '<><><>' then\
    \ return false end\n   return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp32kmuy7y.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp32kmuy7y.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibcaqk5m.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpibcaqk5m.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9reb1ooi.lua:12: unfinished string near ''''(<%%(%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcibmymbo.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpcibmymbo.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcibmymbo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b<>', '')\n  local closing_brackets\
    \ = brackets:gsub('%b<>', '')\n  local opening_brackets_count = opening_brackets:len()\n\
    \  local closing_brackets_count = closing_brackets:len()\n  local opening_brackets_index\
    \ = opening_brackets:find('>')\n  local closing_brackets_index = closing_brackets:find('>')\n\
    \  local opening_brackets_index2 = opening_brackets:find('<')\n  local closing_brackets_index2\
    \ = closing_brackets:find('<')\n  local opening_brackets_index3 = opening_brackets:find('<<')\n\
    \  local closing_brackets_index3 = closing_brackets:find('<<')\n  local opening_brackets_index4\
    \ = opening_brackets:find('>>')\n  local closing_brackets_index4 = closing_brackets:find('>>')\n\
    \  local opening_brackets_index5 = opening_brackets:find('<<<')\n  local closing_brackets_index5\
    \ = closing_brackets:find('<<<')\n  local opening_brackets_index6 = opening_brackets:find('>>>')\n\
    \  local closing_brackets_index6 = closing_brackets:find('>>>')\n  local opening_brackets_index7\
    \ = opening_brackets:find('<<<>>')\n  local closing_brackets_index7 = closing_brackets:find('<<<>>')\n\
    \  local opening_brackets_index8 = opening_brackets:find('>>>>>>')\n  local closing_brackets_index8\
    \ = closing_brackets:find('>>>>>>')\n  local opening_brackets_index9 = opening_brackets:find('<<<>>>')\n\
    \  local closing_brackets_index9 = closing_brackets:find('<<<>>>')\n  local opening_brackets_index10\
    \ = opening_brackets:find('>>>>>>>>>')\n  local closing_brackets_index10 = closing_brackets:find('>>>>>>>>>')\n\
    \  local opening_brackets_index11 = opening_brackets:find('<<<>>>>>>')\n  local\
    \ closing_brackets_index11 = closing_brackets:find('<<<>>>>>>')\n  local opening_bracket\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpcjk042or.lua:57: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local open_brackets_count = open_brackets:count('<')\n  local close_brackets_count\
    \ = close_brackets:count('<')\n  return open_brackets_count == close_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9d34mvc5.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp9d34mvc5.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp9d34mvc5.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\0\\2\\0')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '\\0\\2\\0')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8aat5f19.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8aat5f19.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local closing\
    \ = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening:len() == closing:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsmyhi60y.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpsmyhi60y.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpsmyhi60y.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    if brackets[i] == '<' then\n      table.insert(opening_brackets, i)\n\
    \    elseif brackets[i] == '>' then\n      table.insert(closing_brackets, i)\n\
    \    end\n  end\n  return #opening_brackets == #closing_brackets\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp03w8nkxc.lua:31:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp03w8nkxc.lua:31:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpet5x7_rb.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpet5x7_rb.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmpet5x7_rb.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\0\\2'):gsub('(>)', '\\0\\\
    2')\n  local closing_brackets = brackets:gsub('(<)', '\\0\\2'):gsub('(>)', '\\\
    1\\2')\n  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7a3r5fhv.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp7a3r5fhv.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_brackets = brackets:sub(1, opening - 1)\n  local closing_brackets\
    \ = brackets:sub(closing + 1)\n  local opening_brackets_count = opening_brackets:count('<')\n\
    \  local closing_brackets_count = closing_brackets:count('>')\n  return opening_brackets_count\
    \ == closing_brackets_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp3tpj2g0i.lua:16:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp3tpj2g0i.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmp3tpj2g0i.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:sub(1,1) == closing_brackets:sub(1,1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpr6rcs74r.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpr6rcs74r.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpr6rcs74r.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpktqxiled.lua:12: unfinished string near ''''(<%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:gsub('%1','') == closing_brackets:gsub('%2','')\
    \ \nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpqzm4aem4.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpqzm4aem4.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpqzm4aem4.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9reb1ooi.lua:12: unfinished string near ''''(<%%(%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%<%''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('<>', ''):gsub('>', '')\n  local closing_brackets\
    \ = brackets:gsub('<', ''):gsub('<', '')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i_b3h2h.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9i_b3h2h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\0\\2\\0')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '\\0\\2\\0')\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5apespvr.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5apespvr.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    if opening == '<' then\n      table.insert(opening_brackets,\
    \ i)\n    elseif opening == '>' then\n      table.insert(closing_brackets, i)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening ~= closing then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpd218hxsq.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpd218hxsq.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    if opening == '<' then\n      table.insert(opening_brackets,\
    \ i)\n    elseif opening == '>' then\n      table.insert(closing_brackets, i)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening > closing then\n    \
    \  return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpk65c78ua.lua:39:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpk65c78ua.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.010 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lddac5l.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp6lddac5l.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp6lddac5l.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  local opening_brackets_count = opening_brackets:count('<')\n\
    \  local closing_brackets_count = closing_brackets:count('>')\n  return opening_brackets_count\
    \ == closing_brackets_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi2s_i4oy.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpi2s_i4oy.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpi2s_i4oy.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  local opening_brackets_count = opening_brackets:gsub('%s*%L+%L+',\
    \ '')\n  local closing_brackets_count = closing_brackets:gsub('%s*%L+%L+', '')\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy0a7cryt.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpy0a7cryt.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpbykz99jv.lua:34: ''end'' expected (to close ''function'' at
    line 11) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwak6uk3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppwak6uk3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local close_brackets\
    \ = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return open_brackets:len() ==\
    \ close_brackets:len() and open_brackets:len() == open_brackets:len()\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy7ulld4n.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpy7ulld4n.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%b()',\
    \ '%s*%b()'):gsub('%s*%b()', '%d+'):gsub('%d*%d+', '%d+')\n  local closing_brackets_count\
    \ = closing_brackets:gsub('%b()', '%s*%b()'):gsub('%s*%b()', '%d+'):gsub('%d*%d+',\
    \ '%d+')\n  return opening_brackets_count == closing_brackets_count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpx09u4bv7.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpx09u4bv7.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<>' then return true end\n   local opening_brackets = brackets:gsub('%b<>',\
    \ '')\n   local closing_brackets = brackets:gsub('%b<>', '>')\n   for i = 1, #opening_brackets\
    \ do\n      if not opening_brackets[i]:sub(1, 1) == '<' then\n         return\
    \ false\n      end\n      if not closing_brackets[i]:sub(1, 1) == '>' then\n \
    \        return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmph4s6pi9q.lua:16:\
    \ attempt to index field '?' (a nil value)\nstack traceback:\n\t/tmp/tmph4s6pi9q.lua:16:\
    \ in function 'candidate'\n\t/tmp/tmph4s6pi9q.lua:33: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplwxqy9pb.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmplwxqy9pb.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmplwxqy9pb.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    local closing = brackets[i+1]\n   \
    \ if opening == '<' then\n      table.insert(opening_brackets, opening)\n    elseif\
    \ opening == '>' then\n      table.insert(closing_brackets, closing)\n    end\n\
    \  end\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening ~= closing then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmph3g7y5xn.lua:40:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmph3g7y5xn.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcibmymbo.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpcibmymbo.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcibmymbo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    if brackets[i] == '<' then\n      table.insert(opening_brackets, i)\n\
    \    elseif brackets[i] == '>' then\n      table.insert(closing_brackets, i)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    local opening_bracket\
    \ = opening_brackets[i]\n    local closing_bracket = closing_brackets[i - 1]\n\
    \    if opening_bracket ~= closing_bracket then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_7pusw1d.lua:38:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_7pusw1d.lua:38:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+%)%>)', '')\n  local closing_brackets\
    \ = brackets:gsub('(%%(%+%)%>)', '')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbky1b2x4.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbky1b2x4.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local open_brackets_count = open_brackets:count('<')\n  local close_brackets_count\
    \ = close_brackets:count('<')\n  return open_brackets_count == close_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9d34mvc5.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp9d34mvc5.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp9d34mvc5.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', '')\n  local opening_brackets_count\
    \ = opening_brackets:gsub('(<)', ''):gsub('(>)', ''):gsub('(<)', '')\n  local\
    \ closing_brackets_count = closing_brackets:gsub('(<)', '')\n  return opening_brackets_count\
    \ == closing_brackets_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkszv_oqa.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpkszv_oqa.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b<>', '')\n  local closing_brackets\
    \ = brackets:gsub('%b<>', '>')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ac_sydc.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ac_sydc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)$', '\\\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)(.+?)(>)$', '\\\\2\\\\3')\n  return opening_brackets ==\
    \ closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpxvfjc4mm.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpxvfjc4mm.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<>' then return true end\n   if brackets == '<' then return\
    \ false end\n   if brackets == '>' then return true end\n   if brackets == '<>'\
    \ then return false end\n   if brackets == '<' then return false end\n   if brackets\
    \ == '>' then return true end\n   return false\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_9xcmr50.lua:25:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp_9xcmr50.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7ohcjde.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq7ohcjde.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('%b<>', ''):gsub('%b', '')\n  local close_brackets\
    \ = open_brackets:gsub('%b', '>')\n  return open_brackets == close_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpe76tp84d.lua:12:\
    \ unbalanced pattern\nstack traceback:\n\t/tmp/tmpe76tp84d.lua:12: in function\
    \ 'candidate'\n\t/tmp/tmpe76tp84d.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2'):gsub('(<<)',\
    \ '\\3'):gsub('(>>)', '\\4')\n  local closing_brackets = brackets:gsub('(<)',\
    \ '\\1'):gsub('(>)', '\\2'):gsub('(<<)', '\\3'):gsub('(>>)', '\\4')\n  return\
    \ opening_brackets:len() == closing_brackets:len() and opening_brackets:sub(1,\
    \ opening_brackets:len()) == closing_brackets:sub(1, closing_brackets:len())\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpv7prokpu.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpv7prokpu.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i = 1, #brackets\
    \ do\n    local opening = brackets[i]\n    local closing = brackets[i+1]\n   \
    \ if opening ~= \">\" and opening ~= \"<\" then\n      return false\n    end\n\
    \    if opening == \"<\" then\n      table.insert(opening_brackets, opening)\n\
    \    elseif opening == \">\" then\n      table.insert(closing_brackets, closing)\n\
    \    end\n  end\n  for i = 1, #opening_brackets do\n    local opening = opening_brackets[i]\n\
    \    local closing = closing_brackets[i]\n    if opening ~= closing then\n   \
    \   return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmyeiv0t9.lua:39:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmyeiv0t9.lua:39:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \   return brackets:match('%1'):len() == brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmplnxuqzrt.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmplnxuqzrt.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmplnxuqzrt.lua:19: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw71sh_w6.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw71sh_w6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%b()',\
    \ '%s*%d+'):gsub('%d+', '%%d+')\n  local closing_brackets_count = closing_brackets:gsub('%b()',\
    \ '%s*%d+'):gsub('%d+', '%%d+')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_r9w8m7x.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_r9w8m7x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #open_brackets do\n    if open_brackets[i+1] ~= close_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhiqvk8x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbhiqvk8x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:gsub('(%1)','%2'):gsub('(%2)','%1'):gsub('(%1)','%2'):gsub('(%2)','%1')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk47ut66n.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpk47ut66n.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpk47ut66n.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%>))', function(_, _1, _2,\
    \ _3)\n    return \"<\" .. _2 .. \">\"\n  end)\n  local closing_brackets = brackets:gsub('(<%(%+)(%>))',\
    \ function(_, _1, _2, _3)\n    return \"<\" .. _3 .. \">\"\n  end)\n  return opening_brackets\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9av5ranm.lua:28:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp9av5ranm.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1',''):gsub('%1','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprak72eco.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmprak72eco.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmprak72eco.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and opening_brackets:gsub('%1','<'):gsub('%2','>'):gsub('%1','<'):gsub('%2','>')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptk9145wb.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmptk9145wb.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmptk9145wb.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7ohcjde.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq7ohcjde.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*', '')\n  local closing_brackets\
    \ = brackets:gsub('<*', '')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5y9tvf71.lua:25:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5y9tvf71.lua:25:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%s*%b()',\
    \ '%s*%d+'):gsub('%d+', '%d'):gsub('%d*', '%d'):gsub('%d*', '%d')\n  local closing_brackets_count\
    \ = closing_brackets:gsub('%s*%b()', '%s*%d+'):gsub('%d+', '%d'):gsub('%d*', '%d'):gsub('%d*',\
    \ '%d')\n  return opening_brackets_count == closing_brackets_count\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpgsuqke_e.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpgsuqke_e.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%[(%+)(%-)]', function(x)\n    local\
    \ opening_bracket = x\n    local closing_bracket = x\n    if opening_bracket ==\
    \ '<' then\n      opening_bracket = '<'\n      closing_bracket = '>'\n    end\n\
    \    return opening_bracket, closing_bracket\n  end)\n  local opening_brackets_count\
    \ = #opening_brackets\n  if opening_brackets_count ~= #brackets then\n    return\
    \ false\n  end\n  for i = 1, opening_brackets_count do\n    local opening_bracket\
    \ = opening_brackets[i]\n    local closing_bracket = opening_brackets[i + 1]\n\
    \    if opening_bracket ~= closing_bracket then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp36ny1h4h.lua:42:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp36ny1h4h.lua:42:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '%s*%L+%L+')\n  local closing_brackets\
    \ = brackets:gsub('(>)', '%s*%L+%L+')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6sw5z_x_.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6sw5z_x_.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%[(%+)(%-)]', function(x)\n    return\
    \ x:sub(1, 1)\n  end)\n  local closing_brackets = brackets:gsub('%[(%-)(%+)]',\
    \ function(x)\n    return x:sub(1, 1)\n  end)\n  for i = 1, #opening_brackets\
    \ do\n    if opening_brackets[i] != closing_brackets[i] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpq8te30um.lua:19: ''then'' expected near ''!''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1,1) == closing_brackets:sub(1,1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nttukw7.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp8nttukw7.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp8nttukw7.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i, c in ipairs(brackets)\
    \ do\n    if c == '<' then\n      table.insert(opening_brackets, i)\n    elseif\
    \ c == '>' then\n      table.insert(closing_brackets, i)\n    end\n  end\n  for\
    \ _, i in ipairs(opening_brackets) do\n    if not closing_brackets[i] then\n \
    \     return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpk7i1nz6w.lua:14:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpk7i1nz6w.lua:14: in function 'candidate'\n\t/tmp/tmpk7i1nz6w.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*', '>')\n  local closing_brackets\
    \ = brackets:gsub('<*', '<')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0jy4an9s.lua:30:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0jy4an9s.lua:30:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #open_brackets do\n    if open_brackets[i] ~= close_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqts7sxs5.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpqts7sxs5.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local closing\
    \ = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening:len() == closing:len()\
    \ and opening:len() == 1 and closing:len() == 1\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprm311ak_.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmprm311ak_.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmprm311ak_.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sa5cqwb.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sa5cqwb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local open_brackets_count = open_brackets:count('<')\n  local close_brackets_count\
    \ = close_brackets:count('<')\n  return open_brackets_count == close_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp9d34mvc5.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp9d34mvc5.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp9d34mvc5.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', '')\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  return opening_brackets_count == closing_brackets_count\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpzjh0o9z7.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpzjh0o9z7.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw71sh_w6.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw71sh_w6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i] ~= closing_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4t7__d3_.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4t7__d3_.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local closing\
    \ = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening:len() == closing:len()\
    \ and opening:sub(1,-1) == closing:sub(1,-1)\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmptx_h7kve.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmptx_h7kve.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmptx_h7kve.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)([^>]+)(>)', '\\2')\n  local closing_brackets\
    \ = brackets:gsub('(<)([^>]+)(>)', '\\3')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpo2lz0hob.lua:21:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpo2lz0hob.lua:21:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:gsub('%2'):gsub('%1'):gsub('%2'):gsub('%1')\
    \ ~= ''\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcxjf37nj.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpcxjf37nj.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpcxjf37nj.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len() and\n         opening_brackets:sub(1,1) == closing_brackets:sub(1,1)\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8nttukw7.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp8nttukw7.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp8nttukw7.lua:21: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('<>', ''):gsub('>', '')\n  local close_brackets\
    \ = brackets:gsub('<', ''):gsub('<', '')\n  for i = 1, #open_brackets do\n   \
    \ if open_brackets[i] ~= close_brackets[i] then\n      return false\n    end\n\
    \  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5g1oixyr.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5g1oixyr.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1')\n  local closing = brackets:gsub('(>)','%1')\n\
    \  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcucrj3sk.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcucrj3sk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b<>', ''):gsub('%b', '')\n  local\
    \ closing_brackets = brackets:gsub('%b<>', ''):gsub('%b', '')\n  local opening_brackets_count\
    \ = opening_brackets:len()\n  local closing_brackets_count = closing_brackets:len()\n\
    \  for i = 1, opening_brackets_count do\n    if opening_brackets:sub(i, i-1) ~=\
    \ closing_brackets:sub(i, i-1) then\n      return false\n    end\n  end\n  return\
    \ true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmphuk41l2b.lua:12:\
    \ unbalanced pattern\nstack traceback:\n\t/tmp/tmphuk41l2b.lua:12: in function\
    \ 'candidate'\n\t/tmp/tmphuk41l2b.lua:27: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%%(%+)(%>%+)%\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpktqxiled.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%b()',\
    \ '%s*%d+'):gsub('%d+', '%d'):gsub('%d*', '%d'):gsub('%d?', '%d'):gsub('%d*',\
    \ '%d')\n  local closing_brackets_count = closing_brackets:gsub('%b()', '%s*%d+'):gsub('%d+',\
    \ '%d'):gsub('%d*', '%d'):gsub('%d?', '%d'):gsub('%d*', '%d')\n  return opening_brackets_count\
    \ == closing_brackets_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2y926i5x.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2y926i5x.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcibmymbo.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpcibmymbo.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcibmymbo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsubn\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp9reb1ooi.lua:12: unfinished string near

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('(%1)',function(x)\n\
    \    return closing_brackets:sub(1,x) == x\n  end)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgwp0ssmh.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpgwp0ssmh.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmpgwp0ssmh.lua:22: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for _, bracket\
    \ in ipairs(brackets) do\n    if bracket:sub(1, 1) == '<' then\n      opening_brackets[#opening_brackets+1]\
    \ = bracket\n    elseif bracket:sub(1, 1) == '>' then\n      closing_brackets[#closing_brackets+1]\
    \ = bracket\n    end\n  end\n  for _, opening_bracket in ipairs(opening_brackets)\
    \ do\n    if not closing_brackets[#closing_brackets] then\n      return false\n\
    \    end\n  end\n  return true\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpgg_v8vb_.lua:14:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpgg_v8vb_.lua:14: in function 'candidate'\n\t/tmp/tmpgg_v8vb_.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local opening_brackets_count = opening_brackets:count('<')\n  local closing_brackets_count\
    \ = closing_brackets:count('<')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpcibmymbo.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpcibmymbo.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpcibmymbo.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len() and opening_brackets:all('%1'..'<')\
    \ and closing_brackets:all('<%1'..'>')\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7ysgusq1.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp7ysgusq1.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp7ysgusq1.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwak6uk3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppwak6uk3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for i, c in ipairs(brackets)\
    \ do\n    if c == '<' then\n      table.insert(opening_brackets, i)\n    elseif\
    \ c == '>' then\n      table.insert(closing_brackets, i)\n    end\n  end\n  for\
    \ i = #opening_brackets, 1, -1 do\n    if not closing_brackets[i] then\n     \
    \ return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpo48_iqff.lua:14:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmpo48_iqff.lua:14: in function 'candidate'\n\t/tmp/tmpo48_iqff.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', '%1%2%3')\n  local\
    \ closing_brackets = brackets:gsub('(%%(%+)(%*)%>)', '%1%2%3')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0tmtkslc.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp0tmtkslc.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local opening_count\
    \ = opening_brackets:len()\n  local closing_count = closing_brackets:len()\n \
    \ return opening_count == closing_count\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5uvwtyk0.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp5uvwtyk0.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sa5cqwb.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sa5cqwb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return opening_brackets\
    \ ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5rwe1git.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp5rwe1git.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return opening_brackets\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbjdelj3t.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbjdelj3t.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<%%(%+)(%*)%>)', function(_, _, open_brackets)\n\
    \    return open_brackets:gsub('(%+)(%*)', function(_, open_brackets, close_brackets)\n\
    \      return open_brackets .. close_brackets\n    end)\n  end)\n  return open_brackets:len()\
    \ == brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8dc7ffdt.lua:27:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp8dc7ffdt.lua:27:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', '%s*%L+%L+'):gsub('(>)', '%L+'):gsub('(<*)',\
    \ '%L+%L+'):gsub('(>*)', '%L+')\n  local close_brackets = brackets:gsub('(<)',\
    \ '%s*%L+%L+'):gsub('(>)', '%L+'):gsub('(<*)', '%L+%L+'):gsub('(>*)', '%L+')\n\
    \  local open_brackets_count = open_brackets:gsub('%L+', '%d+'):gsub('%d+', '%L+'):gsub('%L+',\
    \ '%d+')\n  local close_brackets_count = close_brackets:gsub('%L+', '%d+'):gsub('%d+',\
    \ '%L+'):gsub('%L+', '%d+')\n  return open_brackets_count == close_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpe93q3pvg.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpe93q3pvg.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   local opening_brackets = brackets:gsub('<>','')\n   local closing_brackets\
    \ = brackets:gsub('<','')\n   local opening_brackets_count = opening_brackets:len()\n\
    \   local closing_brackets_count = closing_brackets:len()\n   if opening_brackets_count\
    \ ~= closing_brackets_count then\n      return false\n   end\n   for i = 1, opening_brackets_count\
    \ do\n      local opening_bracket = opening_brackets:sub(i,i)\n      local closing_bracket\
    \ = closing_brackets:sub(i,i)\n      if opening_bracket ~= closing_bracket then\n\
    \         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphna96f45.lua:32:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmphna96f45.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('>*', '>')\n  local closing_brackets\
    \ = brackets:gsub('<*', '<')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9hq6sk1j.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9hq6sk1j.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1',''):gsub('%1',''):gsub('%1','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpsw0uicz7.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpsw0uicz7.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmpsw0uicz7.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sa5cqwb.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sa5cqwb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<)','%2'):gsub('(>)','%2')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp6lddac5l.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmp6lddac5l.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmp6lddac5l.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('<>', ''):gsub('>', '')\n  local closing_brackets\
    \ = brackets:gsub('<', ''):gsub('<', '')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp9i_b3h2h.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp9i_b3h2h.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \   return brackets:sub(1,1):sub(2,1):sub(3,1):sub(4,1):sub(5,1):sub(6,1):sub(7,1):sub(8,1):sub(9,1):sub(10,1):sub(11,1):sub(12,1):sub(13,1):sub(14,1):sub(15,1):sub(16,1):sub(17,1):sub(18,1):sub(19,1):sub(20,1):sub(21,1):sub(22,1):sub(23,1):sub(24,1):sub(25,1):sub(26,1):sub(27,1):sub(28,1):sub(29,1):sub(30,1):sub(31,1):sub(32,1):sub(33,1):sub(34,1):sub(35,1):sub(36,1):sub(37,1):sub(38,1):sub(39,1):sub(40,1):sub(41,1):sub(42,1):sub(43,1):sub(44,1):sub(45,1):sub(46,1):sub(47,1):sub(48,1):sub(49,1):sub(50,1):sub(51,1):sub(52,1):sub(53,1):sub(54,1):sub(55,1):sub(56,1):sub(57,1):sub(58,1):sub(59,1):sub(60,1):sub(61,1):sub(62,1):sub(63,1):sub(64,1):sub(65,1):sub(66,1):sub(67,1):sub(68,1):sub(69,1):sub(70,1):sub(71,1):sub(72,1):sub(73,1):sub(74,1):sub(75,1):sub(76,1):sub(77,1):sub(78,1):sub(79,1):sub(80,1):sub(81,1):sub(82,1):sub(83,1):sub(84,1):sub(85,1):sub(86,1):sub(87,1):sub(88,1):sub(89,1):sub(90,1):sub(91,1):sub(92,1):sub(93,1):sub(94,1):sub(95,1):sub(96,1):sub(97,1):sub(98,1):sub(99,1):sub(100,1):sub(101,1):sub(102,1):sub(103,1):\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgjpxn0hk.lua:14: function arguments expected near ''=''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpibcaqk5m.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpibcaqk5m.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local close_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #open_brackets do\n    if open_brackets[i+1] ~= close_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpbhiqvk8x.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpbhiqvk8x.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1',''):gsub('%1','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprak72eco.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmprak72eco.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmprak72eco.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7ohcjde.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq7ohcjde.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('(<)', '%s*%1$*'):gsub('(>)', '%s*%1$*'):gsub('(<*)',\
    \ '%s*%1$*'):gsub('(>*)', '%s*%1$*')\n  local close_brackets = brackets:gsub('(<)',\
    \ '%s*%1$*'):gsub('(>)', '%s*%1$*'):gsub('(<*)', '%s*%1$*'):gsub('(>*)', '%s*%1$*')\n\
    \  return open_brackets:gsub('(%s*%1$*)', ''):gsub('(%s*%1$*)', ''):gsub('(%s*%1$*)',\
    \ ''):gsub('(%s*%1$*)', '') == close_brackets\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpljlwv4ho.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpljlwv4ho.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmpljlwv4ho.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+%)%>)', '')\n  local closing_brackets\
    \ = brackets:gsub('(%%(%+%>)%)', '')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplgucxj_s.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmplgucxj_s.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  local opening_open = opening_count > 0 and opening_count ~= opening_open\n\
    \  local closing_open = closing_count > 0 and closing_count ~= closing_open\n\
    \  return opening_open and closing_open\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpplvsskks.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpplvsskks.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpplvsskks.lua:24: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      local opening = brackets[i]\n      local closing\
    \ = brackets[i+1]\n      if opening ~= \">\" and opening ~= \"<\" then\n     \
    \    return false\n      end\n      if closing ~= \">\" and closing ~= \"<\" then\n\
    \         return false\n      end\n   end\n   return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp05offylw.lua:28:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp05offylw.lua:28:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('(%1)','>'):gsub('(%1)','<'):gsub('(%1)','<<'):gsub('(%1)','>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(%1)','<>>'):gsub('(%1)','<<<'):gsub('(%1)','>>>'):gsub('(%1)','<>'):gsub('(\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpgy65ews1.lua:14: unfinished string near ''''(''

    '
  stdout: ''
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  local\
    \ closing_brackets = brackets:gsub('(<)', ''):gsub('(>)', '')\n  return opening_brackets:len()\
    \ == closing_brackets:len()\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq7ohcjde.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpq7ohcjde.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local open_brackets = brackets:gsub('%b()', '')\n  local close_brackets = open_brackets:gsub('%b()',\
    \ '')\n  local open_brackets = open_brackets:gsub('%b<>', '')\n  local close_brackets\
    \ = close_brackets:gsub('%b<>', '')\n  return open_brackets == close_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp2n7ane3n.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp2n7ane3n.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  for i = 1, #opening_brackets do\n    if opening_brackets[i+1] ~= closing_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp66ogg0re.lua:29:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp66ogg0re.lua:29:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)', '\\1'):gsub('(>)', '\\2')\n \
    \ local closing_brackets = brackets:gsub('(<)', '\\2'):gsub('(>)', '\\1')\n  return\
    \ opening_brackets ~= closing_brackets\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp4sa5cqwb.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp4sa5cqwb.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = {}\n  local closing_brackets = {}\n  for _, bracket\
    \ in ipairs(brackets) do\n    if bracket:sub(1, 1) == '<' then\n      opening_brackets[#opening_brackets+1]\
    \ = bracket\n    elseif bracket:sub(1, 1) == '>' then\n      closing_brackets[#closing_brackets+1]\
    \ = bracket\n    end\n  end\n  for i = 1, #opening_brackets do\n    if not closing_brackets[i]\
    \ then\n      return false\n    end\n  end\n  return true\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp_bj4r4qk.lua:14:\
    \ bad argument #1 to 'ipairs' (table expected, got string)\nstack traceback:\n\
    \t/tmp/tmp_bj4r4qk.lua:14: in function 'candidate'\n\t/tmp/tmp_bj4r4qk.lua:32:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%*)%>)', function(_, _, opening_brackets)\n\
    \    return opening_brackets\n  end)\n  local closing_brackets = brackets:gsub('(%%(%+)(%*)%>)',\
    \ function(_, _, closing_brackets)\n    return closing_brackets\n  end)\n  local\
    \ opening_brackets_count = opening_brackets:gsub('%+', function(_)\n    return\
    \ 1\n  end)\n  local closing_brackets_count = closing_brackets:gsub('%+', function(_)\n\
    \    return 1\n  end)\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp97te3aoc.lua:34:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp97te3aoc.lua:34:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppwak6uk3.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmppwak6uk3.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%%%1')\n  return opening_brackets:len() == closing_brackets:len()\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpw71sh_w6.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpw71sh_w6.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len() and opening_brackets:all()\
    \ ~= '<>'\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpi4zsb1ae.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpi4zsb1ae.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpi4zsb1ae.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   local open_brackets = brackets:gsub('>*$', '>')\n   local close_brackets =\
    \ brackets:gsub('^>*', '>')\n   local open_brackets_count = open_brackets:count('<')\n\
    \   local close_brackets_count = close_brackets:count('<')\n   return open_brackets_count\
    \ == close_brackets_count\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7vez30eg.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmp7vez30eg.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmp7vez30eg.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_count = brackets:count('<')\n  local closing_count = brackets:count('>')\n\
    \  return opening_count == closing_count and opening ~= nil and closing ~= nil\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpx46msbzn.lua:14:\
    \ attempt to call method 'count' (a nil value)\nstack traceback:\n\t/tmp/tmpx46msbzn.lua:14:\
    \ in function 'candidate'\n\t/tmp/tmpx46msbzn.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:find('<')\n  local closing = brackets:find('>')\n\
    \  local opening_brackets = brackets:sub(1, opening - 1)\n  local closing_brackets\
    \ = brackets:sub(opening + 1, closing - 1)\n  return opening_brackets ~= closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpmaxnng3d.lua:22:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpmaxnng3d.lua:22:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   if brackets == '<' then return false end\n   if brackets == '>' then return\
    \ true end\n   if brackets == '<>' then return false end\n   if brackets == '<<'\
    \ then return true end\n   if brackets == '>>' then return false end\n   if brackets\
    \ == '<>' then return false end\n   if brackets == '<><' then return false end\n\
    \   if brackets == '><>' then return true end\n   if brackets == '<<><' then return\
    \ true end\n   if brackets == '>>><' then return false end\n   if brackets ==\
    \ '<><<' then return false end\n   if brackets == '><><' then return true end\n\
    \   if brackets == '<<><>' then return true end\n   if brackets == '>>><>' then\
    \ return false end\n   if brackets == '<><<<' then return false end\n   if brackets\
    \ == '><><>' then return true end\n   if brackets == '<<><><' then return true\
    \ end\n   if brackets == '>>><><' then return false end\n   if brackets == '<><<<'\
    \ then return false end\n   if brackets == '><><><' then return true end\n   if\
    \ brackets == '<<><><>' then return true end\n   if brackets == '>>><><>' then\
    \ return false end\n   return false\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvcja_smz.lua:40:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmpvcja_smz.lua:40:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b<>', '')\n  local closing_brackets\
    \ = brackets:gsub('%b<>', '>')\n  return opening_brackets:sub(1, #opening_brackets)\
    \ == closing_brackets\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'), true)\n\
    \    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp6ac_sydc.lua:20:\
    \ expected: true, actual: false\nstack traceback:\n\t/tmp/tmp6ac_sydc.lua:20:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  local closing_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1'):gsub('(<<)','%1'):gsub('(>>)','%1')\n\
    \  return opening_brackets:len() == closing_brackets:len() and opening_brackets:gsub('%1',''):gsub('%1','')\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmprak72eco.lua:14:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmprak72eco.lua:14: in function\
    \ 'candidate'\n\t/tmp/tmprak72eco.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening = brackets:gsub('(<)','%1')\n  local closing = brackets:gsub('(>)','%1')\n\
    \  return opening:len() == closing:len()\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcucrj3sk.lua:24:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpcucrj3sk.lua:24:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<)','%1'):gsub('(>)','%1')\n  local\
    \ closing_brackets = brackets:gsub('(<%1)','%1'):gsub('(>%1)','%1')\n  return\
    \ opening_brackets:len() == closing_brackets:len()\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = correct_bracketing\n    lu.assertEquals(candidate('<>'),\
    \ true)\n    lu.assertEquals(candidate('<<><>>'), true)\n    lu.assertEquals(candidate('<><><<><>><>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'), true)\n\
    \    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpz03s89yy.lua:13:\
    \ invalid capture index\nstack traceback:\n\t/tmp/tmpz03s89yy.lua:13: in function\
    \ 'candidate'\n\t/tmp/tmpz03s89yy.lua:20: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \   for i = 1, #brackets do\n      if brackets[i] == '<' then\n         if brackets[i+1]\
    \ == '>' then\n            return true\n         else\n            return false\n\
    \         end\n      else\n         if brackets[i] == '>' then\n            return\
    \ false\n         else\n            return true\n         end\n      end\n   end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp_cjj43x7.lua:36:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmp_cjj43x7.lua:36:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('(<%%(%+)(%>))', function(_, _, opening_brackets)\n\
    \    return opening_brackets:gsub('(%+)(%>)', '%1>%2')\n  end)\n  local closing_brackets\
    \ = brackets:gsub('(%+)(%>)', '<%1%>')\n  return opening_brackets == closing_brackets\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpz7zag79_.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpz7zag79_.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
- exit_code: 1
  program: "-- brackets is a string of \"<\" and \">\".\n-- return true if every opening\
    \ bracket has a corresponding closing bracket.\n-- >>> correct_bracketing('<')\n\
    -- false\n-- >>> correct_bracketing('<>')\n-- true\n-- >>> correct_bracketing('<<><>>')\n\
    -- true\n-- >>> correct_bracketing('><<>')\n-- false\nlocal function correct_bracketing(brackets)\n\
    \  local opening_brackets = brackets:gsub('%b()', '%s*%b()')\n  local closing_brackets\
    \ = brackets:gsub('%b()', '%s*%b()')\n  local opening_brackets_count = opening_brackets:gsub('%b()',\
    \ '%s*%d+'):gsub('%d+', '%d*')\n  local closing_brackets_count = closing_brackets:gsub('%b()',\
    \ '%s*%d+'):gsub('%d+', '%d*')\n  return opening_brackets_count == closing_brackets_count\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = correct_bracketing\n\
    \    lu.assertEquals(candidate('<>'), true)\n    lu.assertEquals(candidate('<<><>>'),\
    \ true)\n    lu.assertEquals(candidate('<><><<><>><>'), true)\n    lu.assertEquals(candidate('<><><<<><><>><>><<><><<>>>'),\
    \ true)\n    lu.assertEquals(candidate('<<<><>>>>'), false)\n    lu.assertEquals(candidate('><<>'),\
    \ false)\n    lu.assertEquals(candidate('<'), false)\n    lu.assertEquals(candidate('<<<<'),\
    \ false)\n    lu.assertEquals(candidate('>'), false)\n    lu.assertEquals(candidate('<<>'),\
    \ false)\n    lu.assertEquals(candidate('<><><<><>><>><<>'), false)\n    lu.assertEquals(candidate('<><><<><>><>>><>'),\
    \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpb7efzkxu.lua:26:\
    \ expected: false, actual: true\nstack traceback:\n\t/tmp/tmpb7efzkxu.lua:26:\
    \ in function 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1\
    \ failure\n"
  timestamp: 1659750497
