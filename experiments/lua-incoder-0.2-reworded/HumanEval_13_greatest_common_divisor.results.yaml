language: lua
name: HumanEval_13_greatest_common_divisor
results:
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif a == 0 then return b\n  elseif b ==\
    \ a then return b\n  elseif a == b then return a\n  else\n    local c = a\n  \
    \  while c > b do\n      c = c / b\n    end\n    return c\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkzddzfx0.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpkzddzfx0.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4xrqr1h.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpy4xrqr1h.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local div = math.floor((a % b) / b)\n  return b * div\
    \ + a % b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv15r6ey.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmprv15r6ey.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return 0\n  if b == 0 then\n    return 0\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpj3f_rn4n.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Make sure a and b are integers\n  a = tonumber(a)\n  b = tonumber(b)\n\
    \  -- Make sure b is not 0\n  if b == 0 then\n    return a\n  end\n  -- Make sure\
    \ a is not 0\n  if a == 0 then\n    return b\n  end\n  -- Make sure a is greater\
    \ than b\n  if a > b then\n    a, b = b, a\n  end\n  -- Initialize greatest common\
    \ divisor to 1\n  local greatest_common_divisor = 1\n  -- Initialize remainder\
    \ to b\n  local remainder = b\n  -- Initialize quotient to a\n  local quotient\
    \ = a\n  -- Loop while remainder is not 0\n  while remainder ~= 0 do\n    -- Update\
    \ greatest common divisor\n    greatest_common_divisor = greatest_common_divisor\
    \ + 1\n    -- Update remainder\n    remainder = remainder % greatest_common_divisor\n\
    \    -- Update quotient\n    quotient = quotient / greatest_common_divisor\n \
    \ end\n  return greatest_common_divisor\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750302
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif\
    \ b == 2 then\n    return a\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmputvyzbpa.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmputvyzbpa.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m == a then return b end\n    if m == b then return a end\n\
    \    if m % a == 0 and m % b == 0 then\n      return m\n    end\n    i = i + 1\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpcnbfegpt.lua:25:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmpcnbfegpt.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local div = math.floor((a % b) / b)\n  return b * div\
    \ + a % b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmprv15r6ey.lua:17:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmprv15r6ey.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a ==\
    \ 0 then return b\n  elseif a == 1 then return b\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n  elseif a\
    \ == b then return a\n  elseif a == b then return a\n  elseif a == b then return\
    \ a\n  elseif a == b then return a\n  elseif a == b then return a\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmppnerbupt.lua:65: ''end'' expected (to close ''if'' at line
    7) near ''lu''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then return greatest_common_divisor(b, a) end\n  if b > a then return greatest_common_divisor(a,\
    \ b) end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750302
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local t = b\n    b = a % t\n   \
    \ a = t\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v1exk27.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7v1exk27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m % a == 0 and m % b == 0 then\n      return m\n    end\n\
    \    i = i + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpvs2ml0jh.lua:24:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpvs2ml0jh.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Make sure a and b are integers\n  a = tonumber(a)\n  b = tonumber(b)\n\
    \  -- Make sure b is greater than a\n  if b < a then\n    a, b = b, a\n  end\n\
    \  -- Return greatest common divisor of a and b\n  local gcd = math.gcd(a, b)\n\
    \  return gcd > 0 and gcd or 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp7fxd_ik1.lua:15:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmp7fxd_ik1.lua:15:\
    \ in function 'candidate'\n\t/tmp/tmp7fxd_ik1.lua:22: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    if a % i == 0 then\n\
    \      local r = a / i\n      if r == a then return i end\n      if r > b then\
    \ return r end\n    end\n    i = i + 1\n  end\n  return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpnhf1hywe.lua:26:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpnhf1hywe.lua:26: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    local gcd = math.gcd(a, b)\n    return gcd > a and gcd or b\n  end\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpa163dk09.lua:12:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpa163dk09.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpa163dk09.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v1exk27.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7v1exk27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a ==\
    \ 0 then return b\n  elseif a == 1 then return b\n  elseif a == b then return\
    \ a\n  elseif a == b + 1 then return a\n  elseif a == b - 1 then return a\n  elseif\
    \ a == b * 2 then return a\n  elseif a == b * 3 then return a\n  elseif a == b\
    \ * 4 then return a\n  elseif a == b * 5 then return a\n  elseif a == b * 6 then\
    \ return a\n  elseif a == b * 7 then return a\n  elseif a == b * 8 then return\
    \ a\n  elseif a == b * 9 then return a\n  elseif a == b * 10 then return a\n \
    \ elseif a == b * 11 then return a\n  elseif a == b * 12 then return a\n  elseif\
    \ a == b * 13 then return a\n  elseif a == b * 14 then return a\n  elseif a ==\
    \ b * 15 then return a\n  elseif a == b * 16 then return a\n  elseif a == b *\
    \ 17 then return a\n  elseif a == b * 18 then return a\n  elseif a == b * 19 then\
    \ return a\n  elseif a == b * 20 then return a\n  elseif a == b * 21 then return\
    \ a\n  elseif a == b * 22 then return a\n  elseif a == b * 23 then return a\n\
    \  elseif a == b * 24 then return a\n  elseif a == b * 25 then return a\n  elseif\
    \ a == b * 26 then return a\n  elseif a == b * 27 then return a\n  elseif a ==\
    \ b * 28 then return a\n  elseif a == b * 29 then return a\n  elseif a == b *\
    \ 30 then return a\n  elseif a == b * 31 then return a\n  elseif a == b * 32 then\
    \ return a\n  elseif a == b * 33 then return a\n  elseif a == b * 34 then return\
    \ a\n  elseif a == b * 35 then return a\n  elseif a == b * 36 then return a\n\
    \  elseif a == b * 37 then return a\n  elseif a == b * 38 then return a\n  elseif\
    \ a == b * 39 then return a\n  elseif a == b * 40 then return a\n  elseif a ==\
    \ b * 41 then return a\n  else\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpu_bqsxse.lua:65: ''end'' expected (to close ''if'' at line
    7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4xrqr1h.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpy4xrqr1h.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m == a then return b end\n    if m == b then return a end\n\
    \    if m % a == 0 and m % b == 0 then\n      a = m\n    else\n      b = m\n \
    \   end\n    i = i + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmyw8nvs.lua:28:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmplmyw8nvs.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We use \"Euclid's algorithm\" which computes the GCD of two numbers\n\
    \  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n  -- The GCD of two numbers\
    \ is the greatest integer that divides both of them.\n  -- The GCD of any positive\
    \ integer is always positive.\n  -- The GCD of negative numbers is always negative.\n\
    \  -- The GCD of zero is always zero.\n  -- The GCD of any number is always equal\
    \ to the number.\n  -- The GCD of two non-zero numbers is always less than the\
    \ smaller number.\n  -- The GCD of two zeros is always zero.\n  -- The GCD of\
    \ any non-zero number is always equal to the larger number.\n  -- The GCD of two\
    \ non-zero numbers is always greater than the smaller number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger number.\n  -- The GCD of\
    \ two non-zero numbers is always equal to the larger \nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpuv2dcic4.lua:52: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local div = math.gcd(a, b)\n  return div\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp5309jeq0.lua:10:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmp5309jeq0.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmp5309jeq0.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  if gcd == 1 then return b else return gcd\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjzkjj4n.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpwjzkjj4n.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpwjzkjj4n.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We use Euclid's algorithm to find the greatest common divisor\n  --\
    \ between two integers a and b\n  -- https://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    \  -- The algorithm is based on the following observation:\n  -- If x and y are\
    \ two integers and gcd(x, y) = 1, then gcd\n  -- (x, y) is the same as gcd(y,\
    \ x).\n  -- If x and y are two integers and gcd(x, y) = 0, then gcd\n  -- (x,\
    \ y) is the same as gcd(y, x).\n  -- If x and y are two integers and gcd(x, y)\
    \ = y, then gcd\n  -- (x, y) is the same as gcd(y, x).\n  -- If x and y are two\
    \ integers and gcd(x, y) = x, then gcd\n  -- (x, y) is the same as gcd(y, x).\n\
    \  -- If gcd(x, y) = 1, then gcd(x, y) = gcd(y, x).\n  -- If gcd(x, y) = 0, then\
    \ gcd(x, y) = gcd(y, x).\n  -- If gcd(x, y) = y, then gcd(x, y) = gcd(y, x).\n\
    \  -- If gcd(x, y) = x, then gcd(x, y) = gcd(y, x).\n  -- If gcd(x, y) = gcd(y,\
    \ x), then gcd(x, y) = gcd(y, x).\n  -- Therefore, we can use the following relation:\n\
    \  -- If gcd(x, y) = gcd(y, x), then gcd(x, y) = gcd(y, x).\n  -- This implies\
    \ that gcd(x, y) = gcd(y, gcd(x, y)).\n  -- Therefore, we can use the following\
    \ relation:\n  -- If gcd(x, y) = gcd(y, gcd(x, y)), then gcd(x, y) = gcd(y, x).\n\
    \  -- This implies that gcd(x, y) = gcd(y, gcd(y, x)).\n  -- Therefore, we can\
    \ use the following relation:\n  -- If gcd(x, y) = gcd(y, gcd(y, x)), then gcd(x,\
    \ y) = gcd(y, x).\n  -- This implies that gcd(x, y) = gcd(y, gcd(y, x)).\n  --\
    \ Therefore, we can use the following relation:\n  -- If gcd(x, y) = gcd(y, gcd(y,\
    \ x)), then gcd(x, y) = gcd(y, x).\n  -- This implies that gcd(x, y) = gcd(y,\
    \ gcd(y, x)).\n  -- Therefore, we can use the following relation:\n  -- If gcd(x,\
    \ y) = gcd(y, gcd(y, x)), then gcd(x, y) = gcd(y, x).\n  -- This implies that\
    \ gcd(x, y) = gcd(y, gcd(y, x)).\n  -- Therefore, we can use the following relation:\n\
    \  -- If gcd(x, y) = gcd(y, gcd(y, x)), then gcd(x, y) = gcd(y, x).\n  -- This\
    \ implies that gcd(x, y) = gcd(y, gcd(y, x)).\n  -- Therefore, we can use the\
    \ following relation\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpv62ws_ya.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v1exk27.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7v1exk27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If the numbers are equal, return a\n  if a == b then return a end\n\
    \  -- If the numbers are equal, return b\n  if b == a then return b end\n  --\
    \ If the numbers are equal, return 0\n  if a == 0 then return b end\n  -- If the\
    \ numbers are equal, return b\n  if b == 0 then return a end\n  -- If b is greater\
    \ than a, return b\n  if b > a then return b end\n  -- If b is greater than a,\
    \ return a\n  if a > b then return a end\n  -- If b is greater than a, return\
    \ a\n  if b == 0 then return a end\n  -- If b is greater than a, return a\n  if\
    \ a == 0 then return a end\n  -- If b is greater than a, return a\n  if b > a\
    \ then return a end\n  -- If b is greater than a, return a\n  if a == 0 then return\
    \ a end\n  -- If b is greater than a, return a\n  if b > a then return a end\n\
    \  -- If b is greater than a, return a\n  if a == 0 then return a end\n  -- If\
    \ b is greater than a, return a\n  if b > a then return a end\n  -- If b is greater\
    \ than a, return a\n  if a == 0 then return a end\n  -- If b is greater than a,\
    \ return a\n  if b > a then return a end\n  -- If b is greater than a, return\
    \ a\n  if a == 0 then return a end\n  -- If b is greater than a, return a\n  if\
    \ b > a then return a end\n  -- If b is greater than a, return a\n  if a == 0\
    \ then return a end\n  -- If b is greater than a, return a\n  if b > a then return\
    \ a end\n  -- If b is greater than a, return a\n  if a == 0 then return a end\n\
    \  -- If b is greater than a, return a\n  if b > a then return a end\n  -- If\
    \ b is greater than a, return a\n  if a == 0 then return a end\n  -- If b is greater\
    \ than a, return a\n  if b > a then return a end\n  -- If b is greater than a,\
    \ return a\n  if a == 0 then return a end\n  -- If b is greater than a, return\
    \ a\n  if b > a then return a end\n  -- If b is greater than a, return a\n  if\
    \ a == 0 then return a end\n  -- If b is greater than a, return a\n  if b > a\
    \ then return a end\n  -- If b is greater than a, return a\n  if a == 0 then return\
    \ a end\n  -- If b is greater than a, return a\n  if b > a then return a end\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp4uh_oq9n.lua:75: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  else return\
    \ greatest_common_divisor(b, a % b) end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp__t8wn9.lua:15:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpp__t8wn9.lua:15: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a > b then\n    local tmp = a\n    a = b\n    b = tmp\n  end\n  local i = 1\n\
    \  while b > 0 do\n    local tmp = a\n    a = b\n    b = tmp % b\n    i = i +\
    \ 1\n  end\n  return i\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmphuvv813g.lua:29:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmphuvv813g.lua:29: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v1exk27.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7v1exk27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    local m = math.floor(a/b);\n    if a % b == 0 then\n      return m * greatest_common_divisor(b,\
    \ a - m * b)\n    else\n      return m * greatest_common_divisor(b, a - m * b)\n\
    \    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp5zvxkb9n.lua:24:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp5zvxkb9n.lua:24: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  if gcd == 1 then\n    return a\n  else\n\
    \    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmumgspct.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpmumgspct.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpmumgspct.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a ==\
    \ 0 then return b\n  elseif a == 1 then return b\n  elseif a == b then return\
    \ a\n  elseif a == (b % b) then return greatest_common_divisor(b, a % b)\n  else\
    \ return greatest_common_divisor(b, a % b) + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpkf6ade18.lua:20:\
    \ expected: 1, actual: 5\nstack traceback:\n\t/tmp/tmpkf6ade18.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  if gcd == 1 then\n    return a\n  else\n\
    \    return b\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpmumgspct.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpmumgspct.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpmumgspct.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local div = math.gcd(a, b)\n  return div * div\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpg1zwsk3j.lua:10:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpg1zwsk3j.lua:10:\
    \ in function 'candidate'\n\t/tmp/tmpg1zwsk3j.lua:17: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We use Euclid's algorithm to find the greatest common divisor.\n  --\
    \ The algorithm is as follows:\n  --\n  --     1. Initialize a to be the smaller\
    \ of the two given numbers.\n  --     2. Initialize b to be the larger of the\
    \ two given numbers.\n  --     3. While a is less than b:\n  --         1. Add\
    \ 1 to a and b.\n  --         2. Subtract a from b while b is greater than a.\n\
    \  --         3. Return b.\n  --     4. While a is greater than b:\n  --     \
    \    1. Add 1 to a and b.\n  --         2. Subtract b from a, while a is greater\
    \ than b.\n  --         3. Return a.\n  --\n  -- This algorithm is O(log(a) +\
    \ log(b)) where a and b are the lengths of\n  -- two integers respectively.\n\
    \  -- See https://en.wikipedia.org/wiki/Euclidean_algorithm#Algorithm_to_find_greatest_common_divisor\n\
    \  -- See https://rosettacode.org/wiki/Greatest_common_divisor#Lua\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#Lua\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#Python\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#JavaScript\n  -- See\
    \ https://rosettacode.org/wiki/Euclidean_algorithm#Java\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#2\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#3\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#4\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#5\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#6\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#7\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#8\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#9\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#10\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#11\n  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#12\n\
    \  -- See https://rosettacode.org/wiki/Euclidean_algorithm#C#13\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpy32q73kh.lua:53: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif\
    \ b == a then\n    return a\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8zwp3xb1.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp8zwp3xb1.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1ro_y3r.lua:17:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpn1ro_y3r.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return b\n  elseif a ==\
    \ 0 then return b\n  elseif a == 1 then return a\n  elseif a == b then return\
    \ a\n  elseif a == b + 1 then return a\n  elseif a == b - 1 then return b\n  elseif\
    \ a == b + 2 then return greatest_common_divisor(b - 1, b - 2)\n  elseif a ==\
    \ b - 2 then return greatest_common_divisor(b - 1, b + 2)\n  elseif a == b + 3\
    \ then return greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 3 then\
    \ return greatest_common_divisor(b + 2, b + 3)\n  elseif a == b + 4 then return\
    \ greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 4 then return greatest_common_divisor(b\
    \ + 2, b + 3)\n  elseif a == b + 5 then return greatest_common_divisor(b - 1,\
    \ b - 2)\n  elseif a == b - 5 then return greatest_common_divisor(b + 2, b + 3)\n\
    \  elseif a == b + 6 then return greatest_common_divisor(b - 1, b - 2)\n  elseif\
    \ a == b - 6 then return greatest_common_divisor(b + 2, b + 3)\n  elseif a ==\
    \ b + 7 then return greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 7\
    \ then return greatest_common_divisor(b + 2, b + 3)\n  elseif a == b + 8 then\
    \ return greatest_common_divisor(b - 1, b - 2)\n  elseif a == b - 8 then return\
    \ greatest_common_divisor(b + 2, b + 3)\n  elseif a == b + 9 then return greatest_common_divisor(b\
    \ - 1, b - 2)\n  elseif a == b - 9 then return greatest_common_divisor(b + 2,\
    \ b + 3)\n  elseif a == b + 10 then return greatest_common_divisor(b - 1, b -\
    \ 2)\n  elseif a == b - 10 then return greatest_common_divisor(b + 2, b + 3)\n\
    \  elseif a == b + 11 then return greatest_common_divisor(b - 1, b - 2)\n  elseif\
    \ a == b - 11 then return greatest_common_divisor(b + 2, b + 3)\n  elseif a ==\
    \ b + 12 then return greatest_common_divisor(b - 1, b - 2)\n  elseif a == b\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpsj_qzd4t.lua:36: ''then'' expected near ''lu''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  if gcd == 1 then return b else return gcd\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjzkjj4n.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpwjzkjj4n.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpwjzkjj4n.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- TODO: Use Euclid's algorithm for this.\n  assert(type(b) == 'number')\n\
    \  assert(type(a) == 'number')\n  assert(a >= 0 and b >= 0)\n  assert(a > b)\n\
    \  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    local gcd = math.gcd(a, b)\n    if gcd == 1 then\n      return a\n    else\n\
    \      return gcd\n    end\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwghr7vt0.lua:11:\
    \ assertion failed!\nstack traceback:\n\t/tmp/tmpwghr7vt0.lua:11: in function\
    \ 'candidate'\n\t/tmp/tmpwghr7vt0.lua:29: in function 'test_humaneval'\n\nRan\
    \ 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Special case: if the divisor is 1, return 1\n  if a == 1 then\n   \
    \ return 1\n  end\n  -- Special case: if the divisor is zero, return 0\n  if b\
    \ == 1 then\n    return 0\n  end\n  -- Special case: if the divisor is 1, return\
    \ 1\n  if a == 0 then\n    return 1\n  end\n  -- Special case: if the divisor\
    \ is zero, return 0\n  if b == 0 then\n    return 0\n  end\n  -- Special case:\
    \ if the divisor is 1, return 1\n  if a == 1 then\n    return 1\n  end\n  -- Special\
    \ case: if the divisor is zero, return 0\n  if b == 1 then\n    return 0\n  end\n\
    \  -- Special case: if the divisor is 1, return 1\n  if a == 0 then\n    return\
    \ 1\n  end\n  -- Special case: if the divisor is zero, return 0\n  if b == 0 then\n\
    \    return 0\n  end\n  -- Special case: if the divisor is 1, return 1\n  if a\
    \ == 1 then\n    return 1\n  end\n  -- Special case: if the divisor is zero, return\
    \ 0\n  if b == 1 then\n    return 0\n  end\n  -- Special case: if the divisor\
    \ is 1, return 1\n  if a == 0 then\n    return 1\n  end\n  -- Special case: if\
    \ the divisor is zero, return 0\n  if b == 0 then\n    return 0\n  end\n  -- Special\
    \ case: if the divisor is 1, return 1\n  if a == 1 then\n    return 1\n  end\n\
    \  -- Special case: if the divisor is zero, return 0\n  if b == 1 then\n    return\
    \ 0\n  end\n  -- Special case: if the divisor is 1, return 1\n  if a == 0 then\n\
    \    return 1\n  end\n  -- Special case: if the divisor is zero, return 0\n  if\
    \ b == 0 then\n    return 0\n  end\n  -- Special case: if the divisor is 1, return\
    \ 1\n  if a == 1 then\n    return 1\n  end\n  -- Special case: if the divisor\
    \ is zero, return 0\n  if b == 1 then\n    return 0\n  end\n  -- Special case:\
    \ if the divisor is 1, return 1\n  if a == 0 then\n    return 1\n  end\n  -- Special\
    \ case: if the divisor is zero, return 0\n  if b == 0 then\n    return 0\n  end\n\
    \  -- Special case: if the divisor is 1, return 1\n  if a == 1 then\n    return\
    \ 1\n  end\n  -- Special case: if the divisor is zero, return 0\n\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpar1xi6hs.lua:103: ''end'' expected (to close ''function''
    at line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m == a then return b end\n    if m == b then return a end\n\
    \    if m % a == 0 and m % b == 0 then\n      a = m\n    else\n      b = m\n \
    \   end\n    i = i + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmplmyw8nvs.lua:28:\
    \ expected: 1, actual: 4\nstack traceback:\n\t/tmp/tmplmyw8nvs.lua:28: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif\
    \ b == a then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopte81sc.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpopte81sc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v1exk27.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7v1exk27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local div = math.floor((a % b) / b)\n  return b * div\
    \ + b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0cmh6n2k.lua:17:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmp0cmh6n2k.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    if i % b == 0 then\
    \ return i end\n    i = i + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmppjhsg3lz.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmppjhsg3lz.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a ==\
    \ 0 then return b\n  elseif a == 1 then return b\n  elseif a == b then return\
    \ a\n  else\n    local c = greatest_common_divisor(b, a % b)\n    return c * b\
    \ + (a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpp2eh9inc.lua:21:\
    \ expected: 1, actual: 73\nstack traceback:\n\t/tmp/tmpp2eh9inc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ b == a then\n    return a\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a ==\
    \ 0 then return b\n  elseif a == 1 then return b\n  elseif a == b then return\
    \ a\n  elseif a == b + 1 then return a\n  elseif a == b - 1 then return b\n  elseif\
    \ a == b * 2 then return a\n  elseif a == b * 3 then return b\n  elseif a == b\
    \ * 4 then return a\n  elseif a == b * 5 then return b\n  elseif a == b * 6 then\
    \ return a\n  elseif a == b * 7 then return b\n  elseif a == b * 8 then return\
    \ a\n  elseif a == b * 9 then return b\n  elseif a == b * 10 then return a\n \
    \ elseif a == b * 11 then return b\n  elseif a == b * 12 then return a\n  elseif\
    \ a == b * 13 then return b\n  elseif a == b * 14 then return a\n  elseif a ==\
    \ b * 15 then return b\n  elseif a == b * 16 then return a\n  elseif a == b *\
    \ 17 then return b\n  elseif a == b * 18 then return a\n  elseif a == b * 19 then\
    \ return b\n  elseif a == b * 20 then return a\n  elseif a == b * 21 then return\
    \ b\n  elseif a == b * 22 then return a\n  elseif a == b * 23 then return b\n\
    \  elseif a == b * 24 then return a\n  elseif a == b * 25 then return b\n  elseif\
    \ a == b * 26 then return a\n  elseif a == b * 27 then return b\n  elseif a ==\
    \ b * 28 then return a\n  elseif a == b * 29 then return b\n  elseif a == b *\
    \ 30 then return a\n  elseif a == b * 31 then return b\n  elseif a == b * 32 then\
    \ return a\n  elseif a == b * 33 then return b\n  elseif a == b * 34 then return\
    \ a\n  elseif a == b * 35 then return b\n  elseif a == b * 36 then return a\n\
    \  elseif a == b * 37 then return b\n  elseif a == b * 38 then return a\n  elseif\
    \ a == b * 39 then return b\n  elseif a == b * 40 then return a\n  elseif a ==\
    \ b * 41 then return b\n  else\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp_gckmkp1.lua:65: ''end'' expected (to close ''if'' at line
    7) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If the numbers are equal, return 1\n  if a == b then return 1 end\n\
    \  -- If the numbers are odd, return b\n  if a % 2 == 1 then return b end\n  --\
    \ Otherwise, return a\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpqfue3x29.lua:18:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpqfue3x29.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    local gcd = math.gcd(a, b)\n    return greatest_common_divisor(b , gcd)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwsbb05e0.lua:12:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpwsbb05e0.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpwsbb05e0.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local div = math.floor((a % b) / b)\n  if div == 0 then\
    \ return b end\n  return greatest_common_divisor(b, div)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpiru8e30s.lua:18:\
    \ expected: 1, actual: 7\nstack traceback:\n\t/tmp/tmpiru8e30s.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a / b) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_evi8nq.lua:16:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpm_evi8nq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a ==\
    \ 0 then return b\n  elseif a == 1 then return b\n  elseif a == b then return\
    \ a\n  elseif a % b == 0 then return greatest_common_divisor(b, a / b)\n  else\
    \ return greatest_common_divisor(b, a / b) + 1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpjxari456.lua:20:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpjxari456.lua:20: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local remainder\n  local i = 1\n  while i <= a do\n    remainder = a %\
    \ i\n    if remainder == 0 then\n      return i\n    end\n    i = i + 1\n  end\n\
    \  return b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpi9vcuhlt.lua:23:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmpi9vcuhlt.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif b ==\
    \ a then return b\n  elseif a % b == 0 then return greatest_common_divisor(b,\
    \ a / b)\n  else return greatest_common_divisor(b, a / b) + 1\n  end\nend\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpq_8kt5v0.lua:18:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpq_8kt5v0.lua:18: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  if gcd == 0 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, gcd)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmp8cyj6gfw.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmp8cyj6gfw.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmp8cyj6gfw.lua:18: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v1exk27.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7v1exk27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b)\n  else return greatest_common_divisor(b,\
    \ a / b) + 1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpn1ro_y3r.lua:17:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpn1ro_y3r.lua:17: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local m = math.floor((a\
    \ + b) / 2)\n    if m == a then return b end\n    if m == b then return a end\n\
    \    if m % a == 0 then a = m end\n    if m % b == 0 then b = m end\n    i = i\
    \ + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpot77lg_g.lua:25:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpot77lg_g.lua:25: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  elseif\
    \ b == a then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpopte81sc.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpopte81sc.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  if gcd == 1 then return b else return gcd\
    \ end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpwjzkjj4n.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpwjzkjj4n.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpwjzkjj4n.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750297
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We use \"a\" and \"b\" as the parameters to avoid confusion with\n\
    \  -- local variables in \"greatest_common_divisor_helper\".\n  if a == 0 then\
    \ return b end\n  if b == 0 then return a end\n  if a > b then a, b = b, a end\n\
    \  -- We use \"a\" and \"b\" as the parameters to avoid confusion with\n  -- local\
    \ variables in \"greatest_common_divisor_helper\".\n  if a == 1 then return b\
    \ end\n  if b == 1 then return a end\n  if a > b then a, b = b, a end\n  -- We\
    \ use \"a\" and \"b\" as the parameters to avoid confusion with\n  -- local variables\
    \ in \"greatest_common_divisor_helper\".\n  local d\n  local t = a\n  while t\
    \ > 0 do\n    d, t = b, t % b\n  end\n  return d\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750303
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == a then return b\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750303
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then return greatest_common_divisor(b, a) end\n  if a < b then return greatest_common_divisor(a,\
    \ b) end\n  local c = a\n  while c > 0 do\n    local d = b\n    while d > 0 do\n\
    \      if c % d == 0 then\n        return c\n      end\n      d = d - 1\n    end\n\
    \    c = c - 1\n  end\n  return c\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750303
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  else\n\
    \    local div = math.gcd(a, b)\n    return greatest_common_divisor(b, a % div)\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpel5jwfie.lua:12:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpel5jwfie.lua:12:\
    \ in function 'candidate'\n\t/tmp/tmpel5jwfie.lua:20: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a % b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpy4xrqr1h.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpy4xrqr1h.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We use \"a\" and \"b\" as the parameters to avoid confusion with\n\
    \  -- local variables in \"greatest_common_divisor_helper\".\n  local function\
    \ greatest_common_divisor_helper(a, b)\n    if b == 0 then\n      return a\n \
    \   elseif b == 1 then\n      return b\n    else\n      return greatest_common_divisor_helper(a\
    \ % b, b)\n    end\n  end\n  return greatest_common_divisor_helper(a, b)\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750303
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, return a\n  if b == 0 then\n    return a\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7wztbezi.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local t = b\n  \
    \  b = a % t\n    a = t\n    i = i + 1\n  end\n  return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s4iyofr.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7s4iyofr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  return math.gcd(a, gcd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaf02uc18.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpaf02uc18.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpaf02uc18.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  else\n    return greatest_common_divisor(b,\
    \ a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return a\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7v1exk27.lua:19:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp7v1exk27.lua:19: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local t = b\n  \
    \  b = a % t\n    a = t\n    i = i + 1\n  end\n  return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s4iyofr.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7s4iyofr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  local gcd = math.gcd(a, b)\n  return math.gcd(a, gcd)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpaf02uc18.lua:7:\
    \ attempt to call field 'gcd' (a nil value)\nstack traceback:\n\t/tmp/tmpaf02uc18.lua:7:\
    \ in function 'candidate'\n\t/tmp/tmpaf02uc18.lua:14: in function 'test_humaneval'\n\
    \nRan 1 tests in 0.000 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    if i % b == 0 then\n\
    \      return i\n    end\n    i = i + 1\n  end\n  return a\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmps6xf1tdy.lua:23:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmps6xf1tdy.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- We use Lua 5.2's math.gcd function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n\
    \  -- See http://lua-users.org/wiki/MathLibraryTutorial#gcd_function\n  -- See\
    \ http://lua-users.org/wiki/\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp20bt8fi6.lua:48: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  else return\
    \ greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp0_4w11i2.lua:16:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmp0_4w11i2.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  return greatest_common_divisor(b,\
    \ a / b) + 1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm_evi8nq.lua:16:\
    \ expected: 1, actual: #Inf\nstack traceback:\n\t/tmp/tmpm_evi8nq.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif a == 0 then return b\n  elseif a ==\
    \ b then return a\n  elseif a > b then return greatest_common_divisor(b, a) end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp8di1h57j.lua:16:\
    \ expected: 1, actual: nil\nstack traceback:\n\t/tmp/tmp8di1h57j.lua:16: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then\n    return b\n  elseif b == 0 then\n    return a\n  elseif\
    \ a == b then\n    return a\n  else\n    local m = math.floor((a + b) / 2)\n \
    \   return greatest_common_divisor(a, m) * greatest_common_divisor(b, m)\n  end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "E\nTests with errors:\n------------------\n1) test_humaneval\n/tmp/tmpj0ojrxwc.lua:14:\
    \ stack overflow\nstack traceback:\n\t/tmp/tmpj0ojrxwc.lua:14: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15:\
    \ in function 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function\
    \ 'greatest_common_divisor'\n\t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\
    \t/tmp/tmpj0ojrxwc.lua:15: in function 'greatest_common_divisor'\n\t...\n\nRan\
    \ 1 tests in 0.410 seconds, 0 successes, 1 error\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 1 then\n    return a\n  elseif b == 0 then\n    return 0\n  elseif\
    \ b == a then\n    return b\n  else\n    return greatest_common_divisor(b, a %\
    \ b)\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmpm72grrmd.lua:21:\
    \ expected: 1, actual: 3\nstack traceback:\n\t/tmp/tmpm72grrmd.lua:21: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n\
    \  -- http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  --\
    \ http://en.wikipedia.org/wiki/Euclidean_algorithm#Modular_arithmetic\n  -- http://en.wikipedia.org/wiki/Euclidean_algorithm\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpmo2nul4d.lua:52: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    if a % i == 0 then\n\
    \      local t = i\n      i = 1\n      while i <= b do\n        if b % i == 0\
    \ then\n          t = i\n          break\n        end\n        i = i + 1\n   \
    \   end\n      if t > b then return t end\n    end\n    i = i + 1\n  end\n  return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750303
- exit_code: -1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local c = a % i\n\
    \    if c == 0 then\n      a = i\n    else\n      i = i\n    end\n  end\n  return\
    \ a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10,\
    \ 15), 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Timeout
  stderr: ''
  stdout: ''
  timestamp: 1659750303
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  local i = 1\n  while i <= a do\n    local t = b\n  \
    \  b = a % t\n    a = t\n    i = i + 1\n  end\n  return b\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp7s4iyofr.lua:23:\
    \ expected: 1, actual: 0\nstack traceback:\n\t/tmp/tmp7s4iyofr.lua:23: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, then return a\n  if b == 0 then\n    return a\n  end\nlu\
    \ = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n\
    \    lu.assertEquals(candidate(3, 7), 1)\n    lu.assertEquals(candidate(10, 15),\
    \ 5)\n    lu.assertEquals(candidate(49, 14), 7)\n    lu.assertEquals(candidate(144,\
    \ 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpm_p937_m.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then return a\n  elseif b == 1 then return a\n  elseif a % b\
    \ == 0 then return greatest_common_divisor(b, a / b) end\n  local c = 1\n  while\
    \ a % b == 0 do\n    a = a / b\n    c = c + 1\n  end\n  return c\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: ''
  stdout: "F\nFailed tests:\n-------------\n1) test_humaneval\n/tmp/tmp23zmm0yp.lua:22:\
    \ expected: 5, actual: 1\nstack traceback:\n\t/tmp/tmp23zmm0yp.lua:22: in function\
    \ 'test_humaneval'\n\nRan 1 tests in 0.000 seconds, 0 successes, 1 failure\n"
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- If b is 0, return a\n  if b == 0 then\n    return a\n  end\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmp7wztbezi.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local t = b\n    b = a % t\n   \
    \ a = t\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if a == 0 then return b end\n  if b == 0 then return a end\n  if a > b\
    \ then a, b = b, a end\n  while b > 0 do\n    local c = a % b\n    a = b\n   \
    \ b = c\n  end\n  return a\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7),\
    \ 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
- exit_code: 1
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  -- Special case: if the divisor is 1, return 1\n  if a == 1 then\n   \
    \ return 1\n  end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3, 7), 1)\n\
    \    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: Exception
  stderr: 'lua: /tmp/tmpzpvzyb2c.lua:21: ''end'' expected (to close ''function'' at
    line 6) near ''<eof>''

    '
  stdout: ''
  timestamp: 1659750298
- exit_code: 0
  program: "-- Return a greatest common divisor of two integers a and b\n-- >>> greatest_common_divisor(3,\
    \ 5)\n-- 1\n-- >>> greatest_common_divisor(25, 15)\n-- 5\nlocal function greatest_common_divisor(a,\
    \ b)\n  if b == 0 then\n    return a\n  elseif b == 1 then\n    return b\n  else\n\
    \    return greatest_common_divisor(b, a % b)\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = greatest_common_divisor\n    lu.assertEquals(candidate(3,\
    \ 7), 1)\n    lu.assertEquals(candidate(10, 15), 5)\n    lu.assertEquals(candidate(49,\
    \ 14), 7)\n    lu.assertEquals(candidate(144, 60), 12)\nend\n\nos.exit(lu.LuaUnit.run())"
  status: OK
  stderr: ''
  stdout: '.

    Ran 1 tests in 0.000 seconds, 1 success, 0 failures

    OK

    '
  timestamp: 1659750297
