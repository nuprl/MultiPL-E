name: HumanEval_31_is_prime
language: lua
prompt: "-- Return true if a given number is prime, and false otherwise.\n-- >>> is_prime(6)\n\
  -- false\n-- >>> is_prime(101)\n-- true\n-- >>> is_prime(11)\n-- true\n-- >>> is_prime(13441)\n\
  -- true\n-- >>> is_prime(61)\n-- true\n-- >>> is_prime(4)\n-- false\n-- >>> is_prime(1)\n\
  -- false\nlocal function is_prime(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_prime\n\
  \    lu.assertEquals(candidate(6), false)\n    lu.assertEquals(candidate(101), true)\n\
  \    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(13441),\
  \ true)\n    lu.assertEquals(candidate(61), true)\n    lu.assertEquals(candidate(4),\
  \ false)\n    lu.assertEquals(candidate(1), false)\n    lu.assertEquals(candidate(5),\
  \ true)\n    lu.assertEquals(candidate(11), true)\n    lu.assertEquals(candidate(17),\
  \ true)\n    lu.assertEquals(candidate(85), false)\n    lu.assertEquals(candidate(77),\
  \ false)\n    lu.assertEquals(candidate(255379), false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return\
    \ true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n\
    \  while i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend", "  if n < 2 then\n    return false\n\
    \  end\n  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return\
    \ false\n  end\n  -- Check odd and even.\n  if n % 3 == 0 then\n    return false\n\
    \  end\n  -- Check odd and even.\n  if n % 5 == 0 then\n    return false\n  end\n\
    \  -- Check odd and even.\n  if n % 7 == 0 then\n    return false\n  end\n  --\
    \ Check odd and even.\n  if n % 11 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even.\n  if n % 13 == 0 then\n    return false\n  end\n  -- Check odd\
    \ and even.\n  if n % 17 == 0 then\n    return false\n  end\n  -- Check odd and\
    \ even.\n  if n % 19 == 0 then\n    return false\n  end\n  -- Check odd and even.\n\
    \  if n % 23 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if\
    \ n % 29 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n\
    \ % 31 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n %\
    \ 37 == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 41\
    \ == 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 43 ==\
    \ 0 then\n    return false\n  end\n  -- Check odd and even.\n  if n % 47 == 0\
    \ then\n    return false\n  end\n  -- Check odd and even.\n  if n % 53 == 0 then\n\
    \    return false\n  end\n  -- Check odd and even.\n  if n % 59 == 0 then\n  \
    \  return false\n  end\n  -- Check odd and even.\n  if n % 61 == 0 then\n    return\
    \ false\n  end\n  -- Check odd and even.\n  if n % 67 == 0 then\n    return false\n\
    \  end\n  -- Check odd and even.\n  if n % 71 == 0 then\n    return false\n  end\n\
    \  -- Check odd and even.\n  if n % 73 == 0 then\n    return false\n  end\n  --\
    \ Check odd and even.\n  if n % 79 == 0 then\n    return false\n  end\n  -- Check\
    \ odd and even.\n  if n % 83 == 0 then\n    return false\n  end\n  -- Check odd\
    \ and even.\n  if n % 89 == 0 then\n    return false\n  end\n  -- Check odd and\
    \ even.\n  if n % 97 == 0 then\n    return false\n  end\n  -- ", "  if n < 2 then\
    \ return false end\n  if n == 2 then return true end\n  if n % 2 == 0 then return\
    \ false end\n  if n % 3 == 0 then return false end\n  if n % 5 == 0 then return\
    \ false end\n  if n % 7 == 0 then return false end\n  if n % 11 == 0 then return\
    \ false end\n  if n % 13 == 0 then return false end\n  if n % 17 == 0 then return\
    \ false end\n  if n % 19 == 0 then return false end\n  if n % 23 == 0 then return\
    \ false end\n  if n % 29 == 0 then return false end\n  if n % 31 == 0 then return\
    \ false end\n  if n % 37 == 0 then return false end\n  if n % 41 == 0 then return\
    \ false end\n  if n % 43 == 0 then return false end\n  if n % 47 == 0 then return\
    \ false end\n  if n % 53 == 0 then return false end\n  if n % 59 == 0 then return\
    \ false end\n  if n % 61 == 0 then return false end\n  if n % 67 == 0 then return\
    \ false end\n  if n % 71 == 0 then return false end\n  if n % 73 == 0 then return\
    \ false end\n  if n % 79 == 0 then return false end\n  if n % 83 == 0 then return\
    \ false end\n  if n % 89 == 0 then return false end\n  if n % 97 == 0 then return\
    \ false end\n  if n % 101 == 0 then return false end\n  if n % 103 == 0 then return\
    \ false end\n  if n % 107 == 0 then return false end\n  if n % 111 == 0 then return\
    \ false end\n  if n % 115 == 0 then return false end\n  if n % 121 == 0 then return\
    \ false end\n  if n % 127 == 0 then return false end\n  if n % 131 == 0 then return\
    \ false end\n  if n % 137 == 0 then return false end\n  if n % 143 == 0 then return\
    \ false end\n  if n % 149 == 0 then return false end\n  if n % 153 == 0 then return\
    \ false end\n  if n % 157 == 0 then return false end\n  if n % 161 == 0 then return\
    \ false end\n  if n % 165 == 0 then return false end\n  if n % 169 == 0 then return\
    \ false end\n  if n % 173 == 0 then return false end\n  if n % 177 == 0 then return\
    \ false end\n  if n % 181 == 0 then return false end\n  if n % 185 == 0 then return\
    \ false end\n  if n % 189 == 0 then return false end\n  if n % 193 == 0 then return\
    \ false end\n  if n % 197 == 0 then return false end\n  if n % 201 == 0 then return\
    \ false end\n  if n % 205 == 0 then return false ", "  -- The prime test is taken\
    \ from http://en.wikipedia.org/wiki/Primality_test\n  -- The algorithm used is\
    \ slightly modified to take into account that the\n  -- prime number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account that the\n\
    \  -- number must be odd.\n  -- The algorithm is also slightly modified to take\
    \ into account that the\n  -- number must be odd.\n  -- The algorithm is also\
    \ slightly modified to take into account that the\n  -- number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account that the\n\
    \  -- number must be odd.\n  -- The algorithm is also slightly modified to take\
    \ into account that the\n  -- number must be odd.\n  -- The algorithm is also\
    \ slightly modified to take into account that the\n  -- number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account that the\n\
    \  -- number must be odd.\n  -- The algorithm is also slightly modified to take\
    \ into account that the\n  -- number must be odd.\n  -- The algorithm is also\
    \ slightly modified to take into account that the\n  -- number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account that the\n\
    \  -- number must be odd.\n  -- The algorithm is also slightly modified to take\
    \ into account that the\n  -- number must be odd.\n  -- The algorithm is also\
    \ slightly modified to take into account that the\n  -- number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account that the\n\
    \  -- number must be odd.\n  -- The algorithm is also slightly modified to take\
    \ into account that the\n  -- number must be odd.\n  -- The algorithm is also\
    \ slightly modified to take into account that the\n  -- number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account that the\n\
    \  -- number must be odd.\n  -- The algorithm is also slightly modified to take\
    \ into account that the\n  -- number must be odd.\n  -- The algorithm is also\
    \ slightly modified to take into account that the\n  -- number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account that the\n\
    \  -- number must be odd.\n  -- The algorithm is also slightly modified to take\
    \ into account that the\n  -- number must be odd.\n  -- The algorithm is also\
    \ slightly modified to take into account that the\n  -- number must be odd.\n\
    \  -- The algorithm is also slightly modified to take into account ", "  -- The\
    \ prime test is based on the sieve of Eratosthenes. \n  -- The sieve consists\
    \ of two arrays: one containing the odd numbers, \n  -- one containing the even\
    \ numbers. Each number is then marked \n  -- true or false depending on whether\
    \ it is odd or even.\n  -- >>> is_prime(6)\n  -- true\n  -- >>> is_prime(10)\n\
    \  -- true\n  -- >>> is_prime(11)\n  -- false\n  -- >>> is_prime(13)\n  -- true\n\
    \  -- >>> is_prime(14)\n  -- false\n  -- >>> is_prime(15)\n  -- false\n  -- >>>\
    \ is_prime(16)\n  -- true\n  -- >>> is_prime(17)\n  -- false\n  -- >>> is_prime(18)\n\
    \  -- true\n  -- >>> is_prime(19)\n  -- false\n  -- >>> is_prime(20)\n  -- true\n\
    \  -- >>> is_prime(21)\n  -- false\n  -- >>> is_prime(22)\n  -- true\n  -- >>>\
    \ is_prime(23)\n  -- false\n  -- >>> is_prime(24)\n  -- true\n  -- >>> is_prime(25)\n\
    \  -- false\n  -- >>> is_prime(26)\n  -- true\n  -- >>> is_prime(27)\n  -- false\n\
    \  -- >>> is_prime(28)\n  -- true\n  -- >>> is_prime(29)\n  -- false\n  -- >>>\
    \ is_prime(30)\n  -- true\n  -- >>> is_prime(31)\n  -- false\n  -- >>> is_prime(32)\n\
    \  -- true\n  -- >>> is_prime(33)\n  -- false\n  -- >>> is_prime(34)\n  -- true\n\
    \  -- >>> is_prime(35)\n  -- false\n  -- >>> is_prime(36)\n  -- true\n  -- >>>\
    \ is_prime(37)\n  -- false\n  -- >>> is_prime(38)\n  -- true\n  -- >>> is_prime(39)\n\
    \  -- false\n  -- >>> is_prime(40)\n  -- true\n  -- >>> is_prime(41)\n  -- false\n\
    \  -- >>> is_prime(42)\n  -- true\n  -- >>> is_prime(43)\n  -- false\n  -- >>>\
    \ is_prime(44)\n  -- true\n  -- >>> is_prime(45)\n  -- false\n  -- >>> is_prime(46)",
  "  if n < 2 then return false end\n  if n == 2 then return true end\n  if n % 2\
    \ == 0 then return false end\n  local i = 3\n  while i <= math.sqrt(n) do\n  \
    \  if n % i == 0 then return false end\n    i = i + 2\n  end\n  return true\n\
    end", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return\
    \ true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n\
    \  while i * i <= n do\n    if n % i == 0 then\n      return false\n    end\n\
    \    i = i + 2\n  end\n  return true\nend", "  if n < 2 then return false end\n\
    \  if n == 2 then return true end\n  if n % 2 == 0 then return false end\n  local\
    \ m = math.floor(n/2)\n  for i = 2, m do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend", "  if n < 2 then\n    return false\n  end\n\
    \  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return false\n\
    \  end\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n\
    \      return false\n    end\n    i = i + 2\n  end\n  return true\nend", "  if\
    \ n < 2 then return false end\n  if n == 1 then return true end\n  if n % 2 ==\
    \ 0 then return false end\n  if n % 3 == 0 then return false end\n  if n % 5 ==\
    \ 0 then return false end\n  if n % 7 == 0 then return false end\n  local m =\
    \ math.floor(math.sqrt(n))\n  for i = 1, m do\n    if n % i == 0 then return false\
    \ end\n  end\n  return true\nend", "  -- Base case\n  if n < 2 then return false\
    \ end", "  if n < 2 then return false end\n  if n == 2 then return true end\n\
    \  if n % 2 == 0 then return false end\n  if n % 3 == 0 then return false end\n\
    \  if n % 5 == 0 then return false end\n  if n % 7 == 0 then return false end\n\
    \  if n == 1 then return false end\n  if n == 3 then return true end\n  if n ==\
    \ 5 then return true end\n  if n == 7 then return true end\n  if n == 11 then\
    \ return true end\n  if n == 13 then return true end\n  if n == 17 then return\
    \ true end\n  if n == 19 then return true end\n  if n == 23 then return true end\n\
    \  if n == 29 then return true end\n  if n == 31 then return true end\n  if n\
    \ == 37 then return true end\n  if n == 43 then return true end\n  if n == 47\
    \ then return true end\n  if n == 59 then return true end\n  if n == 61 then return\
    \ true end\n  if n == 67 then return true end\n  if n == 73 then return true end\n\
    \  if n == 79 then return true end\n  if n == 87 then return true end\n  if n\
    \ == 97 then return true end\n  if n == 113 then return true end\n  if n == 131\
    \ then return true end\n  if n == 139 then return true end\n  if n == 149 then\
    \ return true end\n  if n == 151 then return true end\n  if n == 157 then return\
    \ true end\n  if n == 163 then return true end\n  if n == 171 then return true\
    \ end\n  if n == 179 then return true end\n  if n == 181 then return true end\n\
    \  if n == 191 then return true end\n  if n == 193 then return true end\n  if\
    \ n == 197 then return true end\n  if n == 199 then return true end\n  if n ==\
    \ 211 then return true end\n  if n == 223 then return true end\n  if n == 227\
    \ then return true end\n  if n == 23 then return true end\n  if n == 251 then\
    \ return true end\n  if n == 253 then return true end\n  if n == 257 then return\
    \ true end\n  if n == 263 then return true end\n  if n == 265 then return true\
    \ end\n  if n == 269 then return true end\n  if n == 273 then return true end\n\
    \  if n == 277 then return true end\n  if n == 281 then return true end\n  if\
    \ n == 283 then return true end\n  if n == 293 then return true end\n  if n ==\
    \ 303 then return true end\n  if n == 307 then return true end\n  if ", "  --\
    \ Base case: n is 0 or 1.\n  if n == 0 or n == 1 then\n    return false\n  end",
  "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n \
    \ end\n  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while i\
    \ * i <= n do\n    if n % i == 0 then\n      return false\n    end\n    i = i\
    \ + 2\n  end\n  return true\nend", "  if n < 2 then\n    return false\n  end\n\
    \  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return false\n\
    \  end\n  local i = 3\n  while i <= math.sqrt(n) do\n    if n % i == 0 then\n\
    \      return false\n    end\n    i = i + 2\n  end\n  return true\nend", "  if\
    \ n < 2 then\n    return false\n  end\n  if n == 2 then\n    return true\n  end\n\
    \  if n % 2 == 0 then\n    return false\n  end\n  local i = 3\n  while i * i <=\
    \ n do\n    if n % i == 0 then\n      return false\n    end\n    i = i + 2\n \
    \ end\n  return true\nend", "  -- Base case: n is 0 or 1.\n  if n == 0 or n ==\
    \ 1 then\n    return false\n  end", "  if n < 2 then\n    return false\n  end\n\
    \  if n == 2 then\n    return true\n  end\n  if n % 2 == 0 then\n    return false\n\
    \  end\n  local i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return\
    \ false\n    end\n    i = i + 2\n  end\n  return true\nend", "  if n < 2 then\n\
    \    return false\n  end\n  if n == 1 then\n    return true\n  end\n  if n % 2\
    \ == 0 then\n    return false\n  end\n  local i = 3\n  while i * i <= n do\n \
    \   if n % i == 0 then\n      return false\n    end\n    i = i + 2\n  end\n  return\
    \ true\nend", "  if n < 2 then\n    return false\n  end\n  if n == 2 then\n  \
    \  return true\n  end\n  if n % 2 == 0 then\n    return false\n  end\n  local\
    \ i = 3\n  while i * i <= n do\n    if n % i == 0 then\n      return false\n \
    \   end\n    i = i + 2\n  end\n  return true\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
