name: HumanEval_80_is_happy
language: lua
prompt: "-- You are given a string s.\n-- Your task is to check if the string is haplua\
  \ or not.\n-- A string is haplua if its length is at least 3 and every 3 consecutive\
  \ letters are distinct\n-- For example:\n-- >>> is_happy(a)\n-- false\n-- >>> is_happy(aa)\n\
  -- false\n-- >>> is_happy(abcd)\n-- true\n-- >>> is_happy(aabb)\n-- false\n-- >>>\
  \ is_happy(adb)\n-- true\n-- >>> is_happy(xyy)\n-- false\nlocal function is_happy(s)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = is_happy\n\
  \    lu.assertEquals(candidate('a'), false)\n    lu.assertEquals(candidate('aa'),\
  \ false)\n    lu.assertEquals(candidate('abcd'), true)\n    lu.assertEquals(candidate('aabb'),\
  \ false)\n    lu.assertEquals(candidate('adb'), true)\n    lu.assertEquals(candidate('xyy'),\
  \ false)\n    lu.assertEquals(candidate('iopaxpoi'), true)\n    lu.assertEquals(candidate('iopaxioi'),\
  \ false)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- recursive case\n  local last_letter =\
    \ s[1]\n  local last_letter_count = s[1]\n  local last_letter_index = #s\n  local\
    \ last_letter_count = 1\n  for i = 2, #s do\n    if s[i] ~= last_letter then\n\
    \      last_letter = s[i]\n      last_letter_count = s[i]\n      last_letter_index\
    \ = i\n      last_letter_count = 1\n    else\n      last_letter_count = last_letter_count\
    \ + 1\n    end\n  end\n  return last_letter_count >= 3 and last_letter_count ==\
    \ last_letter_index\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  if\
    \ s[2] ~= s[3] then return false end\n  return is_happy(s[3])\nend", "  -- base\
    \ case\n  if #s < 3 then\n    return false\n  end", "  -- base case\n  if #s <\
    \ 3 then return false end\n  -- base case\n  if #s == 3 then return true end\n\
    \  -- recursive case\n  local first_letter = s[1]\n  local second_letter = s[2]\n\
    \  local third_letter = s[3]\n  -- base case\n  if first_letter == second_letter\
    \ and second_letter == third_letter then return true end\n  -- recursive case\n\
    \  if first_letter == second_letter or first_letter == third_letter then\n   \
    \ return is_happy(s[2:])\n  end\n  -- base case\n  if second_letter == third_letter\
    \ then return false end\n  -- recursive case\n  return is_happy(s[2:])\nend",
  "  local n = #s\n  if n < 3 then return false end\n  for i = 1, n do\n    if s[i]\
    \ ~= s[i] then return false end\n  end\n  return true\nend", "  -- base case\n\
    \  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return true\
    \ end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n    if\
    \ s[i] ~= s[i - 1] then\n      happy = false\n      break\n    end\n  end\n  return\
    \ happy\nend", "    local count = 0\n    for i = 1, #s do\n        if s[i] ~=\
    \ s[count] then\n            count = count + 1\n        else\n            count\
    \ = count + 1\n        end\n    end\n    return count >= 3 and count % 3 == 0\n\
    end", "    local n = 1\n    for i = 1, #s do\n        if s[n] == s[n - 1] then\n\
    \            n = n + 1\n        else\n            if n >= 3 then\n           \
    \     return false\n            end\n            n = 1\n        end\n    end\n\
    \    return true\nend", "    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i] ~= s[i - 1] then\n            count = count + 1\n        end\n    end\n\
    \    return count >= 3 and count == #s and #s % 3 == 0\nend", "  -- Your code\
    \ here\n  local count = 0\n  local is_happy = false\n  for i = 1, #s do\n    if\
    \ s[i] == s[i - 1] or s[i] == s[i - 2]\n    then\n      count = count + 1\n  \
    \  elseif count == 3 then\n      is_happy = true\n      count = 0\n    end\n \
    \ end\n  return is_happy\nend", "    local count = 0\n    for i = 1, #s do\n \
    \       if s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n\
    \    end\n    return count >= 3 and count == #s and #s % 3 == 0\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n \
    \   if s[i] ~= s[(i + 1) % #s] then\n      happy = false\n      break\n    end\n\
    \  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- check every 3 consecutive letters are distinct\n  for i = 1, #s - 1, 3 do\n\
    \    if s[i] ~= s[i + 1] then return false end\n  end\n  return true\nend", " \
    \ -- base case\n  if #s <= 3 then\n    return true\n  end", "  local count = 0\n\
    \  for i = 1, #s do\n    count = count + 1\n    if count == 3 then\n      count\
    \ = count + 1\n    end\n  end\n  if #s <= 3 then\n    return true\n  end\n  for\
    \ i = 1, #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n\
    \  return true\nend", "  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local first\
    \ = s[1]\n  local rest = s[2:]\n  -- base case\n  if first ~= rest[1] then return\
    \ false end\n  -- recursive case\n  local rest2 = rest[2]\n  -- base case\n  if\
    \ rest2 ~= rest[1] then return false end\n  -- recursive case\n  local rest3 =\
    \ rest[3]\n  -- base case\n  if rest3 ~= rest[1] then return false end\n  -- recursive\
    \ case\n  local rest4 = rest[4]\n  -- base case\n  if rest4 ~= rest[1] then return\
    \ false end\n  -- recursive case\n  local rest5 = rest[5]\n  -- base case\n  if\
    \ rest5 ~= rest[1] then return false end\n  -- recursive case\n  local rest6 =\
    \ rest[6]\n  -- base case\n  if rest6 ~= rest[1] then return false end\n  -- recursive\
    \ case\n  local rest7 = rest[7]\n  -- base case\n  if rest7 ~= rest[1] then return\
    \ false end\n  -- recursive case\n  local rest8 = rest[8]\n  -- base case\n  if\
    \ rest8 ~= rest[1] then return false end\n  -- recursive case\n  local rest9 =\
    \ rest[9]\n  -- base case\n  if rest9 ~= rest[1] then return false end\n  -- recursive\
    \ case\n  local rest10 = rest[10]\n  -- base case\n  if rest10 ~= rest[1] then\
    \ return false end\n  -- recursive case\n  local rest11 = rest[11]\n  -- base\
    \ case\n  if rest11 ~= rest[1] then return false end\n  -- recursive case\n  local\
    \ rest12 = rest[12]\n  -- base case\n  if rest12 ~= rest[1] then return false\
    \ end\n  -- recursive case\n  local rest13 = rest[13]\n  -- base case\n  if rest13\
    \ ~= rest[1] then return false end\n  -- recursive case\n  local rest14 = rest[14]\n\
    \  -- base case\n  if rest14 ~= rest[1] then return false end\n  -- recursive\
    \ case\n  local rest15 = rest[15]\n  -- base case\n  if rest15 ~= rest[1] then\
    \ return false end\n  -- recursive case\n  local rest16 = rest[16]\n  -- base\
    \ case\n  if rest16 ~= rest[1] ", "  -- base case\n  if #s < 3 then return false\
    \ end", "  local count = 0\n  local last_letter = nil\n  for letter in s:gmatch(\"\
    [%a]+\") do\n    if letter == last_letter then\n      count = count + 1\n    else\n\
    \      if count >= 3 then\n        return false\n      end\n      count = 0\n\
    \    end\n    last_letter = letter\n  end\n  return true\nend", "  local count\
    \ = 0\n  local last = ''\n  for i = 1, #s do\n    local c = s[i]\n    if last\
    \ ~= c and last ~= '' then\n      count = count + 1\n    end\n    last = c\n \
    \ end\n  return count >= 3 and count % 3 == 0\nend", "  local len = #s\n  if len\
    \ < 3 then return false end\n  for i = 1, len do\n    if s[i] != s[i] then return\
    \ false end\n  end\n  return true\nend", "  -- base case\n  if #s < 3 then return\
    \ false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local first_letter = s[1]\n  local second_letter = s[2]\n  local third_letter\
    \ = s[3]\n  if first_letter == second_letter or first_letter == third_letter then\n\
    \    return is_happy(s[4])\n  else\n    return false\n  end\nend", "    local\
    \ n = #s\n    if n < 3 then\n        return false\n    end\n    local ok = true\n\
    \    for i = 1, n do\n        local j = i - 1\n        local k = i + 1\n     \
    \   local l = j + 1\n        if s[j] ~= s[k] then\n            ok = false\n  \
    \          break\n        end\n        if s[j] ~= l[k] then\n            ok =\
    \ false\n            break\n        end\n        if s[j] ~= l[l] then\n      \
    \      ok = false\n            break\n        end\n    end\n    return ok\nend",
  "  local n = 1\n  while n <= #s do\n    local ok = true\n    for i = 1, n do\n \
    \     if s[i] ~= s[n-i] then\n        ok = false\n        break\n      end\n \
    \   end\n    if ok then\n      n = n + 1\n    else\n      return false\n    end\n\
    \  end\n  return true\nend", "  -- base case\n  if #s <= 3 then\n    return true\n\
    \  end", "  local n = #s\n  if n < 3 then return false end\n  local ok = true\n\
    \  for i = 1, n do\n    if s[i] ~= s[i] then ok = false end\n  end\n  return ok\n\
    end", "  local n = 1\n  local ok = true\n  for i = 1, #s do\n    if n ~= 3 then\n\
    \      ok = false\n      break\n    end\n    local letter = string.sub(s,i,i)\n\
    \    if letter ~= letter then\n      ok = false\n      break\n    end\n    n =\
    \ n + 1\n  end\n  return ok\nend", "  local n = #s\n  if n < 3 then\n    return\
    \ false\n  end\n  for i = 1, n do\n    if s[i] == s[i] then\n      return false\n\
    \    end\n  end\n  return true\nend", "  -- base case\n  if #s < 3 then return\
    \ false end", "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1]\
    \ or s[i] ~= s[i + 1] then\n      count = count + 1\n    end\n  end\n  return\
    \ count >= 3 and count % 3 == 0\nend", "  -- base case\n  if #s < 3 then return\
    \ false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  if #s == 2 then\n    if s[1] == s[2] and s[1] == s[3] then return true\
    \ end\n  else\n    -- recursive case\n    if s[1] == s[2] and s[1] == s[3] then\n\
    \      if s[2] ~= s[3] then return false end\n    end\n  end\n  return is_happy(s[3],\
    \ s)\nend", "  local count = 0\n  local last = ''\n  for i = 1, #s do\n    local\
    \ c = string.sub(s,i,i)\n    if last ~= c and last ~= '' then\n      count = count\
    \ + 1\n    end\n    last = string.sub(s,i,i)\n  end\n  return count >= 3 and count\
    \ == #s\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i] and\
    \ s[i] ~= s[i] and s[i] ~= s[i] and s[i] ~= s[i] then\n      count = count + 1\n\
    \    end\n  end\n  return count >= 3 and count == #s\nend", "  local n = #s\n\
    \  if n < 3 then\n    return false\n  end\n  local letters = {}\n  for i = 1,\
    \ n do\n    letters[#letters + 1] = s[i]\n  end\n  local distinct = {}\n  for\
    \ i = 1, #letters do\n    distinct[letters[i]] = true\n  end\n  return #distinct\
    \ >= 3 and #letters == n and #distinct == (n/3)\nend", "  -- base case\n  if #s\
    \ < 3 then return false end\n  -- check every 3 consecutive letters\n  for i =\
    \ 1, #s - 1, 3 do\n    -- check whether they are distinct\n    if s[i] ~= s[i\
    \ + 1] then return false end\n  end\n  return true\nend", "    local len = #s\n\
    \    if len < 3 then return false end\n    local count = {}\n    for i = 1, len\
    \ do\n        count[s[i]] = 1\n    end\n    for i = 1, len do\n        if count[s[i]]\
    \ == 0 then\n            return false\n        end\n        count[s[i]] = count[s[i]]\
    \ + 1\n    end\n    return true\nend", "  local n = #s\n  if n < 3 then return\
    \ false end\n  local ok = true\n  for i = 1, n do\n    if s[i] ~= s[i] then ok\
    \ = false end\n  end\n  return ok\nend", "    local n = #s\n    if n < 3 then\n\
    \        return false\n    end\n    local ok = true\n    for i = 1, n do\n   \
    \     local j = i - 1\n        local k = i + 1\n        local l = j + 1\n    \
    \    if s[k] == s[k] then\n            if s[k] == s[l] then\n                if\
    \ s[k] == s[k] then\n                    ok = false\n                end\n   \
    \         end\n        end\n    end\n    return ok\nend", "    local count = 0\n\
    \    for i = 1, #s do\n        if s[i] == s[i - 1] and s[i] == s[i - 2] then\n\
    \            count = count + 1\n        elseif count > 0 and count % 3 == 0 then\n\
    \            return false\n        end\n    end\n    return true\nend", "  local\
    \ n = #s\n  if n < 3 then return false end\n  local ok = true\n  for i = 1, n\
    \ do\n    local j = i - 1\n    local k = i + 1\n    local l = j + 1\n    if s[k]\
    \ == s[k] then return false end\n    if s[k] == s[l] then return false end\n \
    \   if s[k] == s[k] then return false end\n    ok = false\n  end\n  return ok\n\
    end", "  -- base case\n  if #s < 3 then return false end\n  -- recursive case\n\
    \  for i = 1, #s do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] or s[i] ~= s[i\
    \ - 3] then return false end\n  end\n  return true\nend", "  -- base case\n  if\
    \ #s < 3 then return false end", "  local count = 0\n  for i = 1, #s do\n    if\
    \ string.sub(s,i,i) == string.sub(s,i,i+1) then\n      count = count + 1\n   \
    \ end\n  end\n  return count >= 3 and count == #s\nend", "  local len = #s\n \
    \ if len < 3 then\n    return false\n  end\n  local counts = {}\n  for i = 1,\
    \ len do\n    local letter = s[i]\n    if counts[letter] == nil then\n      counts[letter]\
    \ = 1\n    else\n      counts[letter] = counts[letter] + 1\n    end\n  end\n \
    \ for i = 1, len do\n    local letter = s[i]\n    if counts[letter] == 3 then\n\
    \      return false\n    end\n  end\n  return true\nend", "  local count = 0\n\
    \  for i = 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2] then\n     \
    \ count = count + 1\n    elseif count > 0 then\n      return false\n    end\n\
    \  end\n  return count >= 3\nend", "  -- base case\n  if #s <= 3 then\n    return\
    \ true\n  end", "  local n = #s\n  if n < 3 then\n    return false\n  end\n  local\
    \ ok = true\n  for i = 1, n do\n    if s[i] ~= s[i - 1] then\n      ok = false\n\
    \      break\n    end\n  end\n  return ok\nend", "  local n = #s\n  local happy\
    \ = false\n  if n >= 3 then\n    for i = 1, n do\n      if s[i] ~= s[i - 1] then\n\
    \        happy = true\n        break\n      end\n    end\n  end\n  return happy\n\
    end", "  local n = #s\n  if n < 3 then return false end\n  for i = 1, n do\n \
    \   if s[i] ~= s[i] then return false end\n  end\n  return true\nend", "  -- base\
    \ case\n  if #s < 3 then\n    return false\n  end\n  -- base case\n  if #s ==\
    \ 3 then\n    return true\n  end\n  -- recursive case\n  local i = 1\n  while\
    \ i <= #s do\n    if s[i] ~= s[i+1] then\n      return false\n    end\n    i =\
    \ i + 1\n  end\n  return true\nend", "  -- base case\n  if #s < 3 then return\
    \ false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local letters = {}\n  for i = 1, #s do\n    table.insert(letters, s[i])\n\
    \  end\n  -- base case\n  if #letters == 3 then return true end\n  -- recursive\
    \ case\n  local happy = false\n  for i = 1, #letters do\n    local letter = letters[i]\n\
    \    for j = i + 1, #letters do\n      local other_letter = letters[j]\n     \
    \ if letter ~= other_letter then\n        happy = true\n        break\n      end\n\
    \    end\n    if happy then break end\n  end\n  return happy\nend", "  local n\
    \ = 1\n  local last_char = {}\n  for i = 1, #s do\n    local c = s[i]\n    if\
    \ last_char[c] ~= nil then\n      n = n + 1\n      last_char[c] = nil\n    else\n\
    \      last_char[c] = c\n    end\n  end\n  return n >= 3 and #s == 3 and #last_char\
    \ == (#s - 1)\nend", "  -- base case\n  if #s <= 3 then\n    return true\n  end",
  "  local n = #s\n  if n < 3 then return false end\n  local ok = true\n  for i =\
    \ 1, n do\n    local j = i - 1\n    if s[j] == s[i] and s[j+1] == s[i+1] then\n\
    \      ok = false\n    end\n  end\n  return ok\nend", "  -- base case\n  if #s\
    \ < 3 then\n    return false\n  end\n  -- recursive case\n  local happy = false\n\
    \  for i = 1, #s do\n    if s[i] ~= s[i] then\n      happy = false\n      break\n\
    \    end\n  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return\
    \ false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local last_letter = s[1]\n  local last_letter_count = #s\n  local last_letter_index\
    \ = #s\n  for i = 2, #s do\n    if s[i] ~= last_letter then\n      last_letter\
    \ = s[i]\n      last_letter_count = #s\n      last_letter_index = i\n    end\n\
    \  end\n  return last_letter_count >= 3 and is_happy(s:sub(1, last_letter_index\
    \ - 1))\nend", "    local n = #s\n    if n < 3 then\n        return false\n  \
    \  end\n    local ok = true\n    for i = 1, n do\n        if s[i] ~= s[i] then\n\
    \            ok = false\n            break\n        end\n    end\n    return ok\n\
    end", "  -- base case\n  if #s <= 3 then\n    return true\n  end\n  -- recursive\
    \ case\n  local last_letter = s[1]\n  local last_letter_count = s[#s]\n  local\
    \ is_happy_count = 0\n  for i = 2, #s do\n    local letter = s[i]\n    local letter_count\
    \ = s[i - 1]\n    if letter ~= last_letter then\n      -- if the letter is not\
    \ the same\n      if letter_count ~= last_letter_count then\n        -- if the\
    \ letter is not the same and the count is not the same\n        if letter_count\
    \ ~= last_letter_count + 1 then\n          -- if the letter is not the same and\
    \ the count is not the same and the count is not 1\n          return false\n \
    \       end\n      end\n    end\n    -- if the letter is the same\n    last_letter\
    \ = letter\n    last_letter_count = letter_count\n    is_happy_count = is_happy_count\
    \ + 1\n  end\n  return is_happy_count == 3\nend", "  -- base case\n  if #s <=\
    \ 0 then\n    return false\n  end", "    local count = 0\n    for i = 1, #s do\n\
    \        if s[i - 1] ~= s[i] then\n            count = count + 1\n        end\n\
    \    end\n    return count >= 3 and count == #s\nend", "  -- base case\n  if #s\
    \ <= 3 then\n    return true\n  end", "  -- base case\n  if #s < 3 then return\
    \ false end\n  -- base case\n  if s[1] == s[2] and s[1] == s[3] then return true\
    \ end\n  -- recursive case\n  return is_happy(s:sub(1, 3)) or is_happy(s:sub(3,\
    \ 5))\nend", "  local n = #s\n  local happy = false\n  if n >= 3 then\n    local\
    \ ok = true\n    for i = 1, n do\n      if s[i] ~= s[i+1] then\n        ok = false\n\
    \        break\n      end\n    end\n    if ok then\n      happy = true\n    end\n\
    \  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  if\
    \ #s == 2 then\n    local a = s[1]\n    local b = s[2]\n    if a == b then return\
    \ false end\n  end\n  -- recursive case\n  if #s == 1 then\n    local a = s[1]\n\
    \    if a ~= a then return false end\n  end\n  -- recursive case\n  if #s == 0\
    \ then\n    return true\n  end\nend", "  -- base case\n  if #s < 3 then return\
    \ false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local happy = false\n  for i = 1, #s do\n    local c = s[i]\n    local\
    \ j = i - 1\n    while j >= 0 and s[j] == c do\n      j = j - 1\n    end\n   \
    \ if j >= 0 then\n      happy = not happy\n    end\n  end\n  return happy\nend",
  "  local n = #s\n  if n < 3 then\n    return false\n  end\n  local ok = true\n \
    \ for i = 1, n do\n    if s[i] ~= s[i - 1] then\n      ok = false\n      break\n\
    \    end\n  end\n  return ok\nend", "  -- base case\n  if #s < 3 then return false\
    \ end\n  -- check each letter\n  for i = 1, #s do\n    -- check if current letter\
    \ is distinct\n    if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i -\
    \ 3] then return false end\n  end\n  return true\nend", "  -- base case\n  if\
    \ #s <= 3 then\n    return true\n  end", "    local n = #s\n    if n < 3 then\n\
    \        return false\n    end\n    local ok = true\n    for i = 1, n do\n   \
    \     local j = i - 1\n        if s[j] == s[i] then\n            j = j - 1\n \
    \       end\n        if s[j] == s[i] then\n            j = j - 1\n        end\n\
    \        if s[j] == s[i] then\n            j = j - 1\n        end\n        if\
    \ s[j] == s[i] then\n            j = j - 1\n        end\n        if s[j] == s[i]\
    \ then\n            j = j - 1\n        end\n        if s[j] == s[i] then\n   \
    \         j = j - 1\n        end\n        if s[j] == s[i] then\n            j\
    \ = j - 1\n        end\n        if s[j] == s[i] then\n            j = j - 1\n\
    \        end\n        if s[j] == s[i] then\n            j = j - 1\n        end\n\
    \        if s[j] == s[i] then\n            j = j - 1\n        end\n        if\
    \ s[j] == s[i] then\n            j = j - 1\n        end\n        if s[j] == s[i]\
    \ then\n            j = j - 1\n        end\n        if s[j] == s[i] then\n   \
    \         j = j - 1\n        end\n        if s[j] == s[i] then\n            j\
    \ = j - 1\n        end\n        if s[j] == s[i] then\n            j = j - 1\n\
    \        end\n        if s[j] == s[i] then\n            j = j - 1\n        end\n\
    \        if s[j] == s[i] then\n            j = j - 1\n        end\n        if\
    \ s[j] == s[i] then\n            j = j - 1\n        end\n        if s[j] == s[i]\
    \ then\n            j = j - 1\n        end\n        if s[j] == s[i] then\n   \
    \         j = j - 1\n        end\n        if s[j] == s[i] then\n            j\
    \ = j - 1\n        end\n        if s[j] == s[i] then\n            j = j - 1\n\
    \        end\n        if s[j] == s[i] then\n            j = j - 1\n        end\n\
    \        if s[j] == s[i] then\n            j = j - 1\n        end\n        if\
    \ s[j] == s[i] then\n            j = j - 1\n        end\n        if s[j] == s[i]\
    \ then\n            j = j - 1\n        end\n        if s[j] == s[i] then\n   \
    \         j = j - 1\n        end\n        if s[j] == s[i] then\n            j\
    \ = j - 1\n        end\n        if s[j] == s[i] then\n            j = j - 1\n\
    \        end\n        if s[j] == s[i] then\n            j = j - 1\n        end\n\
    \        if s[j] == s[i] then\n            j = j - 1\n        end\n        if\
    \ s[j] == s[i] then\n            j = j - 1\n        end\n        if s[j] == s[i]\
    \ then\n            j = j - 1\n        end\n        if s[j] == s[i] then\n   \
    \         j = j - 1\n        end\n        if s[j] == s[i] then\n            j\
    \ = j - 1\n        end\n        if s[j] == s[i] then\n            j = j - 1\n\
    \        end\n        if s[j] == s[i] then\n            j = j - 1\n", "  local\
    \ len = #s\n  if len < 3 then\n    return false\n  end\n  for i = 1, len do\n\
    \    if s[i] ~= s[i] then\n      return false\n    end\n  end\n  for i = 1, len\
    \ do\n    if s[i] != s[i+1] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  local n = #s\n  if n < 3 then return false end\n  for i = 1,\
    \ n do\n    if s[i] ~= s[i] then return false end\n  end\n  return true\nend",
  "  local n = #s\n  local happy = false\n  if n >= 3 then\n    local count = 0\n\
    \    for i = 1, n do\n      if s[i] ~= s[i] then\n        count = count + 1\n\
    \      end\n    end\n    if count ~= n then\n      happy = false\n    end\n  end\n\
    \  return happy\nend", "    local count = 0\n    for i = 1, #s do\n        if\
    \ s[i]:lower() == s[i]:lower() then\n            count = count + 1\n        else\n\
    \            count = count\n        end\n    end\n    return count >= 3 and count\
    \ % 3 == 0\nend", "  local count = 0\n  local letters = {}\n  for i = 1, #s do\n\
    \    letters[#letters + 1] = s[i]\n  end\n  for i = 1, #letters do\n    count\
    \ = count + 1\n    if count == 3 then\n      if letters[i] != letters[i+1] then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i] == s[i - 1] or s[i] == s[i\
    \ - 2] or s[i] == s[i - 3] then\n            count = count + 1\n        else\n\
    \            if count >= 3 then\n                return true\n            end\n\
    \            count = 0\n        end\n    end\n    return false\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  if s[2] ~= s[3] then return false end\n  return\
    \ is_happy(s[3])\nend", "  -- base case\n  if #s < 3 then return false end\n \
    \ -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  if s[2]\
    \ ~= s[3] then return false end\n  return is_happy(s[3])\nend", "  local n = #s\n\
    \  if n < 3 then return false end\n  local ok = true\n  for i = 1, n do\n    if\
    \ s[i] ~= s[i] then ok = false end\n  end\n  return ok\nend", "  -- base case\n\
    \  if #s <= 3 then\n    return true\n  end", "  -- base case\n  if #s < 3 then\
    \ return false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  if s[2] ~= s[3] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[4] then return false end\n  -- recursive case\n  if s[2] ~= s[5] then return\
    \ false end\n  -- recursive case\n  if s[2] ~= s[6] then return false end\n  --\
    \ recursive case\n  if s[2] ~= s[7] then return false end\n  -- recursive case\n\
    \  if s[2] ~= s[8] then return false end\n  -- recursive case\n  if s[2] ~= s[9]\
    \ then return false end\n  -- recursive case\n  if s[2] ~= s[10] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[11] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[12] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[13] then return false end\n  -- recursive case\n  if s[2] ~= s[14] then\
    \ return false end\n  -- recursive case\n  if s[2] ~= s[15] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[16] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[17] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[18] then return false end\n  -- recursive case\n  if s[2] ~= s[19] then\
    \ return false end\n  -- recursive case\n  if s[2] ~= s[20] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[21] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[22] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[23] then return false end\n  -- recursive case\n  if s[2] ~= s[24] then\
    \ return false end\n  -- recursive case\n  if s[2] ~= s[25] then return false\
    \ end\n  -- recursive case\n  if s[2] ~= s[26] then return false end\n  -- recursive\
    \ case\n  if s[2] ~= s[27] then return false end\n  -- recursive case\n  if s[2]\
    \ ~= s[28] then return false end\n  -- recursive case\n  if s[2] ~= s[29] then\
    \ return false end", "  local n = #s\n  if n < 3 then return false end\n  local\
    \ ok = true\n  for i = 1, n do\n    if s[i] ~= s[i] then ok = false end\n  end\n\
    \  return ok\nend", "  local count = 0\n  for i = 1, #s do\n    count = count\
    \ + 1\n    if count > 3 then\n      return false\n    end\n  end\n  for i = 1,\
    \ #s do\n    if s[i] ~= s[i] then\n      return false\n    end\n  end\n  return\
    \ true\nend", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if s[1] == s[2] and s[1] == s[3] then return true end\n  -- recursive case\n\
    \  return is_happy(s[3], s[4], s[5], s[6])\nend", "  local n = #s\n  if n < 3\
    \ then return false end\n  local ok = true\n  for i = 1, n do\n    if s[i] ~=\
    \ s[i - 1] then ok = false end\n  end\n  return ok\nend", "  local n = 1\n  while\
    \ n <= #s do\n    if string.sub(s, n, n + 1) == string.sub(s, n, n + 1) then\n\
    \      n = n + 2\n    else\n      return false\n    end\n  end\n  return true\n\
    end", "    local count = 0\n    for i = 1, #s do\n        if s[i] == s[i - 1]\
    \ and s[i] == s[i - 2] then\n            count = count + 1\n        else\n   \
    \         if count > 3 then\n                return false\n            end\n \
    \           count = 0\n        end\n    end\n    return true\nend", "  -- base\
    \ case\n  if #s < 3 then\n    return false\n  end", "  -- base case\n  if #s <\
    \ 3 then return false end\n  -- base case\n  if #s == 3 then return true end\n\
    \  -- recursive case\n  local is_happy = is_happy(s:sub(1,2))\n  if is_happy then\
    \ return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,3))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,4))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,5))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,6))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,7))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,8))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,9))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,10))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,11))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,12))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,13))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,14))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,15))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,16))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,17))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,18))\n\
    \  if is_happy then return true end\n  -- recursive case\n  local is_happy = is_happy(s:sub(1,19",
  "  -- base case\n  if #s < 3 then\n    return false\n  end", "  -- base case\n \
    \ if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return true\
    \ end\n  -- recursive case\n  local last_letter = s[1]\n  local last_letter_count\
    \ = s[1]\n  local last_letter_index = #s\n  local last_letter_count_index = #s\n\
    \  local last_letter_index_count = #s\n  local last_letter_index_count_index =\
    \ #s\n  local last_letter_index_count_index2 = #s\n  local last_letter_index_count_index3\
    \ = #s\n  local last_letter_index_count_index4 = #s\n  local last_letter_index_count_index5\
    \ = #s\n  local last_letter_index_count_index6 = #s\n  local last_letter_index_count_index7\
    \ = #s\n  local last_letter_index_count_index8 = #s\n  local last_letter_index_count_index9\
    \ = #s\n  local last_letter_index_count_index10 = #s\n  local last_letter_index_count_index11\
    \ = #s\n  local last_letter_index_count_index12 = #s\n  local last_letter_index_count_index13\
    \ = #s\n  local last_letter_index_count_index14 = #s\n  local last_letter_index_count_index15\
    \ = #s\n  local last_letter_index_count_index16 = #s\n  local last_letter_index_count_index17\
    \ = #s\n  local last_letter_index_count_index18 = #s\n  local last_letter_index_count_index19\
    \ = #s\n  local last_letter_index_count_index20 = #s\n  local last_letter_index_count_index21\
    \ = #s\n  local last_letter_index_count_index22 = #s\n  local last_letter_index_count_index23\
    \ = #s\n  local last_letter_index_count_index24 = #s\n  local last_letter_index_count_index25\
    \ = #s\n  local last_letter_index_count_index26 = #s\n  local last_letter_index_count_index27\
    \ = #s\n  local last_letter_index_count_index28 = #s\n  local last_letter_index_count_index29\
    \ = #s\n  local last_letter_index_count_index30 = #s\n  local last_letter_index_count_index31\
    \ = #s\n  local last_letter_index_count_index32 = #s\n  local last_letter_index_count_index33\
    \ = #s\n  local last_letter_index_count_index34 = #s\n  local last_letter_index_count_index35\
    \ = #s\n  local last_letter_index_count_index36 = #s\n  local last_letter_index_count_index37\
    \ = #s\n  local last_letter_index_count_index38", "  local count = 0\n  for i\
    \ = 1, #s do\n    if s[i] == s[i - 1] and s[i] == s[i - 2] then\n      count =\
    \ count + 1\n    end\n  end\n  return count >= 3 and count == #s - 3\nend", " \
    \ local len = #s\n  if len < 3 then return false end\n  local ok = true\n  for\
    \ i = 1, len do\n    if s[i] ~= s[(i+1)%len] then ok = false end\n  end\n  return\
    \ ok\nend", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- recursive case\n  local happy = false\n\
    \  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i + 1] then\n     \
    \ happy = true\n      break\n    end\n  end\n  return happy\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      count = count +\
    \ 1\n    end\n  end\n  return count >= 3 and count == #s - 3\nend", "  local count\
    \ = 0\n  for i = 1, #s do\n    count = count + 1\n    if count == 3 then\n   \
    \   count = count + 1\n    end\n  end\n  return count >= 3 and (#s % 3) == 0 and\
    \ (#s - 1) / 3 == count\nend", "  local n = #s\n  if n < 3 then\n    return false\n\
    \  end\n  for i = 1, n do\n    local letter = s[i]\n    local j = i - 1\n    local\
    \ k = i + 1\n    local l = j + 1\n    local m = k + 1\n    local n = l + 1\n \
    \   local o = m + 1\n    local p = n + 1\n    local q = o + 1\n    local r = p\
    \ + 1\n    local s = q + 1\n    local t = r + 1\n    local u = s + 1\n    local\
    \ v = t + 1\n    local w = u + 1\n    local x = v + 1\n    local y = w + 1\n \
    \   local z = x + 1\n    if letter ~= s[s] then\n      return false\n    end\n\
    \    if letter ~= s[t] then\n      return false\n    end\n    if letter ~= s[u]\
    \ then\n      return false\n    end\n    if letter ~= s[v] then\n      return\
    \ false\n    end\n    if letter ~= s[w] then\n      return false\n    end\n  \
    \  if letter ~= s[x] then\n      return false\n    end\n    if letter ~= s[y]\
    \ then\n      return false\n    end\n    if letter ~= s[z] then\n      return\
    \ false\n    end\n  end\n  return true\nend", "    local n = #s\n    if n < 3\
    \ then return false end\n    local ok = true\n    for i = 1, n do\n        local\
    \ j = i - 1\n        if s[j] == s[i] then return false end\n        if s[j] ==\
    \ s[i - 1] then return false end\n        if s[j] == s[i - 2] then return false\
    \ end\n        if s[j] == s[i - 3] then return false end\n        if s[j] == s[i\
    \ - 4] then return false end\n        if s[j] == s[i - 5] then return false end\n\
    \        if s[j] == s[i - 6] then return false end\n        if s[j] == s[i - 7]\
    \ then return false end\n        if s[j] == s[i - 8] then return false end\n \
    \       if s[j] == s[i - 9] then return false end\n        if s[j] == s[i - 10]\
    \ then return false end\n        if s[j] == s[i - 11] then return false end\n\
    \        if s[j] == s[i - 12] then return false end\n        if s[j] == s[i -\
    \ 13] then return false end\n        if s[j] == s[i - 14] then return false end\n\
    \        if s[j] == s[i - 15] then return false end\n        if s[j] == s[i -\
    \ 16] then return false end\n        if s[j] == s[i - 17] then return false end\n\
    \        if s[j] == s[i - 18] then return false end\n        if s[j] == s[i -\
    \ 19] then return false end\n        if s[j] == s[i - 20] then return false end\n\
    \        if s[j] == s[i - 21] then return false end\n        if s[j] == s[i -\
    \ 22] then return false end\n        if s[j] == s[i - 23] then return false end\n\
    \        if s[j] == s[i - 24] then return false end\n        if s[j] == s[i -\
    \ 25] then return false end\n        if s[j] == s[i - 26] then return false end\n\
    \        if s[j] == s[i - 27] then return false end\n        if s[j] == s[i -\
    \ 28] then return false end\n        if s[j] == s[i - 29] then return false end\n\
    \        if s[j] == s[i - 30] then return false end\n        if s[j] == s[i -\
    \ 31] then return false end\n        if s[j] == s[i - 32] then return false end\n\
    \        if s[j] == s[i - 33] then return false end\n        if s[j] == s[i -\
    \ 34] then return false end\n        if s[j] == s[i - 35] then return false end\n\
    \        if s[j] == s[i - 36] then return false end\n        if s[j] == s[i -\
    \ 37] then return false end\n        if s[j] == s[i - 38] then return false end\n\
    \        if s[j] == s[i - 39] then return false end\n        if s[j] == s[i -\
    \ 4", "  local n = #s\n  return n >= 3 and n == 0 or is_happy(s:sub(1, n-1)) or\
    \ is_happy(s:sub(n-3, n))\nend", "  -- base case\n  if #s <= 0 then return false\
    \ end\n  -- base case\n  if #s <= 1 then return true end\n  -- base case\n  if\
    \ #s <= 2 then return true end\n  -- base case\n  if #s <= 3 then return true\
    \ end\n  -- base case\n  if #s <= 4 then return true end\n  -- base case\n  if\
    \ #s <= 5 then return true end\n  -- base case\n  if #s <= 6 then return true\
    \ end\n  -- base case\n  if #s <= 7 then return true end\n  -- base case\n  if\
    \ #s <= 8 then return true end\n  -- base case\n  if #s <= 9 then return true\
    \ end\n  -- base case\n  if #s <= 10 then return true end\n  -- base case\n  if\
    \ #s <= 11 then return true end\n  -- base case\n  if #s <= 12 then return true\
    \ end\n  -- base case\n  if #s <= 13 then return true end\n  -- base case\n  if\
    \ #s <= 14 then return true end\n  -- base case\n  if #s <= 15 then return true\
    \ end\n  -- base case\n  if #s <= 16 then return true end\n  -- base case\n  if\
    \ #s <= 17 then return true end\n  -- base case\n  if #s <= 18 then return true\
    \ end\n  -- base case\n  if #s <= 19 then return true end\n  -- base case\n  if\
    \ #s <= 20 then return true end\n  -- base case\n  if #s <= 21 then return true\
    \ end\n  -- base case\n  if #s <= 22 then return true end\n  -- base case\n  if\
    \ #s <= 23 then return true end\n  -- base case\n  if #s <= 24 then return true\
    \ end\n  -- base case\n  if #s <= 25 then return true end\n  -- base case\n  if\
    \ #s <= 26 then return true end\n  -- base case\n  if #s <= 27 then return true\
    \ end\n  -- base case\n  if #s <= 28 then return true end\n  -- base case\n  if\
    \ #s <= 29 then return true end\n  -- base case\n  if #s <= 30 then return true\
    \ end\n  -- base case\n  if #s <= 31 then return true end\n  -- base case\n  if\
    \ #s <= 32 then return true end\n  -- base case\n  if #s <= 33 then return true\
    \ end\n  ", "  local n = #s\n  if n < 3 then return false end\n  local ok = true\n\
    \  for i = 1, n do\n    if s[i] ~= s[i] then ok = false end\n  end\n  return ok\n\
    end", "    local n = #s\n    if n >= 3 then\n        local ok = true\n       \
    \ for i = 1, n do\n            local j = i - 1\n            if s[j] == s[i] and\
    \ s[j+1] == s[i+1] and s[j+2] == s[i+2] then\n                ok = false\n   \
    \         end\n        end\n        return ok\n    end\n    return false\nend",
  "  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3\
    \ then return true end\n  -- recursive case\n  local first_letter = s[1]\n  local\
    \ second_letter = s[2]\n  local third_letter = s[3]\n  if first_letter == second_letter\
    \ or first_letter == third_letter then\n    return is_happy(s[4])\n  else\n  \
    \  return false\n  end\nend", "    local n = #s\n    if n < 3 then return false\
    \ end\n    local ok = true\n    for i = 1, n do\n        local j = i - 1\n   \
    \     local k = i + 1\n        local l = j + 1\n        if s[k] == s[k] then\n\
    \            if s[k] == s[l] then\n                if s[k] == s[k] then\n    \
    \                if s[k] == s[k] then\n                        ok = false\n  \
    \                  end\n                end\n            end\n        end\n  \
    \  end\n    return ok\nend", "  -- base case\n  if #s <= 3 then\n    return true\n\
    \  end", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if s[1] == s[2] and s[1] == s[3] then return false end\n  -- recursive case\n\
    \  return is_happy(s[4..#s]) or is_happy(s[1..#s]) or is_happy(s[2..#s]) or is_happy(s[3..#s])\n\
    end", "  local n = #s\n  if n < 3 then return false end\n  for i = 1, n do\n \
    \   if string.find(s, string.sub(s,i,i+3)) ~= nil then\n      return false\n \
    \   end\n  end\n  return true\nend", "  local n = 1\n  local happy = false\n \
    \ for i = 1, #s do\n    if n == 1 then\n      if s[i] ~= s[i - 1] or s[i] ~= s[i\
    \ - 2] or s[i] ~= s[i - 3] then\n        happy = false\n      end\n    elseif\
    \ n == 2 then\n      if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n        happy\
    \ = false\n      end\n    elseif n == 3 then\n      if s[i] ~= s[i - 1] or s[i]\
    \ ~= s[i - 2] or s[i] ~= s[i - 3] then\n        happy = false\n      end\n   \
    \ end\n    n = n + 1\n  end\n  return happy\nend", "  -- base case\n  if #s <\
    \ 3 then return false end\n  -- base case\n  if #s == 3 then return true end\n\
    \  -- recursive case\n  local first = s[1]\n  local second = s[2]\n  local third\
    \ = s[3]\n  if first ~= second and first ~= third then\n    return false\n  elseif\
    \ first == second and second == third then\n    return is_happy(s[4])\n  else\n\
    \    return is_happy(s[2])\n  end\nend", "  local count = 0\n  for i = 1, #s do\n\
    \    if s[i] ~= s[i - 1] or s[i] ~= s[i - 2] then\n      count = count + 1\n \
    \   end\n  end\n  return count >= 3 and count % 3 == 0\nend", "  local len = #s\n\
    \  local happy = false\n  if len >= 3 then\n    local i = 1\n    while i <= len\
    \ do\n      if s[i] ~= s[i+1] then\n        return false\n      end\n      i =\
    \ i + 1\n    end\n  end\n  return true\nend", "    local count = 0\n    for i\
    \ = 1, #s do\n        if s[i] == s[i] then\n            count = count + 1\n  \
    \      else\n            if count > 3 then\n                return false\n   \
    \         end\n            count = 0\n        end\n    end\n    return true\n\
    end", "  -- base case\n  if #s <= 3 then\n    return true\n  end\n  -- recursive\
    \ case\n  local last_char = s[#s]\n  local count = 0\n  for i = 1, #s do\n   \
    \ if s[i] ~= last_char then\n      count = count + 1\n    end\n    last_char =\
    \ s[i]\n  end\n  return count >= 3 and count == #s - 3\nend", "    local len =\
    \ #s\n    if len < 3 then\n        return false\n    end\n    local letters =\
    \ {}\n    for i = 1, len do\n        local letter = s[i]\n        if letters[letter]\
    \ == nil then\n            letters[letter] = true\n        else\n            return\
    \ false\n        end\n    end\n    return true\nend", "  local len = #s\n  if\
    \ len < 3 then return false end\n  for i = 1, len do\n    if s[i] != s[i+1] then\
    \ return false end\n  end\n  return true\nend", "  -- base case\n  if #s < 3 then\
    \ return false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i] then happy\
    \ = true end\n  end\n  return happy\nend", "  local n = #s\n  return n >= 3 and\
    \ all(\n    string.find(s, string.char(string.sub(s, 1, 2)), 1) ~= nil,\n    string.find(s,\
    \ string.char(string.sub(s, 2, 3)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s,\
    \ 3, 4)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 4, 5)), 1)\
    \ ~= nil,\n    string.find(s, string.char(string.sub(s, 5, 6)), 1) ~= nil,\n \
    \   string.find(s, string.char(string.sub(s, 6, 7)), 1) ~= nil,\n    string.find(s,\
    \ string.char(string.sub(s, 7, 8)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s,\
    \ 8, 9)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 9, 10)), 1)\
    \ ~= nil,\n    string.find(s, string.char(string.sub(s, 10, 11)), 1) ~= nil,\n\
    \    string.find(s, string.char(string.sub(s, 11, 12)), 1) ~= nil,\n    string.find(s,\
    \ string.char(string.sub(s, 12, 13)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s,\
    \ 13, 14)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 14, 15)),\
    \ 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 15, 16)), 1) ~= nil,\n\
    \    string.find(s, string.char(string.sub(s, 16, 17)), 1) ~= nil,\n    string.find(s,\
    \ string.char(string.sub(s, 17, 18)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s,\
    \ 18, 19)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 19, 20)),\
    \ 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 20, 21)), 1) ~= nil,\n\
    \    string.find(s, string.char(string.sub(s, 21, 22)), 1) ~= nil,\n    string.find(s,\
    \ string.char(string.sub(s, 22, 23)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s,\
    \ 23, 24)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 24, 25)),\
    \ 1) ~= nil,\n    string.find(s, string.char(string.sub(s, 25, 26)), 1) ~= nil,\n\
    \    string.find(s, string.char(string.sub(s, 26, 27)), 1) ~= nil,\n    string.find(s,\
    \ string.char(string.sub(s, 27, 28)), 1) ~= nil,\n    string.find(s, string.char(string.sub(s,\
    \ 28, 29)), 1) ~", "    local n = #s\n    if n >= 3 then\n        local ok = true\n\
    \        for i = 1, n do\n            local j = i - 1\n            local k = i\
    \ + 1\n            local l = j + 1\n            local m = k + 1\n            local\
    \ n = l + 1\n            local o = m + 1\n            local p = n + 1\n      \
    \      local q = o + 1\n            local r = p + 1\n            local s = q +\
    \ 1\n            local t = r + 1\n            local u = s + 1\n            local\
    \ v = t + 1\n            local w = u + 1\n            local x = v + 1\n      \
    \      local y = w + 1\n            local z = x + 1\n            local a = y +\
    \ 1\n            local b = z + 1\n            local c = a + 1\n            local\
    \ d = b + 1\n            local e = c + 1\n            local f = d + 1\n      \
    \      local g = e + 1\n            local h = f + 1\n            local i = g +\
    \ 1\n            local j = h + 1\n            local k = i + 1\n            local\
    \ l = j + 1\n            local m = k + 1\n            local n = l + 1\n      \
    \      local o = m + 1\n            local p = n + 1\n            local q = o +\
    \ 1\n            local r = p + 1\n            local s = q + 1\n            local\
    \ t = r + 1\n            local u = s + 1\n            local v = t + 1\n      \
    \      local w = u + 1\n            local x = v + 1\n            local y = w +\
    \ 1\n            local z = x + 1\n            local a = y + 1\n            local\
    \ b = z + 1\n            local c = a + 1\n            local d = b + 1\n      \
    \      local e = c + 1\n            local f = d + 1\n            local g = e +\
    \ 1\n            local h = f + 1\n            local i = g + 1\n            local\
    \ j = h + 1\n            local k = i + 1\n            local l = j + 1\n      \
    \      local m = k + 1\n            local n = l + 1\n            local o = m +\
    \ 1\n            local p = n + 1\n            local q = o + 1\n            local\
    \ r = p + 1\n            local s = q + 1\n            local t = r + 1\n      \
    \      local u = s + 1\n            local v = t + 1\n            local w = u +\
    \ 1\n            local x = v + 1\n            local y = w + 1\n            local\
    \ z = x + 1\n            local a = y + 1\n            local b = z + 1\n      \
    \      local c = a + 1\n            local d = b + 1\n            local e = c +\
    \ 1\n            local f = d + 1\n            local g = e + 1\n            local\
    \ h = f + 1\n            local i = g + 1\n            local j = h + 1\n      \
    \      local k = i + 1\n            local l = j + 1\n            local m = k +\
    \ 1\n            ", "  -- base case\n  if #s < 3 then\n    return false\n  end",
  "  -- base case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3\
    \ then return true end\n  -- recursive case\n  local letters = {}\n  for i = 1,\
    \ #s do\n    local letter = s[i]\n    local index = letters[letter]\n    if index\
    \ == nil then\n      letters[letter] = i\n    else\n      -- if letter is repeated,\
    \ return false\n      if index == i then return false end\n    end\n  end\n  return\
    \ true\nend", "  local len = #s\n  if len < 3 then return false end\n  local count\
    \ = {}\n  for i = 1, len do\n    local letter = s[i]\n    count[letter] = count[letter]\
    \ + 1 or 1\n  end\n  for i = 1, len do\n    local letter = s[i]\n    if count[letter]\
    \ ~= 3 then return false end\n    count[letter] = count[letter] - 1\n  end\n \
    \ return true\nend", "  local n = #s\n  local happy = false\n  if n >= 3 then\n\
    \    for i = 1, n do\n      if s[i] ~= s[i+1] then\n        happy = true\n   \
    \     break\n      end\n    end\n  end\n  return happy\nend", "  -- base case\n\
    \  if #s <= 3 then return true end\n  -- base case\n  if #s == 1 then return false\
    \ end\n  -- base case\n  if #s == 2 then return true end\n  -- base case\n  if\
    \ #s == 3 then return false end\n  -- base case\n  if #s == 4 then return true\
    \ end\n  -- base case\n  if #s == 5 then return false end\n  -- base case\n  if\
    \ #s == 6 then return true end\n  -- base case\n  if #s == 7 then return false\
    \ end\n  -- base case\n  if #s == 8 then return true end\n  -- base case\n  if\
    \ #s == 9 then return false end\n  -- base case\n  if #s == 10 then return true\
    \ end\n  -- base case\n  if #s == 11 then return false end\n  -- base case\n \
    \ if #s == 12 then return true end\n  -- base case\n  if #s == 13 then return\
    \ false end\n  -- base case\n  if #s == 14 then return true end\n  -- base case\n\
    \  if #s == 15 then return false end\n  -- base case\n  if #s == 16 then return\
    \ true end\n  -- base case\n  if #s == 17 then return false end\n  -- base case\n\
    \  if #s == 18 then return true end\n  -- base case\n  if #s == 19 then return\
    \ false end\n  -- base case\n  if #s == 20 then return true end\n  -- base case\n\
    \  if #s == 21 then return false end\n  -- base case\n  if #s == 22 then return\
    \ true end\n  -- base case\n  if #s == 23 then return false end\n  -- base case\n\
    \  if #s == 24 then return true end\n  -- base case\n  if #s == 25 then return\
    \ false end\n  -- base case\n  if #s == 26 then return true end\n  -- base case\n\
    \  if #s == 27 then return false end\n  -- base case\n  if #s == 28 then return\
    \ true end\n  -- base case\n  if #s == 29 then return false end\n  -- base case\n\
    \  if #s == 30 then return true end\n  -- base case\n  if #s == 31 then return\
    \ false end\n  -- base case\n  if #s == 32 then return true end\n  -- base case\n\
    \  if #s == 33 then return false end\n  -- base case\n  if #s == 34 then return\
    \ true end\n  -- base case\n  if #s == 35 then return false end\n  -- base case\n\
    \  if ", "  local n = #s\n  if n < 3 then return false end\n  local ok = true\n\
    \  for i = 1, n do\n    if s[i] ~= s[i] then ok = false end\n  end\n  return ok\n\
    end", "  -- base case\n  if #s <= 3 then\n    return true\n  end\n  -- recursive\
    \ case\n  local last_letter = s[1]\n  for i = 2, #s do\n    if last_letter ~=\
    \ s[i] then\n      return false\n    end\n    last_letter = s[i]\n  end\n  return\
    \ true\nend", "  local len = #s\n  if len < 3 then\n    return false\n  end\n\
    \  for i = 1, len do\n    if s[i] ~= s[i] then\n      return false\n    end\n\
    \  end\n  return true\nend", "  local n = #s\n  return n >= 3 and n == (#s - 3)\
    \ or false\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i -\
    \ 1] then\n      count = count + 1\n    end\n  end\n  return count >= 3 and count\
    \ == #s - 3\nend", "  -- base case\n  if #s < 3 then\n    return false\n  end",
  "  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i] then\n      count =\
    \ count + 1\n    else\n      if count > 3 then\n        return false\n      end\n\
    \      count = 0\n    end\n  end\n  return true\nend", "  local count = 0\n  for\
    \ i = 1, #s do\n    if s[i] ~= s[i - 1] then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count % 3 == 0\nend", "  local n = #s\n  if n\
    \ < 3 then return false end\n  local ok = true\n  for i = 1, n do\n    if s[i]\
    \ ~= s[i] then ok = false end\n  end\n  return ok\nend", "  local len = #s\n \
    \ if len < 3 then return false end\n  local count = {}\n  for i = 1, len do\n\
    \    local letter = s[i]\n    count[letter] = count[letter] + 1 or 1\n  end\n\
    \  for i = 1, len do\n    local letter = s[i]\n    if count[letter] == 3 then\n\
    \      count[letter] = 0\n      return false\n    end\n  end\n  return true\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i]\
    \ ~= s[i - 2] and s[i] ~= s[i - 3] then\n      count = count + 1\n    end\n  end\n\
    \  return count >= 3 and count == #s\nend", "  local n = #s\n  return n >= 3 and\
    \ n == (#s - 3) or (#s - 3) == 0 and is_distinct(s)\nend", "  local n = #s\n \
    \ if n < 3 then return false end\n  for i = 1, n do\n    if s[i] ~= s[i] then\
    \ return false end\n  end\n  return true\nend", "  -- base case\n  if #s < 3 then\
    \ return false end\n  -- check every 3 consecutive letters are distinct\n  for\
    \ i = 1, #s - 1, 3 do\n    if s[i] ~= s[i + 1] then return false end\n  end\n\
    \  return true\nend", "  local n = #s\n  if n < 3 then return false end\n  local\
    \ ok = true\n  for i = 1, n do\n    if s[i] ~= s[i] then ok = false end\n  end\n\
    \  return ok\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      count = count + 1\n    else\n      count = count + 1\n    end\n\
    \    if count > 3 then\n      return false\n    end\n  end\n  return true\nend",
  "    local count = 0\n    for i = 1, #s do\n        if string.sub(s,i,i) ~= string.sub(s,i,i+1)\
    \ then\n            count = count + 1\n        end\n    end\n    return count\
    \ >= 3 and count == #s\nend", "  local len = #s\n  if len < 3 then return false\
    \ end\n  for i = 1, len do\n    if s[i] ~= s[i] then return false end\n  end\n\
    \  return true\nend", "  -- base case\n  if #s < 3 then return false end\n  --\
    \ check every 3 consecutive letters are distinct\n  for i = 1, #s, 3 do\n    if\
    \ #(s:sub(i, i + 3)) == 0 then return false end\n  end\n  return true\nend", " \
    \ local count = 0\n  for i = 1, #s do\n    count = count + 1\n    if count ==\
    \ 3 then\n      local letter = string.sub(s,i,i)\n      if letter ~= letter then\n\
    \        return false\n      end\n    end\n  end\n  return true\nend", "    local\
    \ count = 0\n    for i = 1, #s do\n        if s[i - 1] ~= s[i] then\n        \
    \    count = count + 1\n        end\n    end\n    return count >= 3 and count\
    \ == #s\nend", "  -- base case\n  if #s < 3 then return false end\n  -- base case\n\
    \  if #s == 3 then return true end\n  -- recursive case\n  local first_letter\
    \ = s[1]\n  local second_letter = s[2]\n  local third_letter = s[3]\n  -- base\
    \ case\n  if first_letter == second_letter and second_letter == third_letter then\
    \ return true end\n  -- recursive case\n  if first_letter == second_letter or\
    \ first_letter == third_letter then\n    return is_happy(string.sub(s,1,2)) or\
    \ is_happy(string.sub(s,2,3))\n  end\n  return false\nend", "  -- Your code here\n\
    \  local happy = false\n  local count = 0\n  for i = 1, #s do\n    if count ==\
    \ 3 then\n      if s[i]:lower() == s[i+1]:lower() and s[i+2]:lower() == s[i+3]:lower()\
    \ then\n        happy = true\n      end\n    end\n    count = count + 1\n  end\n\
    \  return happy\nend", "  local n = #s\n  if n < 3 then\n    return false\n  end\n\
    \  local ok = true\n  for i = 1, n do\n    if s[i] ~= s[i] then\n      ok = false\n\
    \      break\n    end\n  end\n  if ok then\n    for i = 1, n do\n      if s[i]\
    \ ~= s[i+1] then\n        ok = false\n        break\n      end\n    end\n  end\n\
    \  return ok\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count]\
    \ then\n      count = count + 1\n    else\n      count = count + 1\n    end\n\
    \    if count >= 3 then\n      count = count - 1\n    end\n  end\n  return count\
    \ >= 3\nend", "    local count = 0\n    for i = 1, #s do\n        if s[i] == s[i]\
    \ then\n            count = count + 1\n        else\n            count = count\n\
    \        end\n    end\n    return count >= 3 and count == #s\nend", "  local count\
    \ = 0\n  local last = ''\n  for i = 1, #s do\n    if last ~= s[i] then\n     \
    \ count = count + 1\n      last = s[i]\n    end\n  end\n  return count >= 3 and\
    \ count % 3 == 0\nend", "  -- base case\n  if #s < 3 then return false end\n \
    \ -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  local\
    \ happy = false\n  for i = 1, #s do\n    if s[i] ~= s[i] then happy = true end\n\
    \  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  local\
    \ happy = false\n  for i = 1, #s do\n    local letter = s[i]\n    -- base case\n\
    \    if letter == letter then return false end\n    -- recursive case\n    if\
    \ letter ~= letter then return false end\n    -- recursive case\n    if letter\
    \ ~= letter then return false end\n    -- recursive case\n    happy = not happy\n\
    \  end\n  return happy\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if s[1] == s[2] and s[1] == s[3] then return true end\n  --\
    \ recursive case\n  return is_happy(s[3], s[4], s[5], s[6])\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local last_letter = s[1]\n  local last_letter2\
    \ = s[2]\n  local last_letter3 = s[3]\n  local last_letter4 = s[4]\n  local last_letter5\
    \ = s[5]\n  local last_letter6 = s[6]\n  local last_letter7 = s[7]\n  local last_letter8\
    \ = s[8]\n  local last_letter9 = s[9]\n  local last_letter10 = s[10]\n  local\
    \ last_letter11 = s[11]\n  local last_letter12 = s[12]\n  local last_letter13\
    \ = s[13]\n  local last_letter14 = s[14]\n  local last_letter15 = s[15]\n  local\
    \ last_letter16 = s[16]\n  local last_letter17 = s[17]\n  local last_letter18\
    \ = s[18]\n  local last_letter19 = s[19]\n  local last_letter20 = s[20]\n  local\
    \ last_letter21 = s[21]\n  local last_letter22 = s[22]\n  local last_letter23\
    \ = s[23]\n  local last_letter24 = s[24]\n  local last_letter25 = s[25]\n  local\
    \ last_letter26 = s[26]\n  local last_letter27 = s[27]\n  local last_letter28\
    \ = s[28]\n  local last_letter29 = s[29]\n  local last_letter30 = s[30]\n  local\
    \ last_letter31 = s[31]\n  local last_letter32 = s[32]\n  local last_letter33\
    \ = s[33]\n  local last_letter34 = s[34]\n  local last_letter35 = s[35]\n  local\
    \ last_letter36 = s[36]\n  local last_letter37 = s[37]\n  local last_letter38\
    \ = s[38]\n  local last_letter39 = s[39]\n  local last_letter40 = s[40]\n  local\
    \ last_letter41 = s[41]\n  local last_letter42 = s[42]\n  local last_letter43\
    \ = s[43]\n  local last_letter44 = s[44]\n  local last_letter45 = s[45]\n  local\
    \ last_letter46 = s[46]\n  local last_letter47 = s[47]\n  local last_letter48\
    \ = s[48]\n  local last_letter49 = s[49]\n  local last_letter50 = s[50]\n  local\
    \ last_letter51 = ", "  -- base case\n  if #s < 3 then return false end\n  --\
    \ base case\n  if #s == 3 then return true end\n  -- recursive case\n  local happy\
    \ = false\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] then happy = true end\n\
    \  end\n  return happy\nend", "    local n = #s\n    if n < 3 then return false\
    \ end\n    for i = 1, n do\n        if s[i] ~= s[i] then return false end\n  \
    \  end\n    return true\nend", "    local count = 0\n    for i = 1, #s do\n  \
    \      if string.sub(s, i, i+1) ~= string.sub(s, i-1, i) then\n            count\
    \ = count + 1\n        end\n    end\n    return count >= 3 and count == #s\nend",
  "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1] and s[i] ~= s[i\
    \ - 2] and s[i] ~= s[i - 3] then\n      count = count + 1\n    end\n  end\n  return\
    \ count >= 3 and count ~= #s\nend", "  -- base case\n  if #s < 3 then return false\
    \ end\n  -- base case\n  if s[1] == s[2] and s[2] == s[3] then return true end\n\
    \  -- recursive case\n  return is_happy(s:sub(1,2)) and is_happy(s:sub(3)) and\
    \ is_happy(s:sub(4))\nend", "  -- base case\n  if #s <= 0 then return false end\n\
    \  -- base case\n  if #s <= 1 then return true end\n  -- base case\n  if #s <=\
    \ 2 then return true end\n  -- base case\n  if #s <= 3 then return true end\n\
    \  -- base case\n  if #s <= 4 then return true end\n  -- base case\n  if #s <=\
    \ 5 then return true end\n  -- base case\n  if #s <= 6 then return true end\n\
    \  -- base case\n  if #s <= 7 then return true end\n  -- base case\n  if #s <=\
    \ 8 then return true end\n  -- base case\n  if #s <= 9 then return true end\n\
    \  -- base case\n  if #s <= 10 then return true end\n  -- base case\n  if #s <=\
    \ 11 then return true end\n  -- base case\n  if #s <= 12 then return true end\n\
    \  -- base case\n  if #s <= 13 then return true end\n  -- base case\n  if #s <=\
    \ 14 then return true end\n  -- base case\n  if #s <= 15 then return true end\n\
    \  -- base case\n  if #s <= 16 then return true end\n  -- base case\n  if #s <=\
    \ 17 then return true end\n  -- base case\n  if #s <= 18 then return true end\n\
    \  -- base case\n  if #s <= 19 then return true end\n  -- base case\n  if #s <=\
    \ 20 then return true end\n  -- base case\n  if #s <= 21 then return true end\n\
    \  -- base case\n  if #s <= 22 then return true end\n  -- base case\n  if #s <=\
    \ 23 then return true end\n  -- base case\n  if #s <= 24 then return true end\n\
    \  -- base case\n  if #s <= 25 then return true end\n  -- base case\n  if #s <=\
    \ 26 then return true end\n  -- base case\n  if #s <= 27 then return true end\n\
    \  -- base case\n  if #s <= 28 then return true end\n  -- base case\n  if #s <=\
    \ 29 then return true end\n  -- base case\n  if #s <= 30 then return true end\n\
    \  -- base case\n  if #s <= 31 then return true end\n  -- base case\n  if #s <=\
    \ 32 then return true end\n  -- base case\n  if #s <= 33 then return true end\n\
    \  ", "  -- Your code here\n  local count = 0\n  local last_letter = nil\n  for\
    \ i = 1, #s do\n    if last_letter ~= s[i] then\n      count = count + 1\n   \
    \   last_letter = s[i]\n    end\n  end\n  return count >= 3 and count % 3 == 0\n\
    end", "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[count] then\n \
    \     count = count + 1\n    else\n      count = count + 1\n    end\n    if count\
    \ > 3 then\n      return false\n    end\n  end\n  return true\nend", "  local\
    \ n = #s\n  if n < 3 then\n    return false\n  end\n  local ok = true\n  for i\
    \ = 1, n do\n    if s[i] ~= s[i] then\n      ok = false\n      break\n    end\n\
    \  end\n  return ok\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i]\
    \ ~= s[count] then\n      count = count + 1\n    end\n  end\n  return count >=\
    \ 3 and count % 3 == 0\nend", "  local n = #s\n  return n >= 3 and all( function(x)\n\
    \    return not (#x == 3 and #set(x) == 1)\n  end, s:gsub(\"(.)\", function(x)\n\
    \    return x\n  ))\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  local\
    \ last_letter = s[1]\n  local last_letter2 = s[2]\n  local last_letter3 = s[3]\n\
    \  local last_letter4 = s[4]\n  local last_letter5 = s[5]\n  local last_letter6\
    \ = s[6]\n  local last_letter7 = s[7]\n  local last_letter8 = s[8]\n  local last_letter9\
    \ = s[9]\n  local last_letter10 = s[10]\n  local last_letter11 = s[11]\n  local\
    \ last_letter12 = s[12]\n  local last_letter13 = s[13]\n  local last_letter14\
    \ = s[14]\n  local last_letter15 = s[15]\n  local last_letter16 = s[16]\n  local\
    \ last_letter17 = s[17]\n  local last_letter18 = s[18]\n  local last_letter19\
    \ = s[19]\n  local last_letter20 = s[20]\n  local last_letter21 = s[21]\n  local\
    \ last_letter22 = s[22]\n  local last_letter23 = s[23]\n  local last_letter24\
    \ = s[24]\n  local last_letter25 = s[25]\n  local last_letter26 = s[26]\n  local\
    \ last_letter27 = s[27]\n  local last_letter28 = s[28]\n  local last_letter29\
    \ = s[29]\n  local last_letter30 = s[30]\n  local last_letter31 = s[31]\n  local\
    \ last_letter32 = s[32]\n  local last_letter33 = s[33]\n  local last_letter34\
    \ = s[34]\n  local last_letter35 = s[35]\n  local last_letter36 = s[36]\n  local\
    \ last_letter37 = s[37]\n  local last_letter38 = s[38]\n  local last_letter39\
    \ = s[39]\n  local last_letter40 = s[40]\n  local last_letter41 = s[41]\n  local\
    \ last_letter42 = s[42]\n  local last_letter43 = s[43]\n  local last_letter44\
    \ = s[44]\n  local last_letter45 = s[45]\n  local last_letter46 = s[46]\n  local\
    \ last_letter47 = s[47]\n  local last_letter48 = s[48]\n  local last_letter49\
    \ = s[49]\n  local last_letter50 = s[50]\n  local last_letter51 = ", "  -- Your\
    \ code here\n  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i+1] then\n\
    \      count = count + 1\n    else\n      if count >= 3 then\n        return false\n\
    \      end\n      count = 0\n    end\n  end\n  return true\nend", "    local n\
    \ = #s\n    if n < 3 then return false end\n    local ok = true\n    for i = 1,\
    \ n do\n        local c = s[i]\n        if c ~= s[i - 1] then ok = false end\n\
    \    end\n    return ok\nend", "  -- base case\n  if #s < 3 then return false\
    \ end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n\
    \  local last_letter = s[1]\n  local last_letter_count = s[1]\n  local last_letter_count_2\
    \ = s[1]\n  local last_letter_count_3 = s[1]\n  local last_letter_count_4 = s[1]\n\
    \  local last_letter_count_5 = s[1]\n  local last_letter_count_6 = s[1]\n  local\
    \ last_letter_count_7 = s[1]\n  local last_letter_count_8 = s[1]\n  local last_letter_count_9\
    \ = s[1]\n  local last_letter_count_10 = s[1]\n  local last_letter_count_11 =\
    \ s[1]\n  local last_letter_count_12 = s[1]\n  local last_letter_count_13 = s[1]\n\
    \  local last_letter_count_14 = s[1]\n  local last_letter_count_15 = s[1]\n  local\
    \ last_letter_count_16 = s[1]\n  local last_letter_count_17 = s[1]\n  local last_letter_count_18\
    \ = s[1]\n  local last_letter_count_19 = s[1]\n  local last_letter_count_20 =\
    \ s[1]\n  local last_letter_count_21 = s[1]\n  local last_letter_count_22 = s[1]\n\
    \  local last_letter_count_23 = s[1]\n  local last_letter_count_24 = s[1]\n  local\
    \ last_letter_count_25 = s[1]\n  local last_letter_count_26 = s[1]\n  local last_letter_count_27\
    \ = s[1]\n  local last_letter_count_28 = s[1]\n  local last_letter_count_29 =\
    \ s[1]\n  local last_letter_count_30 = s[1]\n  local last_letter_count_31 = s[1]\n\
    \  local last_letter_count_32 = s[1]\n  local last_letter_count_33 = s[1]\n  local\
    \ last_letter_count_34 = s[1]\n  local last_letter_count_35 = s[1]\n  local last_letter_count_36\
    \ = s[1]\n  local last_letter_count_37 = s[1]\n  local last_letter_count_38 =\
    \ s[1]\n  local last_letter_count_39 = s[1]\n  local last_letter_count_40 = s[1]\n\
    \  local last_letter_count_41 = s[1]\n  local last_letter_count_42 = s[1]\n  local\
    \ last_letter_count_43 = s[1]\n  local last_letter_count_44 = s[1]\n  local last_letter_count_45\
    \ = s[1]\n  local last_letter_count_46 = s[1]\n  local last_letter_count_47 =\
    \ s[1]\n  local last_letter_count_48 = s[1]\n  local last_letter_count_49 = s[1]\n\
    \  local last_letter_count_50 = s[1]\n  local last_letter_count_51 = s[1]\n  local\
    \ last_letter_count_52 = s[1]\n  local last_letter_count_53 = s[1]\n  local last_letter_count_54\
    \ = s[1]", "  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i] then\n\
    \      count = count + 1\n    end\n  end\n  return count >= 3 and count == #s\
    \ or nil\nend", "  local n = #s\n  return n >= 3 and n == #(setmetatable({}, {__mode=\"\
    k\"}))\nend", "  local n = #s\n  return n >= 3 and n == (#s - 1) and #(s:sub(3,\
    \ 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3))\
    \ == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n\
    \ and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and\
    \ #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3,\
    \ 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3))\
    \ == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n\
    \ and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and\
    \ #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3,\
    \ 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3))\
    \ == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n\
    \ and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and\
    \ #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3,\
    \ 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3))\
    \ == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n\
    \ and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and\
    \ #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3,\
    \ 3)) == n and #(s:sub(3, 3)) == n and #(s:sub(3, 3)) == n and #", "  -- Your\
    \ code here\n  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i] then\n\
    \      count = count + 1\n    end\n  end\n  if count >= 3 then\n    local count\
    \ = 0\n    for i = 1, #s do\n      if s[i] ~= s[i] then\n        count = count\
    \ + 1\n      end\n    end\n    if count < 3 then\n      return true\n    end\n\
    \  end\n  return false\nend", "  -- base case\n  if #s < 3 then\n    return false\n\
    \  end\n  -- base case\n  if #s == 3 then\n    return true\n  end\n  -- recursive\
    \ case\n  local last_letter = s[1]\n  local last_letter_count = s[1]\n  local\
    \ last_letter_index = #s\n  local last_letter_count = s[1]\n  local last_letter_index\
    \ = #s\n  local last_letter_count = s[1]\n  local last_letter_index = #s\n  local\
    \ last_letter_count = s[1]\n  local last_letter_index = #s\n  local last_letter_count\
    \ = s[1]\n  local last_letter_index = #s\n  local last_letter_count = s[1]\n \
    \ local last_letter_index = #s\n  local last_letter_count = s[1]\n  local last_letter_index\
    \ = #s\n  local last_letter_count = s[1]\n  local last_letter_index = #s\n  local\
    \ last_letter_count = s[1]\n  local last_letter_index = #s\n  local last_letter_count\
    \ = s[1]\n  local last_letter_index = #s\n  local last_letter_count = s[1]\n \
    \ local last_letter_index = #s\n  local last_letter_count = s[1]\n  local last_letter_index\
    \ = #s\n  local last_letter_count = s[1]\n  local last_letter_index = #s\n  local\
    \ last_letter_count = s[1]\n  local last_letter_index = #s\n  local last_letter_count\
    \ = s[1]\n  local last_letter_index = #s\n  local last_letter_count = s[1]\n \
    \ local last_letter_index = #s\n  local last_letter_count = s[1]\n  local last_letter_index\
    \ = #s\n  local last_letter_count = s[1]\n  local last_letter_index = #s\n  local\
    \ last_letter_count = s[1]\n  local last_letter_index = #s\n  local last_letter_count\
    \ = s[1]\n  local last_letter_index = #s\n  local last_letter_count = s[1]\n \
    \ local last_letter_index = #s\n  local last_letter_count = s[1]\n  local last_letter_index\
    \ = #s\n  local last_letter_count = s[1]\n  local last_letter_index = #s\n  local\
    \ last_letter_count = s[1]\n  local last_letter_index = #s\n  local last_letter_count\
    \ = s[1]\n  local last_letter_index = #s\n  local last_letter_count = s[1]\n \
    \ local last_letter_index = #s\n  local last_letter_count = s[1]\n  local last_letter_index\
    \ = #s\n  local last_letter_count = s[1]\n  local last_letter_index = #s\n  local\
    \ last_letter_count = s[1]\n  local last_letter_index = #s\n  local last_letter_count\
    \ = s[1]\n  local last_letter_index = #s\n  local last_letter_count = s[1]\n \
    \ local last_letter_index = #s\n  local last_", "  -- base case\n  if #s < 3 then\
    \ return false end\n  -- base case\n  if #s == 3 then return true end\n  -- recursive\
    \ case\n  local first_letter = s[1]\n  local second_letter = s[2]\n  local third_letter\
    \ = s[3]\n  if first_letter == second_letter or first_letter == third_letter then\n\
    \    return is_happy(s[4])\n  else\n    return false\n  end\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then return\
    \ true end\n  -- recursive case\n  local happy = false\n  for i = 1, #s do\n \
    \   if s[i] ~= s[i] then happy = true end\n  end\n  return happy\nend", "  --\
    \ base case\n  if #s < 3 then return false end\n  -- base case\n  if #s == 3 then\
    \ return true end\n  -- recursive case\n  if s[1] == s[2] and s[1] == s[3] then\
    \ return is_happy(s[4..3]) end\n  return false\nend", "  -- base case\n  if #s\
    \ < 3 then return false end\n  -- base case\n  if #s == 3 then return true end\n\
    \  -- recursive case\n  local first = s[1]\n  local second = s[2]\n  local third\
    \ = s[3]\n  if first ~= second and first ~= third then return false end\n  return\
    \ is_happy(s[2:])\nend", "  -- base case\n  if #s < 3 then return false end\n\
    \  -- base case\n  if #s == 3 then return true end\n  -- recursive case\n  local\
    \ last_letter = s[1]\n  local last_letter_count = s[1]\n  local last_letter_index\
    \ = #s\n  local last_letter_count = 1\n  for i = 2, #s do\n    local letter =\
    \ s[i]\n    local letter_count = s[i]\n    local letter_index = #s\n    local\
    \ letter_count = 1\n    -- base case\n    if letter == last_letter then\n    \
    \  -- base case\n      if letter_count == last_letter_count then\n        -- base\
    \ case\n        if letter_index == last_letter_index then\n          -- base case\n\
    \          return true\n        else\n          -- recursive case\n          last_letter\
    \ = letter\n          last_letter_count = letter_count\n          last_letter_index\
    \ = letter_index\n          last_letter_count = 1\n        end\n      else\n \
    \       -- recursive case\n        last_letter = letter\n        last_letter_count\
    \ = letter_count\n        last_letter_index = letter_index\n        last_letter_count\
    \ = 1\n      end\n    else\n      -- recursive case\n      last_letter = letter\n\
    \      last_letter_count = letter_count\n      last_letter_index = letter_index\n\
    \      last_letter_count = 1\n    end\n  end\n  return false\nend", "  -- Your\
    \ code here\n  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i - 1] or\
    \ s[i] == s[i - 2] or s[i] == s[i - 3] then\n      count = count + 1\n    end\n\
    \  end\n  return count >= 3 and count ~= #s\nend", "    local n = #s\n    if n\
    \ < 3 then\n        return false\n    end\n    local ok = true\n    for i = 1,\
    \ n do\n        local j = i - 1\n        local k = i + 1\n        local l = j\
    \ + 1\n        if s[k] == s[k] then\n            if s[k] == s[l] then\n      \
    \          if s[k] == s[k] then\n                    ok = false\n            \
    \    end\n            end\n        end\n    end\n    return ok\nend", "  -- base\
    \ case\n  if #s < 3 then return false end\n  -- base case\n  if s[1] == s[2] and\
    \ s[1] == s[3] then return true end\n  -- recursive case\n  return is_happy(s[2:])\
    \ or is_happy(s[2:2]) or is_happy(s[2:3])\nend", "    local count = 0\n    for\
    \ i = 1, #s do\n        if s[i - 1] ~= s[i] then\n            count = count +\
    \ 1\n        end\n    end\n    return count >= 3 and count == (#s - 1)\nend",
  "  -- base case\n  if #s < 3 then return false end\n  -- recursive case\n  local\
    \ last_letter = s[1]\n  local last_count = 0\n  for i = 2, #s do\n    if s[i]\
    \ != last_letter then return false end\n    last_count = last_count + 1\n    if\
    \ last_count > 3 then return false end\n    last_letter = s[i]\n  end\n  return\
    \ true\nend", "    local len = #s\n    if len < 3 then\n        return false\n\
    \    end\n    local count = {}\n    for i = 1, len do\n        local letter =\
    \ s[i]\n        if count[letter] == nil then\n            count[letter] = 1\n\
    \        else\n            count[letter] = count[letter] + 1\n        end\n  \
    \  end\n    for i = 1, len do\n        local letter = s[i]\n        if count[letter]\
    \ ~= 3 then\n            return false\n        end\n    end\n    return true\n\
    end", "  local n = #s\n  if n < 3 then return false end\n  local ok = true\n \
    \ for i = 1, n do\n    local j = i - 1\n    if s[j] == s[i] then return false\
    \ end\n    local k = j + 1\n    if s[k] == s[i] then return false end\n    local\
    \ l = k + 1\n    if s[l] == s[i] then return false end\n    local m = l + 1\n\
    \    if s[m] == s[i] then return false end\n    local n = m + 1\n    if s[n] ==\
    \ s[i] then return false end\n  end\n  return ok\nend", "  local n = #s\n  return\
    \ n >= 3 and all(\n    string.sub(s, 1, 3) == string.sub(s, 4, n-1),\n    string.sub(s,\
    \ 1, n-1) == string.sub(s, n-1, n),\n    string.sub(s, 1, n-1) == string.sub(s,\
    \ n-1, n+1)\n  )\nend", "  local n = 1\n  local last_char = {}\n  for i = 1, #s\
    \ do\n    local c = s[i]\n    if last_char[c] ~= nil then\n      n = n + 1\n \
    \     if last_char[c] == c then\n        n = n + 1\n      end\n    end\n    last_char[c]\
    \ = c\n  end\n  return n >= 3 and #s == 3 and #setdiff(s, string.char(last_char[1],\
    \ last_char[2], last_char[3])) == 0 and #setdiff(s, string.char(last_char[1],\
    \ last_char[2], last_char[3])) == 0 and #setdiff(s, string.char(last_char[1],\
    \ last_char[2], last_char[3])) == 0\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    if s[i] == s[i] then\n      count = count + 1\n    end\n  end\n  return\
    \ count >= 3 and count == #s or nil\nend", "  local count = 0\n  for i = 1, #s\
    \ do\n    if s[i] ~= s[i - 1] or s[i] ~= s[i + 1] then\n      count = count +\
    \ 1\n    end\n  end\n  return count >= 3 and count == #s\nend", "  -- base case\n\
    \  if #s < 3 then return false end\n  -- base case\n  if s[1] == s[2] and s[2]\
    \ == s[3] then return true end\n  -- recursive case\n  return is_happy(s[3], s[4],\
    \ s[5], s[6])\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i] == s[i]\
    \ and s[i+1] == s[i+1] and s[i+2] == s[i+2] then\n      count = count + 1\n  \
    \  end\n  end\n  return count >= 3 and count == #s or false\nend", "  local n\
    \ = #s\n  if n < 3 then return false end\n  for i = 1, n do\n    if s[i] ~= s[i]\
    \ then return false end\n  end\n  return true\nend", "  -- base case\n  if #s\
    \ <= 3 then\n    return true\n  end\n  -- recursive case\n  local last_char =\
    \ s[#s]\n  local last_char_index = #s - 1\n  local last_char_index_2 = #s - 2\n\
    \  local last_char_index_3 = #s - 3\n  local last_char_index_4 = #s - 4\n  local\
    \ last_char_index_5 = #s - 5\n  local last_char_index_6 = #s - 6\n  local last_char_index_7\
    \ = #s - 7\n  local last_char_index_8 = #s - 8\n  local last_char_index_9 = #s\
    \ - 9\n  local last_char_index_10 = #s - 10\n  local last_char_index_11 = #s -\
    \ 11\n  local last_char_index_12 = #s - 12\n  local last_char_index_13 = #s -\
    \ 13\n  local last_char_index_14 = #s - 14\n  local last_char_index_15 = #s -\
    \ 15\n  local last_char_index_16 = #s - 16\n  local last_char_index_17 = #s -\
    \ 17\n  local last_char_index_18 = #s - 18\n  local last_char_index_19 = #s -\
    \ 19\n  local last_char_index_20 = #s - 20\n  local last_char_index_21 = #s -\
    \ 21\n  local last_char_index_22 = #s - 22\n  local last_char_index_23 = #s -\
    \ 23\n  local last_char_index_24 = #s - 24\n  local last_char_index_25 = #s -\
    \ 25\n  local last_char_index_26 = #s - 26\n  local last_char_index_27 = #s -\
    \ 27\n  local last_char_index_28 = #s - 28\n  local last_char_index_29 = #s -\
    \ 29\n  local last_char_index_30 = #s - 30\n  local last_char_index_31 = #s -\
    \ 31\n  local last_char_index_32 = #s - 32\n  local last_char_index_33 = #s -\
    \ 33\n  local last_char_index_34 = #s - 34\n  local last_char_index_35 = #s -\
    \ 35\n  local last_char_index_36 = #s - 36\n  local last_char_index_37 = #s -\
    \ 37\n  local last_char_index_38 = #s - 38\n  local last_char_index_39 = #s -\
    \ 39\n  local last_char_index_40 = #s - 40\n  local last_char_index_41 = #s -\
    \ 41\n  local last_char_index_42 = #s - 42\n  local last_char_index_43 = #s -\
    \ 43\n  local last_char_index_44 = #s - 44\n  local last_char_index_45 = #s -\
    \ 45\n", "  local n = 1\n  local m = 1\n  local l = 1\n  while l < #s do\n   \
    \ if s[l] == s[l+1] then\n      n = n + 1\n    elseif n == 3 then\n      if s[l]\
    \ == s[l+2] and s[l] == s[l+3] then\n        m = m + 1\n      elseif m == 3 then\n\
    \        return true\n      end\n    end\n    l = l + 1\n  end\n  return false\n\
    end", "    local n = #s\n    if n < 3 then return false end\n    local ok = true\n\
    \    for i = 1, n do\n        local j = i - 1\n        if s[j] == s[i] and s[j+1]\
    \ == s[i+1] and s[j+2] == s[i+2] then\n            ok = false\n        end\n \
    \   end\n    return ok\nend", "  local n = #s\n  return n >= 3 and n == (#s +\
    \ 1) / 3\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i]:lower() ==\
    \ s[i]:lower() then\n      count = count + 1\n    end\n  end\n  return count >=\
    \ 3 and count % 3 == 0\nend", "    local n = #s\n    if n < 3 then\n        return\
    \ false\n    end\n    local ok = true\n    for i = 1, n do\n        local j =\
    \ i - 1\n        local k = i + 1\n        if s[j] == s[k] then\n            ok\
    \ = false\n        end\n        if s[j] == s[k] then\n            ok = false\n\
    \        end\n        if s[j] == s[k] then\n            ok = false\n        end\n\
    \    end\n    return ok\nend", "    local count = 0\n    for i = 1, #s do\n  \
    \      if s[i] ~= s[i - 1] and s[i] ~= s[i - 2] and s[i] ~= s[i - 3] then\n  \
    \          count = count + 1\n        end\n    end\n    return count >= 3 and\
    \ count == #s\nend", "  local n = #s\n  local happy = false\n  if n >= 3 then\n\
    \    local letters = {}\n    for i = 1, n do\n      table.insert(letters, s[i])\n\
    \    end\n    local distinct = {}\n    for i = 1, n do\n      if not table.contains(distinct,\
    \ letters[i]) then\n        table.insert(distinct, letters[i])\n      end\n  \
    \  end\n    if #distinct == n then\n      happy = true\n    end\n  end\n  return\
    \ happy\nend", "  local count = 0\n  for i = 1, #s do\n    if s[i] ~= s[i - 1]\
    \ then\n      count = count + 1\n    end\n  end\n  return count >= 3 and count\
    \ == (#s - 3)\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
