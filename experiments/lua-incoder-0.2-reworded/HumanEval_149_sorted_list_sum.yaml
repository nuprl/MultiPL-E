name: HumanEval_149_sorted_list_sum
language: lua
prompt: "-- Write a function that accepts a table of strings as a parameter,\n-- deletes\
  \ the strings that have odd lengths from it,\n-- and returns the resulted table\
  \ with a sorted order,\n-- The table is always a table of strings and never a table\
  \ of numbers,\n-- and it may contain duplicates.\n-- The order of the table should\
  \ be ascending by length of each word, and you\n-- should return the table sorted\
  \ by that rule.\n-- If two words have the same length, sort the table alphabetically.\n\
  -- The function should return a table of strings in sorted order.\n-- You may assume\
  \ that all words will have the same length.\n-- For example:\n-- >>> list_sort({'aa',\
  \ 'a', 'aaa'})\n-- {'aa'}\n-- >>> list_sort({'ab', 'a', 'aaa', 'cd'})\n-- {'ab',\
  \ 'cd'}\nlocal function sorted_list_sum(lst)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = sorted_list_sum\n\
  \    lu.assertEquals(candidate({'aa', 'a', 'aaa'}), {'aa'})\n    lu.assertEquals(candidate({'school',\
  \ 'AI', 'asdf', 'b'}), {'AI', 'asdf', 'school'})\n    lu.assertEquals(candidate({'d',\
  \ 'b', 'c', 'a'}), {})\n    lu.assertEquals(candidate({'d', 'dcba', 'abcd', 'a'}),\
  \ {'abcd', 'dcba'})\n    lu.assertEquals(candidate({'AI', 'ai', 'au'}), {'AI', 'ai',\
  \ 'au'})\n    lu.assertEquals(candidate({'a', 'b', 'b', 'c', 'c', 'a'}), {})\n \
  \   lu.assertEquals(candidate({'aaaa', 'bbbb', 'dd', 'cc'}), {'cc', 'dd', 'aaaa',\
  \ 'bbbb'})\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend", "  local sorted_lst = {}\n  local sorted_keys = {}\n  local\
    \ sorted_key_count = 0\n  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys\
    \ + 1] = key\n    sorted_key_count = #sorted_keys\n  end\n  table.sort(sorted_keys,\
    \ function(a, b) return #a == #b end)\n  for i = 1, #sorted_keys do\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_keys[i]\n  end\n  return sorted_lst\nend", "  local sorted_lst\
    \ = {}\n  local sorted_keys = {}\n  local sorted_key\n  local sorted_value\n \
    \ for _, value in ipairs(lst) do\n    sorted_key = value\n    sorted_value = sorted_keys[sorted_key]\n\
    \    if sorted_value == nil then\n      sorted_keys[sorted_key] = value\n    else\n\
    \      sorted_keys[sorted_key] = sorted_value .. value\n    end\n  end\n  for\
    \ sorted_key, sorted_value in pairs(sorted_keys) do\n    table.insert(sorted_lst,\
    \ sorted_value)\n  end\n  return sorted_lst\nend", "  local sorted_lst = {}\n\
    \  local sorted_keys = {}\n  local sorted_vals = {}\n  for i = 1, #lst do\n  \
    \  sorted_keys[#sorted_keys + 1] = lst[i]\n    sorted_vals[#sorted_vals + 1] =\
    \ lst[i]\n  end\n  table.sort(sorted_keys, function(a, b) return #a < #b end)\n\
    \  table.sort(sorted_vals, function(a, b) return #a < #b end)\n  for i = 1, #sorted_keys\
    \ do\n    sorted_lst[#sorted_lst + 1] = sorted_keys[i]\n    sorted_lst[#sorted_lst\
    \ + 1] = sorted_vals[i]\n  end\n  return sorted_lst\nend", "  local sorted_lst\
    \ = {}\n  local sorted_keys = {}\n  local sorted_key_index = 1\n  for i = 1, #lst\
    \ do\n    local key = lst[i]\n    sorted_keys[sorted_key_index] = key\n    sorted_lst[sorted_key_index]\
    \ = key\n    sorted_key_index = sorted_key_index + 1\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a == #b end)\n  table.sort(sorted_keys, function(a, b)\
    \ return #a < #b end)\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = sorted_keys[i\
    \ - 1]\n  end\n  return sorted_lst\nend", "  local sorted_lst = {}\n  local sorted_keys\
    \ = {}\n  local sorted_vals = {}\n  for _, v in pairs(lst) do\n    sorted_keys[#sorted_keys\
    \ + 1] = v\n    sorted_vals[#sorted_vals + 1] = v\n  end\n  table.sort(sorted_vals,\
    \ function(a, b) return #a < #b end)\n  for _, v in pairs(sorted_vals) do\n  \
    \  sorted_lst[#sorted_lst + 1] = sorted_keys[#sorted_keys + 1]\n  end\n  return\
    \ sorted_lst\nend", "  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n \
    \   table.insert(sorted_lst, v)\n  end\n  table.sort(sorted_lst)\n  return sorted_lst\n\
    end", "  local sorted_lst = {}\n  local sorted_keys = {}\n  local sorted_key =\
    \ 0\n  for i = 1, #lst do\n    local key = tostring(lst[i])\n    if sorted_keys[key]\
    \ ~= nil then\n      sorted_keys[#sorted_keys + 1] = key\n    else\n      sorted_keys[key]\
    \ = 1\n      sorted_lst[#sorted_lst + 1] = key\n    end\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a < #b end)\n  for i = 1, #sorted_lst do\n    sorted_keys[sorted_lst[i]]\
    \ = nil\n  end\n  return sorted_keys\nend", "  local sorted_lst = {}\n  local\
    \ sorted_keys = {}\n  local sorted_key = 0\n  local i = 0\n  for k, v in pairs(lst)\
    \ do\n    if sorted_keys[#sorted_keys + 1] == k then\n      sorted_keys[#sorted_keys\
    \ + 1] = sorted_key + 1\n      sorted_lst[#sorted_lst + 1] = v\n    else\n   \
    \   sorted_keys[#sorted_keys + 1] = k\n      sorted_lst[#sorted_lst + 1] = v\n\
    \      sorted_key = sorted_key + 1\n    end\n    i = i + 1\n  end\n  return sorted_lst\n\
    end", "  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend", "  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n \
    \   table.insert(sorted_lst, v)\n  end\n  table.sort(sorted_lst, function(a, b)\
    \ return #a == #b end)\n  return sorted_lst\nend", "  local sorted_lst = {}\n\
    \  local sorted_keys = {}\n  for i = 1, #lst do\n    sorted_keys[#sorted_keys\
    \ + 1] = i\n  end\n  table.sort(sorted_keys, function(a, b) return string.len(lst[a])\
    \ < string.len(lst[b]) end)\n  for i = 1, #sorted_keys do\n    sorted_lst[sorted_keys[i]]\
    \ = lst[sorted_keys[i]]\n  end\n  return sorted_lst\nend", "  local sorted_lst\
    \ = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst, v)\n  end\n\
    \  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return sorted_lst\n\
    end", "  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n    table.insert(sorted_lst,\
    \ v)\n  end\n  table.sort(sorted_lst, function(a, b) return #a == #b end)\n  return\
    \ sorted_lst\nend", "  local sorted_lst = {}\n  for _, v in ipairs(lst) do\n \
    \   table.insert(sorted_lst, v)\n  end\n  table.sort(sorted_lst, function(a, b)\
    \ return #a == #b end)\n  return sorted_lst\nend", "  local sorted_lst = {}\n\
    \  for i = 1, #lst do\n    sorted_lst[i] = lst[i]\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a == #b end)\n  return sorted_lst\nend", "  local sorted_lst\
    \ = {}\n  local sorted_keys = {}\n  local sorted_key = 0\n  for i = 1, #lst do\n\
    \    local key = tostring(lst[i])\n    if not sorted_keys[key] then\n      sorted_keys[key]\
    \ = sorted_key\n      sorted_lst[sorted_key] = lst[i]\n      sorted_key = sorted_key\
    \ + 1\n    else\n      sorted_keys[key] = (sorted_keys[key] + 1) % #sorted_lst\n\
    \    end\n  end\n  return sorted_lst\nend", "  local sorted_lst = {}\n  for i\
    \ = 1, #lst do\n    sorted_lst[#sorted_lst + 1] = lst[i]\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a == #b end)\n  return sorted_lst\nend", "  local sorted_list\
    \ = { }\n  for i = 1, #lst do\n    local word = lst[i]\n    local length = #word\n\
    \    if sorted_list[length] == nil then\n      sorted_list[length] = word\n  \
    \  else\n      table.insert(sorted_list, word)\n    end\n  end\n  table.sort(sorted_list)\n\
    \  return sorted_list\nend", "  local sorted_lst = {}\n  local sorted_keys = {}\n\
    \  for i = 1, #lst do\n    local key = lst[i]\n    sorted_keys[#sorted_keys +\
    \ 1] = key\n    sorted_lst[#sorted_lst + 1] = key\n  end\n  table.sort(sorted_lst,\
    \ function(a, b) return #a == #b end)\n  table.sort(sorted_keys, function(a, b)\
    \ return #a > #b end)\n  for i = 1, #sorted_lst do\n    sorted_lst[i] = sorted_keys[i\
    \ - 1]\n  end\n  return sorted_lst\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
