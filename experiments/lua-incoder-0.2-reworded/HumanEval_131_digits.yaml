name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n--\
  \ >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n  \
    \    product = product * i\n    end\n    n = n / 2\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n == 0 then return 0 end\n  if n < 10 then\n    return n\n\
    \  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n\
    \ % 10\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n\
    \    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10)\
    \ * 10 + n % 10\n  else\n    return digits(n / 100) * 100 + digits(n % 100)\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  while\
    \ n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n  end\n\
    \  return product\nend", "  local nDigits = math.floor(math.log10(n))\n  local\
    \ product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,i))\n\
    \  end\n  return product\nend", "  local digits = math.floor(n/10)\n  if digits\
    \ == 0 then\n    return 0\n  elseif digits % 2 == 1 then\n    return 0\n  else\n\
    \    return digits*10 + digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return digits(n / 10) * 10 + n % 10\n  end\nend", " \
    \ if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n ~= 0 do\n \
    \   digit = n * 10 + digit\n    n = n / 10\n  end\n  return digit\nend", "  local\
    \ nDigits = math.floor(math.log10(n))\n  local product = 1\n  for i = 1, nDigits\
    \ do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  return product\nend", "  if n\
    \ < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10) *\
    \ 10 + n % 10\n  else\n    return 0\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    local sum = 0\n    local i = 1\n    while\
    \ i <= n do\n      local d = n % 10\n      sum = sum + d * d\n      n = n / 10\n\
    \      i = i + 1\n    end\n    return sum\n  end\nend", "  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * digit\n    end\n    n = n / 2\n  end\n  return product\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    return n * digits(n / 10)\n  end\nend",
  "  if n == 0 then return 0 end\n  local sum = 0\n  local i = 1\n  while n > 0 do\n\
    \    sum = sum + n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  if\
    \ sum % 2 == 1 then return 0 end\n  return sum\nend", "  if n < 10 then\n    return\
    \ n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  elseif\
    \ n < 1000 then\n    return digits(n / 100) * 100 + digits(n % 100)\n  else\n\
    \    return digits(n / 1000) * 1000 + digits(n % 1000)\n  end\nend", "  if n <\
    \ 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif n < 100 then\n\
    \    return n * 2\n  elseif n < 1000 then\n    return n * 3\n  elseif n < 10000\
    \ then\n    return n * 5\n  elseif n < 100000 then\n    return n * 7\n  elseif\
    \ n < 1000000 then\n    return n * 9\n  else\n    return n * 11\n  end\nend",
  "  local nDigits = math.floor(math.log10(n))\n  local product = 1\n  for i = 1,\
    \ nDigits do\n    product = product * math.floor(n/math.pow(10, i))\n  end\n \
    \ return product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n\
    \    return n\n  elseif n < 100 then\n    return n * 2\n  elseif n < 1000 then\n\
    \    return n * 3\n  elseif n < 10000 then\n    return n * 4\n  elseif n < 100000\
    \ then\n    return n * 5\n  elseif n < 1000000 then\n    return n * 6\n  elseif\
    \ n < 10000000 then\n    return n * 7\n  elseif n < 100000000 then\n    return\
    \ n * 8\n  elseif n < 1000000000 then\n    return n * 9\n  else\n    return 0\n\
    \  end\nend", "  if n == 0 then\n    return 0\n  end\n  local n1 = math.floor(n)\n\
    \  local n2 = math.floor(n/10)\n  local n3 = math.floor(n/100)\n  local n4 = math.floor(n/1000)\n\
    \  local n5 = math.floor(n/10000)\n  local n6 = math.floor(n/100000)\n  local\
    \ n7 = math.floor(n/1000000)\n  local n8 = math.floor(n/10000000)\n  local n9\
    \ = math.floor(n/100000000)\n  local n10 = math.floor(n/1000000000)\n  local n11\
    \ = math.floor(n/10000000000)\n  local n12 = math.floor(n/100000000000)\n  local\
    \ n13 = math.floor(n/1000000000000)\n  local n14 = math.floor(n/10000000000000)\n\
    \  local n15 = math.floor(n/100000000000000)\n  local n16 = math.floor(n/1000000000000000)\n\
    \  local n17 = math.floor(n/10000000000000000)\n  local n18 = math.floor(n/100000000000000000)\n\
    \  local n19 = math.floor(n/100000000000000001)\n  local n20 = math.floor(n/100000000000000002)\n\
    \  local n21 = math.floor(n/100000000000000003)\n  local n22 = math.floor(n/100000000000000004)\n\
    \  local n23 = math.floor(n/100000000000000005)\n  local n24 = math.floor(n/100000000000000006)\n\
    \  local n25 = math.floor(n/100000000000000007)\n  local n26 = math.floor(n/100000000000000008)\n\
    \  local n27 = math.floor(n/100000000000000009)\n  local n28 = math.floor(n/100000000000000010)\n\
    \  local n29 = math.floor(n/100000000000000011)\n  local n30 = math.floor(n/100000000000000012)\n\
    \  local n31 = math.floor(n/100000000000000013)\n  local n32 = math.floor(n/100000000000000014)\n\
    \  local n33 = math.floor(n/100000000000000015)\n  local n34 = math.floor(n/100000000000000016)\n\
    \  local n35 = math.floor(n/100000000000000017)\n  local n36 = math.floor(n/100000000000000018)\n\
    \  local n37 = math.floor(n/100000000000000019)\n  local n38 = math.floor(n/100000000000000020)\n\
    \  local n39 = math.floor(n/100", "  if n < 10 then\n    return n\n  else\n  \
    \  return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend",
  "  if n < 0 then\n    return 0\n  end\n  local ndigits = math.floor(math.log10(n))\n\
    \  if ndigits == 0 then\n    return 0\n  end\n  local digits = math.pow(10, ndigits)\n\
    \  local product = 1\n  for i = 1, ndigits do\n    product = product * math.floor(n/digits)\n\
    \    n = math.mod(n, digits)\n  end\n  return product\nend", "  if n < 10 then\n\
    \    return n\n  else\n    local digits = math.floor(n/10)\n    return digits*10\
    \ + digits(math.mod(n,10))\n  end\nend", "  local digits = 0\n  while n > 0 do\n\
    \    digits = digits * 10 + n % 10\n    n = math.floor(n/10)\n  end\n  return\
    \ digits\nend", "  if n < 10 then\n    return n\n  else\n    return digits(n /\
    \ 10) * 10 + n % 10\n  end\nend", "  if n < 10 then\n    return n\n  else\n  \
    \  local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n    return\
    \ digits and digits*10 + digits(remainder)\n  end\nend", "  if n < 0 then\n  \
    \  return 0\n  end\n  local digits = math.floor(n/10)\n  if digits == 0 then\n\
    \    return 0\n  end\n  local remainder = n % 10\n  if remainder == 0 then\n \
    \   return digits\n  end\n  local product = 1\n  while remainder ~= 0 do\n   \
    \ product = product * 2\n    remainder = remainder - 10\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    if remainder < 10 then\n      return\
    \ digits\n    else\n      return digits+digits(remainder)\n    end\n  end\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return n * digits(n\
    \ / 10)\n  elseif n < 1000 then\n    return n * digits(n / 100) * digits(n / 10)\n\
    \  else\n    return 0\n  end\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n  \
    \  return digits*10 + digits(remainder)\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits * n % 10\n\
    \    n = n / 10\n  end\n  return digits\nend", "  if n < 0 then\n    return 0\n\
    \  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n%10))\n  end\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n\
    \ % 10\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  else\n    return 0\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = math.floor(n/10)\n\
    \  if n % 10 == 0 then\n    return digits\n  end\n  local remainder = n % 10\n\
    \  return digits*10 + digits(remainder)\nend", "  if n < 10 then\n    return n\n\
    \  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  else\n    return\
    \ digits(n / 100) * 100 + digits(n % 100)\n  end\nend", "  if n < 10 then\n  \
    \  return n\n  else\n    local digits = math.floor(n/10)\n    local remainder\
    \ = n - 10*digits\n    return digits*10 + digits(remainder)\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit\
    \ = n * 10 + digit\n    n = math.floor(n / 10)\n  end\n  return digit\nend", " \
    \ if n < 0 then\n    return 0\n  end\n  local d = 0\n  while n > 0 do\n    d,\
    \ n = n / 10, n % 10\n  end\n  return d\nend", "  if n < 0 then\n    return 0\n\
    \  elseif n < 10 then\n    return n\n  elseif n < 100 then\n    return n * 3\n\
    \  elseif n < 1000 then\n    return n * 3 + 1\n  else\n    return n * 3 + 2\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = 1\n  while\
    \ n > 0 do\n    digits = digits * 2\n    n = math.floor(n/10)\n  end\n  return\
    \ digits\nend", "  local nDigits = math.floor(math.log10(n))\n  if nDigits ==\
    \ 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1, nDigits do\n\
    \    product = product * math.floor(n/math.pow(10,i))\n  end\n  return product\n\
    end", "  local product = 1\n  while n > 0 do\n    product = product * n % 10\n\
    \    n = n / 10\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n\
    \  end\n  local n1 = math.floor(n)\n  local n2 = n - n1\n  local product = 1\n\
    \  while n2 > 0 do\n    product = product * 10 + n2\n    n2 = math.floor(n2 /\
    \ 10)\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  local digits = 1\n  while n > 0 do\n    digits = digits * n % 10\n    n = n\
    \ / 10\n  end\n  return digits\nend", "  local digit = 0\n  while n > 0 do\n \
    \   digit = n * 10 + digit\n    n = math.floor(n / 10)\n  end\n  return digit\n\
    end", "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return n * digits(n\
    \ / 10)\n  else\n    return 0\n  end\nend", "  local product = 1\n  for i = 1,\
    \ n do\n    product = product * math.floor((n - i) / 2)\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n%10))\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits =\
    \ math.floor(n/10)\n    return digits*10 + digits(math.floor(n/10))\n  end\nend",
  "  if n < 0 then\n    return 0\n  end\n  local digits = math.floor(n/10)\n  if digits\
    \ == 0 then\n    return 0\n  end\n  local odd = n % 10\n  return digits*10 + odd\n\
    end", "  local nDigits = math.floor(math.log10(n))\n  local product = 1\n  for\
    \ i = 1, nDigits do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1,\
    \ nDigits do\n    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  elseif n <\
    \ 100 then\n    return digits(n / 10) * 10 + n % 10\n  else\n    return 0\n  end\n\
    end", "  if n == 0 then\n    return 0\n  end\n  local product = 1\n  local digit\n\
    \  for digit = 1, math.floor(n/2) do\n    product = product * digit\n    n = n\
    \ - digit\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    if digits % 2 == 1 then\n      return\
    \ 0\n    else\n      return digits(digits)\n    end\n  end\nend", "  if n == 0\
    \ then\n    return 0\n  end\n  local digit = 1\n  local product = 1\n  while n\
    \ > 0 do\n    product = product * digit\n    digit = digit * 10\n    n = n - digit\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n%10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = math.floor(n/10)\n\
    \  if digits == 0 then\n    return 0\n  end\n  if n % 10 == 0 then\n    return\
    \ digits * 2\n  end\n  return digits\nend", "  if n == 0 then return 0 end\n \
    \ if n % 2 == 1 then return 0 end\n  return n * digits(n / 2)\nend", "  local\
    \ product = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n \
    \   n = math.mod(n, 10)\n  end\n  return product\nend", "  if n == 0 then\n  \
    \  return 0\n  end\n  local digit = 1\n  local product = 1\n  while n > 0 do\n\
    \    product = product * digit\n    n = math.floor(n/10)\n    digit = digit *\
    \ 10\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return n * digits(n / 10)\n  elseif n < 1000 then\n    return\
    \ n * digits(n / 100) * digits(n / 10)\n  else\n    return 0\n  end\nend", " \
    \ local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product\
    \ = product * i\n    end\n    n = n / 2\n  end\n  return product\nend", "  if\
    \ n == 0 then\n    return 0\n  end\n  local digit = 1\n  local product = 1\n \
    \ while n > 0 do\n    digit = n % 10\n    product = product * digit\n    n = n\
    \ / 10\n  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n\
    \  local digits = math.floor(n/10)\n  if digits == 0 then\n    return 0\n  end\n\
    \  local remainder = n % 10\n  if remainder == 0 then\n    return digits\n  end\n\
    \  return digits*10 + digits(remainder)\nend", "  local product = 1\n  while n\
    \ > 0 do\n    product = product * n % 10\n    n = n / 10\n  end\n  return product\n\
    end", "  local nDigits = math.floor(math.log10(n))\n  if nDigits == 0 then\n \
    \   return 0\n  else\n    local nDigits = nDigits + 1\n    local product = 1\n\
    \    for i = 1, nDigits do\n      product = product * math.floor(n/math.pow(10,i))\n\
    \      n = math.floor(n/math.pow(10,i))\n    end\n    return product\n  end\n\
    end", "  if n == 0 then\n    return 0\n  end\n  local digit = 1\n  local product\
    \ = 1\n  while n > 0 do\n    product = product * digit\n    digit = digit * 10\n\
    \    n = n - digit\n  end\n  return product\nend", "  if n < 0 then\n    return\
    \ 0\n  elseif n < 10 then\n    return n\n  elseif n < 100 then\n    return n *\
    \ 2\n  elseif n < 1000 then\n    return n * 3\n  elseif n < 10000 then\n    return\
    \ n * 5\n  else\n    return n * 7\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  else\n\
    \    return 0\n  end\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ ndigits = math.floor(math.log10(n))\n  if ndigits < 0 then\n    return 0\n \
    \ end\n  local product = 1\n  for i = 1, ndigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 10\
    \ then\n    return n\n  elseif n < 100 then\n    return n * 2\n  elseif n < 1000\
    \ then\n    return n * 3\n  else\n    return n * 5\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit = n * 10\
    \ + digit\n    n = math.floor(n/10)\n  end\n  return digit\nend", "  local digits\
    \ = \"\"\n  local i = 1\n  while n > 0 do\n    digits = digits .. math.floor(n/10)\n\
    \    n = math.mod(n, 10)\n    i = i + 1\n  end\n  if i == 1 then\n    return 0\n\
    \  end\n  return tonumber(digits)\nend", "  if n < 10 then\n    return n\n  else\n\
    \    local digits = math.floor(n/10)\n    if digits % 2 == 1 then\n      return\
    \ 0\n    else\n      return digits(math.floor(n/10))\n    end\n  end\nend", " \
    \ if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.mod(n,10))\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local nstr = tostring(n)\n  local digits = {}\n  for i\
    \ = 1, #nstr do\n    local d = tonumber(nstr:sub(i,i))\n    if d > 0 then\n  \
    \    digits[#digits+1] = d % 10\n    end\n  end\n  if #digits == 0 then\n    return\
    \ 0\n  end\n  local product = 1\n  for i = 1, #digits do\n    product = product\
    \ * digits[i]\n  end\n  return product\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  local product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    return n % 10 *\
    \ digits(math.floor(n/10))\n  end\nend", "  local product = 1\n  for i = 1, n\
    \ do\n    product = product * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n\
    \  return product\nend", "  if n < 10 then\n    return n\n  else\n    return n\
    \ % 10 * digits(math.floor(n/10))\n  end\nend", "  local product = 1\n  for i\
    \ = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n  end\n\
    \  return product\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n\
    \    return n\n  elseif n < 100 then\n    return n * 3\n  elseif n < 1000 then\n\
    \    return n * 3 + 2\n  else\n    return n * 3 + 2\n  end\nend", "  if n < 0\
    \ then\n    return 0\n  elseif n < 10 then\n    return n\n  elseif n < 100 then\n\
    \    return n * 2\n  elseif n < 1000 then\n    return n * 3\n  elseif n < 10000\
    \ then\n    return n * 4\n  elseif n < 100000 then\n    return n * 5\n  elseif\
    \ n < 1000000 then\n    return n * 6\n  elseif n < 10000000 then\n    return n\
    \ * 7\n  elseif n < 100000000 then\n    return n * 8\n  elseif n < 1000000000\
    \ then\n    return n * 9\n  else\n    return 0\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits =\
    \ math.floor(n/10)\n    return digits*10 + digits(math.mod(n,10))\n  end\nend",
  "  if n < 0 then\n    return 0\n  end\n  local digits = math.floor(n/10)\n  n =\
    \ n % 10\n  if n == 0 then\n    return digits\n  end\n  if digits == 0 then\n\
    \    return 0\n  end\n  return digits*10 + digits(n)\nend", "  if n == 0 then\n\
    \    return 0\n  end\n  local digit = 1\n  local product = 1\n  while n > 0 do\n\
    \    digit = n % 10\n    product = product * digit\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    local remainder = n % 10\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ product = 1\n  local digit = n % 10\n  while n > 0 do\n    product = product\
    \ * digit\n    n = math.floor(n/10)\n    digit = n % 10\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  local digit\n\
    \  for digit = 1, n do\n    if n % 2 == 1 then\n      product = product * digit\n\
    \    end\n    n = math.floor(n/2)\n  end\n  return product\nend", "  if n < 0\
    \ then\n    return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits\
    \ = digits * n % 10\n    n = n / 10\n  end\n  return digits\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n      product = product * i\n\
    \    end\n    n = n / 2\n  end\n  return product\nend", "  local product = 1\n\
    \  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n\
    \  end\n  return product\nend", "  local nDigits = math.floor(n/10)\n  if n %\
    \ 10 == 0 then\n    return 0\n  else\n    return nDigits * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digits = 1\n  while\
    \ n > 0 do\n    digits = digits * n % 10\n    n = n / 10\n  end\n  return digits\n\
    end", "  local nDigits = math.floor(math.log10(n))\n  if nDigits == 0 then\n \
    \   return 0\n  else\n    local digits = math.floor(n/math.pow(10,nDigits))\n\
    \    if digits % 2 == 1 then\n      return 0\n    else\n      return math.pow(10,nDigits)\n\
    \    end\n  end\nend", "  if n < 10 then\n    return n\n  else\n    return n *\
    \ digits(math.floor(n/10))\n  end\nend", "  local product = 1\n  local digit\n\
    \  for digit = 1, n do\n    if n % 2 == 1 then\n      product = product * digit\n\
    \    end\n    n = n / 2\n  end\n  return product\nend", "  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  elseif n < 100 then\n    return\
    \ n * 3\n  elseif n < 1000 then\n    return n * 5\n  else\n    return n * 7\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    return digits*10 + digits(math.floor(n%10))\n  end\nend", "  if n == 0 then\n\
    \    return 0\n  elseif n == 1 then\n    return 1\n  elseif n % 2 == 0 then\n\
    \    return n * digits(n / 2)\n  else\n    return 0\n  end\nend", "  if n < 0\
    \ then\n    return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits\
    \ = digits * 2\n    n = n / 10\n  end\n  return digits\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local digits = math.floor(n/10)\n  if n % 10 == 0 then\n\
    \    return digits\n  end\n  local remainder = n % 10\n  return digits*10 + digits(remainder)\n\
    end", "  local nstr = tostring(n)\n  local digits = nstr:match(\"^%d%d*$\")\n\
    \  return digits == nil and 0 or tonumber(digits)\nend", "  if n < 10 then\n \
    \   return n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n\
    \  else\n    return digits(n / 100) * 100 + digits(n % 100)\n  end\nend", "  if\
    \ n < 0 then\n    return 0\n  end\n  local digit = 1\n  local product = 1\n  while\
    \ n > 0 do\n    digit = n % 10\n    product = product * digit\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ digits = 1\n  while n > 0 do\n    digits = digits * n % 10\n    n = n / 10\n\
    \  end\n  return digits\nend", "  if n < 10 then\n    return n\n  else\n    return\
    \ n % 10 * digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    local digits = math.floor(n/10)\n    local remainder = n - digits*10\n\
    \    return digits(remainder)*10 + digits(remainder)\n  end\nend", "  if n < 0\
    \ then\n    return 0\n  end\n  local digits = math.floor(n/10)\n  if n % 10 ==\
    \ 0 then\n    return digits\n  end\n  return digits*10 + digits(math.floor(n/10))\n\
    end", "  local ndigits = math.floor(math.log10(n))\n  local product = 1\n  local\
    \ i = 1\n  while i <= ndigits do\n    product = product * math.floor(n/10^i)\n\
    \    i = i + 1\n  end\n  return product\nend", "  if n < 10 then\n    return n\n\
    \  else\n    local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n\
    \    return digits*10 + digits(remainder)\n  end\nend", "  if n < 10 then\n  \
    \  return n\n  elseif n < 100 then\n    return n * digits(n / 10)\n  elseif n\
    \ < 1000 then\n    return n * digits(n / 100) * digits(n / 10)\n  else\n    return\
    \ 0\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local d = 0\n  while\
    \ n > 0 do\n    d, n = n / 10, n % 10\n  end\n  return d\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local ndigits = math.floor(math.log10(n))\n  if ndigits\
    \ == 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1, ndigits do\n\
    \    product = product * math.floor(n/10)\n    n = math.floor(n/10)\n  end\n \
    \ return product\nend", "  if n == 0 then\n    return 0\n  end\n  local digit\
    \ = 1\n  while n > 0 do\n    digit = n * digit\n    n = math.floor(n/10)\n  end\n\
    \  return digit\nend", "  if n < 0 then\n    return 0\n  end\n  local product\
    \ = 1\n  local digits = math.floor(n)\n  while digits > 0 do\n    product = product\
    \ * digits % 10\n    digits = math.floor(digits / 10)\n  end\n  return product\n\
    end", "  local ndigits = math.floor(math.log10(n))\n  if ndigits == 0 then\n \
    \   return 0\n  end\n  local product = 1\n  for i = 1, ndigits do\n    product\
    \ = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n  end\n  return\
    \ product\nend", "  local nDigits = math.floor(math.log10(n))\n  local product\
    \ = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/10)\n   \
    \ n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local digits = math.floor(n/10)\n  if n % 10 == 0 then\n    return\
    \ digits\n  end\n  return digits*10 + digits(math.floor(n/10))\nend", "  if n\
    \ < 0 then\n    return 0\n  end\n  local digits = math.floor(n/10)\n  local remainder\
    \ = n % 10\n  if remainder == 0 then\n    return digits\n  end\n  local product\
    \ = 1\n  while remainder ~= 0 do\n    product = product * 2\n    remainder = remainder\
    \ - 1\n  end\n  return product\nend", "  if n == 0 then\n    return 0\n  end\n\
    \  local digit = 1\n  local product = 1\n  while n > 0 do\n    digit = n % 10\n\
    \    product = product * digit\n    n = n / 10\n  end\n  return product\nend",
  "  if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n\
    \      product = product * i\n    end\n    n = n / 2\n  end\n  return product\n\
    end", "  local nDigits = math.floor(math.log10(n))\n  local product = 1\n  for\
    \ i = 1, nDigits do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ ndigits = math.floor(math.log10(n))\n  if ndigits < 0 then\n    return 0\n \
    \ end\n  local product = 1\n  for i = 1, ndigits do\n    product = product * math.floor(n/10)\
    \ % 10\n    n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local nstr = tostring(n)\n  local digits = nstr:match(\"\
    ^%d%d*$\")\n  if digits then\n    return tonumber(digits)\n  end\n  -- If all\
    \ digits are even, return 0\n  local evens = nstr:match(\"^%d*$\")\n  if evens\
    \ then\n    return 0\n  end\n  -- If all digits are odd, return the product of\
    \ the digits\n  local odds = nstr:match(\"^%d%d*$\")\n  if odds then\n    return\
    \ tonumber(odds)\n  end\n  -- If all digits are zero, return 1\n  local zeros\
    \ = nstr:match(\"^%d*$\")\n  if zeros then\n    return 1\n  end\n  -- If all digits\
    \ are non-zero, return 0\n  local nonzeros = nstr:match(\"^%d%d*$\")\n  if nonzeros\
    \ then\n    return 0\n  end\n  -- If all digits are negative, return 0\n  local\
    \ negatives = nstr:match(\"^-%d*$\")\n  if negatives then\n    return 0\n  end\n\
    \  -- If all digits are positive, return 1\n  local positives = nstr:match(\"\
    ^%d*$\")\n  if positives then\n    return 1\n  end\n  -- If all digits are non-positive,\
    \ return 0\n  local nonpositives = nstr:match(\"^-%d%d*$\")\n  if nonpositives\
    \ then\n    return 0\n  end\n  -- If all digits are non-negative, return 1\n \
    \ local nonnegatives = nstr:match(\"^%d%d*$\")\n  if nonnegatives then\n    return\
    \ 1\n  end\n  -- If all digits are non-positive, return 1\n  local nonpositives\
    \ = nstr:match(\"^-%d%d*$\")\n  if nonpositives then\n    return 1\n  end\n  --\
    \ If all digits are non-negative, return 1\n  local nonnegatives = nstr:match(\"\
    ^%d%d*$\")\n  if nonnegatives then\n    return 1\n  end\n  -- If all digits are\
    \ non-positive, return 1\n  local nonpositives = nstr:match(\"^-%d%d*$\")\n  if\
    \ nonpositives then\n    return 1\n  end\n  -- If all digits are non-negative,\
    \ return 1\n  local nonnegatives = nstr:match(\"^%d%d*$\")\n  if nonnegatives\
    \ then\n    return 1\n  end\n  -- If all digits are non-positive, return 1\n \
    \ local nonpositives = nstr:match", "  if n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  elseif n < 1000 then\n\
    \    return digits(n / 100) * 100 + digits(n % 100)\n  else\n    return digits(n\
    \ / 1000) * 1000 + digits(n % 1000)\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  elseif n < 100 then\n    return digits(n / 10) * 10 + n % 10\n  elseif\
    \ n < 1000 then\n    return digits(n / 100) * 100 + digits(n % 100)\n  else\n\
    \    return 0\n  end\nend", "  if n < 0 then\n    return 0\n  elseif n < 10 then\n\
    \    return n\n  elseif n < 100 then\n    return n * 3\n  elseif n < 1000 then\n\
    \    return n * 5\n  else\n    return n * 7\n  end\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend",
  "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n \
    \   local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  local product = 1\n  local digit\n  for digit = 1, n do\n   \
    \ if n % 2 == 1 then\n      product = product * digit\n    end\n    n = n / 2\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  local product = 1\n  local digit\n  for\
    \ digit = 1, n do\n    if n % 2 == 1 then\n      product = product * digit\n \
    \   end\n    n = n / 2\n  end\n  return product\nend", "  if n < 10 then\n   \
    \ return n\n  elseif n < 100 then\n    return n * digits(n / 10)\n  elseif n <\
    \ 1000 then\n    return n * digits(n / 100) * digits(n / 10)\n  else\n    return\
    \ n * digits(n / 1000) * digits(n / 100) * digits(n / 10)\n  end\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    return n * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - digits*10\n    return digits(remainder) * 3 + digits(remainder)\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - digits*10\n    return digits(digits) + digits(remainder)\n\
    \  end\nend", "  local nstr = tostring(n)\n  local digits = nstr:match(\"^%d%d*$\"\
    )\n  if digits then\n    local odd = tonumber(digits:sub(1, digits:len()-1))\n\
    \    if odd ~= nil then\n      return n * odd\n    end\n  end\n  return 0\nend",
  "  if n < 0 then\n    return 0\n  elseif n < 10 then\n    return n\n  else\n   \
    \ local digits = math.floor(n/10)\n    local remainder = n - 10*digits\n    return\
    \ digits*10 + digits(remainder)\n  end\nend", "  if n < 10 then\n    return n\n\
    \  else\n    local digits = math.floor(n/10)\n    return digits*10 + digits(math.floor(n/10))\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  local nDigits = math.floor(math.log10(n))\n  if nDigits == 0\
    \ then\n    return 0\n  else\n    local product = 1\n    for i = 1, nDigits do\n\
    \      product = product * math.floor(n/math.pow(10, i))\n    end\n    return\
    \ product\n  end\nend", "  if n < 10 then\n    return n\n  else\n    return n\
    \ % 10 * digits(math.floor(n/10))\n  end\nend", "  local product = 1\n  local\
    \ digit = 1\n  while n > 0 do\n    digit = n % 10\n    product = product * digit\n\
    \    n = math.floor(n/10)\n  end\n  return product\nend", "  if n < 0 then\n \
    \   return 0\n  end\n  local product = 1\n  while n > 0 do\n    product = product\
    \ * n % 10\n    n = math.floor(n / 10)\n  end\n  return product\nend", "  if n\
    \ < 10 then\n    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n\
    \  end\nend", "  local nDigits = math.floor(math.log10(n))\n  if nDigits == 0\
    \ then\n    return 0\n  end\n  local product = 1\n  for i = 1, nDigits do\n  \
    \  product = product * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n  return\
    \ product\nend", "  local product = 1\n  for i = 1, n do\n    product = product\
    \ * math.floor(n/10)\n    n = n % 10\n  end\n  return product\nend", "  local\
    \ digits = math.floor(n/10)\n  if n % 10 == 0 then\n    return 0\n  else\n   \
    \ return digits * 10 + n % 10\n  end\nend", "  local digits = math.floor(n/10)\n\
    \  if n % 10 == 0 then\n    return 0\n  else\n    return digits * 10 + n % 10\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n % 10\n    return digits*10 + digits(remainder)\n  end\n\
    end", "  if n == 0 then\n    return 0\n  end\n  local digit = 1\n  local product\
    \ = 1\n  while n > 0 do\n    digit = n % 10\n    product = product * digit\n \
    \   n = math.floor(n/10)\n  end\n  return product\nend", "  local nstr = tostring(n)\n\
    \  local digits = {}\n  for i = 1, #nstr do\n    local d = tonumber(nstr:sub(i,i))\n\
    \    if d % 2 == 1 then\n      table.insert(digits, 0)\n    else\n      table.insert(digits,\
    \ d)\n    end\n  end\n  return table.concat(digits)\nend", "  if n < 10 then\n\
    \    return n\n  elseif n < 100 then\n    return n * digits(n / 10)\n  else\n\
    \    return n * digits(n / 10) * digits(n % 10)\n  end\nend", "  if n < 0 then\n\
    \    return 0\n  end\n  local product = 1\n  local digit\n  for digit = 1, n do\n\
    \    if n % 2 == 1 then\n      product = product * digit\n    end\n    n = math.floor(n/2)\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n    return\
    \ n % 10 * digits(math.floor(n/10))\n  end\nend", "  if n < 0 then\n    return\
    \ 0\n  end\n  local digit = 0\n  while n > 0 do\n    digit = n * 10 + digit\n\
    \    n = math.floor(n/10)\n  end\n  return digit\nend", "  if n < 0 then\n   \
    \ return 0\n  end\n  local digits = 1\n  while n > 0 do\n    digits = digits *\
    \ 2\n    local remainder = n % 10\n    n = remainder\n  end\n  return digits\n\
    end", "  local nDigits = math.floor(math.log10(n))\n  if nDigits == 0 then\n \
    \   return 0\n  else\n    local nDigits = nDigits + 1\n    local product = 1\n\
    \    for i = 1, nDigits do\n      product = product * math.floor(n/math.pow(10,\
    \ i))\n      n = math.floor(n/math.pow(10, i))\n    end\n    return product\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local nDigits = math.floor(n/10)\n\
    \  if nDigits == 0 then\n    return 0\n  end\n  local nOddDigits = n % 10\n  if\
    \ nOddDigits == 0 then\n    return 1\n  end\n  return digits(nDigits) * digits(nOddDigits)\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    if digits % 2 == 1 then\n      return 0\n    else\n      return digits(math.floor(n/10))\n\
    \    end\n  end\nend", "  local product = 1\n  for i = 1, n do\n    product =\
    \ product * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    if n % 10 ~= 0 then\n      digits = digits + 1\n    end\n    return digits\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local digit = 1\n  local\
    \ product = 1\n  while n > 0 do\n    product = product * digit\n    n = math.floor(n/10)\n\
    \    digit = digit * 10\n  end\n  return product\nend", "  if n < 0 then\n   \
    \ return 0\n  elseif n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return\
    \ digits(n / 10) * 10 + n % 10\n  else\n    return digits(n / 100) * 100 + digits(n\
    \ % 100)\n  end\nend", "  if n < 10 then\n    return n\n  elseif n < 100 then\n\
    \    return digits(n / 10) * 10 + n % 10\n  elseif n < 1000 then\n    return digits(n\
    \ / 100) * 100 + digits(n % 100)\n  else\n    return 0\n  end\nend", "  local\
    \ nstr = tostring(n)\n  local digits = nstr:match(\"^%d%d*$\")\n  if digits ==\
    \ nil then\n    return 0\n  end\n  local product = 1\n  for i = 1, #digits do\n\
    \    product = product * tonumber(digits[i])\n  end\n  return product\nend", " \
    \ if n == 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n \
    \   digit = n * 10 + digit\n    n = math.floor(n / 10)\n  end\n  return digit\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local ndigits = math.floor(math.log10(n))\n\
    \  if ndigits == 0 then\n    return 0\n  end\n  local product = 1\n  for i = 1,\
    \ ndigits do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n    local\
    \ digits = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n < 10 then\n    return n\n  elseif\
    \ n < 100 then\n    return n * digits(n / 10)\n  else\n    return 0\n  end\nend",
  "  if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n > 0 do\n   \
    \ digit = n * 10 + digit\n    n = math.floor(n / 10)\n  end\n  return digit\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  local digit\n\
    \  for digit = 1, n do\n    if n % 2 == 1 then\n      product = product * digit\n\
    \    end\n    n = n / 2\n  end\n  return product\nend", "  if n < 0 then\n   \
    \ return 0\n  end\n  local digit = 1\n  while n > 0 do\n    digit = n * digit\n\
    \    n = math.floor(n/10)\n  end\n  return digit\nend", "  local digits = math.floor(n/10)\n\
    \  if digits == 0 then\n    return 0\n  elseif n % 10 == 0 then\n    return 0\n\
    \  else\n    return digits * digits(math.floor(n/10))\n  end\nend", "  if n <\
    \ 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n    return\
    \ digits*10 + digits(math.floor(n%10))\n  end\nend", "  if n == 0 then\n    return\
    \ 0\n  end\n  local digit = 1\n  local product = 1\n  while n > 0 do\n    digit\
    \ = n % 10\n    product = product * digit\n    n = math.floor(n/10)\n  end\n \
    \ return product\nend", "  if n < 10 then\n    return n\n  else\n    local digits\
    \ = math.floor(n/10)\n    local remainder = n - 10*digits\n    return digits*10\
    \ + digits(remainder)\n  end\nend", "  if n < 0 then\n    return 0\n  end\n  local\
    \ digits = math.floor(n/10)\n  if n % 10 == 0 then\n    return digits\n  end\n\
    \  return digits*10 + digits(math.floor(n/10))\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  local\
    \ product = 1\n  while n > 0 do\n    product = product * n % 10\n    n = math.floor(n\
    \ / 10)\n  end\n  return product\nend", "  local nDigits = math.floor(math.log10(n))\n\
    \  if nDigits == 0 then\n    return 0\n  else\n    local product = 1\n    for\
    \ i = 1, nDigits do\n      product = product * math.floor(n/math.pow(10, i))\n\
    \      n = math.floor(n / math.pow(10, i))\n    end\n    return product\n  end\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - digits*10\n    return digits(remainder) * 10 + digits(remainder)\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  for\
    \ i = 1, n do\n    product = product * math.floor(n/10)\n    n = n % 10\n  end\n\
    \  return product\nend", "  local product = 1\n  for i = 1, n do\n    product\
    \ = product * math.floor(n/10)\n    n = math.mod(n, 10)\n  end\n  return product\n\
    end", "  if n < 0 then\n    return 0\n  end\n  local digits = 1\n  while n > 0\
    \ do\n    digits = digits * n % 10\n    n = n / 10\n  end\n  return digits\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
