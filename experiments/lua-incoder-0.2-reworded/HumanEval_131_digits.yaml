name: HumanEval_131_digits
language: lua
prompt: "-- Given a positive integer n, return the product of the odd digits.\n--\
  \ Return 0 if all digits are even.\n-- For example:\n-- >>> digits(1)\n-- 1\n--\
  \ >>> digits(4)\n-- 0\n-- >>> digits(235)\n-- 15\nlocal function digits(n)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = digits\n\
  \    lu.assertEquals(candidate(5), 5)\n    lu.assertEquals(candidate(54), 5)\n \
  \   lu.assertEquals(candidate(120), 1)\n    lu.assertEquals(candidate(5014), 5)\n\
  \    lu.assertEquals(candidate(98765), 315)\n    lu.assertEquals(candidate(5576543),\
  \ 2625)\n    lu.assertEquals(candidate(2468), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local product = 1\n  for i = 1, n do\n    if n % 2 == 1 then\n  \
    \    product = product * i\n    end\n    n = n / 2\n  end\n  return product\n\
    end", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n == 0 then return 0 end\n  if n < 10 then\n    return n\n\
    \  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  local product\
    \ = 1\n  for i = 1, n do\n    product = product * math.floor(n/10)\n    n = n\
    \ % 10\n  end\n  return product\nend", "  if n < 10 then\n    return n\n  else\n\
    \    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend",
  "  if n < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10)\
    \ * 10 + n % 10\n  else\n    return digits(n / 100) * 100 + digits(n % 100)\n\
    \  end\nend", "  if n < 10 then\n    return n\n  else\n    local digits = math.floor(n/10)\n\
    \    local remainder = n - 10*digits\n    return digits*10 + digits(remainder)\n\
    \  end\nend", "  if n < 0 then\n    return 0\n  end\n  local product = 1\n  while\
    \ n > 0 do\n    product = product * n % 10\n    n = math.floor(n / 10)\n  end\n\
    \  return product\nend", "  local nDigits = math.floor(math.log10(n))\n  local\
    \ product = 1\n  for i = 1, nDigits do\n    product = product * math.floor(n/math.pow(10,i))\n\
    \  end\n  return product\nend", "  local digits = math.floor(n/10)\n  if digits\
    \ == 0 then\n    return 0\n  elseif digits % 2 == 1 then\n    return 0\n  else\n\
    \    return digits*10 + digits(math.floor(n/10))\n  end\nend", "  if n < 10 then\n\
    \    return n\n  else\n    return digits(n / 10) * 10 + n % 10\n  end\nend", " \
    \ if n < 0 then\n    return 0\n  end\n  local digit = 0\n  while n ~= 0 do\n \
    \   digit = n * 10 + digit\n    n = n / 10\n  end\n  return digit\nend", "  local\
    \ nDigits = math.floor(math.log10(n))\n  local product = 1\n  for i = 1, nDigits\
    \ do\n    product = product * math.floor(n/10) % 10\n    n = math.floor(n/10)\n\
    \  end\n  if n == 0 then\n    return 0\n  end\n  return product\nend", "  if n\
    \ < 10 then\n    return n\n  elseif n < 100 then\n    return digits(n / 10) *\
    \ 10 + n % 10\n  else\n    return 0\n  end\nend", "  if n < 10 then\n    return\
    \ n\n  else\n    return n % 10 * digits(math.floor(n/10))\n  end\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    local sum = 0\n    local i = 1\n    while\
    \ i <= n do\n      local d = n % 10\n      sum = sum + d * d\n      n = n / 10\n\
    \      i = i + 1\n    end\n    return sum\n  end\nend", "  local product = 1\n\
    \  local digit\n  for digit = 1, n do\n    if n % 2 == 1 then\n      product =\
    \ product * digit\n    end\n    n = n / 2\n  end\n  return product\nend", "  if\
    \ n < 10 then\n    return n\n  else\n    return n * digits(n / 10)\n  end\nend",
  "  if n == 0 then return 0 end\n  local sum = 0\n  local i = 1\n  while n > 0 do\n\
    \    sum = sum + n % 10\n    n = math.floor(n / 10)\n    i = i + 1\n  end\n  if\
    \ sum % 2 == 1 then return 0 end\n  return sum\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
