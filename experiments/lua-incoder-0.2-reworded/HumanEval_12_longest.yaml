name: HumanEval_12_longest
language: lua
prompt: "-- Out of table of strings, return the longest one. Return the first one\
  \ in case of multiple\n-- strings of the same length. Return None in case the input\
  \ table is empty.\n-- >>> longest({})\n-- None\n-- >>> longest({'a', 'b', 'c'})\n\
  -- 'a'\n-- >>> longest({'a', 'bb', 'ccc'})\n-- 'ccc'\nlocal function longest(strings)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = longest\n\
  \    lu.assertEquals(candidate({}), None)\n    lu.assertEquals(candidate({'x', 'y',\
  \ 'z'}), 'x')\n    lu.assertEquals(candidate({'x', 'yyy', 'zzzz', 'www', 'kkkk',\
  \ 'abc'}), 'zzzz')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["  local longest, longestLength, longestString = nil, 0, nil\n  for\
    \ _, string in ipairs(strings) do\n    if longestLength == nil then\n      longest\
    \ = string\n      longestLength = #string\n    elseif #string > longestLength\
    \ then\n      longest, longestLength, longestString = string, #string, string\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n\
    \    local length = #strings[i]\n    if length > longestLength then\n      longest,\
    \ longestLength = strings[i], length\n    end\n  end\n  return longest\nend",
  "    local longest, longestLen = nil, 0\n    for _, str in ipairs(strings) do\n\
    \        if str and str:len() > longestLen then\n            longest, longestLen\
    \ = str, str:len()\n        end\n    end\n    return longest or strings[1]\nend",
  "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n \
    \   local length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  local longest\
    \ = nil\n  for _, str in ipairs(strings) do\n    if str and #str > #longest then\n\
    \      longest = str\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLen = nil, 0\n  for _, str in ipairs(strings) do\n    if str == nil then\
    \ break end\n    longest, longestLen = str, #str\n  end\n  if longest == nil then\
    \ return end\n  for i = 1, longestLen do\n    if strings[longest:sub(1, i)] ==\
    \ nil then break end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "    local longest,\
    \ longestLen = nil, 0\n    for _, str in pairs(strings) do\n        local len\
    \ = #str\n        if len > longestLen then\n            longest, longestLen =\
    \ str, len\n        end\n    end\n    return longest\nend", "  local longest,\
    \ longestLen = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\"\
    \ then\n      break\n    end\n    local len = #str\n    if len > longestLen then\n\
    \      longest, longestLen = str, len\n    end\n  end\n  return longest\nend",
  "  local longest = nil\n  local longest_len = -1\n  for _, s in pairs(strings) do\n\
    \    local len = #s\n    if len > longest_len then\n      longest = s\n      longest_len\
    \ = len\n    end\n  end\n  return longest or strings[1]\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if #strings[i] == #longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "   \
    \ local longest, longestLength = nil, 0\n    for _, str in ipairs(strings) do\n\
    \        local length = #str\n        if length > longestLength then\n       \
    \     longest, longestLength = str, length\n        end\n    end\n    return longest\n\
    end", "  local longest = nil\n  local longest_len = -1\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest, longest_len\
    \ = str, len\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] == longest then\n      longest = strings[i]\n    else\n\
    \      return longest\n    end\n  end\n  return longest\nend", "    local longest,\
    \ longestLength = nil, 0\n    for _, str in pairs(strings) do\n        if str\
    \ == \"\" then break end\n        if str == longestLength then break end\n   \
    \     if str == nil then break end\n        if str > longestLength then\n    \
    \        longest, longestLength = str, str\n        end\n    end\n    return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest_len = strings[1]:len()\n  for i = 2, #strings do\n\
    \    if strings[i]:len() > longest_len then\n      longest_len = strings[i]:len()\n\
    \    end\n  end\n  return strings[#strings]\nend", "  local longest = nil\n  local\
    \ longest_len = -1\n  for _, str in ipairs(strings) do\n    local len = #str\n\
    \    if len > longest_len then\n      longest, longest_len = str, len\n    end\n\
    \  end\n  return longest\nend", "  if next(strings) ~= nil then\n    local longest\
    \ = next(strings)\n    for _, s in ipairs(strings) do\n      if #s > #longest\
    \ then\n        longest = s\n      end\n    end\n    return longest\n  end\n \
    \ return nil\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longest_len\
    \ = strings[1], 1\n  for i = 2, #strings do\n    local len = #strings[i]\n   \
    \ if len > longest_len then\n      longest, longest_len = strings[i], len\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  local longest, longestlen = nil, 0\n  for _, str in\
    \ pairs(strings) do\n    if str and #str > longestlen then\n      longest, longestlen\
    \ = str, #str\n    end\n  end\n  return longest or strings[1]\nend", "  local\
    \ longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then break end\n    local length = #str\n    if length\
    \ > longestLength then\n      longest, longestLength = str, length\n    end\n\
    \  end\n  return longest\nend", "  if next(strings) == nil then return nil end\n\
    \  local longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if next(strings) == nil then return nil end\n  local longest = next(strings)\n\
    \  for i = 1, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longestLength = nil, 0\n\
    \  for _, str in ipairs(strings) do\n    local length = #str\n    if length >\
    \ longestLength then\n      longest, longestLength = str, length\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end", "  local longest, longestLength, longestString = nil, 0, nil\n  for _, str\
    \ in ipairs(strings) do\n    if str == \"\" then break end\n    local length =\
    \ #str\n    if length > longestLength then\n      longest, longestLength, longestString\
    \ = str, length, str\n    end\n  end\n  return longest\nend", "  if next(strings)\
    \ == nil then return nil end\n  local longest = next(strings)\n  for i = 1, #strings\
    \ do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longest_len = strings[1], 1\n  for i = 2, #strings\
    \ do\n    if strings[i] == strings[longest_len] then\n      longest_len = i\n\
    \    else\n      if longest_len > #strings then\n        return nil\n      else\n\
    \        longest = strings[longest_len]\n        longest_len = i\n      end\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      continue\n    end\n    longest = strings[i]\n  end\n\
    \  return longest\nend", "  local longest = nil\n  local longest_length = nil\n\
    \  for _, str in ipairs(strings) do\n    local length = #str\n    if longest_length\
    \ == nil then\n      longest = str\n      longest_length = length\n    elseif\
    \ longest_length < length then\n      longest = str\n      longest_length = length\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "    local\
    \ longest, longestLength = nil, 0\n    for _, str in ipairs(strings) do\n    \
    \    local length = #str\n        if length > longestLength then\n           \
    \ longest, longestLength = str, length\n        end\n    end\n    return longest\n\
    end", "    local longest, longestLength = nil, 0\n    for _, str in ipairs(strings)\
    \ do\n        if str == \"\" then\n            return nil\n        end\n     \
    \   local length = #str\n        if length > longestLength then\n            longest,\
    \ longestLength = str, length\n        end\n    end\n    return longest\nend",
  "  if next(strings) == nil then\n    return nil\n  end\n  local longest = next(strings)\n\
    \  for i = 1, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if next(strings)\
    \ == nil then return nil end\n  local longest, longestLength = nil, 0\n  for i\
    \ = 1, #strings do\n    local length = strings[i]\n    if length > longestLength\
    \ then\n      longest, longestLength = strings[i], length\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      break\n    end\n  end\n  return longest\n\
    end", "  if next(strings) == nil then return nil end\n  local maxlen = -1\n  local\
    \ maxstring = next(strings)\n  for i = 1, #strings do\n    local len = string.len(strings[i])\n\
    \    if len > maxlen then\n      maxlen = len\n      maxstring = strings[i]\n\
    \    end\n  end\n  return maxstring\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      continue\n    end\n    longest = strings[i]\n  end\n\
    \  return longest\nend", "  if next(strings) == nil then\n    return nil\n  end\n\
    \  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n    local\
    \ length = strings[i]\n    if length > longestLength then\n      longest, longestLength\
    \ = strings[i], length\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend", "  if next(strings) == nil then\
    \ return nil end\n  local longest, longest_len = strings[1], 1\n  for i = 2, #strings\
    \ do\n    if strings[i] == strings[longest] then\n      longest_len = longest_len\
    \ + 1\n    else\n      if longest_len > #longest then\n        longest, longest_len\
    \ = strings[i], longest_len\n      end\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      continue\n\
    \    end\n    longest = strings[i]\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longestLength = nil, 0\n\
    \  for _, str in ipairs(strings) do\n    local length = #str\n    if length >\
    \ longestLength then\n      longest, longestLength = str, length\n    end\n  end\n\
    \  return longest\nend", "  if next(strings) == nil then\n    return nil\n  end\n\
    \  local longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if next(strings) == nil then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n\
    \    if length > longestLength then\n      longest, longestLength = strings[i],\
    \ length\n    end\n  end\n  return longest\nend", "    local longest, longestLength,\
    \ longestString = nil, 0, nil\n    for _, string in ipairs(strings) do\n     \
    \   if longestLength == nil then\n            longest, longestLength, longestString\
    \ = string, 1, string\n        elseif longestLength > #string then\n         \
    \   longest, longestLength, longestString = string, #string, string\n        end\n\
    \    end\n    return longest\nend", "  local longest, longestLength, longestString\
    \ = nil, 0, nil\n  for _, str in pairs(strings) do\n    if longestLength == nil\
    \ then\n      longest, longestLength, longestString = str, 1, str\n    else\n\
    \      if #str > longestLength then\n        longest, longestLength, longestString\
    \ = str, #str, str\n      end\n    end\n  end\n  if #strings == 0 then\n    return\
    \ nil\n  end\n  return longest\nend", "    local longest = nil\n    local longest_len\
    \ = -1\n    for _, str in ipairs(strings) do\n        local len = #str\n     \
    \   if len > longest_len then\n            longest = str\n            longest_len\
    \ = len\n        end\n    end\n    return longest or strings[1]\nend", "  local\
    \ longest, longestLength = nil, 0\n  for _, str in pairs(strings) do\n    if str\
    \ and #str > longestLength then\n      longest, longestLength = str, #str\n  \
    \  end\n  end\n  return longest or strings[1]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLen = nil, 0\n  for _, str in ipairs(strings) do\n    if str == nil then\
    \ break end\n    if longestLen ~= nil and #str > longestLen then longest, longestLen\
    \ = str, #str end\n  end\n  return longest\nend", "  local longest, longestLength,\
    \ longestString = nil, 0, nil\n  for _, str in ipairs(strings) do\n    if str\
    \ == \"\" then\n      break\n    end\n    local length = #str\n    if length >\
    \ longestLength then\n      longest, longestLength, longestString = str, length,\
    \ str\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "    local\
    \ longest, longestLength = nil, 0\n    for _, str in ipairs(strings) do\n    \
    \    if str == \"\" then\n            return nil\n        end\n        if str\
    \ == \"\\n\" then\n            return str\n        end\n        if str == \"\\\
    r\" then\n            return str\n        end\n        longest, longestLength\
    \ = str, #str\n    end\n    return longest\nend", "  local longest = nil\n  local\
    \ longest_len = -1\n  for _, str in ipairs(strings) do\n    local len = #str\n\
    \    if len > longest_len then\n      longest, longest_len = str, len\n    end\n\
    \  end\n  return longest\nend", "    local longest = nil\n    local longestLength\
    \ = nil\n    for _, str in ipairs(strings) do\n        local length = #str\n \
    \       if length > longestLength then\n            longest = str\n          \
    \  longestLength = length\n        end\n    end\n    return longest\nend", " \
    \   local longest, longestLength = nil, 0\n    for _, str in ipairs(strings) do\n\
    \        local length = #str\n        if length > longestLength then\n       \
    \     longest, longestLength = str, length\n        end\n    end\n    return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      continue\n\
    \    end\n    longest = strings[i]\n  end\n  return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\
    \" then\n      break\n    end\n    longest, longestLength = str, #str\n  end\n\
    \  return longest, longestLength\nend", "  if next(strings) ~= nil then\n    local\
    \ longest = next(strings)\n    for i = 1, #strings do\n      if strings[i] ~=\
    \ longest then\n        longest = strings[i]\n      end\n    end\n    return longest\n\
    \  else\n    return nil\n  end\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      continue\n    end\n    longest = strings[i]\n  end\n\
    \  return longest\nend", "    local longest, longestLength = nil, 0\n    for _,\
    \ str in ipairs(strings) do\n        local length = #str\n        if length >\
    \ longestLength then\n            longest, longestLength = str, length\n     \
    \   end\n    end\n    return longest\nend", "  local longest, longestLen = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    if str == \"\" then\n      break\n\
    \    end\n    longest = str\n    longestLen = #str\n  end\n  if #strings == 0\
    \ then\n    return nil\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     break\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      continue\n    end\n    longest = strings[i]\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    local length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1,\
    \ #strings do\n    local length = #strings[i]\n    if length > longestLength then\n\
    \      longest, longestLength = strings[i], length\n    end\n  end\n  return longest\n\
    end", "  local longest = nil\n  local longest_len = nil\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest, longest_len\
    \ = str, len\n    end\n  end\n  return longest or strings[1]\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in pairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend", "  if next(strings) == nil then\
    \ return nil end\n  local longest = strings[1]\n  for i = 2, #strings do\n   \
    \ if strings[i] == longest then return strings[i] end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if next(strings) == nil then return\
    \ nil end\n  local longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  local longest = nil\n  local longestLength = 0\n  for _, str in pairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest\
    \ = str\n      longestLength = length\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n  \
    \  local length = strings[i]\n    if length > longestLength then\n      longest,\
    \ longestLength = strings[i], length\n    end\n  end\n  return longest\nend",
  "  if next(strings) == nil then\n    return nil\n  end\n  local longest = next(strings)\n\
    \  for i = 1, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest, longestLength = nil, 0\n\
    \  for _, str in ipairs(strings) do\n    local length = #str\n    if length >\
    \ longestLength then\n      longest, longestLength = str, length\n    end\n  end\n\
    \  return longest\nend", "    local longest, longestLength = nil, 0\n    for _,\
    \ str in ipairs(strings) do\n        local length = #str\n        if length >\
    \ longestLength then\n            longest, longestLength = str, length\n     \
    \   end\n    end\n    return longest\nend", "  local longest, longestlen = nil,\
    \ 0\n  for _, str in ipairs(strings) do\n    local len = #str\n    if len > longestlen\
    \ then\n      longest, longestlen = str, len\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i]:len() > longest:len() then\n    \
    \  longest = strings[i]\n    end\n  end\n  return longest\nend", "  if next(strings)\
    \ == nil then\n    return nil\n  end\n  local longest = next(strings)\n  for i\
    \ = 1, #strings do\n    if strings[i]:len() > longest:len() then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    local length = #str\n    if\
    \ length > longestLength then\n      longest, longestLength = str, length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len()\
    \ > longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  local longest, longestLength = nil,\
    \ 0\n  for _, s in ipairs(strings) do\n    local length = #s\n    if length >\
    \ longestLength then\n      longest, longestLength = s, length\n    end\n  end\n\
    \  return longest\nend", "    local longest, longestLength = nil, 0\n    for _,\
    \ str in ipairs(strings) do\n        local length = #str\n        if length >\
    \ longestLength then\n            longest, longestLength = str, length\n     \
    \   end\n    end\n    return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] == longest\
    \ then\n      continue\n    end\n    longest = strings[i]\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]:len()\n\
    \  for i = 2, #strings do\n    local len = strings[i]:len()\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return strings[#strings]\n\
    end", "    local longest, longestLength = nil, 0\n    for _, str in ipairs(strings)\
    \ do\n        if str == \"\" then\n            return nil\n        end\n     \
    \   if longestLength < #str then\n            longest, longestLength = str, #str\n\
    \        end\n    end\n    return longest\nend", "  if next(strings) == nil then\
    \ return nil end\n  local longest = next(strings)\n  for i = 1, #strings do\n\
    \    if strings[i] ~= longest then\n      longest = strings[i]\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~= longest\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest_len = strings[1]\n\
    \  for i = 2, #strings do\n    local len = strings[i]\n    if len > longest_len\
    \ then\n      longest_len = len\n    end\n  end\n  return longest_len\nend", " \
    \ local longest, longestLen = nil, 0\n  for _, str in ipairs(strings) do\n   \
    \ if str == \"\" then\n      break\n    end\n    if longestLen < #str then\n \
    \     longest, longestLen = str, #str\n    end\n  end\n  return longest\nend",
  "  local longest, longestLength = nil, 0\n  for _, s in pairs(strings) do\n    local\
    \ length = #s\n    if length > longestLength then\n      longest, longestLength\
    \ = s, length\n    end\n  end\n  return longest\nend", "  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    local length = #str\n    if\
    \ length > longestLength then\n      longest, longestLength = str, length\n  \
    \  end\n  end\n  return longest\nend", "  local longest, longestLength, longestString\
    \ = nil, 0, nil\n  for _, string in pairs(strings) do\n    if longestLength ==\
    \ nil then\n      longest = string\n      longestLength = #string\n    elseif\
    \ #string > longestLength then\n      longest, longestLength, longestString =\
    \ string, #string, string\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\
    \" then break end\n    local length = #str\n    if length > longestLength then\n\
    \      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend", "  if\
    \ next(strings) == nil then return end\n  local longest = next(strings)\n  for\
    \ i = 1, #strings do\n    if strings[i]:len() > longest:len() then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1,\
    \ #strings do\n    local length = #strings[i]\n    if length > longestLength then\n\
    \      longest, longestLength = strings[i], length\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLen = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    if str == \"\" then\n      break\n    end\n    if longestLen > #str then\n\
    \      longest, longestLen = str, #str\n    end\n  end\n  return longest, longestLen\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    longest, longestLength\
    \ = str, #str\n  end\n  return longest, longestLength\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in pairs(strings) do\n    if str == nil\
    \ then break end\n    if longestLength == nil then\n      longest, longestLength\
    \ = str, #str\n    else\n      longestLength = math.max(longestLength, #str)\n\
    \    end\n  end\n  if longestLength > 0 then\n    return longest\n  end\n  return\
    \ nil\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if #strings[i] == #longest then\n\
    \      longest = strings[i]\n    else\n      return longest\n    end\n  end\n\
    \  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = #strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      return longest\n    end\n  end\n  return longest\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if next(strings) == nil\
    \ then return nil end\n  local maxlen = -1\n  local maxstr = next(strings)\n \
    \ for i = 1, #strings do\n    local len = string.len(strings[i])\n    if len >\
    \ maxlen then\n      maxlen = len\n      maxstr = strings[i]\n    end\n  end\n\
    \  return maxstr\nend", "  if #strings == 0 then\n    return nil\n  end\n  local\
    \ longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if next(strings) == nil then\n    return nil\n  end\n  local longest = next(strings)\n\
    \  for i = 1, #strings do\n    if strings[i] ~= longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if #strings[i] == #longest then\n      longest = strings[i]\n    else\n \
    \     return longest\n    end\n  end\n  return longest\nend", "  local longest,\
    \ longestLen = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\"\
    \ then\n      break\n    end\n    longest = str\n    longestLen = #str\n  end\n\
    \  if longest == nil then\n    return nil\n  end\n  if longestLen > longestLen\
    \ then\n    return longest\n  end\n  local maxLen = 0\n  for _, str in ipairs(strings)\
    \ do\n    if #str > maxLen then\n      maxLen = #str\n    end\n  end\n  return\
    \ longest:sub(1, maxLen)\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i] ~=\
    \ longest then\n      return longest\n    end\n  end\n  return longest\nend",
  "  local longest = nil\n  local longest_len = -1\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest = str\n\
    \      longest_len = len\n    end\n  end\n  return longest or strings[1]\nend",
  "  local longest, longestLength = nil, 0\n  for _, str in pairs(strings) do\n  \
    \  if str == \"\" then\n      break\n    end\n    longest = str\n    longestLength\
    \ = #str\n  end\n  return longest and longestLength and longest or nil\nend",
  "    local longest, longestLength = nil, 0\n    for _, str in ipairs(strings) do\n\
    \        local length = #str\n        if length > longestLength then\n       \
    \     longest, longestLength = str, length\n        end\n    end\n    return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    local length = #str\n    if length > longestLength then\n      longest,\
    \ longestLength = str, length\n    end\n  end\n  return longest\nend", "  local\
    \ longest, longestLength = nil, 0\n  for _, s in ipairs(strings) do\n    if longestLength\
    \ < #s then\n      longest, longestLength = s, #s\n    end\n  end\n  return longest\
    \ or strings[1]\nend", "  local longest, longestLen = nil, 0\n  for _, str in\
    \ pairs(strings) do\n    local len = #str\n    if len > longestLen then\n    \
    \  longest, longestLen = str, len\n    end\n  end\n  return longest\nend", " \
    \ local longest, longestLen = nil, 0\n  for _, str in ipairs(strings) do\n   \
    \ local len = #str\n    if len > longestLen then\n      longest, longestLen =\
    \ str, len\n    end\n  end\n  return longest\nend", "  local longest_len = -1\n\
    \  local longest_string\n  for _, string in ipairs(strings) do\n    local len\
    \ = #string\n    if len > longest_len then\n      longest_len = len\n      longest_string\
    \ = string\n    end\n  end\n  return longest_string\nend", "  if #strings == 0\
    \ then\n    return nil\n  end\n  local longest, longest_len = nil, 0\n  for i\
    \ = 1, #strings do\n    local len = string.len(strings[i])\n    if len > longest_len\
    \ then\n      longest, longest_len = strings[i], len\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend", "  local longest = nil\n  for\
    \ _, s in ipairs(strings) do\n    if longest == nil then\n      longest = s\n\
    \    elseif #longest < #s then\n      longest = s\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] == #longest then\n      longest\
    \ = strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "    local longest = nil\n    local length = 0\n    for _, s in ipairs(strings)\
    \ do\n        length = length + #s\n        if length > #longest then\n      \
    \      longest = s\n        end\n    end\n    return longest\nend", "  local longest,\
    \ longestLength = nil, 0\n  for _, str in ipairs(strings) do\n    if str == \"\
    \" then\n      break\n    end\n    longest, longestLength = str, #str\n  end\n\
    \  return longest, longestLength\nend", "  if next(strings) ~= nil then\n    local\
    \ longest = next(strings)\n    for i = 1, #strings do\n      if strings[i] ~=\
    \ longest then\n        longest = strings[i]\n      end\n    end\n    return longest\n\
    \  else\n    return nil\n  end\nend", "    local longest_len = -1\n    local longest_str\
    \ = \"\"\n    for _, str in ipairs(strings) do\n        local len = #str\n   \
    \     if len > longest_len then\n            longest_len = len\n            longest_str\
    \ = str\n        end\n    end\n    return longest_str\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] ~= longest then\n      longest = strings[i]\n    end\n\
    \  end\n  return longest\nend", "  local longest, longestLen = nil, 0\n  for _,\
    \ str in ipairs(strings) do\n    if str == \"\" then break end\n    local len\
    \ = #str\n    if len > longestLen then\n      longest, longestLen = str, len\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ == longest then\n      continue\n    end\n    longest = strings[i]\n  end\n\
    \  return longest\nend", "  if next(strings) == nil then return nil end\n  local\
    \ longest = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() >\
    \ longest:len() then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for i = 1, #strings do\n    local length = strings[i]\n    if length\
    \ > longestLength then\n      longest, longestLength = strings[i], length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longest_len\
    \ = nil, 0\n  for i = 1, #strings do\n    local len = #strings[i]\n    if len\
    \ > longest_len then\n      longest, longest_len = strings[i], len\n    end\n\
    \  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n  end\n\
    \  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i] ==\
    \ #longest then\n      longest = strings[i]\n    else\n      break\n    end\n\
    \  end\n  return longest\nend", "  local longest, longestLength = nil, 0\n  for\
    \ _, str in ipairs(strings) do\n    if str == nil then break end\n    local length\
    \ = #str\n    if length > longestLength then\n      longest, longestLength = str,\
    \ length\n    end\n  end\n  return longest\nend", "  if #strings == 0 then\n \
    \   return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      continue\n    end\n    longest = strings[i]\n\
    \  end\n  return longest\nend", "  local longest, longestLen = nil, 0\n  for _,\
    \ str in pairs(strings) do\n    if str == \"\" then\n      break\n    end\n  \
    \  longest = str\n    longestLen = #str\n  end\n  return longest, longestLen\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest, longestLength\
    \ = nil, 0\n  for _, str in ipairs(strings) do\n    local length = #str\n    if\
    \ length > longestLength then\n      longest, longestLength = str, length\n  \
    \  end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest, longestLength = nil, 0\n  for _, s in ipairs(strings)\
    \ do\n    if #s > longestLength then\n      longest, longestLength = s, #s\n \
    \   end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return nil\n\
    \  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if #strings[i]\
    \ == #longest then\n      longest = strings[i]\n    else\n      return longest\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n    if strings[i]\
    \ ~= longest then\n      longest = strings[i]\n    end\n  end\n  return longest\n\
    end", "    local longest, longestLength = nil, 0\n    for _, str in ipairs(strings)\
    \ do\n        if str == \"\" then\n            return nil\n        end\n     \
    \   local length = #str\n        if length > longestLength then\n            longest,\
    \ longestLength = str, length\n        end\n    end\n    return longest\nend",
  "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n \
    \   if str == \"\" then\n      continue\n    end\n    local length = #str\n  \
    \  if length > longestLength then\n      longest, longestLength = str, length\n\
    \    end\n  end\n  return longest\nend", "  local longest, longestLen = nil, 0\n\
    \  for _, str in ipairs(strings) do\n    local len = #str\n    if len > longestLen\
    \ then\n      longest, longestLen = str, len\n    end\n  end\n  return longest\n\
    end", "  local longest_len = -1\n  local longest_string\n  for _, string in ipairs(strings)\
    \ do\n    local len = #string\n    if len > longest_len then\n      longest_len\
    \ = len\n      longest_string = string\n    end\n  end\n  return longest_string\n\
    end", "  if next(strings) == nil then\n    return nil\n  end\n  local longest\
    \ = next(strings)\n  for i = 1, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #strings[i] < #longest then\n      longest =\
    \ strings[i]\n    end\n  end\n  return longest\nend", "  local longest = nil\n\
    \  local longest_length = nil\n  for _, str in ipairs(strings) do\n    local length\
    \ = #str\n    if longest_length == nil then\n      longest_length = length\n \
    \     longest = str\n    elseif length > longest_length then\n      longest_length\
    \ = length\n      longest = str\n    end\n  end\n  return longest\nend", "  if\
    \ #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for\
    \ i = 2, #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "    local longest, longestLength\
    \ = nil, 0\n    for _, str in ipairs(strings) do\n        local len = #str\n \
    \       if len > longestLength then\n            longest, longestLength = str,\
    \ len\n        end\n    end\n    return longest\nend", "  if next(strings) ==\
    \ nil then return nil end\n  local longest = next(strings)\n  for i = 1, #strings\
    \ do\n    if strings[i]:len() > longest:len() then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  if next(strings) == nil then return\
    \ end\n  local longest_len = -1\n  local longest_str = nil\n  for _, str in ipairs(strings)\
    \ do\n    local len = #str\n    if len > longest_len then\n      longest_len =\
    \ len\n      longest_str = str\n    end\n  end\n  return longest_str\nend", " \
    \ if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      continue\n\
    \    end\n    longest = strings[i]\n  end\n  return longest\nend", "  if next(strings)\
    \ == nil then\n    return nil\n  end\n  local longest = next(strings)\n  for i\
    \ = 1, #strings do\n    if strings[i] ~= longest then\n      longest = strings[i]\n\
    \    end\n  end\n  return longest\nend", "  local longest, longestLen = nil, 0\n\
    \  for _, str in pairs(strings) do\n    local len = #str\n    if len > longestLen\
    \ then\n      longest, longestLen = str, len\n    end\n  end\n  return longest\n\
    end", "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if #longest[1] < #strings[i][1] then\n      longest\
    \ = strings[i]\n    end\n  end\n  return longest\nend", "  local longest = nil\n\
    \  local longest_len = nil\n  for _, str in ipairs(strings) do\n    local len\
    \ = #str\n    if len > longest_len then\n      longest, longest_len = str, len\n\
    \    end\n  end\n  return longest or strings[1]\nend", "  if #strings == 0 then\n\
    \    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings do\n\
    \    if strings[i] == longest then\n      longest = strings[i]\n    else\n   \
    \   return longest\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2, #strings\
    \ do\n    if strings[i] ~= longest then\n      longest = strings[i]\n    end\n\
    \  end\n  return longest\nend", "  local longest = nil\n  local longest_len =\
    \ nil\n  for _, str in ipairs(strings) do\n    local len = #str\n    if len >\
    \ longest_len then\n      longest, longest_len = str, len\n    end\n  end\n  return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest,\
    \ longest_len = nil, 0\n  for i = 1, #strings do\n    local len = #strings[i]\n\
    \    if len > longest_len then\n      longest, longest_len = strings[i], len\n\
    \    end\n  end\n  return longest\nend", "  if #strings == 0 then\n    return\
    \ nil\n  end\n  local longest, longestLength = nil, 0\n  for i = 1, #strings do\n\
    \    local length = strings[i]\n    if length > longestLength then\n      longest,\
    \ longestLength = strings[i], length\n    end\n  end\n  return longest\nend",
  "  local longest, longestLength, longestString = nil, 0, nil\n  for _, str in ipairs(strings)\
    \ do\n    if str == \"\" then\n      break\n    end\n    local length = #str\n\
    \    if length > longestLength then\n      longest, longestLength, longestString\
    \ = str, length, str\n    end\n  end\n  return longest\nend", "  if #strings ==\
    \ 0 then\n    return nil\n  end\n  local longest, longestLength = nil, 0\n  for\
    \ _, str in ipairs(strings) do\n    local length = #str\n    if length > longestLength\
    \ then\n      longest, longestLength = str, length\n    end\n  end\n  return longest\n\
    end", "  local longest = nil\n  local longest_len = -1\n  for _, s in pairs(strings)\
    \ do\n    local len = #s\n    if len > longest_len then\n      longest = s\n \
    \     longest_len = len\n    end\n  end\n  return longest or strings[1]\nend",
  "  if #strings == 0 then\n    return nil\n  end\n  local longest = strings[1]\n\
    \  for i = 2, #strings do\n    if strings[i] == longest then\n      longest =\
    \ strings[i]\n    else\n      return longest\n    end\n  end\n  return longest\n\
    end", "  local longest, longestLength = nil, 0\n  for _, str in ipairs(strings)\
    \ do\n    if str == nil then break end\n    if longestLength > #str then longest,\
    \ longestLength = str, #str end\n  end\n  return longest\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\nend", "    local longest, longestLength,\
    \ longestString = nil, 0, nil\n    for _, str in ipairs(strings) do\n        local\
    \ length = #str\n        if length > longestLength then\n            longest,\
    \ longestLength, longestString = str, length, str\n        end\n    end\n    return\
    \ longest\nend", "  if #strings == 0 then\n    return nil\n  end\n  local longest\
    \ = strings[1]\n  for i = 2, #strings do\n    if strings[i]:len() > longest:len()\
    \ then\n      longest = strings[i]\n    end\n  end\n  return longest\nend", " \
    \ local longest, longestLength = nil, 0\n  for _, str in ipairs(strings) do\n\
    \    local length = #str\n    if length > longestLength then\n      longest, longestLength\
    \ = str, length\n    end\n  end\n  return longest\nend", "  local longest = nil\n\
    \  local longest_len = -1\n  for _, str in ipairs(strings) do\n    local len =\
    \ #str\n    if len > longest_len then\n      longest = str\n      longest_len\
    \ = len\n    end\n  end\n  return longest or strings[1]\nend", "  if #strings\
    \ == 0 then\n    return nil\n  end\n  local longest = strings[1]\n  for i = 2,\
    \ #strings do\n    if strings[i] == longest then\n      longest = strings[i]\n\
    \    else\n      return longest\n    end\n  end\n  return longest\nend"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
